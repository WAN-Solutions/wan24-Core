{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API reference | wan24-Core",
    "keywords": "API reference Choose a type from the left to start browsing."
  },
  "api/wan24.Core.AcidException.html": {
    "href": "api/wan24.Core.AcidException.html",
    "title": "Class AcidException | wan24-Core",
    "keywords": "Class AcidException Thrown on failed ACID IO exception Inheritance object Exception SystemException IOException AcidException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax [Serializable] public sealed class AcidException : IOException, ISerializable Constructors | Edit this page View Source AcidException() Constructor Declaration public AcidException() | Edit this page View Source AcidException(string?) Constructor Declaration public AcidException(string? message) Parameters Type Name Description string message Message | Edit this page View Source AcidException(string?, Exception?) Constructor Declaration public AcidException(string? message, Exception? inner) Parameters Type Name Description string message Message Exception inner Inner exception Implements ISerializable Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.AcidFileStream.html": {
    "href": "api/wan24.Core.AcidFileStream.html",
    "title": "Class AcidFileStream | wan24-Core",
    "keywords": "Class AcidFileStream ACID file stream Inheritance object AcidFileStream Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class AcidFileStream Fields | Edit this page View Source ACID_PREFIX ACID backup filename prefix Declaration public const string ACID_PREFIX = \".acid.\" Field Value Type Description string Methods | Edit this page View Source Create(in FileStream, in bool, in UnixFileMode?) Create Declaration public static AcidStream<FileStream> Create(in FileStream stream, in bool autoFlush = true, in UnixFileMode? mode = null) Parameters Type Name Description FileStream stream File stream (will be disposed!) bool autoFlush Automatic flush after each write operation? UnixFileMode? mode Backup file mode Returns Type Description AcidStream<FileStream> ACID file stream (don't forget to commit and dispose!) | Edit this page View Source CreateAsync(FileStream, bool, UnixFileMode?, CancellationToken) Create Declaration public static Task<AcidStream<FileStream>> CreateAsync(FileStream stream, bool autoFlush = true, UnixFileMode? mode = null, CancellationToken cancellationToken = default) Parameters Type Name Description FileStream stream File stream (will be disposed!) bool autoFlush Automatic flush after each write operation? UnixFileMode? mode Backup file mode CancellationToken cancellationToken Cancellation token Returns Type Description Task<AcidStream<FileStream>> ACID file stream (don't forget to commit and dispose!) | Edit this page View Source GetBackupFileName(in string) Get the ACID backup filename for a filename Declaration public static string GetBackupFileName(in string fileName) Parameters Type Name Description string fileName Filename Returns Type Description string ACID backup filename | Edit this page View Source NeedsRollback(in string) Determine if a file needs a rollback (ACID backup file still exists) Declaration public static bool NeedsRollback(in string fileName) Parameters Type Name Description string fileName Filename Returns Type Description bool Needs a rollback?"
  },
  "api/wan24.Core.AcidStream-1.AcidStreamEvent_Delegate.html": {
    "href": "api/wan24.Core.AcidStream-1.AcidStreamEvent_Delegate.html",
    "title": "Delegate AcidStream<T>.AcidStreamEvent_Delegate | wan24-Core",
    "keywords": "Delegate AcidStream<T>.AcidStreamEvent_Delegate Delegate for an ACID stream event handler Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void AcidStream<T>.AcidStreamEvent_Delegate(AcidStream<T> stream, EventArgs e) Parameters Type Name Description AcidStream<T> stream Stream EventArgs e Arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.AcidStream-1.BackupLengthRecord.html": {
    "href": "api/wan24.Core.AcidStream-1.BackupLengthRecord.html",
    "title": "Class AcidStream<T>.BackupLengthRecord | wan24-Core",
    "keywords": "Class AcidStream<T>.BackupLengthRecord Length backup record Inheritance object AcidStream<T>.BackupRecordBase AcidStream<T>.BackupLengthRecord Inherited Members AcidStream<T>.BackupRecordBase.Offset AcidStream<T>.BackupRecordBase.Type AcidStream<T>.BackupRecordBase.Time object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class AcidStream<T>.BackupLengthRecord : AcidStream<T>.BackupRecordBase Remarks Constructor Constructors | Edit this page View Source BackupLengthRecord(long, DateTime, long, long, long) Length backup record Declaration public BackupLengthRecord(long offset, DateTime timestamp, long oldLen, long newLen, long dataLen) Parameters Type Name Description long offset Backup stream byte offset DateTime timestamp Timestamp long oldLen Old target stream length long newLen New target stream length long dataLen Backup data length in byte Remarks Constructor Properties | Edit this page View Source DataLength Backup data length in byte Declaration public long DataLength { get; } Property Value Type Description long | Edit this page View Source NewLength New target stream length in byte Declaration public long NewLength { get; } Property Value Type Description long | Edit this page View Source OldLength Old target stream length in byte Declaration public long OldLength { get; } Property Value Type Description long Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.AcidStream-1.BackupRecordBase.html": {
    "href": "api/wan24.Core.AcidStream-1.BackupRecordBase.html",
    "title": "Class AcidStream<T>.BackupRecordBase | wan24-Core",
    "keywords": "Class AcidStream<T>.BackupRecordBase Base class for a backup record Inheritance object AcidStream<T>.BackupRecordBase AcidStream<T>.BackupLengthRecord AcidStream<T>.BackupWriteRecord Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class AcidStream<T>.BackupRecordBase Constructors | Edit this page View Source BackupRecordBase(long, IoTypes, DateTime) Constructor Declaration protected BackupRecordBase(long offset, AcidStream<T>.IoTypes type, DateTime time) Parameters Type Name Description long offset Backup stream byte offset AcidStream<T>.IoTypes type Record type DateTime time Timestamp Properties | Edit this page View Source Offset Backup stream byte offset Declaration public long Offset { get; } Property Value Type Description long | Edit this page View Source Time Timestamp Declaration public DateTime Time { get; } Property Value Type Description DateTime | Edit this page View Source Type Record type Declaration public AcidStream<T>.IoTypes Type { get; } Property Value Type Description AcidStream<T>.IoTypes Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.AcidStream-1.BackupWriteRecord.html": {
    "href": "api/wan24.Core.AcidStream-1.BackupWriteRecord.html",
    "title": "Class AcidStream<T>.BackupWriteRecord | wan24-Core",
    "keywords": "Class AcidStream<T>.BackupWriteRecord Write backup record Inheritance object AcidStream<T>.BackupRecordBase AcidStream<T>.BackupWriteRecord Inherited Members AcidStream<T>.BackupRecordBase.Offset AcidStream<T>.BackupRecordBase.Type AcidStream<T>.BackupRecordBase.Time object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class AcidStream<T>.BackupWriteRecord : AcidStream<T>.BackupRecordBase Remarks Constructor Constructors | Edit this page View Source BackupWriteRecord(long, DateTime, long, int) Write backup record Declaration public BackupWriteRecord(long offset, DateTime timestamp, long pos, int len) Parameters Type Name Description long offset Backup stream byte offset DateTime timestamp Timestamp long pos Target stream position byte offset int len Backup data length in byte Remarks Constructor Properties | Edit this page View Source Length Backup data length in byte Declaration public int Length { get; } Property Value Type Description int | Edit this page View Source Position Target stream position byte offset Declaration public long Position { get; } Property Value Type Description long Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.AcidStream-1.IoTypes.html": {
    "href": "api/wan24.Core.AcidStream-1.IoTypes.html",
    "title": "Enum AcidStream<T>.IoTypes | wan24-Core",
    "keywords": "Enum AcidStream<T>.IoTypes IO types Namespace: wan24.Core Assembly: wan24Core.dll Syntax public enum AcidStream<T>.IoTypes : byte Fields Name Description Length New length operation Write Write operation Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object[]) AsyncHelper.TryDisposeAsync<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes) AsyncHelper.TryDispose<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes) EnumExtensions.ContainsAllFlags<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes, in AcidStream<T>.IoTypes) EnumExtensions.ContainsAnyFlag<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes, params AcidStream<T>.IoTypes[]) EnumExtensions.GetContainedFlags<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes, params AcidStream<T>.IoTypes[]) EnumExtensions.GetInfo<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes) EnumExtensions.IsFlag<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes) EnumExtensions.IsValidEnumerationValue<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes) EnumExtensions.IsValid<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes) EnumExtensions.IsValue<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes) EnumExtensions.OnlyFlags<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes) EnumExtensions.RemoveFlags<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes) ObjectExtensions.Do<AcidStream<T>.IoTypes, tReturn>(AcidStream<T>.IoTypes, in Func<AcidStream<T>.IoTypes, tReturn>) ObjectExtensions.EnsureValidState<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes, in bool, in string) ObjectExtensions.GetDisplayText<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes) ObjectExtensions.In<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes, in IEnumerable<AcidStream<T>.IoTypes>) ObjectExtensions.ToDictionary<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes, in int) ObjectExtensions.ToOrderedDictionary<AcidStream<T>.IoTypes>(AcidStream<T>.IoTypes, in int)"
  },
  "api/wan24.Core.AcidStream-1.html": {
    "href": "api/wan24.Core.AcidStream-1.html",
    "title": "Class AcidStream<T> | wan24-Core",
    "keywords": "Class AcidStream<T> ACID stream (IO is synchronized) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> AcidStream<T> AcidStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.State WrapperStream<T>.CanRead WrapperStream<T>.CanSeek WrapperStream<T>.CanWrite WrapperStream<T>.CanTimeout WrapperStream<T>.Length WrapperStream<T>.ReadTimeout WrapperStream<T>.WriteTimeout WrapperStream<T>.ReadByte() WrapperStream<T>.WriteByte(byte) WrapperStream<T>.CopyTo(Stream, int) WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndRead(IAsyncResult) WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndWrite(IAsyncResult) WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.Close() WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class AcidStream<T> : WrapperStream<T>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Target stream type Constructors | Edit this page View Source AcidStream(in T, in Stream?) Constructor Declaration public AcidStream(in T stream, in Stream? backup = null) Parameters Type Name Description T stream Target stream (will be disposed!) Stream backup Backup stream (will be disposed!) Fields | Edit this page View Source LENGTH_META_LEN New length record meta data length in byte Declaration protected const int LENGTH_META_LEN = 17 Field Value Type Description int | Edit this page View Source SerializationBuffer Serialization buffer Declaration protected readonly RentedArray<byte> SerializationBuffer Field Value Type Description RentedArray<byte> | Edit this page View Source TIME_META_LEN Length of the time meta data in byte Declaration protected const int TIME_META_LEN = 8 Field Value Type Description int | Edit this page View Source WRITE_META_LEN Write record meta data length in byte Declaration protected const int WRITE_META_LEN = 13 Field Value Type Description int Properties | Edit this page View Source AutoCommit Automatic commit each writing operation? Declaration public bool AutoCommit { get; set; } Property Value Type Description bool | Edit this page View Source AutoFlush Automatic flush after each write operation? Declaration public bool AutoFlush { get; set; } Property Value Type Description bool | Edit this page View Source AutoFlushBackup Automatic flush the backup stream after each write operation? Declaration public bool AutoFlushBackup { get; set; } Property Value Type Description bool | Edit this page View Source AutoRollback Automatic rollback on error? Declaration public bool AutoRollback { get; set; } Property Value Type Description bool | Edit this page View Source Backup Backup stream (will be disposed!) Declaration public Stream Backup { get; } Property Value Type Description Stream | Edit this page View Source LeaveOpen Leave the base stream open when disposing (returns false always, setter will throw!) Declaration public override bool LeaveOpen { get; set; } Property Value Type Description bool Overrides WrapperStream<T>.LeaveOpen Exceptions Type Condition NotSupportedException Setter isn't supported | Edit this page View Source NeedsCommit Needs a commit? Declaration public bool NeedsCommit { get; protected set; } Property Value Type Description bool | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides WrapperStream<T>.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SyncIO IO synchronization Declaration public SemaphoreSync SyncIO { get; } Property Value Type Description SemaphoreSync Methods | Edit this page View Source Commit() Commit the changes since the last commit Declaration public virtual void Commit() | Edit this page View Source CommitAsync(CancellationToken) Commit the changes since the last commit Declaration public virtual Task CommitAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source CommitInt() Commit the changes since the last commit Declaration protected virtual void CommitInt() | Edit this page View Source CommitIntAsync(CancellationToken) Commit the changes since the last commit Declaration protected virtual Task CommitIntAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides WrapperStream<T>.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override Task DisposeCore() Returns Type Description Task Overrides WrapperStream<T>.DisposeCore() | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides WrapperStream<T>.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides WrapperStream<T>.FlushAsync(CancellationToken) Exceptions Type Condition ObjectDisposedException The stream has been disposed. | Edit this page View Source InitializeBackupStream(in T, in Stream, in RentedArray<byte>?, in bool) Initialize the backup stream Declaration public static void InitializeBackupStream(in T target, in Stream backup, in RentedArray<byte>? buffer = null, in bool flush = true) Parameters Type Name Description T target Target stream Stream backup Backup stream RentedArray<byte> buffer Serialization buffer (8 byte required) bool flush Flush after initialization? | Edit this page View Source InitializeBackupStreamAsync(T, Stream, RentedArray<byte>?, bool, CancellationToken) Initialize the backup stream Declaration public static Task InitializeBackupStreamAsync(T target, Stream backup, RentedArray<byte>? buffer = null, bool flush = true, CancellationToken cancellationToken = default) Parameters Type Name Description T target Target stream Stream backup Backup stream RentedArray<byte> buffer Serialization buffer (8 byte required) bool flush Flush after initialization? CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source InvestigateBackup(in Stream, in RentedArray<byte>?) Investigate a backup stream Declaration public static long InvestigateBackup(in Stream backup, in RentedArray<byte>? buffer = null) Parameters Type Name Description Stream backup Backup stream RentedArray<byte> buffer Serializer buffer (8 byte required) Returns Type Description long Number of backup records | Edit this page View Source InvestigateBackupAsync(Stream, RentedArray<byte>?, CancellationToken) Investigate a backup stream Declaration public static Task<long> InvestigateBackupAsync(Stream backup, RentedArray<byte>? buffer = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream backup Backup stream RentedArray<byte> buffer Serializer buffer (8 byte required) CancellationToken cancellationToken Cancellation token Returns Type Description Task<long> Number of backup records | Edit this page View Source PerformRollback(in AcidStream<T>, in bool) Perform a full rollback Declaration public static void PerformRollback(in AcidStream<T> stream, in bool sync = true) Parameters Type Name Description AcidStream<T> stream ACID stream bool sync Synchronized IO? | Edit this page View Source PerformRollback(in AcidStream<T>, in BackupRecordBase, in bool) Perform a rollback of a backup record Declaration public static void PerformRollback(in AcidStream<T> stream, in AcidStream<T>.BackupRecordBase record, in bool sync = true) Parameters Type Name Description AcidStream<T> stream ACID stream AcidStream<T>.BackupRecordBase record Backup record bool sync Synchronized IO? | Edit this page View Source PerformRollbackAsync(AcidStream<T>, bool, CancellationToken) Perform a full rollback Declaration public static Task PerformRollbackAsync(AcidStream<T> stream, bool sync = true, CancellationToken cancellationToken = default) Parameters Type Name Description AcidStream<T> stream ACID stream bool sync Synchronized IO? CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source PerformRollbackAsync(AcidStream<T>, BackupRecordBase, bool, CancellationToken) Perform a rollback of a backup record Declaration public static Task PerformRollbackAsync(AcidStream<T> stream, AcidStream<T>.BackupRecordBase record, bool sync = true, CancellationToken cancellationToken = default) Parameters Type Name Description AcidStream<T> stream ACID stream AcidStream<T>.BackupRecordBase record Backup record bool sync Synchronized IO? CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source RaiseOnAfterCommit() Raise the OnAfterCommit event Declaration protected virtual void RaiseOnAfterCommit() | Edit this page View Source RaiseOnAfterRollback() Raise the OnAfterRollback event Declaration protected virtual void RaiseOnAfterRollback() | Edit this page View Source RaiseOnBeforeCommit() Raise the OnBeforeCommit event Declaration protected virtual void RaiseOnBeforeCommit() | Edit this page View Source RaiseOnBeforeRollback() Raise the OnBeforeRollback event Declaration protected virtual void RaiseOnBeforeRollback() | Edit this page View Source RaiseOnNeedCommit() Raise the OnNeedCommit event Declaration protected virtual void RaiseOnNeedCommit() | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides WrapperStream<T>.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides WrapperStream<T>.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadBackupRecordBackward(in Stream, in RentedArray<byte>?) Read the previous backup record (offset will be at the end of the previous record before the red record) Declaration public static AcidStream<T>.BackupRecordBase? ReadBackupRecordBackward(in Stream backup, in RentedArray<byte>? buffer = null) Parameters Type Name Description Stream backup Backup stream RentedArray<byte> buffer Serialization buffer (8 byte required) Returns Type Description AcidStream<T>.BackupRecordBase Record or null on EOF | Edit this page View Source ReadBackupRecordBackwardAsync(Stream, RentedArray<byte>?, CancellationToken) Read the previous backup record (offset will be at the end of the previous record before the red record) Declaration public static Task<AcidStream<T>.BackupRecordBase?> ReadBackupRecordBackwardAsync(Stream backup, RentedArray<byte>? buffer = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream backup Backup stream RentedArray<byte> buffer Serialization buffer (8 byte required) CancellationToken cancellationToken Cancellation token Returns Type Description Task<AcidStream<T>.BackupRecordBase> Record or null on EOF | Edit this page View Source ReadBackupRecordForward(in Stream, in long, in RentedArray<byte>?) Read the next backup record (offset will be at the beginning of the next record after the red record) Declaration public static AcidStream<T>.BackupRecordBase? ReadBackupRecordForward(in Stream backup, in long targetLength, in RentedArray<byte>? buffer = null) Parameters Type Name Description Stream backup Backup stream long targetLength Original target stream length from the current backup offset RentedArray<byte> buffer Serialization buffer (8 byte required) Returns Type Description AcidStream<T>.BackupRecordBase Record or null on EOF | Edit this page View Source ReadBackupRecordForwardAsync(Stream, long, RentedArray<byte>?, CancellationToken) Read the next backup record (offset will be at the beginning of the next record after the red record) Declaration public static Task<AcidStream<T>.BackupRecordBase?> ReadBackupRecordForwardAsync(Stream backup, long targetLength, RentedArray<byte>? buffer = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream backup Backup stream long targetLength Original target stream length from the current backup offset RentedArray<byte> buffer Serialization buffer (8 byte required) CancellationToken cancellationToken Cancellation token Returns Type Description Task<AcidStream<T>.BackupRecordBase> Record or null on EOF | Edit this page View Source ReadLengthFromBackup(in Stream, in RentedArray<byte>?) Read the original target stream length from the backup Declaration public static long ReadLengthFromBackup(in Stream backup, in RentedArray<byte>? buffer = null) Parameters Type Name Description Stream backup Backup stream RentedArray<byte> buffer Serialization buffer (8 byte required) Returns Type Description long Original target stream length in byte | Edit this page View Source ReadLengthFromBackupAsync(Stream, RentedArray<byte>?, CancellationToken) Read the original target stream length from the backup Declaration public static Task<long> ReadLengthFromBackupAsync(Stream backup, RentedArray<byte>? buffer = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream backup Backup stream RentedArray<byte> buffer Serialization buffer (8 byte required) CancellationToken cancellationToken Cancellation token Returns Type Description Task<long> Original target stream length in byte | Edit this page View Source ReadPositiveInt(in Stream, in RentedArray<byte>) Read a positive 32 bit integer Declaration protected static int ReadPositiveInt(in Stream backup, in RentedArray<byte> buffer) Parameters Type Name Description Stream backup Backup stream RentedArray<byte> buffer Serialization buffer (8 byte required) Returns Type Description int Timestamp | Edit this page View Source ReadPositiveIntAsync(Stream, RentedArray<byte>, CancellationToken) Read a positive 32 bit integer Declaration protected static Task<int> ReadPositiveIntAsync(Stream backup, RentedArray<byte> buffer, CancellationToken cancellationToken) Parameters Type Name Description Stream backup Backup stream RentedArray<byte> buffer Serialization buffer (8 byte required) CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Timestamp | Edit this page View Source ReadPositiveLong(in Stream, in RentedArray<byte>) Read a positive 64 bit integer Declaration protected static long ReadPositiveLong(in Stream backup, in RentedArray<byte> buffer) Parameters Type Name Description Stream backup Backup stream RentedArray<byte> buffer Serialization buffer (8 byte required) Returns Type Description long Timestamp | Edit this page View Source ReadPositiveLongAsync(Stream, RentedArray<byte>, CancellationToken) Read a positive 64 bit integer Declaration protected static Task<long> ReadPositiveLongAsync(Stream backup, RentedArray<byte> buffer, CancellationToken cancellationToken) Parameters Type Name Description Stream backup Backup stream RentedArray<byte> buffer Serialization buffer (8 byte required) CancellationToken cancellationToken Cancellation token Returns Type Description Task<long> Timestamp | Edit this page View Source ReadRecordType(in Stream, in bool) Read the record type Declaration protected static AcidStream<T>.IoTypes? ReadRecordType(in Stream backup, in bool allowEof) Parameters Type Name Description Stream backup Backup stream bool allowEof Allow EOF? Returns Type Description AcidStream<T>.IoTypes? Record type | Edit this page View Source ReadTimestamp(in Stream, in RentedArray<byte>) Read the timestamp Declaration protected static DateTime ReadTimestamp(in Stream backup, in RentedArray<byte> buffer) Parameters Type Name Description Stream backup Backup stream RentedArray<byte> buffer Serialization buffer (8 byte required) Returns Type Description DateTime Timestamp | Edit this page View Source ReadTimestampAsync(Stream, RentedArray<byte>, CancellationToken) Read the timestamp Declaration protected static Task<DateTime> ReadTimestampAsync(Stream backup, RentedArray<byte> buffer, CancellationToken cancellationToken) Parameters Type Name Description Stream backup Backup stream RentedArray<byte> buffer Serialization buffer (8 byte required) CancellationToken cancellationToken Cancellation token Returns Type Description Task<DateTime> Timestamp | Edit this page View Source Rollback() Perform a rollback Declaration public virtual void Rollback() | Edit this page View Source RollbackAsync(CancellationToken) Perform a rollback Declaration public virtual Task RollbackAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source RollbackInt() Perform a rollback Declaration protected virtual void RollbackInt() | Edit this page View Source RollbackIntAsync(CancellationToken) Perform a rollback Declaration protected virtual Task RollbackIntAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides WrapperStream<T>.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SeekAsync(long, SeekOrigin, CancellationToken) Seek to a relative byte offset Declaration public virtual Task<long> SeekAsync(long offset, SeekOrigin origin, CancellationToken cancellationToken = default) Parameters Type Name Description long offset Offset SeekOrigin origin Origin CancellationToken cancellationToken Cancellation token Returns Type Description Task<long> New offset | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides WrapperStream<T>.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLengthAsync(long, CancellationToken) Set a new stream length Declaration public virtual Task SetLengthAsync(long value, CancellationToken cancellationToken = default) Parameters Type Name Description long value New length in byte CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source SetPositionAsync(long, CancellationToken) Set a new position Declaration public virtual Task SetPositionAsync(long value, CancellationToken cancellationToken = default) Parameters Type Name Description long value Offset CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source ValidateSerializationBuffer(RentedArray<byte>?) Validate the given serialization buffer Declaration protected static void ValidateSerializationBuffer(RentedArray<byte>? buffer) Parameters Type Name Description RentedArray<byte> buffer Buffer (8 byte required) | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides WrapperStream<T>.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides WrapperStream<T>.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteLengthBackupRecord(in long, in long) Write a length backup record Declaration protected bool WriteLengthBackupRecord(in long len, in long value) Parameters Type Name Description long len Current length in byte long value New length in byte Returns Type Description bool Required a commit before? | Edit this page View Source WriteLengthBackupRecordAsync(long, long, CancellationToken) Write a length backup record Declaration protected Task<bool> WriteLengthBackupRecordAsync(long len, long value, CancellationToken cancellationToken) Parameters Type Name Description long len Current length in byte long value New length in byte CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> Required a commit before? | Edit this page View Source WriteWriteBackupRecord(in ReadOnlySpan<byte>) Write a write backup record Declaration protected bool WriteWriteBackupRecord(in ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer Buffer Returns Type Description bool Required a commit before? | Edit this page View Source WriteWriteBackupRecordAsync(ReadOnlyMemory<byte>, CancellationToken) Write a write backup record Declaration protected Task<bool> WriteWriteBackupRecordAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken) Parameters Type Name Description ReadOnlyMemory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> Required a commit before? Events | Edit this page View Source OnAfterCommit Raised after committed Declaration public event AcidStream<T>.AcidStreamEvent_Delegate? OnAfterCommit Event Type Type Description AcidStream<T>.AcidStreamEvent_Delegate | Edit this page View Source OnAfterRollback Raised after rolled back Declaration public event AcidStream<T>.AcidStreamEvent_Delegate? OnAfterRollback Event Type Type Description AcidStream<T>.AcidStreamEvent_Delegate | Edit this page View Source OnBeforeCommit Raised before committing Declaration public event AcidStream<T>.AcidStreamEvent_Delegate? OnBeforeCommit Event Type Type Description AcidStream<T>.AcidStreamEvent_Delegate | Edit this page View Source OnBeforeRollback Raised before rolling back Declaration public event AcidStream<T>.AcidStreamEvent_Delegate? OnBeforeRollback Event Type Type Description AcidStream<T>.AcidStreamEvent_Delegate | Edit this page View Source OnNeedCommit Raised when a commit is required (only when AutoCommit is false, and only once until committed) Declaration public event AcidStream<T>.AcidStreamEvent_Delegate? OnNeedCommit Event Type Type Description AcidStream<T>.AcidStreamEvent_Delegate Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.AcidStream.html": {
    "href": "api/wan24.Core.AcidStream.html",
    "title": "Class AcidStream | wan24-Core",
    "keywords": "Class AcidStream ACID stream (IO is synchronized) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> AcidStream<Stream> AcidStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members AcidStream<Stream>.Commit() AcidStream<Stream>.CommitAsync(CancellationToken) AcidStream<Stream>.Rollback() AcidStream<Stream>.RollbackAsync(CancellationToken) AcidStream<Stream>.InitializeBackupStream(in Stream, in Stream, in RentedArray<byte>, in bool) AcidStream<Stream>.InitializeBackupStreamAsync(Stream, Stream, RentedArray<byte>, bool, CancellationToken) AcidStream<Stream>.ReadLengthFromBackup(in Stream, in RentedArray<byte>) AcidStream<Stream>.ReadLengthFromBackupAsync(Stream, RentedArray<byte>, CancellationToken) AcidStream<Stream>.InvestigateBackup(in Stream, in RentedArray<byte>) AcidStream<Stream>.InvestigateBackupAsync(Stream, RentedArray<byte>, CancellationToken) AcidStream<Stream>.ReadBackupRecordForward(in Stream, in long, in RentedArray<byte>) AcidStream<Stream>.ReadBackupRecordForwardAsync(Stream, long, RentedArray<byte>, CancellationToken) AcidStream<Stream>.ReadBackupRecordBackward(in Stream, in RentedArray<byte>) AcidStream<Stream>.ReadBackupRecordBackwardAsync(Stream, RentedArray<byte>, CancellationToken) AcidStream<Stream>.SetPositionAsync(long, CancellationToken) AcidStream<Stream>.Read(byte[], int, int) AcidStream<Stream>.Read(Span<byte>) AcidStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) AcidStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) AcidStream<Stream>.Write(byte[], int, int) AcidStream<Stream>.Write(ReadOnlySpan<byte>) AcidStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) AcidStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) AcidStream<Stream>.SetLength(long) AcidStream<Stream>.SetLengthAsync(long, CancellationToken) AcidStream<Stream>.Seek(long, SeekOrigin) AcidStream<Stream>.SeekAsync(long, SeekOrigin, CancellationToken) AcidStream<Stream>.Flush() AcidStream<Stream>.FlushAsync(CancellationToken) AcidStream<Stream>.OnBeforeCommit AcidStream<Stream>.RaiseOnBeforeCommit() AcidStream<Stream>.OnAfterCommit AcidStream<Stream>.RaiseOnAfterCommit() AcidStream<Stream>.OnBeforeRollback AcidStream<Stream>.RaiseOnBeforeRollback() AcidStream<Stream>.OnAfterRollback AcidStream<Stream>.RaiseOnAfterRollback() AcidStream<Stream>.OnNeedCommit AcidStream<Stream>.RaiseOnNeedCommit() AcidStream<Stream>.SerializationBuffer AcidStream<Stream>.WriteWriteBackupRecord(in ReadOnlySpan<byte>) AcidStream<Stream>.WriteWriteBackupRecordAsync(ReadOnlyMemory<byte>, CancellationToken) AcidStream<Stream>.WriteLengthBackupRecord(in long, in long) AcidStream<Stream>.WriteLengthBackupRecordAsync(long, long, CancellationToken) AcidStream<Stream>.CommitInt() AcidStream<Stream>.CommitIntAsync(CancellationToken) AcidStream<Stream>.RollbackInt() AcidStream<Stream>.RollbackIntAsync(CancellationToken) AcidStream<Stream>.Dispose(bool) AcidStream<Stream>.DisposeCore() AcidStream<Stream>.WRITE_META_LEN AcidStream<Stream>.LENGTH_META_LEN AcidStream<Stream>.TIME_META_LEN AcidStream<Stream>.ValidateSerializationBuffer(RentedArray<byte>) AcidStream<Stream>.ReadRecordType(in Stream, in bool) AcidStream<Stream>.ReadTimestamp(in Stream, in RentedArray<byte>) AcidStream<Stream>.ReadTimestampAsync(Stream, RentedArray<byte>, CancellationToken) AcidStream<Stream>.ReadPositiveLong(in Stream, in RentedArray<byte>) AcidStream<Stream>.ReadPositiveLongAsync(Stream, RentedArray<byte>, CancellationToken) AcidStream<Stream>.ReadPositiveInt(in Stream, in RentedArray<byte>) AcidStream<Stream>.ReadPositiveIntAsync(Stream, RentedArray<byte>, CancellationToken) AcidStream<Stream>.SyncIO AcidStream<Stream>.Backup AcidStream<Stream>.NeedsCommit AcidStream<Stream>.AutoCommit AcidStream<Stream>.AutoRollback AcidStream<Stream>.AutoFlush AcidStream<Stream>.AutoFlushBackup AcidStream<Stream>.LeaveOpen AcidStream<Stream>.Position AcidStream<Stream>.PerformRollback(in AcidStream<Stream>, in bool) AcidStream<Stream>.PerformRollbackAsync(AcidStream<Stream>, bool, CancellationToken) AcidStream<Stream>.PerformRollback(in AcidStream<Stream>, in AcidStream<Stream>.BackupRecordBase, in bool) AcidStream<Stream>.PerformRollbackAsync(AcidStream<Stream>, AcidStream<Stream>.BackupRecordBase, bool, CancellationToken) WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.State WrapperStream<Stream>.CanRead WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.ReadByte() WrapperStream<Stream>.WriteByte(byte) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class AcidStream : AcidStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source AcidStream(in Stream, in Stream?) ACID stream (IO is synchronized) Declaration public AcidStream(in Stream stream, in Stream? backup = null) Parameters Type Name Description Stream stream Target stream (will be disposed!) Stream backup Backup stream (will be disposed!) Remarks Constructor Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.AppConfig.LoggerConfiguration.html": {
    "href": "api/wan24.Core.AppConfig.LoggerConfiguration.html",
    "title": "Class AppConfig.LoggerConfiguration | wan24-Core",
    "keywords": "Class AppConfig.LoggerConfiguration Logger configuration Inheritance object AppConfig.LoggerConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class AppConfig.LoggerConfiguration Constructors | Edit this page View Source LoggerConfiguration() Constructor Declaration public LoggerConfiguration() Properties | Edit this page View Source FileName Filename (using FileLogger; ignored, if LoggerType was set) Declaration [StringLength(32767)] public string? FileName { get; set; } Property Value Type Description string | Edit this page View Source LogLevel Log level Declaration public LogLevel? LogLevel { get; set; } Property Value Type Description LogLevel? | Edit this page View Source LoggerType Logger type name (optional including namespace; not required, if FileName was set) Declaration [StringLength(255)] public string? LoggerType { get; set; } Property Value Type Description string Methods | Edit this page View Source Apply() Apply the logger configuration Declaration public virtual void Apply() Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.AppConfig.html": {
    "href": "api/wan24.Core.AppConfig.html",
    "title": "Class AppConfig | wan24-Core",
    "keywords": "Class AppConfig App configuration Inheritance object AppConfigBase AppConfig Implements IAppConfig Inherited Members AppConfigBase.SetApplied AppConfigBase.Applied AppConfigBase.ApplyProperties(bool) AppConfigBase.ApplyPropertiesAsync(bool, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class AppConfig : AppConfigBase, IAppConfig Constructors | Edit this page View Source AppConfig() Constructor Declaration public AppConfig() Fields | Edit this page View Source DEAULT_FILENAME Default filename Declaration public const string DEAULT_FILENAME = \"config.json\" Field Value Type Description string Properties | Edit this page View Source AppCommand App start command Declaration public string? AppCommand { get; set; } Property Value Type Description string | Edit this page View Source ApplyCliArguments Apply a CLI configuration from CLI arguments, too? Declaration [JsonIgnore] public virtual bool ApplyCliArguments { get; } Property Value Type Description bool | Edit this page View Source Bootstrap Call Async(Assembly?, CancellationToken)? Declaration [JsonIgnore] public virtual bool Bootstrap { get; } Property Value Type Description bool | Edit this page View Source CreateFileMode Unix create file mode Declaration public UnixFileMode? CreateFileMode { get; set; } Property Value Type Description UnixFileMode? | Edit this page View Source CreateFolderMode Unix create folder mode Declaration public UnixFileMode? CreateFolderMode { get; set; } Property Value Type Description UnixFileMode? | Edit this page View Source DefaultCliArguments Default CLI arguments Declaration public string[]? DefaultCliArguments { get; set; } Property Value Type Description string[] | Edit this page View Source LogLevel Default log level Declaration public LogLevel? LogLevel { get; set; } Property Value Type Description LogLevel? | Edit this page View Source Logging Logging Declaration public AppConfig.LoggerConfiguration[] Logging { get; set; } Property Value Type Description LoggerConfiguration[] | Edit this page View Source Properties CLI configuration (applied using CliConfig; the key is the public static property name including namespace and type name, the value the values (or null in case of a boolean)) Declaration public Dictionary<string, string[]?> Properties { get; set; } Property Value Type Description Dictionary<string, string[]> | Edit this page View Source SearchFolders Value for SearchFolders Declaration public string[]? SearchFolders { get; set; } Property Value Type Description string[] | Edit this page View Source TempFolder Absolute temporary folder Declaration [StringLength(32767)] public string? TempFolder { get; set; } Property Value Type Description string Methods | Edit this page View Source Apply() Apply this app configuration Declaration public override void Apply() Overrides AppConfigBase.Apply() | Edit this page View Source ApplyAsync(CancellationToken) Apply this app configuration Declaration public override Task ApplyAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides AppConfigBase.ApplyAsync(CancellationToken) | Edit this page View Source ApplyLogger<T>(T) Apply a logger configuration Declaration protected virtual void ApplyLogger<T>(T config) where T : AppConfig.LoggerConfiguration Parameters Type Name Description T config Configuration Type Parameters Name Description T Logger configuration type | Edit this page View Source Load(string, in bool) Load an app config from a JSON file Declaration public static AppConfig Load(string fileName = \"config.json\", in bool apply = true) Parameters Type Name Description string fileName Filename (may be without a path) bool apply Apply? Returns Type Description AppConfig App config | Edit this page View Source LoadAsync(string, bool, CancellationToken) Load an app config from a JSON file Declaration public static Task<AppConfig> LoadAsync(string fileName = \"config.json\", bool apply = true, CancellationToken cancellationToken = default) Parameters Type Name Description string fileName Filename (may be without a path) bool apply Apply? CancellationToken cancellationToken Cancellation token Returns Type Description Task<AppConfig> App config | Edit this page View Source LoadAsync<T>(string, bool, CancellationToken) Load an app config from a JSON file Declaration public static Task<T> LoadAsync<T>(string fileName = \"config.json\", bool apply = true, CancellationToken cancellationToken = default) where T : class, IAppConfig Parameters Type Name Description string fileName Filename (may be without a path) bool apply Apply? CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> App config Type Parameters Name Description T App config type | Edit this page View Source LoadIfExists(string, in bool) Load an app config from a JSON file Declaration public static AppConfig? LoadIfExists(string fileName = \"config.json\", in bool apply = true) Parameters Type Name Description string fileName Filename (may be without a path) bool apply Apply? Returns Type Description AppConfig App config | Edit this page View Source LoadIfExistsAsync(string, bool, CancellationToken) Load an app config from a JSON file Declaration public static Task<AppConfig?> LoadIfExistsAsync(string fileName = \"config.json\", bool apply = true, CancellationToken cancellationToken = default) Parameters Type Name Description string fileName Filename (may be without a path) bool apply Apply? CancellationToken cancellationToken Cancellation token Returns Type Description Task<AppConfig> App config | Edit this page View Source LoadIfExistsAsync<T>(string, bool, CancellationToken) Load an app config from a JSON file Declaration public static Task<T?> LoadIfExistsAsync<T>(string fileName = \"config.json\", bool apply = true, CancellationToken cancellationToken = default) where T : class, IAppConfig Parameters Type Name Description string fileName Filename (may be without a path) bool apply Apply? CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> App config Type Parameters Name Description T App config type | Edit this page View Source LoadIfExists<T>(string, in bool) Load an app config from a JSON file Declaration public static T? LoadIfExists<T>(string fileName = \"config.json\", in bool apply = true) where T : class, IAppConfig Parameters Type Name Description string fileName Filename (may be without a path) bool apply Apply? Returns Type Description T App config Type Parameters Name Description T App config type | Edit this page View Source Load<T>(string, in bool) Load an app config from a JSON file Declaration public static T Load<T>(string fileName = \"config.json\", in bool apply = true) where T : class, IAppConfig Parameters Type Name Description string fileName Filename (may be without a path) bool apply Apply? Returns Type Description T App config Type Parameters Name Description T App config type Implements IAppConfig Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.AppConfigAttribute.html": {
    "href": "api/wan24.Core.AppConfigAttribute.html",
    "title": "Class AppConfigAttribute | wan24-Core",
    "keywords": "Class AppConfigAttribute Attribute for a AppConfig property which contains a configuration with an IAppConfig to apply Inheritance object Attribute AppConfigAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class AppConfigAttribute : Attribute Constructors | Edit this page View Source AppConfigAttribute() Constructor Declaration public AppConfigAttribute() Properties | Edit this page View Source AfterBootstrap Apply after bootstrapping? Declaration public bool AfterBootstrap { get; set; } Property Value Type Description bool | Edit this page View Source Priority Priority (lower is being applied first) Declaration public int Priority { get; set; } Property Value Type Description int Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.AppConfigBase.html": {
    "href": "api/wan24.Core.AppConfigBase.html",
    "title": "Class AppConfigBase | wan24-Core",
    "keywords": "Class AppConfigBase Base class for an app configuration Inheritance object AppConfigBase AppConfig Implements IAppConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class AppConfigBase : IAppConfig Constructors | Edit this page View Source AppConfigBase() Constructor Declaration protected AppConfigBase() Fields | Edit this page View Source SetApplied Set this instance to Applied Declaration protected bool SetApplied Field Value Type Description bool Properties | Edit this page View Source Applied Applied app configuration Declaration [JsonIgnore] public static IAppConfig? Applied { get; protected set; } Property Value Type Description IAppConfig Methods | Edit this page View Source Apply() Apply this app configuration Declaration public abstract void Apply() | Edit this page View Source ApplyAsync(CancellationToken) Apply this app configuration Declaration public abstract Task ApplyAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source ApplyProperties(bool) Apply configurations from properties which have an AppConfigAttribute Declaration protected virtual void ApplyProperties(bool afterBootstrap) Parameters Type Name Description bool afterBootstrap After bootstrapping? | Edit this page View Source ApplyPropertiesAsync(bool, CancellationToken) Apply configurations from properties which have an AppConfigAttribute Declaration protected virtual Task ApplyPropertiesAsync(bool afterBootstrap, CancellationToken cancellationToken) Parameters Type Name Description bool afterBootstrap After bootstrapping? CancellationToken cancellationToken Cancellation token Returns Type Description Task Implements IAppConfig Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ArrayExtensions.html": {
    "href": "api/wan24.Core.ArrayExtensions.html",
    "title": "Class ArrayExtensions | wan24-Core",
    "keywords": "Class ArrayExtensions Array extensions Inheritance object ArrayExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ArrayExtensions Methods | Edit this page View Source AsReadOnly<T>(IEnumerable<T>) Get as read-only Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ReadOnlyCollection<T> AsReadOnly<T>(this IEnumerable<T> enumerable) Parameters Type Name Description IEnumerable<T> enumerable Enumerable Returns Type Description ReadOnlyCollection<T> Read-only collection Type Parameters Name Description T Item type | Edit this page View Source AsReadOnly<T>(Memory<T>) Get as read-only Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ReadOnlyMemory<T> AsReadOnly<T>(this Memory<T> mem) Parameters Type Name Description Memory<T> mem Memory Returns Type Description ReadOnlyMemory<T> Memory Type Parameters Name Description T Item type | Edit this page View Source AsReadOnly<T>(Span<T>) Get as read-only Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ReadOnlySpan<T> AsReadOnly<T>(this Span<T> span) Parameters Type Name Description Span<T> span Span Returns Type Description ReadOnlySpan<T> Span Type Parameters Name Description T Item type | Edit this page View Source CloneArray<T>(T[]) Clone an array (items will be copied into a new array) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static T[] CloneArray<T>(this T[] arr) Parameters Type Name Description T[] arr Array Returns Type Description T[] New array Type Parameters Name Description T Item type | Edit this page View Source ContainsAll<T>(T[], params T[]) Determine if all values are contained Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool ContainsAll<T>(this T[] arr, params T[] values) Parameters Type Name Description T[] arr Array T[] values Required values (each value should be unique!) Returns Type Description bool All contained? Type Parameters Name Description T Value type | Edit this page View Source ContainsAny<T>(T[], params T[]) Determine if any of the values are contained Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool ContainsAny<T>(this T[] arr, params T[] values) Parameters Type Name Description T[] arr Array T[] values Values Returns Type Description bool Any contained? Type Parameters Name Description T Value type | Edit this page View Source EnsureValid<T>(Memory<T>, in int, in int) Ensure valid offset/length Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Memory<T> EnsureValid<T>(this Memory<T> memory, in int offset, in int length) Parameters Type Name Description Memory<T> memory Memory int offset Offset int length Length Returns Type Description Memory<T> Memory Type Parameters Name Description T Item type Exceptions Type Condition ArgumentOutOfRangeException Thrown on offset/length error | Edit this page View Source EnsureValid<T>(ReadOnlyMemory<T>, in int, in int) Ensure valid offset/length Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ReadOnlyMemory<T> EnsureValid<T>(this ReadOnlyMemory<T> memory, in int offset, in int length) Parameters Type Name Description ReadOnlyMemory<T> memory Memory int offset Offset int length Length Returns Type Description ReadOnlyMemory<T> Memory Type Parameters Name Description T Item type Exceptions Type Condition ArgumentOutOfRangeException Thrown on offset/length error | Edit this page View Source EnsureValid<T>(ReadOnlySpan<T>, in int, in int) Ensure valid offset/length Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ReadOnlySpan<T> EnsureValid<T>(this ReadOnlySpan<T> span, in int offset, in int length) Parameters Type Name Description ReadOnlySpan<T> span Span int offset Offset int length Length Returns Type Description ReadOnlySpan<T> Span Type Parameters Name Description T Item type Exceptions Type Condition ArgumentOutOfRangeException Thrown on offset/length error | Edit this page View Source EnsureValid<T>(Span<T>, in int, in int) Ensure valid offset/length Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Span<T> EnsureValid<T>(this Span<T> span, in int offset, in int length) Parameters Type Name Description Span<T> span Span int offset Offset int length Length Returns Type Description Span<T> Span Type Parameters Name Description T Item type Exceptions Type Condition ArgumentOutOfRangeException Thrown on offset/length error | Edit this page View Source IndexOf<T>(Memory<T>, in T) Get the index of a value Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int IndexOf<T>(this Memory<T> arr, in T value) Parameters Type Name Description Memory<T> arr Array T value Value Returns Type Description int Index or -1, if not found Type Parameters Name Description T Value type | Edit this page View Source IndexOf<T>(ReadOnlyMemory<T>, in T) Get the index of a value Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int IndexOf<T>(this ReadOnlyMemory<T> arr, in T value) Parameters Type Name Description ReadOnlyMemory<T> arr Array T value Value Returns Type Description int Index or -1, if not found Type Parameters Name Description T Value type | Edit this page View Source IndexOf<T>(ReadOnlySpan<T>, in T) Get the index of a value Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int IndexOf<T>(this ReadOnlySpan<T> arr, in T value) Parameters Type Name Description ReadOnlySpan<T> arr Array T value Value Returns Type Description int Index or -1, if not found Type Parameters Name Description T Value type | Edit this page View Source IndexOf<T>(T[], in T) Get the index of a value Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int IndexOf<T>(this T[] arr, in T value) Parameters Type Name Description T[] arr Array T value Value Returns Type Description int Index or -1, if not found Type Parameters Name Description T Value type | Edit this page View Source IsValid<T>(Memory<T>, in int, in int) Determine if valid offset/length Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsValid<T>(this Memory<T> memory, in int offset, in int length) Parameters Type Name Description Memory<T> memory Memory int offset Offset int length Length Returns Type Description bool Is valid? Type Parameters Name Description T Item type | Edit this page View Source IsValid<T>(ReadOnlyMemory<T>, in int, in int) Determine if valid offset/length Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsValid<T>(this ReadOnlyMemory<T> memory, in int offset, in int length) Parameters Type Name Description ReadOnlyMemory<T> memory Memory int offset Offset int length Length Returns Type Description bool Is valid? Type Parameters Name Description T Item type | Edit this page View Source IsValid<T>(ReadOnlySpan<T>, in int, in int) Determine if valid offset/length Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsValid<T>(this ReadOnlySpan<T> span, in int offset, in int length) Parameters Type Name Description ReadOnlySpan<T> span Span int offset Offset int length Length Returns Type Description bool Is valid? Type Parameters Name Description T Item type | Edit this page View Source IsValid<T>(Span<T>, in int, in int) Determine if valid offset/length Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsValid<T>(this Span<T> span, in int offset, in int length) Parameters Type Name Description Span<T> span Span int offset Offset int length Length Returns Type Description bool Is valid? Type Parameters Name Description T Item type"
  },
  "api/wan24.Core.ArrayPoolExtensions.html": {
    "href": "api/wan24.Core.ArrayPoolExtensions.html",
    "title": "Class ArrayPoolExtensions | wan24-Core",
    "keywords": "Class ArrayPoolExtensions ArrayPool<T> extensions Inheritance object ArrayPoolExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ArrayPoolExtensions Methods | Edit this page View Source RentClean<T>(ArrayPool<T>, in int) Rent a clean array Declaration public static T[] RentClean<T>(this ArrayPool<T> pool, in int len) Parameters Type Name Description ArrayPool<T> pool Array pool int len Length Returns Type Description T[] Rented clean array Type Parameters Name Description T Element type"
  },
  "api/wan24.Core.AsyncDisposableExtensions.html": {
    "href": "api/wan24.Core.AsyncDisposableExtensions.html",
    "title": "Class AsyncDisposableExtensions | wan24-Core",
    "keywords": "Class AsyncDisposableExtensions Asynchronous disposable extensions Inheritance object AsyncDisposableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class AsyncDisposableExtensions Methods | Edit this page View Source DisposeAllAsync(IEnumerable<IAsyncDisposable>, bool) Dispose all Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task DisposeAllAsync(this IEnumerable<IAsyncDisposable> disposables, bool parallel = false) Parameters Type Name Description IEnumerable<IAsyncDisposable> disposables Disposables bool parallel Dispose parallel? Returns Type Description Task | Edit this page View Source DynamicContext(IAsyncDisposable) Return in any thread context Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ConfiguredAsyncDisposable DynamicContext(this IAsyncDisposable disposable) Parameters Type Name Description IAsyncDisposable disposable Disposable Returns Type Description ConfiguredAsyncDisposable Disposable | Edit this page View Source FixedContext(IAsyncDisposable) Return to the awaiting context Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ConfiguredAsyncDisposable FixedContext(this IAsyncDisposable disposable) Parameters Type Name Description IAsyncDisposable disposable Disposable Returns Type Description ConfiguredAsyncDisposable Disposable"
  },
  "api/wan24.Core.AsyncDisposableLazyValue-1.html": {
    "href": "api/wan24.Core.AsyncDisposableLazyValue-1.html",
    "title": "Class AsyncDisposableLazyValue<T> | wan24-Core",
    "keywords": "Class AsyncDisposableLazyValue<T> Disposable lazy value Inheritance object DisposableBase AsyncDisposableLazyValue<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class AsyncDisposableLazyValue<T> : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable where T : IAsyncDisposable Type Parameters Name Description T Value type Remarks Constructor Constructors | Edit this page View Source AsyncDisposableLazyValue(in Func<T>) Disposable lazy value Declaration public AsyncDisposableLazyValue(in Func<T> factory) Parameters Type Name Description Func<T> factory Factory Remarks Constructor Properties | Edit this page View Source Value Value Declaration public T Value { get; } Property Value Type Description T Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() Operators | Edit this page View Source implicit operator bool(in AsyncDisposableLazyValue<T>) Cast as has-value-flag Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in AsyncDisposableLazyValue<T> lazyValue) Parameters Type Name Description AsyncDisposableLazyValue<T> lazyValue Lazy value Returns Type Description bool | Edit this page View Source implicit operator T(in AsyncDisposableLazyValue<T>) Cast as value Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T(in AsyncDisposableLazyValue<T> lazyValue) Parameters Type Name Description AsyncDisposableLazyValue<T> lazyValue Lazy value Returns Type Description T Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.AsyncEnumerableExtensions.html": {
    "href": "api/wan24.Core.AsyncEnumerableExtensions.html",
    "title": "Class AsyncEnumerableExtensions | wan24-Core",
    "keywords": "Class AsyncEnumerableExtensions Asynchronous enumerable extensions Inheritance object AsyncEnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class AsyncEnumerableExtensions Methods | Edit this page View Source ChunkEnumAsync<T>(IAsyncEnumerable<T>, int, CancellationToken) Chunk an enumerable Declaration public static IAsyncEnumerable<T[]> ChunkEnumAsync<T>(this IAsyncEnumerable<T> enumerable, int chunkSize, CancellationToken cancellationToken = default) Parameters Type Name Description IAsyncEnumerable<T> enumerable Enumerable int chunkSize Chunk size CancellationToken cancellationToken Cancellation token Returns Type Description IAsyncEnumerable<T[]> Chunks Type Parameters Name Description T Item type | Edit this page View Source CombineAsync<T>(IAsyncEnumerable<IAsyncEnumerable<T>>, CancellationToken) Combine enumerables Declaration public static IAsyncEnumerable<T> CombineAsync<T>(this IAsyncEnumerable<IAsyncEnumerable<T>> enumerables, CancellationToken cancellationToken = default) Parameters Type Name Description IAsyncEnumerable<IAsyncEnumerable<T>> enumerables Enumerables CancellationToken cancellationToken Cancellation token Returns Type Description IAsyncEnumerable<T> Combined enumerable Type Parameters Name Description T Item type | Edit this page View Source CombineAsync<T>(IAsyncEnumerable<IEnumerable<T>>, CancellationToken) Combine enumerables Declaration public static IAsyncEnumerable<T> CombineAsync<T>(this IAsyncEnumerable<IEnumerable<T>> enumerables, CancellationToken cancellationToken = default) Parameters Type Name Description IAsyncEnumerable<IEnumerable<T>> enumerables Enumerables CancellationToken cancellationToken Cancellation token Returns Type Description IAsyncEnumerable<T> Combined enumerable Type Parameters Name Description T Item type | Edit this page View Source DynamicContext<T>(IAsyncEnumerable<T>) Return in any thread context Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ConfiguredCancelableAsyncEnumerable<T> DynamicContext<T>(this IAsyncEnumerable<T> enumeration) Parameters Type Name Description IAsyncEnumerable<T> enumeration Enumeration Returns Type Description ConfiguredCancelableAsyncEnumerable<T> Enumeration Type Parameters Name Description T Item type | Edit this page View Source FixedContext<T>(IAsyncEnumerable<T>) Return to the awaiting context Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ConfiguredCancelableAsyncEnumerable<T> FixedContext<T>(this IAsyncEnumerable<T> enumeration) Parameters Type Name Description IAsyncEnumerable<T> enumeration Enumeration Returns Type Description ConfiguredCancelableAsyncEnumerable<T> Enumeration Type Parameters Name Description T Item type | Edit this page View Source ToArrayAsync<T>(IAsyncEnumerable<T>, CancellationToken) Get as array Declaration public static Task<T[]> ToArrayAsync<T>(this IAsyncEnumerable<T> enumerable, CancellationToken cancellationToken = default) Parameters Type Name Description IAsyncEnumerable<T> enumerable Enumerable CancellationToken cancellationToken Cancellation token Returns Type Description Task<T[]> Array Type Parameters Name Description T Item type | Edit this page View Source ToArrayAsync<T>(ConfiguredCancelableAsyncEnumerable<T>, CancellationToken) Get as array Declaration public static Task<T[]> ToArrayAsync<T>(this ConfiguredCancelableAsyncEnumerable<T> enumerable, CancellationToken cancellationToken = default) Parameters Type Name Description ConfiguredCancelableAsyncEnumerable<T> enumerable Enumerable CancellationToken cancellationToken Cancellation token Returns Type Description Task<T[]> Array Type Parameters Name Description T Item type | Edit this page View Source ToDisposingAsyncEnumerator<T>(IAsyncEnumerable<T>, params object?[]) Constructor Declaration public static DisposingAsyncEnumerator<T> ToDisposingAsyncEnumerator<T>(this IAsyncEnumerable<T> enumerable, params object?[] disposables) Parameters Type Name Description IAsyncEnumerable<T> enumerable Enumerable object[] disposables Disposables Returns Type Description DisposingAsyncEnumerator<T> Type Parameters Name Description T | Edit this page View Source ToDisposingAsyncEnumerator<T>(IAsyncEnumerable<T>, in CancellationToken, params object?[]) Constructor Declaration public static DisposingAsyncEnumerator<T> ToDisposingAsyncEnumerator<T>(this IAsyncEnumerable<T> enumerable, in CancellationToken cancellationToken, params object?[] disposables) Parameters Type Name Description IAsyncEnumerable<T> enumerable Enumerable CancellationToken cancellationToken Cancellation token object[] disposables Disposables Returns Type Description DisposingAsyncEnumerator<T> Type Parameters Name Description T | Edit this page View Source ToDisposingAsyncEnumerator<T>(IAsyncEnumerator<T>, params object?[]) Constructor Declaration public static DisposingAsyncEnumerator<T> ToDisposingAsyncEnumerator<T>(this IAsyncEnumerator<T> enumerator, params object?[] disposables) Parameters Type Name Description IAsyncEnumerator<T> enumerator Enumerator (will be disposed) object[] disposables Disposables Returns Type Description DisposingAsyncEnumerator<T> Type Parameters Name Description T | Edit this page View Source ToDisposingAsyncEnumerator<T>(IAsyncEnumerator<T>, in CancellationToken, params object?[]) Constructor Declaration public static DisposingAsyncEnumerator<T> ToDisposingAsyncEnumerator<T>(this IAsyncEnumerator<T> enumerator, in CancellationToken cancellationToken, params object?[] disposables) Parameters Type Name Description IAsyncEnumerator<T> enumerator Enumerator (will be disposed) CancellationToken cancellationToken Cancellation token object[] disposables Disposables Returns Type Description DisposingAsyncEnumerator<T> Type Parameters Name Description T | Edit this page View Source ToListAsync<T>(IAsyncEnumerable<T>, CancellationToken) Get as list Declaration public static Task<List<T>> ToListAsync<T>(this IAsyncEnumerable<T> enumerable, CancellationToken cancellationToken = default) Parameters Type Name Description IAsyncEnumerable<T> enumerable Enumerable CancellationToken cancellationToken Cancellation token Returns Type Description Task<List<T>> List Type Parameters Name Description T Item type | Edit this page View Source ToListAsync<T>(ConfiguredCancelableAsyncEnumerable<T>, CancellationToken) Get as list Declaration public static Task<List<T>> ToListAsync<T>(this ConfiguredCancelableAsyncEnumerable<T> enumerable, CancellationToken cancellationToken = default) Parameters Type Name Description ConfiguredCancelableAsyncEnumerable<T> enumerable Enumerable CancellationToken cancellationToken Cancellation token Returns Type Description Task<List<T>> List Type Parameters Name Description T Item type"
  },
  "api/wan24.Core.AsyncEvent-2.html": {
    "href": "api/wan24.Core.AsyncEvent-2.html",
    "title": "Class AsyncEvent<tSender, tArgs> | wan24-Core",
    "keywords": "Class AsyncEvent<tSender, tArgs> Asynchronous event Inheritance object AsyncEvent<tSender, tArgs> Implements IAsyncEvent<tSender, tArgs> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class AsyncEvent<tSender, tArgs> : IAsyncEvent<tSender, tArgs> where tSender : class where tArgs : EventArgs, new() Type Parameters Name Description tSender Sender type tArgs Arguments type Remarks Constructor Constructors | Edit this page View Source AsyncEvent(in tSender?, in TimeSpan?, in CancellationToken?) Asynchronous event Declaration public AsyncEvent(in tSender? sender = null, in TimeSpan? timeout = null, in CancellationToken? cancellationToken = null) Parameters Type Name Description tSender sender Sender TimeSpan? timeout Event handler timeout CancellationToken? cancellationToken Cancellation token Remarks Constructor Properties | Edit this page View Source Abstract Get the abstract interface of this instance Declaration public IAsyncEvent<tSender, tArgs> Abstract { get; } Property Value Type Description IAsyncEvent<tSender, tArgs> | Edit this page View Source FirstRaised First raised Declaration public DateTime FirstRaised { get; } Property Value Type Description DateTime | Edit this page View Source HasHandlers Has event handlers? Declaration public bool HasHandlers { get; } Property Value Type Description bool | Edit this page View Source LastRaised Last raised Declaration public DateTime LastRaised { get; } Property Value Type Description DateTime | Edit this page View Source RaiseCount Number of times the event was raised Declaration public int RaiseCount { get; } Property Value Type Description int Methods | Edit this page View Source Detach(in EventHandlerAsync_Delegate) Detach an event handler Declaration public bool Detach(in IAsyncEvent<tSender, tArgs>.EventHandlerAsync_Delegate handler) Parameters Type Name Description IAsyncEvent<tSender, tArgs>.EventHandlerAsync_Delegate handler Handler Returns Type Description bool Detached? | Edit this page View Source Detach(in EventHandler_Delegate) Detach an event handler Declaration public bool Detach(in IAsyncEvent<tSender, tArgs>.EventHandler_Delegate handler) Parameters Type Name Description IAsyncEvent<tSender, tArgs>.EventHandler_Delegate handler Handler Returns Type Description bool Detached? | Edit this page View Source Listen(in EventHandlerAsync_Delegate) Add an event handler Declaration public bool Listen(in IAsyncEvent<tSender, tArgs>.EventHandlerAsync_Delegate handler) Parameters Type Name Description IAsyncEvent<tSender, tArgs>.EventHandlerAsync_Delegate handler Handler Returns Type Description bool Added? | Edit this page View Source Listen(in EventHandler_Delegate) Add an event handler Declaration public bool Listen(in IAsyncEvent<tSender, tArgs>.EventHandler_Delegate handler) Parameters Type Name Description IAsyncEvent<tSender, tArgs>.EventHandler_Delegate handler Handler Returns Type Description bool Added? Operators | Edit this page View Source operator +(in AsyncEvent<tSender, tArgs>, in EventHandlerAsync_Delegate) Add an event handler Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static AsyncEvent<tSender, tArgs> operator +(in AsyncEvent<tSender, tArgs> e, in IAsyncEvent<tSender, tArgs>.EventHandlerAsync_Delegate handler) Parameters Type Name Description AsyncEvent<tSender, tArgs> e Event IAsyncEvent<tSender, tArgs>.EventHandlerAsync_Delegate handler Handler Returns Type Description AsyncEvent<tSender, tArgs> Event | Edit this page View Source operator +(in AsyncEvent<tSender, tArgs>, in EventHandler_Delegate) Add an event handler Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static AsyncEvent<tSender, tArgs> operator +(in AsyncEvent<tSender, tArgs> e, in IAsyncEvent<tSender, tArgs>.EventHandler_Delegate handler) Parameters Type Name Description AsyncEvent<tSender, tArgs> e Event IAsyncEvent<tSender, tArgs>.EventHandler_Delegate handler Handler Returns Type Description AsyncEvent<tSender, tArgs> Event | Edit this page View Source implicit operator bool(in AsyncEvent<tSender, tArgs>) Cast as HasHandlers Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in AsyncEvent<tSender, tArgs> e) Parameters Type Name Description AsyncEvent<tSender, tArgs> e Event Returns Type Description bool | Edit this page View Source operator -(in AsyncEvent<tSender, tArgs>, in EventHandlerAsync_Delegate) Remove an event handler Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static AsyncEvent<tSender, tArgs> operator -(in AsyncEvent<tSender, tArgs> e, in IAsyncEvent<tSender, tArgs>.EventHandlerAsync_Delegate handler) Parameters Type Name Description AsyncEvent<tSender, tArgs> e Event IAsyncEvent<tSender, tArgs>.EventHandlerAsync_Delegate handler Handler Returns Type Description AsyncEvent<tSender, tArgs> Event | Edit this page View Source operator -(in AsyncEvent<tSender, tArgs>, in EventHandler_Delegate) Remove an event handler Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static AsyncEvent<tSender, tArgs> operator -(in AsyncEvent<tSender, tArgs> e, in IAsyncEvent<tSender, tArgs>.EventHandler_Delegate handler) Parameters Type Name Description AsyncEvent<tSender, tArgs> e Event IAsyncEvent<tSender, tArgs>.EventHandler_Delegate handler Handler Returns Type Description AsyncEvent<tSender, tArgs> Event Implements IAsyncEvent<tSender, tArgs> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.AsyncHelper.html": {
    "href": "api/wan24.Core.AsyncHelper.html",
    "title": "Class AsyncHelper | wan24-Core",
    "keywords": "Class AsyncHelper Asynchronous API helper Inheritance object AsyncHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class AsyncHelper Methods | Edit this page View Source FinallyAsync<T>(Task<T>, Action<T>) Final fluent asynchronous API result action Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task FinallyAsync<T>(this Task<T> task, Action<T> action) Parameters Type Name Description Task<T> task Task Action<T> action Action Returns Type Description Task Type Parameters Name Description T Result type | Edit this page View Source FinallyAsync<T>(Task<T>, Func<T, Task>) Final fluent asynchronous API result action Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task FinallyAsync<T>(this Task<T> task, Func<T, Task> action) Parameters Type Name Description Task<T> task Task Func<T, Task> action Action Returns Type Description Task Type Parameters Name Description T Result type | Edit this page View Source FinallyAsync<T>(ValueTask<T>, Action<T>) Final fluent asynchronous API result action Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ValueTask FinallyAsync<T>(this ValueTask<T> task, Action<T> action) Parameters Type Name Description ValueTask<T> task Task Action<T> action Action Returns Type Description ValueTask Type Parameters Name Description T Result type | Edit this page View Source FinallyAsync<T>(ValueTask<T>, Func<T, ValueTask>) Final fluent asynchronous API result action Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ValueTask FinallyAsync<T>(this ValueTask<T> task, Func<T, ValueTask> action) Parameters Type Name Description ValueTask<T> task Task Func<T, ValueTask> action Action Returns Type Description ValueTask Type Parameters Name Description T Result type | Edit this page View Source FinallyAsync<tResult, tReturn>(Task<tResult>, Func<tResult, Task<tReturn>>) Final fluent asynchronous API result action Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<tReturn> FinallyAsync<tResult, tReturn>(this Task<tResult> task, Func<tResult, Task<tReturn>> action) Parameters Type Name Description Task<tResult> task Task Func<tResult, Task<tReturn>> action Action Returns Type Description Task<tReturn> Type Parameters Name Description tResult Result type tReturn Return type | Edit this page View Source FinallyAsync<tResult, tReturn>(Task<tResult>, Func<tResult, tReturn>) Final fluent asynchronous API result action Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<tReturn> FinallyAsync<tResult, tReturn>(this Task<tResult> task, Func<tResult, tReturn> action) Parameters Type Name Description Task<tResult> task Task Func<tResult, tReturn> action Action Returns Type Description Task<tReturn> Type Parameters Name Description tResult Result type tReturn Return type | Edit this page View Source FinallyAsync<tResult, tReturn>(ValueTask<tResult>, Func<tResult, ValueTask<tReturn>>) Final fluent asynchronous API result action Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ValueTask<tReturn> FinallyAsync<tResult, tReturn>(this ValueTask<tResult> task, Func<tResult, ValueTask<tReturn>> action) Parameters Type Name Description ValueTask<tResult> task Task Func<tResult, ValueTask<tReturn>> action Action Returns Type Description ValueTask<tReturn> Type Parameters Name Description tResult Result type tReturn Return type | Edit this page View Source FinallyAsync<tResult, tReturn>(ValueTask<tResult>, Func<tResult, tReturn>) Final fluent asynchronous API result action Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ValueTask<tReturn> FinallyAsync<tResult, tReturn>(this ValueTask<tResult> task, Func<tResult, tReturn> action) Parameters Type Name Description ValueTask<tResult> task Task Func<tResult, tReturn> action Action Returns Type Description ValueTask<tReturn> Type Parameters Name Description tResult Result type tReturn Return type | Edit this page View Source FluentAsync<T>(Task<T>, Func<T, Task<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<T> FluentAsync<T>(Task<T> task, Func<T, Task<T>> action) Parameters Type Name Description Task<T> task Task Func<T, Task<T>> action Action Returns Type Description Task<T> Object Type Parameters Name Description T Type | Edit this page View Source FluentAsync<T>(ValueTask<T>, Func<T, ValueTask<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ValueTask<T> FluentAsync<T>(ValueTask<T> task, Func<T, ValueTask<T>> action) Parameters Type Name Description ValueTask<T> task Task Func<T, ValueTask<T>> action Action Returns Type Description ValueTask<T> Object Type Parameters Name Description T Type | Edit this page View Source FluentAsync<T, T1>(Task<T>, T1, Func<T, T1, Task<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<T> FluentAsync<T, T1>(Task<T> task, T1 p1, Func<T, T1, Task<T>> action) Parameters Type Name Description Task<T> task Task T1 p1 Parameter 1 Func<T, T1, Task<T>> action Action Returns Type Description Task<T> Object Type Parameters Name Description T Type T1 Parameter 1 type | Edit this page View Source FluentAsync<T, T1>(ValueTask<T>, T1, Func<T, T1, ValueTask<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ValueTask<T> FluentAsync<T, T1>(ValueTask<T> task, T1 p1, Func<T, T1, ValueTask<T>> action) Parameters Type Name Description ValueTask<T> task Task T1 p1 Parameter 1 Func<T, T1, ValueTask<T>> action Action Returns Type Description ValueTask<T> Object Type Parameters Name Description T Type T1 Parameter 1 type | Edit this page View Source FluentAsync<T, T1, T2>(Task<T>, T1, T2, Func<T, T1, T2, Task<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<T> FluentAsync<T, T1, T2>(Task<T> task, T1 p1, T2 p2, Func<T, T1, T2, Task<T>> action) Parameters Type Name Description Task<T> task Task T1 p1 Parameter 1 T2 p2 Parameter 2 Func<T, T1, T2, Task<T>> action Action Returns Type Description Task<T> Object Type Parameters Name Description T Type T1 Parameter 1 type T2 Parameter 2 type | Edit this page View Source FluentAsync<T, T1, T2>(ValueTask<T>, T1, T2, Func<T, T1, T2, ValueTask<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ValueTask<T> FluentAsync<T, T1, T2>(ValueTask<T> task, T1 p1, T2 p2, Func<T, T1, T2, ValueTask<T>> action) Parameters Type Name Description ValueTask<T> task Task T1 p1 Parameter 1 T2 p2 Parameter 2 Func<T, T1, T2, ValueTask<T>> action Action Returns Type Description ValueTask<T> Object Type Parameters Name Description T Type T1 Parameter 1 type T2 Parameter 2 type | Edit this page View Source FluentAsync<T, T1, T2, T3>(Task<T>, T1, T2, T3, Func<T, T1, T2, T3, Task<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<T> FluentAsync<T, T1, T2, T3>(Task<T> task, T1 p1, T2 p2, T3 p3, Func<T, T1, T2, T3, Task<T>> action) Parameters Type Name Description Task<T> task Task T1 p1 Parameter 1 T2 p2 Parameter 2 T3 p3 Parameter 3 Func<T, T1, T2, T3, Task<T>> action Action Returns Type Description Task<T> Object Type Parameters Name Description T Type T1 Parameter 1 type T2 Parameter 2 type T3 Parameter 3 type | Edit this page View Source FluentAsync<T, T1, T2, T3>(ValueTask<T>, T1, T2, T3, Func<T, T1, T2, T3, ValueTask<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ValueTask<T> FluentAsync<T, T1, T2, T3>(ValueTask<T> task, T1 p1, T2 p2, T3 p3, Func<T, T1, T2, T3, ValueTask<T>> action) Parameters Type Name Description ValueTask<T> task Task T1 p1 Parameter 1 T2 p2 Parameter 2 T3 p3 Parameter 3 Func<T, T1, T2, T3, ValueTask<T>> action Action Returns Type Description ValueTask<T> Object Type Parameters Name Description T Type T1 Parameter 1 type T2 Parameter 2 type T3 Parameter 3 type | Edit this page View Source FluentAsync<T, T1, T2, T3, T4>(Task<T>, T1, T2, T3, T4, Func<T, T1, T2, T3, T4, Task<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<T> FluentAsync<T, T1, T2, T3, T4>(Task<T> task, T1 p1, T2 p2, T3 p3, T4 p4, Func<T, T1, T2, T3, T4, Task<T>> action) Parameters Type Name Description Task<T> task Task T1 p1 Parameter 1 T2 p2 Parameter 2 T3 p3 Parameter 3 T4 p4 Parameter 4 Func<T, T1, T2, T3, T4, Task<T>> action Action Returns Type Description Task<T> Object Type Parameters Name Description T Type T1 Parameter 1 type T2 Parameter 2 type T3 Parameter 3 type T4 Parameter 4 type | Edit this page View Source FluentAsync<T, T1, T2, T3, T4>(ValueTask<T>, T1, T2, T3, T4, Func<T, T1, T2, T3, T4, ValueTask<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ValueTask<T> FluentAsync<T, T1, T2, T3, T4>(ValueTask<T> task, T1 p1, T2 p2, T3 p3, T4 p4, Func<T, T1, T2, T3, T4, ValueTask<T>> action) Parameters Type Name Description ValueTask<T> task Task T1 p1 Parameter 1 T2 p2 Parameter 2 T3 p3 Parameter 3 T4 p4 Parameter 4 Func<T, T1, T2, T3, T4, ValueTask<T>> action Action Returns Type Description ValueTask<T> Object Type Parameters Name Description T Type T1 Parameter 1 type T2 Parameter 2 type T3 Parameter 3 type T4 Parameter 4 type | Edit this page View Source FluentAsync<T, T1, T2, T3, T4, T5>(Task<T>, T1, T2, T3, T4, T5, Func<T, T1, T2, T3, T4, T5, Task<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<T> FluentAsync<T, T1, T2, T3, T4, T5>(Task<T> task, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, Func<T, T1, T2, T3, T4, T5, Task<T>> action) Parameters Type Name Description Task<T> task Task T1 p1 Parameter 1 T2 p2 Parameter 2 T3 p3 Parameter 3 T4 p4 Parameter 4 T5 p5 Parameter 5 Func<T, T1, T2, T3, T4, T5, Task<T>> action Action Returns Type Description Task<T> Object Type Parameters Name Description T Type T1 Parameter 1 type T2 Parameter 2 type T3 Parameter 3 type T4 Parameter 4 type T5 Parameter 5 type | Edit this page View Source FluentAsync<T, T1, T2, T3, T4, T5>(ValueTask<T>, T1, T2, T3, T4, T5, Func<T, T1, T2, T3, T4, T5, ValueTask<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ValueTask<T> FluentAsync<T, T1, T2, T3, T4, T5>(ValueTask<T> task, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, Func<T, T1, T2, T3, T4, T5, ValueTask<T>> action) Parameters Type Name Description ValueTask<T> task Task T1 p1 Parameter 1 T2 p2 Parameter 2 T3 p3 Parameter 3 T4 p4 Parameter 4 T5 p5 Parameter 5 Func<T, T1, T2, T3, T4, T5, ValueTask<T>> action Action Returns Type Description ValueTask<T> Object Type Parameters Name Description T Type T1 Parameter 1 type T2 Parameter 2 type T3 Parameter 3 type T4 Parameter 4 type T5 Parameter 5 type | Edit this page View Source FluentAsync<T, T1, T2, T3, T4, T5, T6>(Task<T>, T1, T2, T3, T4, T5, T6, Func<T, T1, T2, T3, T4, T5, T6, Task<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<T> FluentAsync<T, T1, T2, T3, T4, T5, T6>(Task<T> task, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, Func<T, T1, T2, T3, T4, T5, T6, Task<T>> action) Parameters Type Name Description Task<T> task Task T1 p1 Parameter 1 T2 p2 Parameter 2 T3 p3 Parameter 3 T4 p4 Parameter 4 T5 p5 Parameter 5 T6 p6 Parameter 6 Func<T, T1, T2, T3, T4, T5, T6, Task<T>> action Action Returns Type Description Task<T> Object Type Parameters Name Description T Type T1 Parameter 1 type T2 Parameter 2 type T3 Parameter 3 type T4 Parameter 4 type T5 Parameter 5 type T6 Parameter 6 type | Edit this page View Source FluentAsync<T, T1, T2, T3, T4, T5, T6>(ValueTask<T>, T1, T2, T3, T4, T5, T6, Func<T, T1, T2, T3, T4, T5, T6, ValueTask<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ValueTask<T> FluentAsync<T, T1, T2, T3, T4, T5, T6>(ValueTask<T> task, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, Func<T, T1, T2, T3, T4, T5, T6, ValueTask<T>> action) Parameters Type Name Description ValueTask<T> task Task T1 p1 Parameter 1 T2 p2 Parameter 2 T3 p3 Parameter 3 T4 p4 Parameter 4 T5 p5 Parameter 5 T6 p6 Parameter 6 Func<T, T1, T2, T3, T4, T5, T6, ValueTask<T>> action Action Returns Type Description ValueTask<T> Object Type Parameters Name Description T Type T1 Parameter 1 type T2 Parameter 2 type T3 Parameter 3 type T4 Parameter 4 type T5 Parameter 5 type T6 Parameter 6 type | Edit this page View Source FluentAsync<T, T1, T2, T3, T4, T5, T6, T7>(Task<T>, T1, T2, T3, T4, T5, T6, T7, Func<T, T1, T2, T3, T4, T5, T6, T7, Task<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<T> FluentAsync<T, T1, T2, T3, T4, T5, T6, T7>(Task<T> task, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, Func<T, T1, T2, T3, T4, T5, T6, T7, Task<T>> action) Parameters Type Name Description Task<T> task Task T1 p1 Parameter 1 T2 p2 Parameter 2 T3 p3 Parameter 3 T4 p4 Parameter 4 T5 p5 Parameter 5 T6 p6 Parameter 6 T7 p7 Parameter 7 Func<T, T1, T2, T3, T4, T5, T6, T7, Task<T>> action Action Returns Type Description Task<T> Object Type Parameters Name Description T Type T1 Parameter 1 type T2 Parameter 2 type T3 Parameter 3 type T4 Parameter 4 type T5 Parameter 5 type T6 Parameter 6 type T7 Parameter 7 type | Edit this page View Source FluentAsync<T, T1, T2, T3, T4, T5, T6, T7>(ValueTask<T>, T1, T2, T3, T4, T5, T6, T7, Func<T, T1, T2, T3, T4, T5, T6, T7, ValueTask<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ValueTask<T> FluentAsync<T, T1, T2, T3, T4, T5, T6, T7>(ValueTask<T> task, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, Func<T, T1, T2, T3, T4, T5, T6, T7, ValueTask<T>> action) Parameters Type Name Description ValueTask<T> task Task T1 p1 Parameter 1 T2 p2 Parameter 2 T3 p3 Parameter 3 T4 p4 Parameter 4 T5 p5 Parameter 5 T6 p6 Parameter 6 T7 p7 Parameter 7 Func<T, T1, T2, T3, T4, T5, T6, T7, ValueTask<T>> action Action Returns Type Description ValueTask<T> Object Type Parameters Name Description T Type T1 Parameter 1 type T2 Parameter 2 type T3 Parameter 3 type T4 Parameter 4 type T5 Parameter 5 type T6 Parameter 6 type T7 Parameter 7 type | Edit this page View Source FluentAsync<T, T1, T2, T3, T4, T5, T6, T7, T8>(Task<T>, T1, T2, T3, T4, T5, T6, T7, T8, Func<T, T1, T2, T3, T4, T5, T6, T7, T8, Task<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<T> FluentAsync<T, T1, T2, T3, T4, T5, T6, T7, T8>(Task<T> task, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, Func<T, T1, T2, T3, T4, T5, T6, T7, T8, Task<T>> action) Parameters Type Name Description Task<T> task Task T1 p1 Parameter 1 T2 p2 Parameter 2 T3 p3 Parameter 3 T4 p4 Parameter 4 T5 p5 Parameter 5 T6 p6 Parameter 6 T7 p7 Parameter 7 T8 p8 Parameter 8 Func<T, T1, T2, T3, T4, T5, T6, T7, T8, Task<T>> action Action Returns Type Description Task<T> Object Type Parameters Name Description T Type T1 Parameter 1 type T2 Parameter 2 type T3 Parameter 3 type T4 Parameter 4 type T5 Parameter 5 type T6 Parameter 6 type T7 Parameter 7 type T8 Parameter 8 type | Edit this page View Source FluentAsync<T, T1, T2, T3, T4, T5, T6, T7, T8>(ValueTask<T>, T1, T2, T3, T4, T5, T6, T7, T8, Func<T, T1, T2, T3, T4, T5, T6, T7, T8, ValueTask<T>>) Fluent asynchronous API helper Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ValueTask<T> FluentAsync<T, T1, T2, T3, T4, T5, T6, T7, T8>(ValueTask<T> task, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, Func<T, T1, T2, T3, T4, T5, T6, T7, T8, ValueTask<T>> action) Parameters Type Name Description ValueTask<T> task Task T1 p1 Parameter 1 T2 p2 Parameter 2 T3 p3 Parameter 3 T4 p4 Parameter 4 T5 p5 Parameter 5 T6 p6 Parameter 6 T7 p7 Parameter 7 T8 p8 Parameter 8 Func<T, T1, T2, T3, T4, T5, T6, T7, T8, ValueTask<T>> action Action Returns Type Description ValueTask<T> Object Type Parameters Name Description T Type T1 Parameter 1 type T2 Parameter 2 type T3 Parameter 3 type T4 Parameter 4 type T5 Parameter 5 type T6 Parameter 6 type T7 Parameter 7 type T8 Parameter 8 type | Edit this page View Source TryDisposeAll(IEnumerable<object>) Try to dispose disposable objects Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static void TryDisposeAll(this IEnumerable<object> objects) Parameters Type Name Description IEnumerable<object> objects Objects | Edit this page View Source TryDisposeAllAsync(IEnumerable<object>, bool) Try to dispose disposable objects Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task TryDisposeAllAsync(this IEnumerable<object> objects, bool parallel = true) Parameters Type Name Description IEnumerable<object> objects Objects bool parallel Dispose parallel? Returns Type Description Task | Edit this page View Source TryDisposeAsync<T>(T) Try dispose, if disposable Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<T> TryDisposeAsync<T>(this T obj) Parameters Type Name Description T obj Object Returns Type Description Task<T> Object Type Parameters Name Description T Object type | Edit this page View Source TryDispose<T>(T) Try dispose, if disposable Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static T TryDispose<T>(this T obj) Parameters Type Name Description T obj Object Returns Type Description T Object Type Parameters Name Description T Object type | Edit this page View Source WaitAsync(WaitHandle, CancellationToken) Wait one Declaration public static Task WaitAsync(this WaitHandle waitHandle, CancellationToken cancellationToken = default) Parameters Type Name Description WaitHandle waitHandle Wait handle CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source WaitAsync(WaitHandle, TimeSpan, CancellationToken) Wait one Declaration public static Task WaitAsync(this WaitHandle waitHandle, TimeSpan timeout, CancellationToken cancellationToken = default) Parameters Type Name Description WaitHandle waitHandle Wait handle TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description Task"
  },
  "api/wan24.Core.AsyncObjectEnumerable-1.html": {
    "href": "api/wan24.Core.AsyncObjectEnumerable-1.html",
    "title": "Class AsyncObjectEnumerable<T> | wan24-Core",
    "keywords": "Class AsyncObjectEnumerable<T> Asynchronous object enumerable Inheritance object DisposableBase AsyncObjectEnumerable<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IAsyncEnumerable<object> Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class AsyncObjectEnumerable<T> : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IAsyncEnumerable<object> Type Parameters Name Description T Item type Remarks Constructor Constructors | Edit this page View Source AsyncObjectEnumerable(in IAsyncEnumerable<T>) Asynchronous object enumerable Declaration public AsyncObjectEnumerable(in IAsyncEnumerable<T> enumerable) Parameters Type Name Description IAsyncEnumerable<T> enumerable Enumerable Remarks Constructor Properties | Edit this page View Source BaseEnumerable Enumerable Declaration public IAsyncEnumerable<T> BaseEnumerable { get; } Property Value Type Description IAsyncEnumerable<T> Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source GetAsyncEnumerator(CancellationToken) Returns an enumerator that iterates asynchronously through the collection. Declaration public IAsyncEnumerator<object> GetAsyncEnumerator(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken A CancellationToken that may be used to cancel the asynchronous iteration. Returns Type Description IAsyncEnumerator<object> An enumerator that can be used to iterate asynchronously through the collection. Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IAsyncEnumerable<T> Extension Methods AsyncEnumerableExtensions.ChunkEnumAsync<T>(IAsyncEnumerable<T>, int, CancellationToken) AsyncEnumerableExtensions.DynamicContext<T>(IAsyncEnumerable<T>) AsyncEnumerableExtensions.FixedContext<T>(IAsyncEnumerable<T>) AsyncEnumerableExtensions.ToArrayAsync<T>(IAsyncEnumerable<T>, CancellationToken) AsyncEnumerableExtensions.ToDisposingAsyncEnumerator<T>(IAsyncEnumerable<T>, params object?[]) AsyncEnumerableExtensions.ToDisposingAsyncEnumerator<T>(IAsyncEnumerable<T>, in CancellationToken, params object?[]) AsyncEnumerableExtensions.ToListAsync<T>(IAsyncEnumerable<T>, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IAsyncEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IAsyncEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.ForEachAsync<T>(IAsyncEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.AsyncObjectEnumerator-1.html": {
    "href": "api/wan24.Core.AsyncObjectEnumerator-1.html",
    "title": "Class AsyncObjectEnumerator<T> | wan24-Core",
    "keywords": "Class AsyncObjectEnumerator<T> Asynchronous object enumerator Inheritance object DisposableBase AsyncObjectEnumerator<T> Implements IWillDispose IDisposableObject IDisposable IAsyncEnumerator<object> IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class AsyncObjectEnumerator<T> : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncEnumerator<object>, IAsyncDisposable Type Parameters Name Description T Item type Constructors | Edit this page View Source AsyncObjectEnumerator(in IAsyncEnumerable<T>, in CancellationToken) Constructor Declaration public AsyncObjectEnumerator(in IAsyncEnumerable<T> enumerable, in CancellationToken cancellationToken = default) Parameters Type Name Description IAsyncEnumerable<T> enumerable Enumerable CancellationToken cancellationToken Cancellation token | Edit this page View Source AsyncObjectEnumerator(in IAsyncEnumerator<T>) Constructor Declaration public AsyncObjectEnumerator(in IAsyncEnumerator<T> enumerator) Parameters Type Name Description IAsyncEnumerator<T> enumerator Enumerator Properties | Edit this page View Source BaseEnumerator Enumerator Declaration public IAsyncEnumerator<T> BaseEnumerator { get; } Property Value Type Description IAsyncEnumerator<T> | Edit this page View Source Current Gets the element in the collection at the current position of the enumerator. Declaration public object Current { get; } Property Value Type Description object The element in the collection at the current position of the enumerator. Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source MoveNextAsync() Advances the enumerator asynchronously to the next element of the collection. Declaration public ValueTask<bool> MoveNextAsync() Returns Type Description ValueTask<bool> A ValueTask<TResult> that will complete with a result of true if the enumerator was successfully advanced to the next element, or false if the enumerator has passed the end of the collection. Implements IWillDispose IDisposableObject IDisposable IAsyncEnumerator<T> IAsyncDisposable Extension Methods AsyncEnumerableExtensions.ToDisposingAsyncEnumerator<T>(IAsyncEnumerator<T>, params object?[]) AsyncEnumerableExtensions.ToDisposingAsyncEnumerator<T>(IAsyncEnumerator<T>, in CancellationToken, params object?[]) AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.AsyncTimer.Elapsed_Delegate.html": {
    "href": "api/wan24.Core.AsyncTimer.Elapsed_Delegate.html",
    "title": "Delegate AsyncTimer.Elapsed_Delegate | wan24-Core",
    "keywords": "Delegate AsyncTimer.Elapsed_Delegate Delegate for an elapsed handler Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task AsyncTimer.Elapsed_Delegate(AsyncTimer timer) Parameters Type Name Description AsyncTimer timer Timer Returns Type Description Task Delegate for an elapsed handler Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.AsyncTimer.html": {
    "href": "api/wan24.Core.AsyncTimer.html",
    "title": "Class AsyncTimer | wan24-Core",
    "keywords": "Class AsyncTimer Asynchronous timer Inheritance object DisposableBase HostedServiceBase AsyncTimer Implements IWillDispose ITimer IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable Inherited Members HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.OnException DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class AsyncTimer : HostedServiceBase, IWillDispose, ITimer, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source AsyncTimer(in TimeSpan, in Elapsed_Delegate, in bool) Constructor Declaration public AsyncTimer(in TimeSpan interval, in AsyncTimer.Elapsed_Delegate handler, in bool autoReset = true) Parameters Type Name Description TimeSpan interval Interval AsyncTimer.Elapsed_Delegate handler Elapsed handler bool autoReset Auto-reset? Properties | Edit this page View Source AutoReset Auto-reset? Declaration public bool AutoReset { get; set; } Property Value Type Description bool | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source Handler Elapsed handler Declaration public AsyncTimer.Elapsed_Delegate Handler { get; } Property Value Type Description AsyncTimer.Elapsed_Delegate | Edit this page View Source Interval Interval Declaration public TimeSpan Interval { get; set; } Property Value Type Description TimeSpan | Edit this page View Source LastElapsed Last elapsed Declaration public DateTime LastElapsed { get; } Property Value Type Description DateTime | Edit this page View Source RemainingTime Remaining time Declaration public TimeSpan RemainingTime { get; } Property Value Type Description TimeSpan | Edit this page View Source Scheduled Scheduled Declaration public DateTime Scheduled { get; } Property Value Type Description DateTime Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides HostedServiceBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides HostedServiceBase.DisposeCore() | Edit this page View Source WorkerAsync() Service worker Declaration protected override Task WorkerAsync() Returns Type Description Task Overrides HostedServiceBase.WorkerAsync() Operators | Edit this page View Source implicit operator bool(in AsyncTimer) If running Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in AsyncTimer timer) Parameters Type Name Description AsyncTimer timer Timer Returns Type Description bool | Edit this page View Source implicit operator DateTime(in AsyncTimer) Last timer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator DateTime(in AsyncTimer timer) Parameters Type Name Description AsyncTimer timer Timer Returns Type Description DateTime | Edit this page View Source implicit operator TimeSpan(in AsyncTimer) Remaining time until the next timeout Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator TimeSpan(in AsyncTimer timer) Parameters Type Name Description AsyncTimer timer Timer Returns Type Description TimeSpan Implements IWillDispose ITimer IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.AutoValueObjectBase-1.html": {
    "href": "api/wan24.Core.AutoValueObjectBase-1.html",
    "title": "Class AutoValueObjectBase<T> | wan24-Core",
    "keywords": "Class AutoValueObjectBase<T> Base class for an automatic value object (uses properties with a public getter for building the objects hash code) Inheritance object ValueObjectBase<T> AutoValueObjectBase<T> Implements IEquatable<T> Inherited Members ValueObjectBase<T>.HasHashCode ValueObjectBase<T>.Equals(object) ValueObjectBase<T>.GetHashCode() ValueObjectBase<T>.EqualOperator(in ValueObjectBase<T>, in ValueObjectBase<T>) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class AutoValueObjectBase<T> : ValueObjectBase<T>, IEquatable<T> where T : AutoValueObjectBase<T> Type Parameters Name Description T Final type (should be immutable using private property setters (for serialization purposes)) Constructors | Edit this page View Source AutoValueObjectBase(in bool) Constructor Declaration protected AutoValueObjectBase(in bool includePropertyNames = true) Parameters Type Name Description bool includePropertyNames Include property names in the objects hash code calculation? Fields | Edit this page View Source IncludePropertyNames Include property names in the objects hash code calculation? Declaration protected readonly bool IncludePropertyNames Field Value Type Description bool Methods | Edit this page View Source EqualsObjects() Get the objects for comparing instance values Declaration protected override sealed IEnumerable<object?> EqualsObjects() Returns Type Description IEnumerable<object> Objects Overrides ValueObjectBase<T>.EqualsObjects() Implements IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BackgroundProcessingStream.Error_Delegate.html": {
    "href": "api/wan24.Core.BackgroundProcessingStream.Error_Delegate.html",
    "title": "Delegate BackgroundProcessingStream.Error_Delegate | wan24-Core",
    "keywords": "Delegate BackgroundProcessingStream.Error_Delegate Delegate for an OnError event handler Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void BackgroundProcessingStream.Error_Delegate(BackgroundProcessingStream stream, EventArgs e) Parameters Type Name Description BackgroundProcessingStream stream Sender EventArgs e Arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BackgroundProcessingStream.html": {
    "href": "api/wan24.Core.BackgroundProcessingStream.html",
    "title": "Class BackgroundProcessingStream | wan24-Core",
    "keywords": "Class BackgroundProcessingStream Background processing stream Inheritance object MarshalByRefObject Stream StreamBase BlockingBufferStream BackgroundProcessingStream Implements IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members BlockingBufferStream.BufferSize BlockingBufferStream.Available BlockingBufferStream.SpaceLeft BlockingBufferStream.AggressiveReadBlocking BlockingBufferStream.ReadIncomplete BlockingBufferStream.IsReadBlocked BlockingBufferStream.IsWriteBlocked BlockingBufferStream.AutoReorg BlockingBufferStream.IsEndOfFile BlockingBufferStream.State BlockingBufferStream.CanRead BlockingBufferStream.CanSeek BlockingBufferStream.Length BlockingBufferStream.Position BlockingBufferStream.SetIsEndOfFileAsync(CancellationToken) BlockingBufferStream.ReorganizeBuffer() BlockingBufferStream.ReorganizeBufferAsync(CancellationToken) BlockingBufferStream.WaitSpace(CancellationToken) BlockingBufferStream.WaitSpaceAsync(CancellationToken) BlockingBufferStream.WaitData(CancellationToken) BlockingBufferStream.WaitDataAsync(CancellationToken) BlockingBufferStream.Seek(long, SeekOrigin) BlockingBufferStream.OnDataAvailable BlockingBufferStream.RaiseOnDataAvailable() BlockingBufferStream.OnNeedData BlockingBufferStream.RaiseOnNeedData() BlockingBufferStream.OnSpaceAvailable BlockingBufferStream.RaiseOnSpaceAvailable() BlockingBufferStream.OnNeedSpace BlockingBufferStream.RaiseOnNeedSpace() BlockingBufferStream.Buffer BlockingBufferStream.BufferSync BlockingBufferStream.SpaceEvent BlockingBufferStream.DataEvent BlockingBufferStream.WriteOffset BlockingBufferStream.ReadOffset BlockingBufferStream._Length BlockingBufferStream._Position BlockingBufferStream._IsEndOfFile BlockingBufferStream.ResetBuffer() BlockingBufferStream.ReadByte() BlockingBufferStream.Read(byte[], int, int) BlockingBufferStream.Read(Span<byte>) BlockingBufferStream.TryRead(Span<byte>) BlockingBufferStream.ReadAsync(byte[], int, int, CancellationToken) BlockingBufferStream.ReadAsync(Memory<byte>, CancellationToken) BlockingBufferStream.TryReadAsync(Memory<byte>, CancellationToken) BlockingBufferStream.Flush() BlockingBufferStream.SetLength(long) BlockingBufferStream.Write(byte[], int, int) BlockingBufferStream.WriteAsync(byte[], int, int, CancellationToken) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.Close() StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class BackgroundProcessingStream : BlockingBufferStream, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source BackgroundProcessingStream(in int, in CancellationToken) Constructor Declaration protected BackgroundProcessingStream(in int bufferSize, in CancellationToken cancellationToken = default) Parameters Type Name Description int bufferSize Buffer size in bytes CancellationToken cancellationToken Cancellation token Fields | Edit this page View Source Cancellation Cancellation Declaration protected readonly CancellationTokenSource Cancellation Field Value Type Description CancellationTokenSource | Edit this page View Source CombinedCancellation Combined cancellation tokens Declaration protected readonly Cancellations CombinedCancellation Field Value Type Description Cancellations | Edit this page View Source DidProcess Did process already? Declaration protected bool DidProcess Field Value Type Description bool | Edit this page View Source LongRunning Is a long running process? Declaration protected bool LongRunning Field Value Type Description bool | Edit this page View Source ProcessorTask Processor task Declaration protected Task? ProcessorTask Field Value Type Description Task | Edit this page View Source Scheduler Task scheduler to use for the processing background task Declaration protected TaskScheduler? Scheduler Field Value Type Description TaskScheduler Properties | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides BlockingBufferStream.CanWrite | Edit this page View Source LastException Last processing exception (may be set during disposing) Declaration public Exception? LastException { get; protected set; } Property Value Type Description Exception Methods | Edit this page View Source BeginWrite(byte[], int, int, AsyncCallback?, object?) Begins an asynchronous write operation. (Consider using WriteAsync(byte[], int, int) instead.) Declaration public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback? callback, object? state) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The byte offset in buffer from which to begin writing. int count The maximum number of bytes to write. AsyncCallback callback An optional asynchronous callback, to be called when the write is complete. object state A user-provided object that distinguishes this particular asynchronous write request from other requests. Returns Type Description IAsyncResult An IAsyncResult that represents the asynchronous write, which could still be pending. Overrides Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Exceptions Type Condition IOException Attempted an asynchronous write past the end of the stream, or a disk error occurs. ArgumentException One or more of the arguments is invalid. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException The current Stream implementation does not support the write operation. | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides BlockingBufferStream.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override Task DisposeCore() Returns Type Description Task Overrides BlockingBufferStream.DisposeCore() | Edit this page View Source ProcessAsync(CancellationToken) Process (must use WriteIntAsync(ReadOnlyMemory<byte>, CancellationToken) or TryWriteIntAsync(ReadOnlyMemory<byte>, CancellationToken) for writing to the buffer!) Declaration protected abstract Task ProcessAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source ProcessorAsync() Processor Declaration protected virtual Task ProcessorAsync() Returns Type Description Task | Edit this page View Source RaiseOnError() Raise the OnError event Declaration protected virtual void RaiseOnError() | Edit this page View Source SetLastException(in Exception) Set the last exception and start disposing Declaration protected virtual void SetLastException(in Exception ex) Parameters Type Name Description Exception ex Exception | Edit this page View Source StartProcessing() Start processing (can only be called once!) Declaration protected virtual void StartProcessing() | Edit this page View Source StartProcessingAsync() Start processing (can only be called once!) Declaration protected virtual Task StartProcessingAsync() Returns Type Description Task | Edit this page View Source TryWrite(ReadOnlySpan<byte>) Try writing a buffer without blocking Declaration public override int TryWrite(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer Buffer Returns Type Description int Number of bytes written Overrides BlockingBufferStream.TryWrite(ReadOnlySpan<byte>) | Edit this page View Source TryWriteAsync(ReadOnlyMemory<byte>, CancellationToken) Try writing a buffer without blocking Declaration public override ValueTask<int> TryWriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<int> Number of bytes written Overrides BlockingBufferStream.TryWriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source TryWriteIntAsync(ReadOnlyMemory<byte>, CancellationToken) Internal try write (uses the base TryWriteAsync(ReadOnlyMemory<byte>, CancellationToken)) Declaration public virtual ValueTask<int> TryWriteIntAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<int> Number of written bytes | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides BlockingBufferStream.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides BlockingBufferStream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides BlockingBufferStream.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source WriteIntAsync(ReadOnlyMemory<byte>, CancellationToken) Internal write (uses the base WriteAsync(ReadOnlyMemory<byte>, CancellationToken)) Declaration public virtual ValueTask WriteIntAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask Events | Edit this page View Source OnError Raised on error (see LastException) Declaration public event BackgroundProcessingStream.Error_Delegate? OnError Event Type Type Description BackgroundProcessingStream.Error_Delegate Implements IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BackgroundStream-1.ErrorEventArgs.html": {
    "href": "api/wan24.Core.BackgroundStream-1.ErrorEventArgs.html",
    "title": "Class BackgroundStream<T>.ErrorEventArgs | wan24-Core",
    "keywords": "Class BackgroundStream<T>.ErrorEventArgs Arguments for the OnError event Inheritance object EventArgs BackgroundStream<T>.ErrorEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class BackgroundStream<T>.ErrorEventArgs : EventArgs Remarks Constructor Constructors | Edit this page View Source ErrorEventArgs(Exception) Arguments for the OnError event Declaration public ErrorEventArgs(Exception ex) Parameters Type Name Description Exception ex Exception Remarks Constructor Properties | Edit this page View Source Exception Exception Declaration public Exception Exception { get; } Property Value Type Description Exception Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BackgroundStream-1.Error_Delegate.html": {
    "href": "api/wan24.Core.BackgroundStream-1.Error_Delegate.html",
    "title": "Delegate BackgroundStream<T>.Error_Delegate | wan24-Core",
    "keywords": "Delegate BackgroundStream<T>.Error_Delegate Delegate for an OnError event handler Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void BackgroundStream<T>.Error_Delegate(BackgroundStream<T> stream, BackgroundStream<T>.ErrorEventArgs e) Parameters Type Name Description BackgroundStream<T> stream Stream BackgroundStream<T>.ErrorEventArgs e Arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BackgroundStream-1.WriteService.html": {
    "href": "api/wan24.Core.BackgroundStream-1.WriteService.html",
    "title": "Class BackgroundStream<T>.WriteService | wan24-Core",
    "keywords": "Class BackgroundStream<T>.WriteService Write service Inheritance object DisposableBase HostedServiceBase QueueWorker ItemQueueWorkerBase<RentedArray<byte>> BackgroundStream<T>.WriteService Implements IWillDispose IItemQueueWorker<RentedArray<byte>> IQueueWorker IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members ItemQueueWorkerBase<RentedArray<byte>>.EnqueueAsync(RentedArray<byte>, CancellationToken) ItemQueueWorkerBase<RentedArray<byte>>.TryEnqueue(RentedArray<byte>) ItemQueueWorkerBase<RentedArray<byte>>.EnqueueRangeAsync(IEnumerable<RentedArray<byte>>, CancellationToken) ItemQueueWorkerBase<RentedArray<byte>>.EnqueueRangeAsync(IAsyncEnumerable<RentedArray<byte>>, CancellationToken) QueueWorker.GUID QueueWorker.Queued QueueWorker.State QueueWorker.EnqueueAsync(QueueWorker.Task_Delegate, CancellationToken) QueueWorker.TryEnqueue(QueueWorker.Task_Delegate, CancellationToken) QueueWorker.EnqueueRangeAsync(IEnumerable<QueueWorker.Task_Delegate>, CancellationToken) QueueWorker.EnqueueRangeAsync(IAsyncEnumerable<QueueWorker.Task_Delegate>, CancellationToken) HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.OnException DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax protected sealed class BackgroundStream<T>.WriteService : ItemQueueWorkerBase<RentedArray<byte>>, IWillDispose, IItemQueueWorker<RentedArray<byte>>, IQueueWorker, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source WriteService(in BackgroundStream<T>, in int) Write service Declaration public WriteService(in BackgroundStream<T> target, in int queueSize) Parameters Type Name Description BackgroundStream<T> target Target stream int queueSize Max. queue size Remarks Constructor Properties | Edit this page View Source Target Target stream Declaration public BackgroundStream<T> Target { get; } Property Value Type Description BackgroundStream<T> Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides HostedServiceBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides HostedServiceBase.DisposeCore() | Edit this page View Source ProcessItem(RentedArray<byte>, CancellationToken) Process one item Declaration protected override Task ProcessItem(RentedArray<byte> item, CancellationToken cancellationToken) Parameters Type Name Description RentedArray<byte> item Item to process CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides ItemQueueWorkerBase<RentedArray<byte>>.ProcessItem(RentedArray<byte>, CancellationToken) Implements IWillDispose IItemQueueWorker<T> IQueueWorker IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BackgroundStream-1.html": {
    "href": "api/wan24.Core.BackgroundStream-1.html",
    "title": "Class BackgroundStream<T> | wan24-Core",
    "keywords": "Class BackgroundStream<T> Background stream (allows writing using a background service; will copy each chunk for writing; not seek- and readable!) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> BackgroundStream<T> BackgroundStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.LeaveOpen WrapperStream<T>.State WrapperStream<T>.CanWrite WrapperStream<T>.CanTimeout WrapperStream<T>.Length WrapperStream<T>.Position WrapperStream<T>.ReadTimeout WrapperStream<T>.WriteTimeout WrapperStream<T>.Flush() WrapperStream<T>.FlushAsync(CancellationToken) WrapperStream<T>.Read(byte[], int, int) WrapperStream<T>.Read(Span<byte>) WrapperStream<T>.ReadByte() WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) WrapperStream<T>.Seek(long, SeekOrigin) WrapperStream<T>.SetLength(long) WrapperStream<T>.WriteByte(byte) WrapperStream<T>.CopyTo(Stream, int) WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndRead(IAsyncResult) WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndWrite(IAsyncResult) WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.Close() WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class BackgroundStream<T> : WrapperStream<T>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Base stream type Constructors | Edit this page View Source BackgroundStream(in T, in int, in int, in bool) Constructor Declaration public BackgroundStream(in T baseStream, in int maxMemory = 2147483647, in int queueSize = 100, in bool leaveOpen = false) Parameters Type Name Description T baseStream Base stream int maxMemory Max. memory for the background service in byte (will block, if exceeded; may overflow!) int queueSize Max. write queue size (will block, if exceeded!) bool leaveOpen Leave the base stream open when disposing? Fields | Edit this page View Source Queue Write queue Declaration protected readonly BackgroundStream<T>.WriteService Queue Field Value Type Description BackgroundStream<T>.WriteService | Edit this page View Source QueueCounter Queue counter Declaration protected readonly CounterEvent QueueCounter Field Value Type Description CounterEvent | Edit this page View Source Sync Thread synchronization Declaration protected readonly SemaphoreSync Sync Field Value Type Description SemaphoreSync Properties | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override sealed bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides WrapperStream<T>.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override sealed bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides WrapperStream<T>.CanSeek | Edit this page View Source CurrentMemory Current background service memory usage in byte (may be larger than MaxMemory) Declaration public int CurrentMemory { get; } Property Value Type Description int | Edit this page View Source LastException Last exception of the background writing service Declaration public Exception? LastException { get; } Property Value Type Description Exception | Edit this page View Source MaxMemory Max. memory for the background service in byte (BackgroundStream will block, if exceeded; may overflow!) Declaration public int MaxMemory { get; } Property Value Type Description int Methods | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides WrapperStream<T>.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override Task DisposeCore() Returns Type Description Task Overrides WrapperStream<T>.DisposeCore() | Edit this page View Source RaiseOnError() Raise the OnError event Declaration protected virtual void RaiseOnError() | Edit this page View Source WaitWritten(CancellationToken) Wait for the background service to finish writing the queue Declaration public void WaitWritten(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token | Edit this page View Source WaitWrittenAsync(CancellationToken) Wait for the background service to finish writing the queue Declaration public Task WaitWrittenAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override sealed void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides WrapperStream<T>.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides WrapperStream<T>.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override sealed Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Events | Edit this page View Source OnError Raised on background writing error Declaration public event BackgroundStream<T>.Error_Delegate? OnError Event Type Type Description BackgroundStream<T>.Error_Delegate Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BackgroundStream.html": {
    "href": "api/wan24.Core.BackgroundStream.html",
    "title": "Class BackgroundStream | wan24-Core",
    "keywords": "Class BackgroundStream Background stream (allows writing using a background service; will copy each chunk for writing; not seek- and readable!) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> BackgroundStream<Stream> BackgroundStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members BackgroundStream<Stream>.Queue BackgroundStream<Stream>.Sync BackgroundStream<Stream>.QueueCounter BackgroundStream<Stream>.MaxMemory BackgroundStream<Stream>.CurrentMemory BackgroundStream<Stream>.LastException BackgroundStream<Stream>.CanRead BackgroundStream<Stream>.CanSeek BackgroundStream<Stream>.WaitWritten(CancellationToken) BackgroundStream<Stream>.WaitWrittenAsync(CancellationToken) BackgroundStream<Stream>.Write(byte[], int, int) BackgroundStream<Stream>.Write(ReadOnlySpan<byte>) BackgroundStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) BackgroundStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) BackgroundStream<Stream>.Dispose(bool) BackgroundStream<Stream>.DisposeCore() BackgroundStream<Stream>.OnError BackgroundStream<Stream>.RaiseOnError() WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.State WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.Position WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.Flush() WrapperStream<Stream>.FlushAsync(CancellationToken) WrapperStream<Stream>.Read(byte[], int, int) WrapperStream<Stream>.Read(Span<byte>) WrapperStream<Stream>.ReadByte() WrapperStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) WrapperStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) WrapperStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>.SetLength(long) WrapperStream<Stream>.WriteByte(byte) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class BackgroundStream : BackgroundStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source BackgroundStream(in Stream, in int, in int, in bool) Background stream (allows writing using a background service; will copy each chunk for writing; not seek- and readable!) Declaration public BackgroundStream(in Stream baseStream, in int maxMemory = 2147483647, in int queueSize = 100, in bool leaveOpen = false) Parameters Type Name Description Stream baseStream Base stream int maxMemory Max. memory for the background service in byte (will block, if exceeded; may overflow!) int queueSize Max. write queue size (will block, if exceeded!) bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BackupStream-1.html": {
    "href": "api/wan24.Core.BackupStream-1.html",
    "title": "Class BackupStream<T> | wan24-Core",
    "keywords": "Class BackupStream<T> Backup stream (writes red data into another stream) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> BackupStream<T> BackupStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.LeaveOpen WrapperStream<T>.State WrapperStream<T>.CanRead WrapperStream<T>.CanSeek WrapperStream<T>.CanWrite WrapperStream<T>.CanTimeout WrapperStream<T>.Length WrapperStream<T>.Position WrapperStream<T>.ReadTimeout WrapperStream<T>.WriteTimeout WrapperStream<T>.Flush() WrapperStream<T>.FlushAsync(CancellationToken) WrapperStream<T>.ReadByte() WrapperStream<T>.Seek(long, SeekOrigin) WrapperStream<T>.SetLength(long) WrapperStream<T>.Write(byte[], int, int) WrapperStream<T>.Write(ReadOnlySpan<byte>) WrapperStream<T>.WriteByte(byte) WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) WrapperStream<T>.CopyTo(Stream, int) WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndRead(IAsyncResult) WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndWrite(IAsyncResult) WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.Dispose(bool) WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class BackupStream<T> : WrapperStream<T>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Base stream type Remarks Constructor Constructors | Edit this page View Source BackupStream(in T, in Stream, in bool, in bool) Backup stream (writes red data into another stream) Declaration public BackupStream(in T baseStream, in Stream backupStream, in bool leaveBaseOpen = false, in bool leaveBackupOpen = false) Parameters Type Name Description T baseStream Base stream Stream backupStream Backup stream (red data from the base stream will be written to this stream) bool leaveBaseOpen Leave the base stream open when disposing? bool leaveBackupOpen Leave the backup stream open when disposing? Remarks Constructor Properties | Edit this page View Source Backup Backup stream (red data from the base stream will be written to this stream) Declaration public Stream Backup { get; } Property Value Type Description Stream | Edit this page View Source LeaveBackupOpen Leave the backup stream open when disposing? Declaration public bool LeaveBackupOpen { get; set; } Property Value Type Description bool Methods | Edit this page View Source Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. Declaration public override void Close() Overrides WrapperStream<T>.Close() | Edit this page View Source DisposeCore() Declaration protected override Task DisposeCore() Returns Type Description Task Overrides WrapperStream<T>.DisposeCore() | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides WrapperStream<T>.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides WrapperStream<T>.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BackupStream.html": {
    "href": "api/wan24.Core.BackupStream.html",
    "title": "Class BackupStream | wan24-Core",
    "keywords": "Class BackupStream Backup stream (writes red data into another stream) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> BackupStream<Stream> BackupStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members BackupStream<Stream>.Backup BackupStream<Stream>.LeaveBackupOpen BackupStream<Stream>.Read(byte[], int, int) BackupStream<Stream>.Read(Span<byte>) BackupStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) BackupStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) BackupStream<Stream>.Close() BackupStream<Stream>.DisposeCore() WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.State WrapperStream<Stream>.CanRead WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.Position WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.Flush() WrapperStream<Stream>.FlushAsync(CancellationToken) WrapperStream<Stream>.ReadByte() WrapperStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>.SetLength(long) WrapperStream<Stream>.Write(byte[], int, int) WrapperStream<Stream>.Write(ReadOnlySpan<byte>) WrapperStream<Stream>.WriteByte(byte) WrapperStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) WrapperStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Dispose(bool) WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class BackupStream : BackupStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source BackupStream(in Stream, in Stream, in bool, in bool) Backup stream (writes red data into another stream) Declaration public BackupStream(in Stream baseStream, in Stream backupStream, in bool leaveBaseOpen = false, in bool leaveBackupOpen = false) Parameters Type Name Description Stream baseStream Base stream Stream backupStream Backup stream (red data from the base stream will be written to this stream) bool leaveBaseOpen Leave the base stream open when disposing? bool leaveBackupOpen Leave the backup stream open when disposing? Remarks Constructor Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BiDirectionalStream-2.html": {
    "href": "api/wan24.Core.BiDirectionalStream-2.html",
    "title": "Class BiDirectionalStream<tReadable, tWritable> | wan24-Core",
    "keywords": "Class BiDirectionalStream<tReadable, tWritable> Bi-directional stream Inheritance object MarshalByRefObject Stream StreamBase BiDirectionalStream<tReadable, tWritable> BiDirectionalStream Implements IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class BiDirectionalStream<tReadable, tWritable> : StreamBase, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where tReadable : Stream where tWritable : Stream Type Parameters Name Description tReadable Readable stream type tWritable Writable stream type Constructors | Edit this page View Source BiDirectionalStream(tReadable, tWritable, bool) Constructor Declaration public BiDirectionalStream(tReadable readable, tWritable writable, bool leaveOpen = false) Parameters Type Name Description tReadable readable Readable source stream tWritable writable Writable target stream bool leaveOpen Leave the streams open when disposing? Properties | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides Stream.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides Stream.CanSeek | Edit this page View Source CanTimeout Gets a value that determines whether the current stream can time out. Declaration public override bool CanTimeout { get; } Property Value Type Description bool A value that determines whether the current stream can time out. Overrides Stream.CanTimeout | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides Stream.CanWrite | Edit this page View Source LeaveOpen Leave the streams open when disposing? Declaration public bool LeaveOpen { get; set; } Property Value Type Description bool | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides Stream.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides Stream.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source ReadTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out. Declaration public override int ReadTimeout { get; set; } Property Value Type Description int A value, in milliseconds, that determines how long the stream will attempt to read before timing out. Overrides Stream.ReadTimeout Exceptions Type Condition InvalidOperationException The ReadTimeout method always throws an InvalidOperationException. | Edit this page View Source Readable Readable source stream Declaration public virtual tReadable Readable { get; } Property Value Type Description tReadable | Edit this page View Source State Status information Declaration public virtual IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> | Edit this page View Source Writable Writable target stream Declaration public virtual tWritable Writable { get; } Property Value Type Description tWritable | Edit this page View Source WriteTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out. Declaration public override int WriteTimeout { get; set; } Property Value Type Description int A value, in milliseconds, that determines how long the stream will attempt to write before timing out. Overrides Stream.WriteTimeout Exceptions Type Condition InvalidOperationException The WriteTimeout method always throws an InvalidOperationException. Methods | Edit this page View Source BeginRead(byte[], int, int, AsyncCallback?, object?) Begins an asynchronous read operation. (Consider using ReadAsync(byte[], int, int) instead.) Declaration public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback? callback, object? state) Parameters Type Name Description byte[] buffer The buffer to read the data into. int offset The byte offset in buffer at which to begin writing data read from the stream. int count The maximum number of bytes to read. AsyncCallback callback An optional asynchronous callback, to be called when the read is complete. object state A user-provided object that distinguishes this particular asynchronous read request from other requests. Returns Type Description IAsyncResult An IAsyncResult that represents the asynchronous read, which could still be pending. Overrides Stream.BeginRead(byte[], int, int, AsyncCallback, object) Exceptions Type Condition IOException Attempted an asynchronous read past the end of the stream, or a disk error occurs. ArgumentException One or more of the arguments is invalid. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException The current Stream implementation does not support the read operation. | Edit this page View Source BeginWrite(byte[], int, int, AsyncCallback?, object?) Begins an asynchronous write operation. (Consider using WriteAsync(byte[], int, int) instead.) Declaration public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback? callback, object? state) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The byte offset in buffer from which to begin writing. int count The maximum number of bytes to write. AsyncCallback callback An optional asynchronous callback, to be called when the write is complete. object state A user-provided object that distinguishes this particular asynchronous write request from other requests. Returns Type Description IAsyncResult An IAsyncResult that represents the asynchronous write, which could still be pending. Overrides Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Exceptions Type Condition IOException Attempted an asynchronous write past the end of the stream, or a disk error occurs. ArgumentException One or more of the arguments is invalid. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException The current Stream implementation does not support the write operation. | Edit this page View Source Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. Declaration public override void Close() Overrides StreamBase.Close() | Edit this page View Source CopyTo(Stream, int) Reads the bytes from the current stream and writes them to another stream, using a specified buffer size. Both streams positions are advanced by the number of bytes copied. Declaration public override void CopyTo(Stream destination, int bufferSize) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size of the buffer. This value must be greater than zero. The default size is 81920. Overrides Stream.CopyTo(Stream, int) Exceptions Type Condition ArgumentNullException destination is null. ArgumentOutOfRangeException bufferSize is negative or zero. NotSupportedException The current stream does not support reading. -or- destination does not support writing. ObjectDisposedException Either the current stream or destination were closed before the CopyTo(Stream) method was called. IOException An I/O error occurred. | Edit this page View Source CopyToAsync(Stream, int, CancellationToken) Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token. Both streams positions are advanced by the number of bytes copied. Declaration public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous copy operation. Overrides Stream.CopyToAsync(Stream, int, CancellationToken) Exceptions Type Condition ArgumentNullException destination is null. ArgumentOutOfRangeException buffersize is negative or zero. ObjectDisposedException Either the current stream or the destination stream is disposed. NotSupportedException The current stream does not support reading, or the destination stream does not support writing. | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides StreamBase.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override Task DisposeCore() Returns Type Description Task Overrides StreamBase.DisposeCore() | Edit this page View Source EndRead(IAsyncResult) Waits for the pending asynchronous read to complete. (Consider using ReadAsync(byte[], int, int) instead.) Declaration public override int EndRead(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult The reference to the pending asynchronous request to finish. Returns Type Description int The number of bytes read from the stream, between zero (0) and the number of bytes requested. ReadAsync returns zero (0) only if zero bytes were requested or if no more bytes will be available because it's at the end of the stream; otherwise, read operations do not complete until at least one byte is available. If zero bytes are requested, read operations may complete immediately or may not complete until at least one byte is available (but without consuming any data). Overrides Stream.EndRead(IAsyncResult) Exceptions Type Condition ArgumentNullException asyncResult is null. ArgumentException A handle to the pending read operation is not available. -or- The pending operation does not support reading. InvalidOperationException asyncResult did not originate from a BeginRead(byte[], int, int, AsyncCallback, object) method on the current stream. IOException The stream is closed or an internal error has occurred. | Edit this page View Source EndWrite(IAsyncResult) Ends an asynchronous write operation. (Consider using WriteAsync(byte[], int, int) instead.) Declaration public override void EndWrite(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult A reference to the outstanding asynchronous I/O request. Overrides Stream.EndWrite(IAsyncResult) Exceptions Type Condition ArgumentNullException asyncResult is null. ArgumentException A handle to the pending write operation is not available. -or- The pending operation does not support writing. InvalidOperationException asyncResult did not originate from a BeginWrite(byte[], int, int, AsyncCallback, object) method on the current stream. IOException The stream is closed or an internal error has occurred. | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides Stream.FlushAsync(CancellationToken) Exceptions Type Condition ObjectDisposedException The stream has been disposed. | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides Stream.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides Stream.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides Stream.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides Stream.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides Stream.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides Stream.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides Stream.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Implements IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BiDirectionalStream.html": {
    "href": "api/wan24.Core.BiDirectionalStream.html",
    "title": "Class BiDirectionalStream | wan24-Core",
    "keywords": "Class BiDirectionalStream Bi-directional stream Inheritance object MarshalByRefObject Stream StreamBase BiDirectionalStream<Stream, Stream> BiDirectionalStream Implements IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members BiDirectionalStream<Stream, Stream>.Readable BiDirectionalStream<Stream, Stream>.Writable BiDirectionalStream<Stream, Stream>.LeaveOpen BiDirectionalStream<Stream, Stream>.CanRead BiDirectionalStream<Stream, Stream>.CanSeek BiDirectionalStream<Stream, Stream>.CanWrite BiDirectionalStream<Stream, Stream>.CanTimeout BiDirectionalStream<Stream, Stream>.Length BiDirectionalStream<Stream, Stream>.Position BiDirectionalStream<Stream, Stream>.ReadTimeout BiDirectionalStream<Stream, Stream>.WriteTimeout BiDirectionalStream<Stream, Stream>.State BiDirectionalStream<Stream, Stream>.Seek(long, SeekOrigin) BiDirectionalStream<Stream, Stream>.SetLength(long) BiDirectionalStream<Stream, Stream>.Flush() BiDirectionalStream<Stream, Stream>.FlushAsync(CancellationToken) BiDirectionalStream<Stream, Stream>.Read(byte[], int, int) BiDirectionalStream<Stream, Stream>.Read(Span<byte>) BiDirectionalStream<Stream, Stream>.ReadAsync(byte[], int, int, CancellationToken) BiDirectionalStream<Stream, Stream>.ReadAsync(Memory<byte>, CancellationToken) BiDirectionalStream<Stream, Stream>.ReadByte() BiDirectionalStream<Stream, Stream>.Write(byte[], int, int) BiDirectionalStream<Stream, Stream>.Write(ReadOnlySpan<byte>) BiDirectionalStream<Stream, Stream>.WriteAsync(byte[], int, int, CancellationToken) BiDirectionalStream<Stream, Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) BiDirectionalStream<Stream, Stream>.WriteByte(byte) BiDirectionalStream<Stream, Stream>.CopyTo(Stream, int) BiDirectionalStream<Stream, Stream>.CopyToAsync(Stream, int, CancellationToken) BiDirectionalStream<Stream, Stream>.BeginRead(byte[], int, int, AsyncCallback, object) BiDirectionalStream<Stream, Stream>.EndRead(IAsyncResult) BiDirectionalStream<Stream, Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) BiDirectionalStream<Stream, Stream>.EndWrite(IAsyncResult) BiDirectionalStream<Stream, Stream>.Close() BiDirectionalStream<Stream, Stream>.Dispose(bool) BiDirectionalStream<Stream, Stream>.DisposeCore() StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.Close() StreamBase.DisposeAsync() StreamBase.Dispose(bool) StreamBase.DisposeCore() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.Flush() Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(byte[], int, int) Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Seek(long, SeekOrigin) Stream.SetLength(long) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(byte[], int, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanRead Stream.CanSeek Stream.CanTimeout Stream.CanWrite Stream.Length Stream.Position Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class BiDirectionalStream : BiDirectionalStream<Stream, Stream>, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source BiDirectionalStream(Stream, Stream, bool) Bi-directional stream Declaration public BiDirectionalStream(Stream readable, Stream writable, bool leaveOpen = false) Parameters Type Name Description Stream readable Readable source stream Stream writable Writable target stream bool leaveOpen Leave the streams open when disposing? Remarks Constructor Implements IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Bitmap.html": {
    "href": "api/wan24.Core.Bitmap.html",
    "title": "Class Bitmap | wan24-Core",
    "keywords": "Class Bitmap Bitmap (little endian) Inheritance object Bitmap Implements IEnumerable<bool> IDictionary<long, bool> ICollection<KeyValuePair<long, bool>> IReadOnlyDictionary<long, bool> IReadOnlyCollection<KeyValuePair<long, bool>> IEnumerable<KeyValuePair<long, bool>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class Bitmap : IEnumerable<bool>, IDictionary<long, bool>, ICollection<KeyValuePair<long, bool>>, IReadOnlyDictionary<long, bool>, IReadOnlyCollection<KeyValuePair<long, bool>>, IEnumerable<KeyValuePair<long, bool>>, IEnumerable Constructors | Edit this page View Source Bitmap(in byte[], in int, in int?) Constructor Declaration public Bitmap(in byte[] bitmap, in int increaseSize = 65535, in int? bitCount = null) Parameters Type Name Description byte[] bitmap Initial bitmap int increaseSize Number of bytes to enlarge the bitmap when adding new bits which overflow the current bitmap size int? bitCount Initial bit count (if null, the initial bit count will be the number of bits in the given initial bitmap) | Edit this page View Source Bitmap(in long, in int, in int) Constructor Declaration public Bitmap(in long initialSize = 65535, in int increaseSize = 65535, in int bitCount = 0) Parameters Type Name Description long initialSize Initial bitmap size in bytes int increaseSize Number of bytes to enlarge the bitmap when adding new bits which overflow the current bitmap size int bitCount Initial bit count Fields | Edit this page View Source _Map Bitmap Declaration protected byte[] _Map Field Value Type Description byte[] Properties | Edit this page View Source AsMemory Current bitmap as memory Declaration public ReadOnlyMemory<byte> AsMemory { get; } Property Value Type Description ReadOnlyMemory<byte> | Edit this page View Source BitCount Number of used bits Declaration public long BitCount { get; protected set; } Property Value Type Description long | Edit this page View Source IncreaseSize Number of bytes to enlarge the bitmap when adding new bits which overflow the current bitmap size Declaration public int IncreaseSize { get; } Property Value Type Description int | Edit this page View Source this[Index, Index] Get/set bits (not thread-safe) Declaration public bool[] this[in Index start, in Index end] { get; set; } Parameters Type Name Description Index start Start (inclusive) Index end End (exclusive) Property Value Type Description bool[] Bits Exceptions Type Condition ArgumentOutOfRangeException The range is invalid or the bitmap size changed during processing (lock SyncObject for thread-safety) | Edit this page View Source this[int, int] Get/set bits (not thread-safe) Declaration public bool[] this[in int start, in int end] { get; set; } Parameters Type Name Description int start Start (inclusive) int end End (exclusive) Property Value Type Description bool[] Bits Exceptions Type Condition ArgumentOutOfRangeException The range is invalid or the bitmap size changed during processing (lock SyncObject for thread-safety) | Edit this page View Source this[long] Get/set a bit Declaration public bool this[long offset] { get; set; } Parameters Type Name Description long offset Bit offset Property Value Type Description bool Bit | Edit this page View Source this[Range] Get/set bits (not thread-safe) Declaration public bool[] this[in Range range] { get; set; } Parameters Type Name Description Range range Range Property Value Type Description bool[] Bits Exceptions Type Condition InvalidOperationException The bitmap is too huge (>MaxValue bits) for indexed access ArgumentOutOfRangeException The range is invalid or the bitmap size changed during processing (lock SyncObject for thread-safety) | Edit this page View Source Map Current bitmap (the complete bit buffer, which may be larger than the current bit count) Declaration public ReadOnlyMemory<byte> Map { get; } Property Value Type Description ReadOnlyMemory<byte> | Edit this page View Source Size Bitmap size in bytes Declaration public long Size { get; } Property Value Type Description long | Edit this page View Source SyncObject An object for thread synchronization Declaration public object SyncObject { get; } Property Value Type Description object Methods | Edit this page View Source AddBits(params bool[]) Add bits Declaration public virtual long AddBits(params bool[] bits) Parameters Type Name Description bool[] bits Bits to add Returns Type Description long First new bit offset | Edit this page View Source AddBits(in int) Add bits Declaration public virtual long AddBits(in int count) Parameters Type Name Description int count Number of bits to add Returns Type Description long First new bit offset | Edit this page View Source AllBitsAreSet(in long, long?) Determine if all bits are set within a range Declaration public virtual bool AllBitsAreSet(in long startBitIncluding = 0, long? endBitIncluding = null) Parameters Type Name Description long startBitIncluding Start bit offset including long? endBitIncluding End bit offset including Returns Type Description bool If all bits are set | Edit this page View Source ExchangeBitmap(in byte[]) Exchange the bitmap Declaration public virtual byte[] ExchangeBitmap(in byte[] map) Parameters Type Name Description byte[] map New bitmap Returns Type Description byte[] Old bitmap | Edit this page View Source ExecuteWithEnsuredSpan<T>(in int, in int, in Func<ReadOnlyMemory<byte>, T>) Ensure executing a function having a size matching span of the bitmap Declaration protected T ExecuteWithEnsuredSpan<T>(in int offset, in int count, in Func<ReadOnlyMemory<byte>, T> function) Parameters Type Name Description int offset Byte offset int count Byte count Func<ReadOnlyMemory<byte>, T> function Function Returns Type Description T Return value Type Parameters Name Description T Return type | Edit this page View Source GetBits(long, in long) Get bits Declaration public virtual bool[] GetBits(long offset, in long count) Parameters Type Name Description long offset Bit offset long count Number of bits to get Returns Type Description bool[] Bits | Edit this page View Source GetByteCount(in long) Get the number of bytes required for covering a number of bits Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long GetByteCount(in long bitCount) Parameters Type Name Description long bitCount Bit count Returns Type Description long Byte count | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<bool> GetEnumerator() Returns Type Description IEnumerator<bool> An enumerator that can be used to iterate through the collection. | Edit this page View Source IsAnyBitSet(in long, long?) Determine if any bit is set within a range Declaration public virtual bool IsAnyBitSet(in long startBitIncluding = 0, long? endBitIncluding = null) Parameters Type Name Description long startBitIncluding Start bit offset including long? endBitIncluding End bit offset including Returns Type Description bool If any bit is set | Edit this page View Source SetAllBits(in bool, in long, long?) Set all bits Declaration public virtual void SetAllBits(in bool value, in long startBitIncluding = 0, long? endBitIncluding = null) Parameters Type Name Description bool value Value long startBitIncluding Start bit offset including long? endBitIncluding End bit offset including | Edit this page View Source SetBitCount(in long) Set a new bit count (when shrinking and later expanding, old bits won't be cleared!) Declaration public virtual void SetBitCount(in long count) Parameters Type Name Description long count Number of bits (must not exceed the bitmap size) | Edit this page View Source SetBits(in IEnumerable<bool>, long) Set bits Declaration public virtual void SetBits(in IEnumerable<bool> bits, long offset = 0) Parameters Type Name Description IEnumerable<bool> bits Bits to set long offset Start bit offset | Edit this page View Source SetBits(long, params bool[]) Set bits Declaration public virtual void SetBits(long offset, params bool[] bits) Parameters Type Name Description long offset Start bit offset bool[] bits Bits to set | Edit this page View Source SetSize(in int) Set a new bitmap size Declaration public virtual void SetSize(in int count) Parameters Type Name Description int count Number of bytes Exceptions Type Condition InternalBufferOverflowException New bitmap is larger than MaxValue | Edit this page View Source ToArray(in byte[]?) Get the bitmap as byte array Declaration public byte[] ToArray(in byte[]? buffer = null) Parameters Type Name Description byte[] buffer Target buffer Returns Type Description byte[] Bitmap Exceptions Type Condition OutOfMemoryException Bitmap is larger than MaxValue | Edit this page View Source ToByte(in int) Get the bitmap as byte Declaration public byte ToByte(in int offset = 0) Parameters Type Name Description int offset Offset Returns Type Description byte Value | Edit this page View Source ToInt(in int) Get the bitmap as int Declaration public int ToInt(in int offset = 0) Parameters Type Name Description int offset Offset Returns Type Description int Value | Edit this page View Source ToLong(in int) Get the bitmap as long Declaration public long ToLong(in int offset = 0) Parameters Type Name Description int offset Offset Returns Type Description long Value | Edit this page View Source ToSByte(in int) Get the bitmap as signed byte Declaration public sbyte ToSByte(in int offset = 0) Parameters Type Name Description int offset Offset Returns Type Description sbyte Value | Edit this page View Source ToShort(in int) Get the bitmap as short Declaration public short ToShort(in int offset = 0) Parameters Type Name Description int offset Offset Returns Type Description short Value | Edit this page View Source ToSpan(in Span<byte>) Get the bitmap as byte array Declaration public Span<byte> ToSpan(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Target buffer Returns Type Description Span<byte> Bitmap Exceptions Type Condition OutOfMemoryException Bitmap is larger than MaxValue | Edit this page View Source ToUInt(in int) Get the bitmap as unsigned int Declaration public uint ToUInt(in int offset = 0) Parameters Type Name Description int offset Offset Returns Type Description uint Value | Edit this page View Source ToULong(in int) Get the bitmap as unsigned long Declaration public ulong ToULong(in int offset = 0) Parameters Type Name Description int offset Offset Returns Type Description ulong Value | Edit this page View Source ToUShort(in int) Get the bitmap as unsigned short Declaration public ushort ToUShort(in int offset = 0) Parameters Type Name Description int offset Offset Returns Type Description ushort Value | Edit this page View Source UpdateBit(in long, in bool) Update a bit Declaration public virtual bool UpdateBit(in long offset, in bool value) Parameters Type Name Description long offset Bit offset bool value Value Returns Type Description bool Was updated? Operators | Edit this page View Source implicit operator Bitmap(in bool[]) Cast from bit array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Bitmap(in bool[] bits) Parameters Type Name Description bool[] bits Bits Returns Type Description Bitmap | Edit this page View Source implicit operator Bitmap(in byte) Cast from byte Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Bitmap(in byte value) Parameters Type Name Description byte value Value Returns Type Description Bitmap | Edit this page View Source implicit operator Bitmap(in byte[]) Cast from byte array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Bitmap(in byte[] bitmap) Parameters Type Name Description byte[] bitmap Bitmap Returns Type Description Bitmap | Edit this page View Source implicit operator Bitmap(in Enum) Cast from enumeration Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator Bitmap(in Enum value) Parameters Type Name Description Enum value Value Returns Type Description Bitmap | Edit this page View Source implicit operator Bitmap(in short) Cast from short Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Bitmap(in short value) Parameters Type Name Description short value Value Returns Type Description Bitmap | Edit this page View Source implicit operator Bitmap(in int) Cast from int Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Bitmap(in int value) Parameters Type Name Description int value Value Returns Type Description Bitmap | Edit this page View Source implicit operator Bitmap(in long) Cast from long Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Bitmap(in long value) Parameters Type Name Description long value Value Returns Type Description Bitmap | Edit this page View Source implicit operator Bitmap(in sbyte) Cast from signed byte Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Bitmap(in sbyte value) Parameters Type Name Description sbyte value Value Returns Type Description Bitmap | Edit this page View Source implicit operator Bitmap(in ushort) Cast from unsigned short Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Bitmap(in ushort value) Parameters Type Name Description ushort value Value Returns Type Description Bitmap | Edit this page View Source implicit operator Bitmap(in uint) Cast from unsigned int Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Bitmap(in uint value) Parameters Type Name Description uint value Value Returns Type Description Bitmap | Edit this page View Source implicit operator Bitmap(in ulong) Cast from unsigned long Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Bitmap(in ulong value) Parameters Type Name Description ulong value Value Returns Type Description Bitmap | Edit this page View Source implicit operator bool[](in Bitmap) Cast as bit array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool[](in Bitmap bitmap) Parameters Type Name Description Bitmap bitmap Bitmap Returns Type Description bool[] | Edit this page View Source implicit operator byte[](in Bitmap) Cast as byte array Declaration public static implicit operator byte[](in Bitmap bitmap) Parameters Type Name Description Bitmap bitmap Bitmap Returns Type Description byte[] | Edit this page View Source implicit operator long(in Bitmap) Cast as bit count Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator long(in Bitmap bitmap) Parameters Type Name Description Bitmap bitmap Bitmap Returns Type Description long | Edit this page View Source implicit operator Memory<byte>(in Bitmap) Cast as memory Declaration public static implicit operator Memory<byte>(in Bitmap bitmap) Parameters Type Name Description Bitmap bitmap Bitmap Returns Type Description Memory<byte> | Edit this page View Source implicit operator ReadOnlyMemory<byte>(in Bitmap) Cast as memory Declaration public static implicit operator ReadOnlyMemory<byte>(in Bitmap bitmap) Parameters Type Name Description Bitmap bitmap Bitmap Returns Type Description ReadOnlyMemory<byte> | Edit this page View Source implicit operator ReadOnlySpan<byte>(in Bitmap) Cast as span Declaration public static implicit operator ReadOnlySpan<byte>(in Bitmap bitmap) Parameters Type Name Description Bitmap bitmap Bitmap Returns Type Description ReadOnlySpan<byte> | Edit this page View Source implicit operator Span<byte>(in Bitmap) Cast as span Declaration public static implicit operator Span<byte>(in Bitmap bitmap) Parameters Type Name Description Bitmap bitmap Bitmap Returns Type Description Span<byte> Implements IEnumerable<T> IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods CollectionExtensions.AddRangeAsync<T>(ICollection<T>, IAsyncEnumerable<T>, CancellationToken) CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.AddRange<T>(ICollection<T>, params T[]) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BitwiseExtensions.html": {
    "href": "api/wan24.Core.BitwiseExtensions.html",
    "title": "Class BitwiseExtensions | wan24-Core",
    "keywords": "Class BitwiseExtensions Bitwise extensions Inheritance object BitwiseExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class BitwiseExtensions Methods | Edit this page View Source AddFlags(byte, in byte) Add flags Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte AddFlags(this byte value, in byte flags) Parameters Type Name Description byte value Value byte flags Flags Returns Type Description byte Value | Edit this page View Source AddFlags(short, in short) Add flags Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static short AddFlags(this short value, in short flags) Parameters Type Name Description short value Value short flags Flags Returns Type Description short Value | Edit this page View Source AddFlags(int, in int) Add flags Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int AddFlags(this int value, in int flags) Parameters Type Name Description int value Value int flags Flags Returns Type Description int Value | Edit this page View Source AddFlags(long, in long) Add flags Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long AddFlags(this long value, in long flags) Parameters Type Name Description long value Value long flags Flags Returns Type Description long Value | Edit this page View Source AddFlags(sbyte, in sbyte) Add flags Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static sbyte AddFlags(this sbyte value, in sbyte flags) Parameters Type Name Description sbyte value Value sbyte flags Flags Returns Type Description sbyte Value | Edit this page View Source AddFlags(ushort, in ushort) Add flags Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ushort AddFlags(this ushort value, in ushort flags) Parameters Type Name Description ushort value Value ushort flags Flags Returns Type Description ushort Value | Edit this page View Source AddFlags(uint, in uint) Add flags Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static uint AddFlags(this uint value, in uint flags) Parameters Type Name Description uint value Value uint flags Flags Returns Type Description uint Value | Edit this page View Source AddFlags(ulong, in ulong) Add flags Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ulong AddFlags(this ulong value, in ulong flags) Parameters Type Name Description ulong value Value ulong flags Flags Returns Type Description ulong Value | Edit this page View Source And(byte, in byte) Logical AND Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte And(this byte value, in byte other) Parameters Type Name Description byte value Value byte other Other value Returns Type Description byte Value | Edit this page View Source And(short, in short) Logical AND Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static short And(this short value, in short other) Parameters Type Name Description short value Value short other Other value Returns Type Description short Value | Edit this page View Source And(int, in int) Logical AND Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int And(this int value, in int other) Parameters Type Name Description int value Value int other Other value Returns Type Description int Value | Edit this page View Source And(long, in long) Logical AND Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long And(this long value, in long other) Parameters Type Name Description long value Value long other Other value Returns Type Description long Value | Edit this page View Source And(sbyte, in sbyte) Logical AND Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static sbyte And(this sbyte value, in sbyte other) Parameters Type Name Description sbyte value Value sbyte other Other value Returns Type Description sbyte Value | Edit this page View Source And(ushort, in ushort) Logical AND Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ushort And(this ushort value, in ushort other) Parameters Type Name Description ushort value Value ushort other Other value Returns Type Description ushort Value | Edit this page View Source And(uint, in uint) Logical AND Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static uint And(this uint value, in uint other) Parameters Type Name Description uint value Value uint other Other value Returns Type Description uint Value | Edit this page View Source And(ulong, in ulong) Logical AND Declaration public static ulong And(this ulong value, in ulong other) Parameters Type Name Description ulong value Value ulong other Other value Returns Type Description ulong Value | Edit this page View Source HasFlags(byte, in byte) Has flags? Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool HasFlags(this byte value, in byte flags) Parameters Type Name Description byte value Value byte flags Flags Returns Type Description bool Has the flags? | Edit this page View Source HasFlags(short, in short) Has flags? Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool HasFlags(this short value, in short flags) Parameters Type Name Description short value Value short flags Flags Returns Type Description bool Has the flags? | Edit this page View Source HasFlags(int, in int) Has flags? Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool HasFlags(this int value, in int flags) Parameters Type Name Description int value Value int flags Flags Returns Type Description bool Has the flags? | Edit this page View Source HasFlags(long, in long) Has flags? Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool HasFlags(this long value, in long flags) Parameters Type Name Description long value Value long flags Flags Returns Type Description bool Has the flags? | Edit this page View Source HasFlags(sbyte, in sbyte) Has flags? Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool HasFlags(this sbyte value, in sbyte flags) Parameters Type Name Description sbyte value Value sbyte flags Flags Returns Type Description bool Has the flags? | Edit this page View Source HasFlags(ushort, in ushort) Has flags? Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool HasFlags(this ushort value, in ushort flags) Parameters Type Name Description ushort value Value ushort flags Flags Returns Type Description bool Has the flags? | Edit this page View Source HasFlags(uint, in uint) Has flags? Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool HasFlags(this uint value, in uint flags) Parameters Type Name Description uint value Value uint flags Flags Returns Type Description bool Has the flags? | Edit this page View Source HasFlags(ulong, in ulong) Has flags? Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool HasFlags(this ulong value, in ulong flags) Parameters Type Name Description ulong value Value ulong flags Flags Returns Type Description bool Has the flags? | Edit this page View Source Or(byte, in byte) Logical OR Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte Or(this byte value, in byte other) Parameters Type Name Description byte value Value byte other Other value Returns Type Description byte Value | Edit this page View Source Or(short, in short) Logical OR Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static short Or(this short value, in short other) Parameters Type Name Description short value Value short other Other value Returns Type Description short Value | Edit this page View Source Or(int, in int) Logical OR Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int Or(this int value, in int other) Parameters Type Name Description int value Value int other Other value Returns Type Description int Value | Edit this page View Source Or(long, in long) Logical OR Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long Or(this long value, in long other) Parameters Type Name Description long value Value long other Other value Returns Type Description long Value | Edit this page View Source Or(sbyte, in sbyte) Logical OR Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static sbyte Or(this sbyte value, in sbyte other) Parameters Type Name Description sbyte value Value sbyte other Other value Returns Type Description sbyte Value | Edit this page View Source Or(ushort, in ushort) Logical OR Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ushort Or(this ushort value, in ushort other) Parameters Type Name Description ushort value Value ushort other Other value Returns Type Description ushort Value | Edit this page View Source Or(uint, in uint) Logical OR Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static uint Or(this uint value, in uint other) Parameters Type Name Description uint value Value uint other Other value Returns Type Description uint Value | Edit this page View Source Or(ulong, in ulong) Logical OR Declaration public static ulong Or(this ulong value, in ulong other) Parameters Type Name Description ulong value Value ulong other Other value Returns Type Description ulong Value | Edit this page View Source RemoveFlags(byte, in byte) Remove flags Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte RemoveFlags(this byte value, in byte flags) Parameters Type Name Description byte value Value byte flags Flags Returns Type Description byte Value | Edit this page View Source RemoveFlags(short, in short) Remove flags Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static short RemoveFlags(this short value, in short flags) Parameters Type Name Description short value Value short flags Flags Returns Type Description short Value | Edit this page View Source RemoveFlags(int, in int) Remove flags Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int RemoveFlags(this int value, in int flags) Parameters Type Name Description int value Value int flags Flags Returns Type Description int Value | Edit this page View Source RemoveFlags(long, in long) Remove flags Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long RemoveFlags(this long value, in long flags) Parameters Type Name Description long value Value long flags Flags Returns Type Description long Value | Edit this page View Source RemoveFlags(sbyte, in sbyte) Remove flags Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static sbyte RemoveFlags(this sbyte value, in sbyte flags) Parameters Type Name Description sbyte value Value sbyte flags Flags Returns Type Description sbyte Value | Edit this page View Source RemoveFlags(ushort, in ushort) Remove flags Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ushort RemoveFlags(this ushort value, in ushort flags) Parameters Type Name Description ushort value Value ushort flags Flags Returns Type Description ushort Value | Edit this page View Source RemoveFlags(uint, in uint) Remove flags Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static uint RemoveFlags(this uint value, in uint flags) Parameters Type Name Description uint value Value uint flags Flags Returns Type Description uint Value | Edit this page View Source RemoveFlags(ulong, in ulong) Remove flags Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ulong RemoveFlags(this ulong value, in ulong flags) Parameters Type Name Description ulong value Value ulong flags Flags Returns Type Description ulong Value | Edit this page View Source RotateLeft(byte, in int) Rotate bits left Declaration public static byte RotateLeft(this byte value, in int bits) Parameters Type Name Description byte value Value int bits Bits Returns Type Description byte Value | Edit this page View Source RotateLeft(ushort, in int) Rotate bits left Declaration public static ushort RotateLeft(this ushort value, in int bits) Parameters Type Name Description ushort value Value int bits Bits Returns Type Description ushort Value | Edit this page View Source RotateLeft(uint, in int) Rotate bits left Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static uint RotateLeft(this uint value, in int bits) Parameters Type Name Description uint value Value int bits Bits Returns Type Description uint Value | Edit this page View Source RotateLeft(ulong, in int) Rotate bits left Declaration public static ulong RotateLeft(this ulong value, in int bits) Parameters Type Name Description ulong value Value int bits Bits Returns Type Description ulong Value | Edit this page View Source RotateRight(byte, in int) Rotate bits right Declaration public static byte RotateRight(this byte value, in int bits) Parameters Type Name Description byte value Value int bits Bits Returns Type Description byte Value | Edit this page View Source RotateRight(ushort, in int) Rotate bits right Declaration public static ushort RotateRight(this ushort value, in int bits) Parameters Type Name Description ushort value Value int bits Bits Returns Type Description ushort Value | Edit this page View Source RotateRight(uint, in int) Rotate bits right Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static uint RotateRight(this uint value, in int bits) Parameters Type Name Description uint value Value int bits Bits Returns Type Description uint Value | Edit this page View Source RotateRight(ulong, in int) Rotate bits right Declaration public static ulong RotateRight(this ulong value, in int bits) Parameters Type Name Description ulong value Value int bits Bits Returns Type Description ulong Value | Edit this page View Source ShiftLeft(byte, in int) Shift left Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte ShiftLeft(this byte value, in int bits) Parameters Type Name Description byte value Value int bits Bits Returns Type Description byte Value | Edit this page View Source ShiftLeft(short, in int) Shift left Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static short ShiftLeft(this short value, in int bits) Parameters Type Name Description short value Value int bits Bits Returns Type Description short Value | Edit this page View Source ShiftLeft(int, in int) Shift left Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int ShiftLeft(this int value, in int bits) Parameters Type Name Description int value Value int bits Bits Returns Type Description int Value | Edit this page View Source ShiftLeft(long, in int) Shift left Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long ShiftLeft(this long value, in int bits) Parameters Type Name Description long value Value int bits Bits Returns Type Description long Value | Edit this page View Source ShiftLeft(sbyte, in int) Shift left Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static sbyte ShiftLeft(this sbyte value, in int bits) Parameters Type Name Description sbyte value Value int bits Bits Returns Type Description sbyte Value | Edit this page View Source ShiftLeft(ushort, in int) Shift left Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ushort ShiftLeft(this ushort value, in int bits) Parameters Type Name Description ushort value Value int bits Bits Returns Type Description ushort Value | Edit this page View Source ShiftLeft(uint, in int) Shift left Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static uint ShiftLeft(this uint value, in int bits) Parameters Type Name Description uint value Value int bits Bits Returns Type Description uint Value | Edit this page View Source ShiftLeft(ulong, in int) Shift left Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ulong ShiftLeft(this ulong value, in int bits) Parameters Type Name Description ulong value Value int bits Bits Returns Type Description ulong Value | Edit this page View Source ShiftRight(byte, in int) Shift left Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte ShiftRight(this byte value, in int bits) Parameters Type Name Description byte value Value int bits Bits Returns Type Description byte Value | Edit this page View Source ShiftRight(short, in int) Shift left Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static short ShiftRight(this short value, in int bits) Parameters Type Name Description short value Value int bits Bits Returns Type Description short Value | Edit this page View Source ShiftRight(int, in int) Shift left Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int ShiftRight(this int value, in int bits) Parameters Type Name Description int value Value int bits Bits Returns Type Description int Value | Edit this page View Source ShiftRight(long, in int) Shift left Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long ShiftRight(this long value, in int bits) Parameters Type Name Description long value Value int bits Bits Returns Type Description long Value | Edit this page View Source ShiftRight(sbyte, in int) Shift left Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static sbyte ShiftRight(this sbyte value, in int bits) Parameters Type Name Description sbyte value Value int bits Bits Returns Type Description sbyte Value | Edit this page View Source ShiftRight(ushort, in int) Shift left Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ushort ShiftRight(this ushort value, in int bits) Parameters Type Name Description ushort value Value int bits Bits Returns Type Description ushort Value | Edit this page View Source ShiftRight(uint, in int) Shift left Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static uint ShiftRight(this uint value, in int bits) Parameters Type Name Description uint value Value int bits Bits Returns Type Description uint Value | Edit this page View Source ShiftRight(ulong, in int) Shift left Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ulong ShiftRight(this ulong value, in int bits) Parameters Type Name Description ulong value Value int bits Bits Returns Type Description ulong Value | Edit this page View Source ToByte(short) Cast as byte Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte ToByte(this short value) Parameters Type Name Description short value Value Returns Type Description byte Value | Edit this page View Source ToByte(int) Cast as byte Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte ToByte(this int value) Parameters Type Name Description int value Value Returns Type Description byte Value | Edit this page View Source ToByte(long) Cast as byte Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte ToByte(this long value) Parameters Type Name Description long value Value Returns Type Description byte Value | Edit this page View Source ToByte(sbyte) Cast as byte Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte ToByte(this sbyte value) Parameters Type Name Description sbyte value Value Returns Type Description byte Value | Edit this page View Source ToByte(ushort) Cast as byte Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte ToByte(this ushort value) Parameters Type Name Description ushort value Value Returns Type Description byte Value | Edit this page View Source ToByte(uint) Cast as byte Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte ToByte(this uint value) Parameters Type Name Description uint value Value Returns Type Description byte Value | Edit this page View Source ToByte(ulong) Cast as byte Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte ToByte(this ulong value) Parameters Type Name Description ulong value Value Returns Type Description byte Value | Edit this page View Source ToInt(byte) Cast as integer Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int ToInt(this byte value) Parameters Type Name Description byte value Value Returns Type Description int Value | Edit this page View Source ToInt(short) Cast as integer Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int ToInt(this short value) Parameters Type Name Description short value Value Returns Type Description int Value | Edit this page View Source ToInt(long) Cast as integer Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int ToInt(this long value) Parameters Type Name Description long value Value Returns Type Description int Value | Edit this page View Source ToInt(sbyte) Cast as integer Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int ToInt(this sbyte value) Parameters Type Name Description sbyte value Value Returns Type Description int Value | Edit this page View Source ToInt(ushort) Cast as integer Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int ToInt(this ushort value) Parameters Type Name Description ushort value Value Returns Type Description int Value | Edit this page View Source ToInt(uint) Cast as integer Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int ToInt(this uint value) Parameters Type Name Description uint value Value Returns Type Description int Value | Edit this page View Source ToInt(ulong) Cast as integer Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int ToInt(this ulong value) Parameters Type Name Description ulong value Value Returns Type Description int Value | Edit this page View Source ToLong(byte) Cast as long Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long ToLong(this byte value) Parameters Type Name Description byte value Value Returns Type Description long Value | Edit this page View Source ToLong(short) Cast as long Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long ToLong(this short value) Parameters Type Name Description short value Value Returns Type Description long Value | Edit this page View Source ToLong(int) Cast as long Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long ToLong(this int value) Parameters Type Name Description int value Value Returns Type Description long Value | Edit this page View Source ToLong(sbyte) Cast as long Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long ToLong(this sbyte value) Parameters Type Name Description sbyte value Value Returns Type Description long Value | Edit this page View Source ToLong(ushort) Cast as long Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long ToLong(this ushort value) Parameters Type Name Description ushort value Value Returns Type Description long Value | Edit this page View Source ToLong(uint) Cast as long Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long ToLong(this uint value) Parameters Type Name Description uint value Value Returns Type Description long Value | Edit this page View Source ToLong(ulong) Cast as long Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long ToLong(this ulong value) Parameters Type Name Description ulong value Value Returns Type Description long Value | Edit this page View Source ToSByte(byte) Cast as signed byte Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static sbyte ToSByte(this byte value) Parameters Type Name Description byte value Value Returns Type Description sbyte Value | Edit this page View Source ToSByte(short) Cast as signed byte Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static sbyte ToSByte(this short value) Parameters Type Name Description short value Value Returns Type Description sbyte Value | Edit this page View Source ToSByte(int) Cast as signed byte Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static sbyte ToSByte(this int value) Parameters Type Name Description int value Value Returns Type Description sbyte Value | Edit this page View Source ToSByte(long) Cast as signed byte Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static sbyte ToSByte(this long value) Parameters Type Name Description long value Value Returns Type Description sbyte Value | Edit this page View Source ToSByte(ushort) Cast as signed byte Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static sbyte ToSByte(this ushort value) Parameters Type Name Description ushort value Value Returns Type Description sbyte Value | Edit this page View Source ToSByte(uint) Cast as signed byte Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static sbyte ToSByte(this uint value) Parameters Type Name Description uint value Value Returns Type Description sbyte Value | Edit this page View Source ToSByte(ulong) Cast as signed byte Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static sbyte ToSByte(this ulong value) Parameters Type Name Description ulong value Value Returns Type Description sbyte Value | Edit this page View Source ToShort(byte) Cast as short Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static short ToShort(this byte value) Parameters Type Name Description byte value Value Returns Type Description short Value | Edit this page View Source ToShort(int) Cast as short Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static short ToShort(this int value) Parameters Type Name Description int value Value Returns Type Description short Value | Edit this page View Source ToShort(long) Cast as short Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static short ToShort(this long value) Parameters Type Name Description long value Value Returns Type Description short Value | Edit this page View Source ToShort(sbyte) Cast as short Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static short ToShort(this sbyte value) Parameters Type Name Description sbyte value Value Returns Type Description short Value | Edit this page View Source ToShort(ushort) Cast as short Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static short ToShort(this ushort value) Parameters Type Name Description ushort value Value Returns Type Description short Value | Edit this page View Source ToShort(uint) Cast as short Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static short ToShort(this uint value) Parameters Type Name Description uint value Value Returns Type Description short Value | Edit this page View Source ToShort(ulong) Cast as short Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static short ToShort(this ulong value) Parameters Type Name Description ulong value Value Returns Type Description short Value | Edit this page View Source ToUInt(byte) Cast as unsigned integer Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static uint ToUInt(this byte value) Parameters Type Name Description byte value Value Returns Type Description uint Value | Edit this page View Source ToUInt(short) Cast as unsigned integer Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static uint ToUInt(this short value) Parameters Type Name Description short value Value Returns Type Description uint Value | Edit this page View Source ToUInt(int) Cast as unsigned integer Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static uint ToUInt(this int value) Parameters Type Name Description int value Value Returns Type Description uint Value | Edit this page View Source ToUInt(long) Cast as unsigned integer Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static uint ToUInt(this long value) Parameters Type Name Description long value Value Returns Type Description uint Value | Edit this page View Source ToUInt(sbyte) Cast as unsigned integer Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static uint ToUInt(this sbyte value) Parameters Type Name Description sbyte value Value Returns Type Description uint Value | Edit this page View Source ToUInt(ushort) Cast as unsigned integer Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static uint ToUInt(this ushort value) Parameters Type Name Description ushort value Value Returns Type Description uint Value | Edit this page View Source ToUInt(ulong) Cast as unsigned integer Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static uint ToUInt(this ulong value) Parameters Type Name Description ulong value Value Returns Type Description uint Value | Edit this page View Source ToULong(byte) Cast as unsigned long Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ulong ToULong(this byte value) Parameters Type Name Description byte value Value Returns Type Description ulong Value | Edit this page View Source ToULong(short) Cast as unsigned long Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ulong ToULong(this short value) Parameters Type Name Description short value Value Returns Type Description ulong Value | Edit this page View Source ToULong(int) Cast as unsigned long Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ulong ToULong(this int value) Parameters Type Name Description int value Value Returns Type Description ulong Value | Edit this page View Source ToULong(long) Cast as unsigned long Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ulong ToULong(this long value) Parameters Type Name Description long value Value Returns Type Description ulong Value | Edit this page View Source ToULong(sbyte) Cast as unsigned long Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ulong ToULong(this sbyte value) Parameters Type Name Description sbyte value Value Returns Type Description ulong Value | Edit this page View Source ToULong(ushort) Cast as unsigned long Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ulong ToULong(this ushort value) Parameters Type Name Description ushort value Value Returns Type Description ulong Value | Edit this page View Source ToULong(uint) Cast as unsigned long Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ulong ToULong(this uint value) Parameters Type Name Description uint value Value Returns Type Description ulong Value | Edit this page View Source ToUShort(byte) Cast as unsigned short Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ushort ToUShort(this byte value) Parameters Type Name Description byte value Value Returns Type Description ushort Value | Edit this page View Source ToUShort(short) Cast as unsigned short Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ushort ToUShort(this short value) Parameters Type Name Description short value Value Returns Type Description ushort Value | Edit this page View Source ToUShort(int) Cast as unsigned short Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ushort ToUShort(this int value) Parameters Type Name Description int value Value Returns Type Description ushort Value | Edit this page View Source ToUShort(long) Cast as unsigned short Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ushort ToUShort(this long value) Parameters Type Name Description long value Value Returns Type Description ushort Value | Edit this page View Source ToUShort(sbyte) Cast as unsigned short Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ushort ToUShort(this sbyte value) Parameters Type Name Description sbyte value Value Returns Type Description ushort Value | Edit this page View Source ToUShort(uint) Cast as unsigned short Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ushort ToUShort(this uint value) Parameters Type Name Description uint value Value Returns Type Description ushort Value | Edit this page View Source ToUShort(ulong) Cast as unsigned short Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ushort ToUShort(this ulong value) Parameters Type Name Description ulong value Value Returns Type Description ushort Value | Edit this page View Source Xor(byte, in byte) Logical XOR Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte Xor(this byte value, in byte other) Parameters Type Name Description byte value Value byte other Other value Returns Type Description byte Value | Edit this page View Source Xor(short, in short) Logical XOR Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static short Xor(this short value, in short other) Parameters Type Name Description short value Value short other Other value Returns Type Description short Value | Edit this page View Source Xor(int, in int) Logical XOR Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int Xor(this int value, in int other) Parameters Type Name Description int value Value int other Other value Returns Type Description int Value | Edit this page View Source Xor(long, in long) Logical XOR Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long Xor(this long value, in long other) Parameters Type Name Description long value Value long other Other value Returns Type Description long Value | Edit this page View Source Xor(sbyte, in sbyte) Logical XOR Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static sbyte Xor(this sbyte value, in sbyte other) Parameters Type Name Description sbyte value Value sbyte other Other value Returns Type Description sbyte Value | Edit this page View Source Xor(ushort, in ushort) Logical XOR Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ushort Xor(this ushort value, in ushort other) Parameters Type Name Description ushort value Value ushort other Other value Returns Type Description ushort Value | Edit this page View Source Xor(uint, in uint) Logical XOR Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static uint Xor(this uint value, in uint other) Parameters Type Name Description uint value Value uint other Other value Returns Type Description uint Value | Edit this page View Source Xor(ulong, in ulong) Logical XOR Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ulong Xor(this ulong value, in ulong other) Parameters Type Name Description ulong value Value ulong other Other value Returns Type Description ulong Value"
  },
  "api/wan24.Core.BlockingBufferStream.Event_Delegate.html": {
    "href": "api/wan24.Core.BlockingBufferStream.Event_Delegate.html",
    "title": "Delegate BlockingBufferStream.Event_Delegate | wan24-Core",
    "keywords": "Delegate BlockingBufferStream.Event_Delegate Delegate for an event handler Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void BlockingBufferStream.Event_Delegate(BlockingBufferStream stream, EventArgs e) Parameters Type Name Description BlockingBufferStream stream Stream EventArgs e Arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BlockingBufferStream.html": {
    "href": "api/wan24.Core.BlockingBufferStream.html",
    "title": "Class BlockingBufferStream | wan24-Core",
    "keywords": "Class BlockingBufferStream Blocking buffer stream (reading blocks until (all, if aggressive) data is available, writing until the buffer was red completely; reading/writing is synchronized) Inheritance object MarshalByRefObject Stream StreamBase BlockingBufferStream BackgroundProcessingStream Implements IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.Close() StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class BlockingBufferStream : StreamBase, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source BlockingBufferStream(in int, in bool) Constructor Declaration public BlockingBufferStream(in int bufferSize, in bool clear = false) Parameters Type Name Description int bufferSize Buffer size in bytes bool clear Clear the buffer when disposing? Fields | Edit this page View Source Buffer Buffer Declaration protected readonly RentedArray<byte> Buffer Field Value Type Description RentedArray<byte> | Edit this page View Source BufferSync Thread synchronization for buffer access Declaration protected readonly SemaphoreSync BufferSync Field Value Type Description SemaphoreSync | Edit this page View Source DataEvent Data event (raised when having data for reading) Declaration protected readonly ResetEvent DataEvent Field Value Type Description ResetEvent | Edit this page View Source ReadOffset Read byte offset Declaration protected int ReadOffset Field Value Type Description int | Edit this page View Source SpaceEvent Space event (raised when having space for writing) Declaration protected readonly ResetEvent SpaceEvent Field Value Type Description ResetEvent | Edit this page View Source WriteOffset Write byte offset Declaration protected int WriteOffset Field Value Type Description int | Edit this page View Source _IsEndOfFile Is at the end of the file? Declaration protected bool _IsEndOfFile Field Value Type Description bool | Edit this page View Source _Length Length in bytes Declaration protected long _Length Field Value Type Description long | Edit this page View Source _Position Byte offset Declaration protected long _Position Field Value Type Description long Properties | Edit this page View Source AggressiveReadBlocking Block until the requested amount of data was red? Declaration public bool AggressiveReadBlocking { get; set; } Property Value Type Description bool | Edit this page View Source AutoReorg Automatic reorganize the buffer? Declaration public bool AutoReorg { get; set; } Property Value Type Description bool | Edit this page View Source Available Data in bytes available for reading unblocked Declaration public int Available { get; } Property Value Type Description int | Edit this page View Source BufferSize Buffer size in bytes Declaration public int BufferSize { get; } Property Value Type Description int | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override sealed bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides Stream.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override sealed bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides Stream.CanSeek | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides Stream.CanWrite | Edit this page View Source IsEndOfFile Is at the end of the file? Declaration public bool IsEndOfFile { get; set; } Property Value Type Description bool | Edit this page View Source IsReadBlocked Is reading blocked? Declaration public bool IsReadBlocked { get; } Property Value Type Description bool | Edit this page View Source IsWriteBlocked Is writing blocked? Declaration public bool IsWriteBlocked { get; } Property Value Type Description bool | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override sealed long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides Stream.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override sealed long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides Stream.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source ReadIncomplete Read incomplete sequences? (will return incomplete sequences with AggressiveReadBlocking on false, but blocks when nothing was red) Declaration public bool ReadIncomplete { get; set; } Property Value Type Description bool | Edit this page View Source SpaceLeft Space in bytes left in the buffer for writing unblocked Declaration public int SpaceLeft { get; } Property Value Type Description int | Edit this page View Source State Status information Declaration public virtual IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Methods | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides StreamBase.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override Task DisposeCore() Returns Type Description Task Overrides StreamBase.DisposeCore() | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override sealed void Flush() Overrides Stream.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source RaiseOnDataAvailable() Raise the OnDataAvailable event Declaration protected virtual void RaiseOnDataAvailable() | Edit this page View Source RaiseOnNeedData() Raise the OnNeedData event Declaration protected virtual void RaiseOnNeedData() | Edit this page View Source RaiseOnNeedSpace() Raise the OnNeedSpace event Declaration protected virtual void RaiseOnNeedSpace() | Edit this page View Source RaiseOnSpaceAvailable() Raise the OnSpaceAvailable event Declaration protected virtual void RaiseOnSpaceAvailable() | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override sealed int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides Stream.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides Stream.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override sealed Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides Stream.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source ReorganizeBuffer() Reorganize the buffer (may give more space for writing and unblock) Declaration public bool ReorganizeBuffer() Returns Type Description bool If more space for writing is available now | Edit this page View Source ReorganizeBufferAsync(CancellationToken) Reorganize the buffer (may give more space for writing and unblock) Declaration public Task<bool> ReorganizeBufferAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If more space for writing is available now | Edit this page View Source ResetBuffer() Reset the buffer Declaration protected void ResetBuffer() | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override sealed long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetIsEndOfFileAsync(CancellationToken) Set the end of the file Declaration public Task SetIsEndOfFileAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override sealed void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides Stream.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source TryRead(Span<byte>) Try reading as much data as available without blocking Declaration public virtual int TryRead(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description int Number of bytes written into the buffer | Edit this page View Source TryReadAsync(Memory<byte>, CancellationToken) Try reading as much data as available without blocking Declaration public virtual ValueTask<int> TryReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<int> Number of bytes written into the buffer | Edit this page View Source TryWrite(ReadOnlySpan<byte>) Try writing a buffer without blocking Declaration public virtual int TryWrite(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer Buffer Returns Type Description int Number of bytes written | Edit this page View Source TryWriteAsync(ReadOnlyMemory<byte>, CancellationToken) Try writing a buffer without blocking Declaration public virtual ValueTask<int> TryWriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<int> Number of bytes written | Edit this page View Source WaitData(CancellationToken) Wait for data being available Declaration public void WaitData(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token | Edit this page View Source WaitDataAsync(CancellationToken) Wait for data being available Declaration public Task WaitDataAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source WaitSpace(CancellationToken) Wait for buffer space for writing Declaration public void WaitSpace(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token | Edit this page View Source WaitSpaceAsync(CancellationToken) Wait for buffer space for writing Declaration public Task WaitSpaceAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override sealed void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides Stream.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides Stream.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override sealed Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides Stream.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Events | Edit this page View Source OnDataAvailable Raised when data is available for reading Declaration public event BlockingBufferStream.Event_Delegate? OnDataAvailable Event Type Type Description BlockingBufferStream.Event_Delegate | Edit this page View Source OnNeedData Raised when reading is blocking Declaration public event BlockingBufferStream.Event_Delegate? OnNeedData Event Type Type Description BlockingBufferStream.Event_Delegate | Edit this page View Source OnNeedSpace Raised when writing is blocking Declaration public event BlockingBufferStream.Event_Delegate? OnNeedSpace Event Type Type Description BlockingBufferStream.Event_Delegate | Edit this page View Source OnSpaceAvailable Raised when space for writing is available Declaration public event BlockingBufferStream.Event_Delegate? OnSpaceAvailable Event Type Type Description BlockingBufferStream.Event_Delegate Implements IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BlockingInstancePool-1.html": {
    "href": "api/wan24.Core.BlockingInstancePool-1.html",
    "title": "Class BlockingInstancePool<T> | wan24-Core",
    "keywords": "Class BlockingInstancePool<T> Blocking instance pool Inheritance object DisposableBase HostedServiceBase InstancePool<T> BlockingInstancePool<T> Implements IWillDispose IInstancePool<T> IInstancePool IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members InstancePool<T>.SyncFactory InstancePool<T>.AsyncFactory InstancePool<T>.Instances InstancePool<T>.BufferSync InstancePool<T>._Created InstancePool<T>._CreatedOnDemand InstancePool<T>.GUID InstancePool<T>.ServiceProvider InstancePool<T>.Capacity InstancePool<T>.Available InstancePool<T>.Created InstancePool<T>.CreatedOnDemand InstancePool<T>.State InstancePool<T>.GetManyAsync(int, CancellationToken) InstancePool<T>.BeforeStopAsync(CancellationToken) InstancePool<T>.WorkerAsync() InstancePool<T>.Dispose(bool) InstancePool<T>.DisposeCore() HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.AfterStartAsync(CancellationToken) HostedServiceBase.StoppingAsync(CancellationToken) HostedServiceBase.AfterStopAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.AfterPauseAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.AfterResumeAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.OnException HostedServiceBase.RaiseOnException() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class BlockingInstancePool<T> : InstancePool<T>, IWillDispose, IInstancePool<T>, IInstancePool, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : class Type Parameters Name Description T Object type Constructors | Edit this page View Source BlockingInstancePool(in bool, in int, in IAsyncServiceProvider?) Constructor Declaration protected BlockingInstancePool(in bool intern, in int capacity, in IAsyncServiceProvider? serviceProvider = null) Parameters Type Name Description bool intern Intern construction int capacity Capacity IAsyncServiceProvider serviceProvider Service provider | Edit this page View Source BlockingInstancePool(in int, in IAsyncServiceProvider?) Constructor Declaration public BlockingInstancePool(in int capacity, in IAsyncServiceProvider? serviceProvider = null) Parameters Type Name Description int capacity Capacity IAsyncServiceProvider serviceProvider Service provider | Edit this page View Source BlockingInstancePool(in int, in InstanceAsync_Delegate, in IAsyncServiceProvider?) Constructor Declaration public BlockingInstancePool(in int capacity, in IInstancePool<T>.InstanceAsync_Delegate factory, in IAsyncServiceProvider? serviceProvider = null) Parameters Type Name Description int capacity Capacity IInstancePool<T>.InstanceAsync_Delegate factory Instance factory IAsyncServiceProvider serviceProvider Service provider | Edit this page View Source BlockingInstancePool(in int, in Instance_Delegate, in IAsyncServiceProvider?) Constructor Declaration public BlockingInstancePool(in int capacity, in IInstancePool<T>.Instance_Delegate factory, in IAsyncServiceProvider? serviceProvider = null) Parameters Type Name Description int capacity Capacity IInstancePool<T>.Instance_Delegate factory Instance factory IAsyncServiceProvider serviceProvider Service provider Methods | Edit this page View Source GetMany(int, CancellationToken) Get many instances Declaration public override sealed IEnumerable<T> GetMany(int count, CancellationToken cancellationToken = default) Parameters Type Name Description int count Number of instances CancellationToken cancellationToken Cancellation token Returns Type Description IEnumerable<T> Instances Overrides InstancePool<T>.GetMany(int, CancellationToken) | Edit this page View Source GetOne() Get one instance Declaration public override sealed T GetOne() Returns Type Description T Instance Overrides InstancePool<T>.GetOne() | Edit this page View Source GetOneAsync(CancellationToken) Get one instance Declaration public override Task<T> GetOneAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Instance Overrides InstancePool<T>.GetOneAsync(CancellationToken) Implements IWillDispose IInstancePool<T> IInstancePool IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BlockingObjectPool-1.html": {
    "href": "api/wan24.Core.BlockingObjectPool-1.html",
    "title": "Class BlockingObjectPool<T> | wan24-Core",
    "keywords": "Class BlockingObjectPool<T> Disposable blocking object pool (disposes items when disposing, if IDisposable/IAsyncDisposable) Inheritance object DisposableBase BlockingObjectPool<T> BlockingStreamPool<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IAsyncObjectPool<T> IObjectPool<T> IObjectPool IPool Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class BlockingObjectPool<T> : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IAsyncObjectPool<T>, IObjectPool<T>, IObjectPool, IPool Type Parameters Name Description T Item type (IDisposable/IAsyncDisposable will be disposed when disposing) Constructors | Edit this page View Source BlockingObjectPool(in int, in Func<Task<T>>) Constructor Declaration public BlockingObjectPool(in int capacity, in Func<Task<T>> factory) Parameters Type Name Description int capacity Capacity Func<Task<T>> factory Factory | Edit this page View Source BlockingObjectPool(in int, in Func<T>) Constructor Declaration public BlockingObjectPool(in int capacity, in Func<T> factory) Parameters Type Name Description int capacity Capacity Func<T> factory Factory | Edit this page View Source BlockingObjectPool(params T[]) Constructor Declaration public BlockingObjectPool(params T[] items) Parameters Type Name Description T[] items Pooled items Fields | Edit this page View Source AsyncFactory Factory Declaration protected Func<Task<T>>? AsyncFactory Field Value Type Description Func<Task<T>> | Edit this page View Source Factory Factory Declaration protected Func<T>? Factory Field Value Type Description Func<T> | Edit this page View Source Pool Pool Declaration protected readonly BlockingCollection<T> Pool Field Value Type Description BlockingCollection<T> | Edit this page View Source Sync Thread synchronization Declaration protected readonly SemaphoreSync Sync Field Value Type Description SemaphoreSync | Edit this page View Source _Initialized Number of lazy initialized objects Declaration protected volatile int _Initialized Field Value Type Description int Properties | Edit this page View Source Available Number of items in the pool Declaration public int Available { get; } Property Value Type Description int | Edit this page View Source Capacity Capacity Declaration public int Capacity { get; } Property Value Type Description int | Edit this page View Source ForceResetOnReturn Force resetting returned items (if they're going back to the pool)? (trashed items will be reset anyway) Declaration public bool ForceResetOnReturn { get; set; } Property Value Type Description bool | Edit this page View Source Initialized Number of initialized items Declaration public int Initialized { get; } Property Value Type Description int | Edit this page View Source Name Display name Declaration public virtual string? Name { get; set; } Property Value Type Description string | Edit this page View Source ResetOnRent Reset rented objects (if they don't come from the factory) Declaration public bool ResetOnRent { get; set; } Property Value Type Description bool Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source Rent() Rent an item Declaration public virtual T Rent() Returns Type Description T Item (IObjectPoolItem will be reset before returning) | Edit this page View Source RentAsync() Rent an item Declaration public virtual Task<T> RentAsync() Returns Type Description Task<T> Item (IObjectPoolItem will be reset before returning) | Edit this page View Source Return(in T, in bool) Return an item Declaration public virtual void Return(in T item, in bool reset = false) Parameters Type Name Description T item Item bool reset Reset the IObjectPoolItem object? | Edit this page View Source ReturnAsync(T, bool) Return an item Declaration public virtual Task ReturnAsync(T item, bool reset = false) Parameters Type Name Description T item Item bool reset Reset the IObjectPoolItem object? Returns Type Description Task | Edit this page View Source TryRent(out T?) Try renting an item (non-blocking) Declaration public virtual bool TryRent(out T? item) Parameters Type Name Description T item Item (IObjectPoolItem will be reset before returning) Returns Type Description bool Succeed? | Edit this page View Source TryRentAsync() Try renting an item Declaration public virtual Task<TryAsyncResult<T>> TryRentAsync() Returns Type Description Task<TryAsyncResult<T>> If succeed, and the rented item Operators | Edit this page View Source implicit operator bool(in BlockingObjectPool<T>) Cast as available-flag Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator bool(in BlockingObjectPool<T> pool) Parameters Type Name Description BlockingObjectPool<T> pool Pool Returns Type Description bool | Edit this page View Source implicit operator int(in BlockingObjectPool<T>) Cast as available item count Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in BlockingObjectPool<T> pool) Parameters Type Name Description BlockingObjectPool<T> pool Pool Returns Type Description int | Edit this page View Source implicit operator T(in BlockingObjectPool<T>) Cast as rented object Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T(in BlockingObjectPool<T> pool) Parameters Type Name Description BlockingObjectPool<T> pool Pool Returns Type Description T Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IAsyncObjectPool<T> IObjectPool<T> IObjectPool IPool Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BlockingStreamPool-1.html": {
    "href": "api/wan24.Core.BlockingStreamPool-1.html",
    "title": "Class BlockingStreamPool<T> | wan24-Core",
    "keywords": "Class BlockingStreamPool<T> Blocking stream pool Inheritance object DisposableBase BlockingObjectPool<T> BlockingStreamPool<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IAsyncObjectPool<T> IObjectPool<T> IObjectPool IPool Inherited Members BlockingObjectPool<T>.Pool BlockingObjectPool<T>.Sync BlockingObjectPool<T>.Factory BlockingObjectPool<T>.AsyncFactory BlockingObjectPool<T>._Initialized BlockingObjectPool<T>.Name BlockingObjectPool<T>.Capacity BlockingObjectPool<T>.Available BlockingObjectPool<T>.Initialized BlockingObjectPool<T>.ResetOnRent BlockingObjectPool<T>.ForceResetOnReturn BlockingObjectPool<T>.Rent() BlockingObjectPool<T>.TryRent(out T) BlockingObjectPool<T>.RentAsync() BlockingObjectPool<T>.TryRentAsync() BlockingObjectPool<T>.Dispose(bool) BlockingObjectPool<T>.DisposeCore() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class BlockingStreamPool<T> : BlockingObjectPool<T>, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IAsyncObjectPool<T>, IObjectPool<T>, IObjectPool, IPool where T : Stream, IObjectPoolItem, new() Type Parameters Name Description T Stream type Constructors | Edit this page View Source BlockingStreamPool(in int) Constructor Declaration public BlockingStreamPool(in int capacity) Parameters Type Name Description int capacity Capacity | Edit this page View Source BlockingStreamPool(in int, in Func<Task<T>>) Constructor Declaration public BlockingStreamPool(in int capacity, in Func<Task<T>> factory) Parameters Type Name Description int capacity Capacity Func<Task<T>> factory Factory | Edit this page View Source BlockingStreamPool(in int, in Func<T>) Constructor Declaration public BlockingStreamPool(in int capacity, in Func<T> factory) Parameters Type Name Description int capacity Capacity Func<T> factory Factory | Edit this page View Source BlockingStreamPool(params T[]) Constructor Declaration public BlockingStreamPool(params T[] items) Parameters Type Name Description T[] items Available instances Fields | Edit this page View Source IsStreamBase Is a StreamBase stream? Declaration protected static readonly bool IsStreamBase Field Value Type Description bool Methods | Edit this page View Source Return(in T, in bool) Return an item Declaration public override void Return(in T item, in bool reset = false) Parameters Type Name Description T item Item bool reset Reset the IObjectPoolItem object? Overrides BlockingObjectPool<T>.Return(in T, in bool) | Edit this page View Source ReturnAsync(T, bool) Return an item Declaration public override Task ReturnAsync(T item, bool reset = false) Parameters Type Name Description T item Item bool reset Reset the IObjectPoolItem object? Returns Type Description Task Overrides BlockingObjectPool<T>.ReturnAsync(T, bool) Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IAsyncObjectPool<T> IObjectPool<T> IObjectPool IPool Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Bootstrap.Bootstrap_Delegate.html": {
    "href": "api/wan24.Core.Bootstrap.Bootstrap_Delegate.html",
    "title": "Delegate Bootstrap.Bootstrap_Delegate | wan24-Core",
    "keywords": "Delegate Bootstrap.Bootstrap_Delegate Delegate for the OnBootstrap event Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void Bootstrap.Bootstrap_Delegate() Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Bootstrap.html": {
    "href": "api/wan24.Core.Bootstrap.html",
    "title": "Class Bootstrap | wan24-Core",
    "keywords": "Class Bootstrap Bootstrapping Inheritance object Bootstrap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class Bootstrap Properties | Edit this page View Source DidBoot Did boot? Declaration public static bool DidBoot { get; } Property Value Type Description bool | Edit this page View Source FindClasses Scan assemblies for classes with a BootstrapperAttribute? Declaration public static bool FindClasses { get; set; } Property Value Type Description bool | Edit this page View Source FindMethods Scan assemblies for methods with a BootstrapperAttribute? Declaration public static bool FindMethods { get; set; } Property Value Type Description bool | Edit this page View Source IsBooting Is booting? Declaration public static bool IsBooting { get; } Property Value Type Description bool | Edit this page View Source OnBootstrapAsync Asynchronous bootstrapper (executed in parallel at the end of the bootstrapper before raising OnBootstrap) Declaration public static AsyncEvent<object, EventArgs> OnBootstrapAsync { get; } Property Value Type Description AsyncEvent<object, EventArgs> Methods | Edit this page View Source AssemblyAsync(Assembly, bool, bool, CancellationToken) Bootstrap an (additionally loaded) assembly Declaration public static Task AssemblyAsync(Assembly assembly, bool findClasses = true, bool findMethods = true, CancellationToken cancellationToken = default) Parameters Type Name Description Assembly assembly Assembly bool findClasses Scan assembly for classes with a BootstrapperAttribute? bool findMethods Scan assembly for methods with a BootstrapperAttribute? CancellationToken cancellationToken Cancellation token (won't be available with DI) Returns Type Description Task | Edit this page View Source Async(Assembly?, CancellationToken) Bootstrap Declaration public static Task Async(Assembly? startAssembly = null, CancellationToken cancellationToken = default) Parameters Type Name Description Assembly startAssembly Start assembly CancellationToken cancellationToken Cancellation token Returns Type Description Task Exceptions Type Condition BootstrapperException Called twice (maybe recursive) InvalidProgramException A bootstrapper wasn't found | Edit this page View Source TryAsync(Assembly?, CancellationToken) Try booting asynchronous (will bool, if not yet booted) Declaration public static Task<bool> TryAsync(Assembly? startAssembly = null, CancellationToken cancellationToken = default) Parameters Type Name Description Assembly startAssembly Start assembly CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> Did bootstrap? Events | Edit this page View Source OnBootstrap Raised when bootstrapping (after running bootstrapper methods and the asynchronous bootstrapper delegates) Declaration public static event Bootstrap.Bootstrap_Delegate? OnBootstrap Event Type Type Description Bootstrap.Bootstrap_Delegate"
  },
  "api/wan24.Core.BootstrapperAttribute.html": {
    "href": "api/wan24.Core.BootstrapperAttribute.html",
    "title": "Class BootstrapperAttribute | wan24-Core",
    "keywords": "Class BootstrapperAttribute Attribute for static methods which need to be called for bootstrapping the app Inheritance object Attribute BootstrapperAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class|AttributeTargets.Method)] public class BootstrapperAttribute : Attribute Constructors | Edit this page View Source BootstrapperAttribute(int) Constructor Declaration public BootstrapperAttribute(int priority = 0) Parameters Type Name Description int priority Priority (higher value runs first) | Edit this page View Source BootstrapperAttribute(Type, string?, int) Constructor Declaration public BootstrapperAttribute(Type type, string? method = null, int priority = 0) Parameters Type Name Description Type type Bootstrapper type string method Method name int priority Priority (higher value runs first) Properties | Edit this page View Source Method Method name Declaration public string? Method { get; } Property Value Type Description string | Edit this page View Source Priority Priority (higher value runs first) Declaration public int Priority { get; } Property Value Type Description int | Edit this page View Source ScanClasses Scan the assembly for classes with a BootstrapperAttribute? Declaration public bool ScanClasses { get; set; } Property Value Type Description bool | Edit this page View Source ScanMethods Scan the assembly for methods with a BootstrapperAttribute? Declaration public bool ScanMethods { get; set; } Property Value Type Description bool | Edit this page View Source Type Bootstrapper type Declaration public Type? Type { get; } Property Value Type Description Type Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BootstrapperException.html": {
    "href": "api/wan24.Core.BootstrapperException.html",
    "title": "Class BootstrapperException | wan24-Core",
    "keywords": "Class BootstrapperException Thrown on bootstrapping error (bootstrapper called twice, or recursive) Inheritance object Exception BootstrapperException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax [Serializable] public sealed class BootstrapperException : Exception, ISerializable Constructors | Edit this page View Source BootstrapperException() Constructor Declaration public BootstrapperException() | Edit this page View Source BootstrapperException(in string?) Constructor Declaration public BootstrapperException(in string? message) Parameters Type Name Description string message Message | Edit this page View Source BootstrapperException(in string?, in Exception?) Constructor Declaration public BootstrapperException(in string? message, in Exception? inner) Parameters Type Name Description string message Message Exception inner Inner exception Implements ISerializable Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BoundCancellationTokenSource.html": {
    "href": "api/wan24.Core.BoundCancellationTokenSource.html",
    "title": "Class BoundCancellationTokenSource | wan24-Core",
    "keywords": "Class BoundCancellationTokenSource Bound cancellation token source (canceled when a parent token was canceled) Inheritance object CancellationTokenSource BoundCancellationTokenSource Implements IDisposable Inherited Members CancellationTokenSource.Cancel() CancellationTokenSource.Cancel(bool) CancellationTokenSource.CancelAfter(int) CancellationTokenSource.CancelAfter(TimeSpan) CancellationTokenSource.CancelAsync() CancellationTokenSource.CreateLinkedTokenSource(CancellationToken) CancellationTokenSource.CreateLinkedTokenSource(CancellationToken, CancellationToken) CancellationTokenSource.CreateLinkedTokenSource(params CancellationToken[]) CancellationTokenSource.Dispose() CancellationTokenSource.TryReset() CancellationTokenSource.IsCancellationRequested CancellationTokenSource.Token object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class BoundCancellationTokenSource : CancellationTokenSource, IDisposable Constructors | Edit this page View Source BoundCancellationTokenSource(in int, params CancellationToken[]) Constructor Declaration public BoundCancellationTokenSource(in int delayMs, params CancellationToken[] cancellationTokens) Parameters Type Name Description int delayMs Cancellation delay in ms CancellationToken[] cancellationTokens Cancellation tokens | Edit this page View Source BoundCancellationTokenSource(params CancellationToken[]) Constructor Declaration public BoundCancellationTokenSource(params CancellationToken[] cancellationTokens) Parameters Type Name Description CancellationToken[] cancellationTokens Cancellation tokens | Edit this page View Source BoundCancellationTokenSource(in TimeSpan, params CancellationToken[]) Constructor Declaration public BoundCancellationTokenSource(in TimeSpan delay, params CancellationToken[] cancellationTokens) Parameters Type Name Description TimeSpan delay Cancellation delay CancellationToken[] cancellationTokens Cancellation tokens Fields | Edit this page View Source CancelRegistrations Cancellation registrations Declaration protected readonly List<CancellationTokenRegistration> CancelRegistrations Field Value Type Description List<CancellationTokenRegistration> | Edit this page View Source Sync Thread synchronization Declaration protected readonly SemaphoreSync Sync Field Value Type Description SemaphoreSync | Edit this page View Source _BoundTokens Bound cancellation tokens Declaration protected readonly List<CancellationToken> _BoundTokens Field Value Type Description List<CancellationToken> Properties | Edit this page View Source BoundTokens Bound cancellation token Declaration public ReadOnlyCollection<CancellationToken> BoundTokens { get; } Property Value Type Description ReadOnlyCollection<CancellationToken> Methods | Edit this page View Source AddTokens(params CancellationToken[]) Add tokens Declaration public virtual void AddTokens(params CancellationToken[] cancellationTokens) Parameters Type Name Description CancellationToken[] cancellationTokens Cancellation tokens | Edit this page View Source Clear() Remove all tokens Declaration public virtual void Clear() | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the CancellationTokenSource class and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides CancellationTokenSource.Dispose(bool) | Edit this page View Source RemoveToken(in CancellationToken) Remove a token Declaration public virtual void RemoveToken(in CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Implements IDisposable Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ByteEncoding.AvxCmd.html": {
    "href": "api/wan24.Core.ByteEncoding.AvxCmd.html",
    "title": "Enum ByteEncoding.AvxCmd | wan24-Core",
    "keywords": "Enum ByteEncoding.AvxCmd AVX command sets Namespace: wan24.Core Assembly: wan24Core.dll Syntax [Flags] public enum ByteEncoding.AvxCmd Fields Name Description Avx2 AVX2 Avx512 AVX-512 Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object[]) AsyncHelper.TryDisposeAsync<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd) AsyncHelper.TryDispose<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd) EnumExtensions.ContainsAllFlags<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd, in ByteEncoding.AvxCmd) EnumExtensions.ContainsAnyFlag<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd, params ByteEncoding.AvxCmd[]) EnumExtensions.GetContainedFlags<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd, params ByteEncoding.AvxCmd[]) EnumExtensions.GetInfo<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd) EnumExtensions.IsFlag<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd) EnumExtensions.IsValidEnumerationValue<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd) EnumExtensions.IsValid<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd) EnumExtensions.IsValue<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd) EnumExtensions.OnlyFlags<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd) EnumExtensions.RemoveFlags<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd) ObjectExtensions.Do<ByteEncoding.AvxCmd, tReturn>(ByteEncoding.AvxCmd, in Func<ByteEncoding.AvxCmd, tReturn>) ObjectExtensions.EnsureValidState<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd, in bool, in string) ObjectExtensions.GetDisplayText<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd) ObjectExtensions.In<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd, in IEnumerable<ByteEncoding.AvxCmd>) ObjectExtensions.ToDictionary<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd, in int) ObjectExtensions.ToOrderedDictionary<ByteEncoding.AvxCmd>(ByteEncoding.AvxCmd, in int)"
  },
  "api/wan24.Core.ByteEncoding.html": {
    "href": "api/wan24.Core.ByteEncoding.html",
    "title": "Class ByteEncoding | wan24-Core",
    "keywords": "Class ByteEncoding Byte encoding Inheritance object ByteEncoding Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ByteEncoding Fields | Edit this page View Source DefaultCharMap Encoding character map (characters 0-9, a-z, A-Z, dash and underscore) Declaration public static readonly ReadOnlyMemory<char> DefaultCharMap Field Value Type Description ReadOnlyMemory<char> Properties | Edit this page View Source SkipCharMapCheck Skip checking the used character map? Declaration public static bool SkipCharMapCheck { get; set; } Property Value Type Description bool | Edit this page View Source UseAvx AVX command sets to use Declaration public static ByteEncoding.AvxCmd UseAvx { get; set; } Property Value Type Description ByteEncoding.AvxCmd | Edit this page View Source UseCpuCmd Use CPU commands? Declaration public static bool UseCpuCmd { get; set; } Property Value Type Description bool Methods | Edit this page View Source Decode(char[], in ReadOnlyMemory<char>?, in byte[]?) Decode Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] Decode(this char[] str, in ReadOnlyMemory<char>? charMap = null, in byte[]? res = null) Parameters Type Name Description char[] str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] res Result buffer Returns Type Description byte[] Data | Edit this page View Source Decode(ReadOnlySpan<char>, in ReadOnlyMemory<char>?, in byte[]?) Decode Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] Decode(this ReadOnlySpan<char> str, in ReadOnlyMemory<char>? charMap = null, in byte[]? res = null) Parameters Type Name Description ReadOnlySpan<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] res Result buffer Returns Type Description byte[] Data | Edit this page View Source Decode(ReadOnlySpan<char>, in ReadOnlySpan<char>, byte[]?) Decode Declaration public static byte[] Decode(this ReadOnlySpan<char> str, in ReadOnlySpan<char> charMap, byte[]? res = null) Parameters Type Name Description ReadOnlySpan<char> str String ReadOnlySpan<char> charMap Character map (must be 64 characters long!) byte[] res Result buffer Returns Type Description byte[] Data | Edit this page View Source Decode(ReadOnlySpan<char>, in Span<byte>, in ReadOnlyMemory<char>?) Decode Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void Decode(this ReadOnlySpan<char> str, in Span<byte> res, in ReadOnlyMemory<char>? charMap = null) Parameters Type Name Description ReadOnlySpan<char> str String Span<byte> res Result buffer ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) | Edit this page View Source Decode(ReadOnlySpan<char>, in Span<byte>, in ReadOnlySpan<char>) Decode Declaration public static void Decode(this ReadOnlySpan<char> str, in Span<byte> res, in ReadOnlySpan<char> charMap) Parameters Type Name Description ReadOnlySpan<char> str String Span<byte> res Result buffer ReadOnlySpan<char> charMap Character map (must be 64 characters long!) | Edit this page View Source Decode(Span<char>, in ReadOnlyMemory<char>?, in byte[]?) Decode Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] Decode(this Span<char> str, in ReadOnlyMemory<char>? charMap = null, in byte[]? res = null) Parameters Type Name Description Span<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] res Result buffer Returns Type Description byte[] Data | Edit this page View Source Decode(string, in ReadOnlyMemory<char>?, in byte[]?) Decode Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] Decode(this string str, in ReadOnlyMemory<char>? charMap = null, in byte[]? res = null) Parameters Type Name Description string str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] res Result buffer Returns Type Description byte[] Data | Edit this page View Source DecodeByte(ReadOnlySpan<char>, in ReadOnlyMemory<char>?, byte[]?, ArrayPool<byte>?) Decode a byte Declaration public static byte DecodeByte(this ReadOnlySpan<char> str, in ReadOnlyMemory<char>? charMap = null, byte[]? buffer = null, ArrayPool<byte>? pool = null) Parameters Type Name Description ReadOnlySpan<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] buffer Decoding buffer ArrayPool<byte> pool Array pool Returns Type Description byte Value | Edit this page View Source DecodeCompactNumber<T>(char[], in ReadOnlyMemory<char>?, in byte[]?, in ArrayPool<byte>?) Decode a compact encoded numeric value Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static T DecodeCompactNumber<T>(this char[] str, in ReadOnlyMemory<char>? charMap = null, in byte[]? buffer = null, in ArrayPool<byte>? pool = null) where T : struct, IConvertible, IComparable, ISpanFormattable, IComparable<T>, IEquatable<T> Parameters Type Name Description char[] str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] buffer Decoding buffer ArrayPool<byte> pool Array pool Returns Type Description T Value Type Parameters Name Description T Number type | Edit this page View Source DecodeCompactNumber<T>(ReadOnlySpan<char>, ReadOnlyMemory<char>?, byte[]?, ArrayPool<byte>?) Decode a compact encoded numeric value Declaration public static T DecodeCompactNumber<T>(this ReadOnlySpan<char> str, ReadOnlyMemory<char>? charMap = null, byte[]? buffer = null, ArrayPool<byte>? pool = null) where T : struct, IConvertible, IComparable, ISpanFormattable, IComparable<T>, IEquatable<T> Parameters Type Name Description ReadOnlySpan<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] buffer Decoding buffer ArrayPool<byte> pool Array pool Returns Type Description T Value Type Parameters Name Description T Number type | Edit this page View Source DecodeCompactNumber<T>(Span<char>, in ReadOnlyMemory<char>?, in byte[]?, in ArrayPool<byte>?) Decode a compact encoded numeric value Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static T DecodeCompactNumber<T>(this Span<char> str, in ReadOnlyMemory<char>? charMap = null, in byte[]? buffer = null, in ArrayPool<byte>? pool = null) where T : struct, IConvertible, IComparable, ISpanFormattable, IComparable<T>, IEquatable<T> Parameters Type Name Description Span<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] buffer Decoding buffer ArrayPool<byte> pool Array pool Returns Type Description T Value Type Parameters Name Description T Number type | Edit this page View Source DecodeCompactNumber<T>(string, in ReadOnlyMemory<char>?, in byte[]?, in ArrayPool<byte>?) Decode a compact encoded numeric value Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static T DecodeCompactNumber<T>(this string str, in ReadOnlyMemory<char>? charMap = null, in byte[]? buffer = null, in ArrayPool<byte>? pool = null) where T : struct, IConvertible, IComparable, ISpanFormattable, IComparable<T>, IEquatable<T> Parameters Type Name Description string str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] buffer Decoding buffer ArrayPool<byte> pool Array pool Returns Type Description T Value Type Parameters Name Description T Number type | Edit this page View Source DecodeDecimal(ReadOnlySpan<char>, in ReadOnlyMemory<char>?, byte[]?, ArrayPool<byte>?) Decode a decimal Declaration public static decimal DecodeDecimal(this ReadOnlySpan<char> str, in ReadOnlyMemory<char>? charMap = null, byte[]? buffer = null, ArrayPool<byte>? pool = null) Parameters Type Name Description ReadOnlySpan<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] buffer Decoding buffer ArrayPool<byte> pool Array pool Returns Type Description decimal Value | Edit this page View Source DecodeDouble(ReadOnlySpan<char>, in ReadOnlyMemory<char>?, byte[]?, ArrayPool<byte>?) Decode a double Declaration public static double DecodeDouble(this ReadOnlySpan<char> str, in ReadOnlyMemory<char>? charMap = null, byte[]? buffer = null, ArrayPool<byte>? pool = null) Parameters Type Name Description ReadOnlySpan<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] buffer Decoding buffer ArrayPool<byte> pool Array pool Returns Type Description double Value | Edit this page View Source DecodeFloat(ReadOnlySpan<char>, in ReadOnlyMemory<char>?, byte[]?, ArrayPool<byte>?) Decode a float Declaration public static float DecodeFloat(this ReadOnlySpan<char> str, in ReadOnlyMemory<char>? charMap = null, byte[]? buffer = null, ArrayPool<byte>? pool = null) Parameters Type Name Description ReadOnlySpan<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] buffer Decoding buffer ArrayPool<byte> pool Array pool Returns Type Description float Value | Edit this page View Source DecodeInt(ReadOnlySpan<char>, in ReadOnlyMemory<char>?, byte[]?, ArrayPool<byte>?) Decode a int Declaration public static int DecodeInt(this ReadOnlySpan<char> str, in ReadOnlyMemory<char>? charMap = null, byte[]? buffer = null, ArrayPool<byte>? pool = null) Parameters Type Name Description ReadOnlySpan<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] buffer Decoding buffer ArrayPool<byte> pool Array pool Returns Type Description int Value | Edit this page View Source DecodeLong(ReadOnlySpan<char>, in ReadOnlyMemory<char>?, byte[]?, ArrayPool<byte>?) Decode a long Declaration public static long DecodeLong(this ReadOnlySpan<char> str, in ReadOnlyMemory<char>? charMap = null, byte[]? buffer = null, ArrayPool<byte>? pool = null) Parameters Type Name Description ReadOnlySpan<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] buffer Decoding buffer ArrayPool<byte> pool Array pool Returns Type Description long Value | Edit this page View Source DecodeSByte(ReadOnlySpan<char>, in ReadOnlyMemory<char>?, byte[]?, ArrayPool<byte>?) Decode a sbyte Declaration public static sbyte DecodeSByte(this ReadOnlySpan<char> str, in ReadOnlyMemory<char>? charMap = null, byte[]? buffer = null, ArrayPool<byte>? pool = null) Parameters Type Name Description ReadOnlySpan<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] buffer Decoding buffer ArrayPool<byte> pool Array pool Returns Type Description sbyte Value | Edit this page View Source DecodeShort(ReadOnlySpan<char>, in ReadOnlyMemory<char>?, byte[]?, ArrayPool<byte>?) Decode a short Declaration public static short DecodeShort(this ReadOnlySpan<char> str, in ReadOnlyMemory<char>? charMap = null, byte[]? buffer = null, ArrayPool<byte>? pool = null) Parameters Type Name Description ReadOnlySpan<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] buffer Decoding buffer ArrayPool<byte> pool Array pool Returns Type Description short Value | Edit this page View Source DecodeUInt(ReadOnlySpan<char>, in ReadOnlyMemory<char>?, byte[]?, ArrayPool<byte>?) Decode a uint Declaration public static uint DecodeUInt(this ReadOnlySpan<char> str, in ReadOnlyMemory<char>? charMap = null, byte[]? buffer = null, ArrayPool<byte>? pool = null) Parameters Type Name Description ReadOnlySpan<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] buffer Decoding buffer ArrayPool<byte> pool Array pool Returns Type Description uint Value | Edit this page View Source DecodeULong(ReadOnlySpan<char>, in ReadOnlyMemory<char>?, byte[]?, ArrayPool<byte>?) Decode a ulong Declaration public static ulong DecodeULong(this ReadOnlySpan<char> str, in ReadOnlyMemory<char>? charMap = null, byte[]? buffer = null, ArrayPool<byte>? pool = null) Parameters Type Name Description ReadOnlySpan<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] buffer Decoding buffer ArrayPool<byte> pool Array pool Returns Type Description ulong Value | Edit this page View Source DecodeUShort(ReadOnlySpan<char>, in ReadOnlyMemory<char>?, byte[]?, ArrayPool<byte>?) Decode an ushort Declaration public static ushort DecodeUShort(this ReadOnlySpan<char> str, in ReadOnlyMemory<char>? charMap = null, byte[]? buffer = null, ArrayPool<byte>? pool = null) Parameters Type Name Description ReadOnlySpan<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) byte[] buffer Decoding buffer ArrayPool<byte> pool Array pool Returns Type Description ushort Value | Edit this page View Source Encode(byte, in ReadOnlyMemory<char>?, in char[]?, in ArrayPool<byte>?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this byte value, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null, in ArrayPool<byte>? pool = null) Parameters Type Name Description byte value Value ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer ArrayPool<byte> pool Array pool Returns Type Description char[] Encoded | Edit this page View Source Encode(byte, in Span<byte>, in ReadOnlyMemory<char>?, in char[]?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this byte value, in Span<byte> buffer, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null) Parameters Type Name Description byte value Value Span<byte> buffer Buffer ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer Returns Type Description char[] Encoded | Edit this page View Source Encode(byte[], in ReadOnlyMemory<char>?, in char[]?) Encode Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static char[] Encode(this byte[] data, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null) Parameters Type Name Description byte[] data Data ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer Returns Type Description char[] Encoded | Edit this page View Source Encode(decimal, in ReadOnlyMemory<char>?, in char[]?, in ArrayPool<byte>?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this decimal value, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null, in ArrayPool<byte>? pool = null) Parameters Type Name Description decimal value Value ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer ArrayPool<byte> pool Array pool Returns Type Description char[] Encoded | Edit this page View Source Encode(decimal, in Span<byte>, in ReadOnlyMemory<char>?, in char[]?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this decimal value, in Span<byte> buffer, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null) Parameters Type Name Description decimal value Value Span<byte> buffer Buffer ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer Returns Type Description char[] Encoded | Edit this page View Source Encode(double, in ReadOnlyMemory<char>?, in char[]?, in ArrayPool<byte>?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this double value, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null, in ArrayPool<byte>? pool = null) Parameters Type Name Description double value Value ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer ArrayPool<byte> pool Array pool Returns Type Description char[] Encoded | Edit this page View Source Encode(double, in Span<byte>, in ReadOnlyMemory<char>?, in char[]?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this double value, in Span<byte> buffer, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null) Parameters Type Name Description double value Value Span<byte> buffer Buffer ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer Returns Type Description char[] Encoded | Edit this page View Source Encode(short, in ReadOnlyMemory<char>?, in char[]?, in ArrayPool<byte>?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this short value, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null, in ArrayPool<byte>? pool = null) Parameters Type Name Description short value Value ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer ArrayPool<byte> pool Array pool Returns Type Description char[] Encoded | Edit this page View Source Encode(short, in Span<byte>, in ReadOnlyMemory<char>?, in char[]?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this short value, in Span<byte> buffer, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null) Parameters Type Name Description short value Value Span<byte> buffer Buffer ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer Returns Type Description char[] Encoded | Edit this page View Source Encode(int, in ReadOnlyMemory<char>?, in char[]?, in ArrayPool<byte>?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this int value, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null, in ArrayPool<byte>? pool = null) Parameters Type Name Description int value Value ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer ArrayPool<byte> pool Array pool Returns Type Description char[] Encoded | Edit this page View Source Encode(int, in Span<byte>, in ReadOnlyMemory<char>?, in char[]?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this int value, in Span<byte> buffer, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null) Parameters Type Name Description int value Value Span<byte> buffer Buffer ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer Returns Type Description char[] Encoded | Edit this page View Source Encode(long, in ReadOnlyMemory<char>?, in char[]?, in ArrayPool<byte>?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this long value, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null, in ArrayPool<byte>? pool = null) Parameters Type Name Description long value Value ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer ArrayPool<byte> pool Array pool Returns Type Description char[] Encoded | Edit this page View Source Encode(long, in Span<byte>, in ReadOnlyMemory<char>?, in char[]?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this long value, in Span<byte> buffer, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null) Parameters Type Name Description long value Value Span<byte> buffer Buffer ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer Returns Type Description char[] Encoded | Edit this page View Source Encode(ReadOnlySpan<byte>, in ReadOnlyMemory<char>?, in char[]?) Encode Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static char[] Encode(this ReadOnlySpan<byte> data, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null) Parameters Type Name Description ReadOnlySpan<byte> data Data ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer Returns Type Description char[] Encoded | Edit this page View Source Encode(ReadOnlySpan<byte>, in ReadOnlySpan<char>, char[]?) Encode Declaration public static char[] Encode(this ReadOnlySpan<byte> data, in ReadOnlySpan<char> charMap, char[]? res = null) Parameters Type Name Description ReadOnlySpan<byte> data Data ReadOnlySpan<char> charMap Character map (must be 64 characters long!) char[] res Result buffer Returns Type Description char[] Encoded | Edit this page View Source Encode(ReadOnlySpan<byte>, in Span<char>, in ReadOnlyMemory<char>?) Encode Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void Encode(this ReadOnlySpan<byte> data, in Span<char> res, in ReadOnlyMemory<char>? charMap = null) Parameters Type Name Description ReadOnlySpan<byte> data Data Span<char> res Result buffer ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) | Edit this page View Source Encode(ReadOnlySpan<byte>, in Span<char>, in ReadOnlySpan<char>) Encode Declaration public static void Encode(this ReadOnlySpan<byte> data, in Span<char> res, in ReadOnlySpan<char> charMap) Parameters Type Name Description ReadOnlySpan<byte> data Data Span<char> res Result buffer ReadOnlySpan<char> charMap Character map (must be 64 characters long!) | Edit this page View Source Encode(sbyte, in ReadOnlyMemory<char>?, in char[]?, in ArrayPool<byte>?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this sbyte value, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null, in ArrayPool<byte>? pool = null) Parameters Type Name Description sbyte value Value ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer ArrayPool<byte> pool Array pool Returns Type Description char[] Encoded | Edit this page View Source Encode(sbyte, in Span<byte>, in ReadOnlyMemory<char>?, in char[]?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this sbyte value, in Span<byte> buffer, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null) Parameters Type Name Description sbyte value Value Span<byte> buffer Buffer ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer Returns Type Description char[] Encoded | Edit this page View Source Encode(float, in ReadOnlyMemory<char>?, in char[]?, in ArrayPool<byte>?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this float value, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null, in ArrayPool<byte>? pool = null) Parameters Type Name Description float value Value ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer ArrayPool<byte> pool Array pool Returns Type Description char[] Encoded | Edit this page View Source Encode(float, in Span<byte>, in ReadOnlyMemory<char>?, in char[]?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this float value, in Span<byte> buffer, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null) Parameters Type Name Description float value Value Span<byte> buffer Buffer ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer Returns Type Description char[] Encoded | Edit this page View Source Encode(Span<byte>, in ReadOnlyMemory<char>?, in char[]?) Encode Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static char[] Encode(this Span<byte> data, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null) Parameters Type Name Description Span<byte> data Data ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer Returns Type Description char[] Encoded | Edit this page View Source Encode(ushort, in ReadOnlyMemory<char>?, in char[]?, in ArrayPool<byte>?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this ushort value, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null, in ArrayPool<byte>? pool = null) Parameters Type Name Description ushort value Value ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer ArrayPool<byte> pool Array pool Returns Type Description char[] Encoded | Edit this page View Source Encode(ushort, in Span<byte>, in ReadOnlyMemory<char>?, in char[]?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this ushort value, in Span<byte> buffer, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null) Parameters Type Name Description ushort value Value Span<byte> buffer Buffer ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer Returns Type Description char[] Encoded | Edit this page View Source Encode(uint, in ReadOnlyMemory<char>?, in char[]?, in ArrayPool<byte>?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this uint value, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null, in ArrayPool<byte>? pool = null) Parameters Type Name Description uint value Value ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer ArrayPool<byte> pool Array pool Returns Type Description char[] Encoded | Edit this page View Source Encode(uint, in Span<byte>, in ReadOnlyMemory<char>?, in char[]?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this uint value, in Span<byte> buffer, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null) Parameters Type Name Description uint value Value Span<byte> buffer Buffer ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer Returns Type Description char[] Encoded | Edit this page View Source Encode(ulong, in ReadOnlyMemory<char>?, in char[]?, in ArrayPool<byte>?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this ulong value, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null, in ArrayPool<byte>? pool = null) Parameters Type Name Description ulong value Value ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer ArrayPool<byte> pool Array pool Returns Type Description char[] Encoded | Edit this page View Source Encode(ulong, in Span<byte>, in ReadOnlyMemory<char>?, in char[]?) Encode Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] Encode(this ulong value, in Span<byte> buffer, in ReadOnlyMemory<char>? charMap = null, in char[]? res = null) Parameters Type Name Description ulong value Value Span<byte> buffer Buffer ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer Returns Type Description char[] Encoded | Edit this page View Source EncodeNumberCompact<T>(T, ReadOnlyMemory<char>?, in char[]?, in ArrayPool<byte>?) Encode a numeric value as compact as possible Declaration public static char[] EncodeNumberCompact<T>(this T value, ReadOnlyMemory<char>? charMap = null, in char[]? res = null, in ArrayPool<byte>? pool = null) where T : struct, IConvertible, IComparable, ISpanFormattable, IComparable<T>, IEquatable<T> Parameters Type Name Description T value Value ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer ArrayPool<byte> pool Array pool Returns Type Description char[] Encoded Type Parameters Name Description T Numeric type | Edit this page View Source EncodeNumberCompact<T>(T, in Span<byte>, ReadOnlyMemory<char>?, in char[]?) Encode a numeric value as compact as possible Declaration public static char[] EncodeNumberCompact<T>(this T value, in Span<byte> buffer, ReadOnlyMemory<char>? charMap = null, in char[]? res = null) where T : struct, IConvertible, IComparable, ISpanFormattable, IComparable<T>, IEquatable<T> Parameters Type Name Description T value Value Span<byte> buffer Buffer ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) char[] res Result buffer Returns Type Description char[] Encoded Type Parameters Name Description T Numeric type | Edit this page View Source GetDecodedLength(int) Get the decoded byte array length Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int GetDecodedLength(this int len) Parameters Type Name Description int len String length Returns Type Description int Length | Edit this page View Source GetDecodedLength(ReadOnlySpan<char>) Get the decoded byte array length Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int GetDecodedLength(this ReadOnlySpan<char> str) Parameters Type Name Description ReadOnlySpan<char> str String Returns Type Description int Length | Edit this page View Source GetDecodedLength(Span<char>) Get the decoded byte array length Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int GetDecodedLength(this Span<char> str) Parameters Type Name Description Span<char> str String Returns Type Description int Length | Edit this page View Source GetDecodedLength(string) Get the decoded byte array length Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int GetDecodedLength(this string str) Parameters Type Name Description string str String Returns Type Description int Length | Edit this page View Source GetEncodedLength(byte[]) Get the encoded character array length Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int GetEncodedLength(this byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description int Length | Edit this page View Source GetEncodedLength(int) Get the encoded character array length Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int GetEncodedLength(this int len) Parameters Type Name Description int len Byte array length Returns Type Description int Length | Edit this page View Source GetEncodedLength(ReadOnlySpan<byte>) Get the encoded character array length Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int GetEncodedLength(this ReadOnlySpan<byte> data) Parameters Type Name Description ReadOnlySpan<byte> data Data Returns Type Description int Length | Edit this page View Source GetEncodedLength(Span<byte>) Get the encoded character array length Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int GetEncodedLength(this Span<byte> data) Parameters Type Name Description Span<byte> data Data Returns Type Description int Length | Edit this page View Source IsCharMapValid(in ReadOnlySpan<char>) Determine if a character map is valid (64 ASCII characters) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsCharMapValid(in ReadOnlySpan<char> charMap) Parameters Type Name Description ReadOnlySpan<char> charMap Character map Returns Type Description bool Character map | Edit this page View Source IsEncodedLengthValid(int, in bool) Determine if the encoded string length is valid Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsEncodedLengthValid(this int len, in bool throwOnError = true) Parameters Type Name Description int len Encoded string length bool throwOnError Throw an exception on error? Returns Type Description bool Is valid? Exceptions Type Condition InvalidDataException The encoded string length is invalid | Edit this page View Source IsEncodedLengthValid(ReadOnlySpan<char>, in bool) Determine if the encoded string length is valid Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsEncodedLengthValid(this ReadOnlySpan<char> str, in bool throwOnError = true) Parameters Type Name Description ReadOnlySpan<char> str String bool throwOnError Throw an exception on error? Returns Type Description bool Is valid? Exceptions Type Condition InvalidDataException The encoded string length is invalid | Edit this page View Source IsEncodedLengthValid(Span<char>, in bool) Determine if the encoded string length is valid Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsEncodedLengthValid(this Span<char> str, in bool throwOnError = true) Parameters Type Name Description Span<char> str String bool throwOnError Throw an exception on error? Returns Type Description bool Is valid? Exceptions Type Condition InvalidDataException The encoded string length is invalid | Edit this page View Source IsEncodedLengthValid(string, in bool) Determine if the encoded string length is valid Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsEncodedLengthValid(this string str, in bool throwOnError = true) Parameters Type Name Description string str String bool throwOnError Throw an exception on error? Returns Type Description bool Is valid? Exceptions Type Condition InvalidDataException The encoded string length is invalid | Edit this page View Source IsEncodingValid(ReadOnlySpan<char>, ReadOnlyMemory<char>?, in bool) Determine if the encoding of the string is valid Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsEncodingValid(this ReadOnlySpan<char> str, ReadOnlyMemory<char>? charMap = null, in bool throwOnError = true) Parameters Type Name Description ReadOnlySpan<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) bool throwOnError Throw an exception on error? Returns Type Description bool Is valid? Exceptions Type Condition FormatException The encoding is invalid | Edit this page View Source IsEncodingValid(ReadOnlySpan<char>, in ReadOnlySpan<char>, in bool) Determine if the encoding of the string is valid Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsEncodingValid(this ReadOnlySpan<char> str, in ReadOnlySpan<char> charMap, in bool throwOnError = true) Parameters Type Name Description ReadOnlySpan<char> str String ReadOnlySpan<char> charMap Character map (must be 64 characters long!) bool throwOnError Throw an exception on error? Returns Type Description bool Is valid? Exceptions Type Condition FormatException The encoding is invalid | Edit this page View Source IsEncodingValid(Span<char>, in ReadOnlyMemory<char>?, in bool) Determine if the encoding of the string is valid Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsEncodingValid(this Span<char> str, in ReadOnlyMemory<char>? charMap = null, in bool throwOnError = true) Parameters Type Name Description Span<char> str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) bool throwOnError Throw an exception on error? Returns Type Description bool Is valid? Exceptions Type Condition FormatException The encoding is invalid | Edit this page View Source IsEncodingValid(string, in ReadOnlyMemory<char>?, in bool) Determine if the encoding of the string is valid Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsEncodingValid(this string str, in ReadOnlyMemory<char>? charMap = null, in bool throwOnError = true) Parameters Type Name Description string str String ReadOnlyMemory<char>? charMap Character map (must be 64 characters long!) bool throwOnError Throw an exception on error? Returns Type Description bool Is valid? Exceptions Type Condition FormatException The encoding is invalid | Edit this page View Source ValidateCharMap(in ReadOnlySpan<char>) Validate a character map (64 ASCII characters) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ReadOnlySpan<char> ValidateCharMap(in ReadOnlySpan<char> charMap) Parameters Type Name Description ReadOnlySpan<char> charMap Character map Returns Type Description ReadOnlySpan<char> Character map Exceptions Type Condition ArgumentOutOfRangeException Invalid length ArgumentException Invalid characters"
  },
  "api/wan24.Core.BytesExtensions.Clear_Delegate.html": {
    "href": "api/wan24.Core.BytesExtensions.Clear_Delegate.html",
    "title": "Delegate BytesExtensions.Clear_Delegate | wan24-Core",
    "keywords": "Delegate BytesExtensions.Clear_Delegate Delegate for a byte clearing handler Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void BytesExtensions.Clear_Delegate(Span<byte> bytes) Parameters Type Name Description Span<byte> bytes Bytes to clear (must be zeroed) Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.BytesExtensions.html": {
    "href": "api/wan24.Core.BytesExtensions.html",
    "title": "Class BytesExtensions | wan24-Core",
    "keywords": "Class BytesExtensions Bytes extensions Inheritance object BytesExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class BytesExtensions Properties | Edit this page View Source ClearHandler Clear bytes handler Declaration public static BytesExtensions.Clear_Delegate? ClearHandler { get; set; } Property Value Type Description BytesExtensions.Clear_Delegate Methods | Edit this page View Source And(byte[], ReadOnlySpan<byte>) AND two byte arrays Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] And(this byte[] a, ReadOnlySpan<byte> b) Parameters Type Name Description byte[] a A ReadOnlySpan<byte> b B Returns Type Description byte[] A | Edit this page View Source And(Span<byte>, ReadOnlySpan<byte>) AND two byte arrays Declaration public static Span<byte> And(this Span<byte> a, ReadOnlySpan<byte> b) Parameters Type Name Description Span<byte> a A ReadOnlySpan<byte> b B Returns Type Description Span<byte> A | Edit this page View Source Clean(Span<byte>) Clear the array Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static void Clean(this Span<byte> bytes) Parameters Type Name Description Span<byte> bytes Bytes | Edit this page View Source Clear(byte[]) Clear the array Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static void Clear(this byte[] bytes) Parameters Type Name Description byte[] bytes Bytes | Edit this page View Source ConvertEndian(byte[]) Convert the endian to be little endian for serializing, and big endian, if the system uses it Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] ConvertEndian(this byte[] bytes) Parameters Type Name Description byte[] bytes Bytes Returns Type Description byte[] Converted bytes | Edit this page View Source ConvertEndian(Memory<byte>) Convert the endian to be little endian for serializing, and big endian, if the system uses it Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Memory<byte> ConvertEndian(this Memory<byte> bytes) Parameters Type Name Description Memory<byte> bytes Bytes Returns Type Description Memory<byte> Converted bytes | Edit this page View Source ConvertEndian(ReadOnlyMemory<byte>) Convert the endian to be little endian for serializing, and big endian, if the system uses it Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] ConvertEndian(this ReadOnlyMemory<byte> bytes) Parameters Type Name Description ReadOnlyMemory<byte> bytes Bytes Returns Type Description byte[] Converted bytes | Edit this page View Source ConvertEndian(ReadOnlySpan<byte>) Convert the endian to be little endian for serializing, and big endian, if the system uses it Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] ConvertEndian(this ReadOnlySpan<byte> bytes) Parameters Type Name Description ReadOnlySpan<byte> bytes Bytes Returns Type Description byte[] Converted bytes | Edit this page View Source ConvertEndian(Span<byte>) Convert the endian to be little endian for serializing, and big endian, if the system uses it Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Span<byte> ConvertEndian(this Span<byte> bytes) Parameters Type Name Description Span<byte> bytes Bytes Returns Type Description Span<byte> Converted bytes | Edit this page View Source DecodeBase64(byte[]) Decode base64 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] DecodeBase64(this byte[] bytes) Parameters Type Name Description byte[] bytes base64 UTF-8 bytes Returns Type Description byte[] Decoded bytes | Edit this page View Source DecodeBase64(byte[], byte[]) Decode base64 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int DecodeBase64(this byte[] bytes, byte[] buffer) Parameters Type Name Description byte[] bytes base64 UTF-8 bytes byte[] buffer Buffer Returns Type Description int Number of decoded bytes written to buffer | Edit this page View Source DecodeBase64(ReadOnlySpan<byte>) Decode base64 Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] DecodeBase64(this ReadOnlySpan<byte> bytes) Parameters Type Name Description ReadOnlySpan<byte> bytes base64 UTF-8 bytes Returns Type Description byte[] Decoded bytes | Edit this page View Source DecodeBase64(ReadOnlySpan<byte>, Span<byte>) Decode base64 Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int DecodeBase64(this ReadOnlySpan<byte> bytes, Span<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> bytes base64 UTF-8 bytes Span<byte> buffer Buffer Returns Type Description int Number of decoded bytes written to buffer | Edit this page View Source DecodeBase64(Span<byte>) Decode base64 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] DecodeBase64(this Span<byte> bytes) Parameters Type Name Description Span<byte> bytes base64 UTF-8 bytes Returns Type Description byte[] Decoded bytes | Edit this page View Source DecodeBase64(Span<byte>, Span<byte>) Decode base64 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int DecodeBase64(this Span<byte> bytes, Span<byte> buffer) Parameters Type Name Description Span<byte> bytes base64 UTF-8 bytes Span<byte> buffer Buffer Returns Type Description int Number of decoded bytes written to buffer | Edit this page View Source GetBase64(byte[], in Span<byte>) Get base64 UTF-8 bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int GetBase64(this byte[] bytes, in Span<byte> buffer) Parameters Type Name Description byte[] bytes Bytes Span<byte> buffer Buffer Returns Type Description int Number of bytes written to buffer | Edit this page View Source GetBase64(byte[], in Span<char>) Get base64 characters Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int GetBase64(this byte[] bytes, in Span<char> buffer) Parameters Type Name Description byte[] bytes Bytes Span<char> buffer Buffer Returns Type Description int Number of characters written to buffer | Edit this page View Source GetBase64Bytes(byte[]) Get base64 UTF-8 bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBase64Bytes(this byte[] bytes) Parameters Type Name Description byte[] bytes Bytes Returns Type Description byte[] base64 UTF-8 bytes | Edit this page View Source GetBase64Chars(byte[]) Get base64 characters Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] GetBase64Chars(this byte[] bytes) Parameters Type Name Description byte[] bytes Bytes Returns Type Description char[] base64 characters | Edit this page View Source GetBase64String(byte[]) Get a base64 string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static string GetBase64String(this byte[] bytes) Parameters Type Name Description byte[] bytes Bytes Returns Type Description string base64 string | Edit this page View Source Or(byte[], ReadOnlySpan<byte>) OR two byte arrays Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] Or(this byte[] a, ReadOnlySpan<byte> b) Parameters Type Name Description byte[] a A ReadOnlySpan<byte> b B Returns Type Description byte[] A | Edit this page View Source Or(Span<byte>, ReadOnlySpan<byte>) OR two byte arrays Declaration public static Span<byte> Or(this Span<byte> a, ReadOnlySpan<byte> b) Parameters Type Name Description Span<byte> a A ReadOnlySpan<byte> b B Returns Type Description Span<byte> A | Edit this page View Source RotatingXor(byte[], ReadOnlySpan<byte>) Apply rotating XOR (b (may be larger than a) will be rotated XORed to a) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] RotatingXor(this byte[] a, ReadOnlySpan<byte> b) Parameters Type Name Description byte[] a A ReadOnlySpan<byte> b B Returns Type Description byte[] A | Edit this page View Source RotatingXor(Span<byte>, ReadOnlySpan<byte>) Apply rotating XOR (b (may be larger than a) will be rotated XORed to a) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Span<byte> RotatingXor(this Span<byte> a, ReadOnlySpan<byte> b) Parameters Type Name Description Span<byte> a A ReadOnlySpan<byte> b B Returns Type Description Span<byte> A | Edit this page View Source SlowCompare(byte[], in ReadOnlySpan<byte>) Slow compare Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool SlowCompare(this byte[] a, in ReadOnlySpan<byte> b) Parameters Type Name Description byte[] a A ReadOnlySpan<byte> b B Returns Type Description bool Equal? | Edit this page View Source SlowCompare(Memory<byte>, in Memory<byte>) Slow compare Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool SlowCompare(this Memory<byte> a, in Memory<byte> b) Parameters Type Name Description Memory<byte> a A Memory<byte> b B Returns Type Description bool Equal? | Edit this page View Source SlowCompare(Memory<byte>, in ReadOnlySpan<byte>) Slow compare Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool SlowCompare(this Memory<byte> a, in ReadOnlySpan<byte> b) Parameters Type Name Description Memory<byte> a A ReadOnlySpan<byte> b B Returns Type Description bool Equal? | Edit this page View Source SlowCompare(ReadOnlyMemory<byte>, in ReadOnlyMemory<byte>) Slow compare Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool SlowCompare(this ReadOnlyMemory<byte> a, in ReadOnlyMemory<byte> b) Parameters Type Name Description ReadOnlyMemory<byte> a A ReadOnlyMemory<byte> b B Returns Type Description bool Equal? | Edit this page View Source SlowCompare(ReadOnlyMemory<byte>, in ReadOnlySpan<byte>) Slow compare Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool SlowCompare(this ReadOnlyMemory<byte> a, in ReadOnlySpan<byte> b) Parameters Type Name Description ReadOnlyMemory<byte> a A ReadOnlySpan<byte> b B Returns Type Description bool Equal? | Edit this page View Source SlowCompare(ReadOnlySpan<byte>, in ReadOnlySpan<byte>) Slow compare Declaration public static bool SlowCompare(this ReadOnlySpan<byte> a, in ReadOnlySpan<byte> b) Parameters Type Name Description ReadOnlySpan<byte> a A ReadOnlySpan<byte> b B Returns Type Description bool Equal? | Edit this page View Source SlowCompare(Span<byte>, in ReadOnlySpan<byte>) Slow compare Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool SlowCompare(this Span<byte> a, in ReadOnlySpan<byte> b) Parameters Type Name Description Span<byte> a A ReadOnlySpan<byte> b B Returns Type Description bool Equal? | Edit this page View Source ToBitString(byte) Get the bits of a byte as string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static string ToBitString(this byte b) Parameters Type Name Description byte b Byte Returns Type Description string Bits as string | Edit this page View Source ToDecimal(ReadOnlySpan<byte>) Get a decimal Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static decimal ToDecimal(this ReadOnlySpan<byte> bits) Parameters Type Name Description ReadOnlySpan<byte> bits Bits Returns Type Description decimal Value | Edit this page View Source ToDecimal(Span<byte>) Get a decimal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static decimal ToDecimal(this Span<byte> bits) Parameters Type Name Description Span<byte> bits Bits Returns Type Description decimal Value | Edit this page View Source ToDouble(ReadOnlySpan<byte>) Get a double Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static double ToDouble(this ReadOnlySpan<byte> bits) Parameters Type Name Description ReadOnlySpan<byte> bits Bits Returns Type Description double Value | Edit this page View Source ToDouble(Span<byte>) Get a double Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static double ToDouble(this Span<byte> bits) Parameters Type Name Description Span<byte> bits Bits Returns Type Description double Value | Edit this page View Source ToFloat(ReadOnlySpan<byte>) Get a float Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static float ToFloat(this ReadOnlySpan<byte> bits) Parameters Type Name Description ReadOnlySpan<byte> bits Bits Returns Type Description float Value | Edit this page View Source ToFloat(Span<byte>) Get a float Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static float ToFloat(this Span<byte> bits) Parameters Type Name Description Span<byte> bits Bits Returns Type Description float Value | Edit this page View Source ToHexString(ReadOnlySpan<byte>) Get the byte array as hex string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string ToHexString(this ReadOnlySpan<byte> bytes) Parameters Type Name Description ReadOnlySpan<byte> bytes Bytes Returns Type Description string Hex string | Edit this page View Source ToInt(ReadOnlySpan<byte>) Get an Int32 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int ToInt(this ReadOnlySpan<byte> bits) Parameters Type Name Description ReadOnlySpan<byte> bits Bits Returns Type Description int Value | Edit this page View Source ToInt(Span<byte>) Get an Int32 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int ToInt(this Span<byte> bits) Parameters Type Name Description Span<byte> bits Bits Returns Type Description int Value | Edit this page View Source ToLong(ReadOnlySpan<byte>) Get an Int64 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static long ToLong(this ReadOnlySpan<byte> bits) Parameters Type Name Description ReadOnlySpan<byte> bits Bits Returns Type Description long Value | Edit this page View Source ToLong(Span<byte>) Get an Int64 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static long ToLong(this Span<byte> bits) Parameters Type Name Description Span<byte> bits Bits Returns Type Description long Value | Edit this page View Source ToShort(ReadOnlySpan<byte>) Get an Int16 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static short ToShort(this ReadOnlySpan<byte> bits) Parameters Type Name Description ReadOnlySpan<byte> bits Bits Returns Type Description short Value | Edit this page View Source ToShort(Span<byte>) Get an Int16 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static short ToShort(this Span<byte> bits) Parameters Type Name Description Span<byte> bits Bits Returns Type Description short Value | Edit this page View Source ToUInt(ReadOnlySpan<byte>) Get an UInt32 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static uint ToUInt(this ReadOnlySpan<byte> bits) Parameters Type Name Description ReadOnlySpan<byte> bits Bits Returns Type Description uint Value | Edit this page View Source ToUInt(Span<byte>) Get an UInt32 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static uint ToUInt(this Span<byte> bits) Parameters Type Name Description Span<byte> bits Bits Returns Type Description uint Value | Edit this page View Source ToULong(ReadOnlySpan<byte>) Get an UInt64 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ulong ToULong(this ReadOnlySpan<byte> bits) Parameters Type Name Description ReadOnlySpan<byte> bits Bits Returns Type Description ulong Value | Edit this page View Source ToULong(Span<byte>) Get an UInt64 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ulong ToULong(this Span<byte> bits) Parameters Type Name Description Span<byte> bits Bits Returns Type Description ulong Value | Edit this page View Source ToUShort(ReadOnlySpan<byte>) Get an UInt16 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ushort ToUShort(this ReadOnlySpan<byte> bits) Parameters Type Name Description ReadOnlySpan<byte> bits Bits Returns Type Description ushort Value | Edit this page View Source ToUShort(Span<byte>) Get an UInt16 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ushort ToUShort(this Span<byte> bits) Parameters Type Name Description Span<byte> bits Bits Returns Type Description ushort Value | Edit this page View Source ToUtf16Chars(byte[]) Get an UTF-8 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static char[] ToUtf16Chars(this byte[] bytes) Parameters Type Name Description byte[] bytes Bytes Returns Type Description char[] String | Edit this page View Source ToUtf16Chars(Memory<byte>) Get an UTF-8 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static char[] ToUtf16Chars(this Memory<byte> bytes) Parameters Type Name Description Memory<byte> bytes Bytes Returns Type Description char[] String | Edit this page View Source ToUtf16Chars(ReadOnlyMemory<byte>) Get an UTF-8 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static char[] ToUtf16Chars(this ReadOnlyMemory<byte> bytes) Parameters Type Name Description ReadOnlyMemory<byte> bytes Bytes Returns Type Description char[] String | Edit this page View Source ToUtf16Chars(ReadOnlySpan<byte>, in bool) Get an UTF-16 string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] ToUtf16Chars(this ReadOnlySpan<byte> bytes, in bool ignoreUsed = false) Parameters Type Name Description ReadOnlySpan<byte> bytes Bytes (little endian) bool ignoreUsed Ignore the number of used bytes? Returns Type Description char[] String | Edit this page View Source ToUtf16Chars(Span<byte>) Get an UTF-8 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static char[] ToUtf16Chars(this Span<byte> bytes) Parameters Type Name Description Span<byte> bytes Bytes Returns Type Description char[] String | Edit this page View Source ToUtf16String(byte[]) Get an UTF-16 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string ToUtf16String(this byte[] bytes) Parameters Type Name Description byte[] bytes Bytes (little endian) Returns Type Description string String | Edit this page View Source ToUtf16String(Memory<byte>) Get an UTF-16 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string ToUtf16String(this Memory<byte> bytes) Parameters Type Name Description Memory<byte> bytes Bytes (little endian) Returns Type Description string String | Edit this page View Source ToUtf16String(ReadOnlyMemory<byte>) Get an UTF-16 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string ToUtf16String(this ReadOnlyMemory<byte> bytes) Parameters Type Name Description ReadOnlyMemory<byte> bytes Bytes (little endian) Returns Type Description string String | Edit this page View Source ToUtf16String(ReadOnlySpan<byte>, in bool) Get an UTF-16 string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static string ToUtf16String(this ReadOnlySpan<byte> bytes, in bool ignoreUsed = false) Parameters Type Name Description ReadOnlySpan<byte> bytes Bytes (little endian) bool ignoreUsed Ignore the number of used bytes? Returns Type Description string Number of used bytes from the output buffer | Edit this page View Source ToUtf16String(ReadOnlySpan<byte>, in Span<char>, in bool) Get an UTF-16 string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int ToUtf16String(this ReadOnlySpan<byte> bytes, in Span<char> buffer, in bool ignoreUsed = false) Parameters Type Name Description ReadOnlySpan<byte> bytes Bytes (little endian) Span<char> buffer Output buffer bool ignoreUsed Ignore the number of used bytes? Returns Type Description int Number of used bytes from the output buffer | Edit this page View Source ToUtf16String(Span<byte>) Get an UTF-16 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string ToUtf16String(this Span<byte> bytes) Parameters Type Name Description Span<byte> bytes Bytes (little endian) Returns Type Description string String | Edit this page View Source ToUtf32Chars(byte[]) Get an UTF-32 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static char[] ToUtf32Chars(this byte[] bytes) Parameters Type Name Description byte[] bytes Bytes Returns Type Description char[] String | Edit this page View Source ToUtf32Chars(Memory<byte>) Get an UTF-32 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static char[] ToUtf32Chars(this Memory<byte> bytes) Parameters Type Name Description Memory<byte> bytes Bytes Returns Type Description char[] String | Edit this page View Source ToUtf32Chars(ReadOnlyMemory<byte>) Get an UTF-32 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static char[] ToUtf32Chars(this ReadOnlyMemory<byte> bytes) Parameters Type Name Description ReadOnlyMemory<byte> bytes Bytes Returns Type Description char[] String | Edit this page View Source ToUtf32Chars(ReadOnlySpan<byte>, in bool) Get an UTF-32 string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] ToUtf32Chars(this ReadOnlySpan<byte> bytes, in bool ignoreUsed = false) Parameters Type Name Description ReadOnlySpan<byte> bytes Bytes (little endian) bool ignoreUsed Ignore the number of used bytes? Returns Type Description char[] String | Edit this page View Source ToUtf32Chars(Span<byte>) Get an UTF-32 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static char[] ToUtf32Chars(this Span<byte> bytes) Parameters Type Name Description Span<byte> bytes Bytes Returns Type Description char[] String | Edit this page View Source ToUtf32String(byte[]) Get an UTF-32 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string ToUtf32String(this byte[] bytes) Parameters Type Name Description byte[] bytes Bytes (little endian) Returns Type Description string String | Edit this page View Source ToUtf32String(Memory<byte>) Get an UTF-32 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string ToUtf32String(this Memory<byte> bytes) Parameters Type Name Description Memory<byte> bytes Bytes (little endian) Returns Type Description string String | Edit this page View Source ToUtf32String(ReadOnlyMemory<byte>) Get an UTF-32 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string ToUtf32String(this ReadOnlyMemory<byte> bytes) Parameters Type Name Description ReadOnlyMemory<byte> bytes Bytes (little endian) Returns Type Description string String | Edit this page View Source ToUtf32String(ReadOnlySpan<byte>, in bool) Get an UTF-32 string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static string ToUtf32String(this ReadOnlySpan<byte> bytes, in bool ignoreUsed = false) Parameters Type Name Description ReadOnlySpan<byte> bytes Bytes (little endian) bool ignoreUsed Ignore the number of used bytes? Returns Type Description string String | Edit this page View Source ToUtf32String(ReadOnlySpan<byte>, in Span<char>, in bool) Get an UTF-32 string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int ToUtf32String(this ReadOnlySpan<byte> bytes, in Span<char> buffer, in bool ignoreUsed = false) Parameters Type Name Description ReadOnlySpan<byte> bytes Bytes (little endian) Span<char> buffer Output buffer bool ignoreUsed Ignore the number of used bytes? Returns Type Description int Number of used bytes from the output buffer | Edit this page View Source ToUtf32String(Span<byte>) Get an UTF-32 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string ToUtf32String(this Span<byte> bytes) Parameters Type Name Description Span<byte> bytes Bytes (little endian) Returns Type Description string String | Edit this page View Source ToUtf8Chars(byte[]) Get an UTF-8 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static char[] ToUtf8Chars(this byte[] bytes) Parameters Type Name Description byte[] bytes Bytes Returns Type Description char[] String | Edit this page View Source ToUtf8Chars(Memory<byte>) Get an UTF-8 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static char[] ToUtf8Chars(this Memory<byte> bytes) Parameters Type Name Description Memory<byte> bytes Bytes Returns Type Description char[] String | Edit this page View Source ToUtf8Chars(ReadOnlyMemory<byte>) Get an UTF-8 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static char[] ToUtf8Chars(this ReadOnlyMemory<byte> bytes) Parameters Type Name Description ReadOnlyMemory<byte> bytes Bytes Returns Type Description char[] String | Edit this page View Source ToUtf8Chars(ReadOnlySpan<byte>, in bool) Get an UTF-8 string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static char[] ToUtf8Chars(this ReadOnlySpan<byte> bytes, in bool ignoreUsed = false) Parameters Type Name Description ReadOnlySpan<byte> bytes Bytes bool ignoreUsed Ignore the number of used bytes? Returns Type Description char[] String | Edit this page View Source ToUtf8Chars(Span<byte>) Get an UTF-8 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static char[] ToUtf8Chars(this Span<byte> bytes) Parameters Type Name Description Span<byte> bytes Bytes Returns Type Description char[] String | Edit this page View Source ToUtf8String(byte[]) Get an UTF-8 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string ToUtf8String(this byte[] bytes) Parameters Type Name Description byte[] bytes Bytes Returns Type Description string String | Edit this page View Source ToUtf8String(Memory<byte>) Get an UTF-8 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string ToUtf8String(this Memory<byte> bytes) Parameters Type Name Description Memory<byte> bytes Bytes Returns Type Description string String | Edit this page View Source ToUtf8String(ReadOnlyMemory<byte>) Get an UTF-8 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string ToUtf8String(this ReadOnlyMemory<byte> bytes) Parameters Type Name Description ReadOnlyMemory<byte> bytes Bytes Returns Type Description string String | Edit this page View Source ToUtf8String(ReadOnlySpan<byte>, in bool) Get an UTF-8 string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static string ToUtf8String(this ReadOnlySpan<byte> bytes, in bool ignoreUsed = false) Parameters Type Name Description ReadOnlySpan<byte> bytes Bytes bool ignoreUsed Ignore the number of used bytes? Returns Type Description string String | Edit this page View Source ToUtf8String(ReadOnlySpan<byte>, in Span<char>, in bool) Get an UTF-8 string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int ToUtf8String(this ReadOnlySpan<byte> bytes, in Span<char> buffer, in bool ignoreUsed = false) Parameters Type Name Description ReadOnlySpan<byte> bytes Bytes Span<char> buffer Output buffer bool ignoreUsed Ignore the number of used bytes? Returns Type Description int Number of used bytes from the output buffer | Edit this page View Source ToUtf8String(Span<byte>) Get an UTF-8 string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string ToUtf8String(this Span<byte> bytes) Parameters Type Name Description Span<byte> bytes Bytes Returns Type Description string String | Edit this page View Source Xor(byte*, byte*, int) XOR two byte arrays Declaration public static byte* Xor(byte* ptrA, byte* ptrB, int len) Parameters Type Name Description byte* ptrA A byte* ptrB B int len Length Returns Type Description byte* A | Edit this page View Source Xor(byte[], ReadOnlySpan<byte>) XOR two byte arrays Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] Xor(this byte[] a, ReadOnlySpan<byte> b) Parameters Type Name Description byte[] a A ReadOnlySpan<byte> b B Returns Type Description byte[] A | Edit this page View Source Xor(Span<byte>, ReadOnlySpan<byte>) XOR two byte arrays Declaration public static Span<byte> Xor(this Span<byte> a, ReadOnlySpan<byte> b) Parameters Type Name Description Span<byte> a A ReadOnlySpan<byte> b B Returns Type Description Span<byte> A"
  },
  "api/wan24.Core.CancellationAwaiter.html": {
    "href": "api/wan24.Core.CancellationAwaiter.html",
    "title": "Struct CancellationAwaiter | wan24-Core",
    "keywords": "Struct CancellationAwaiter Cancellation awaiter Implements ICriticalNotifyCompletion INotifyCompletion IEquatable<CancellationAwaiter> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public readonly record struct CancellationAwaiter : ICriticalNotifyCompletion, INotifyCompletion, IEquatable<CancellationAwaiter> Constructors | Edit this page View Source CancellationAwaiter(in CancellationToken) Constructor Declaration public CancellationAwaiter(in CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Properties | Edit this page View Source IsCompleted Is completed (canceled)? Declaration public bool IsCompleted { get; } Property Value Type Description bool Methods | Edit this page View Source GetAwaiter() Get the awaiter Declaration public CancellationAwaiter GetAwaiter() Returns Type Description CancellationAwaiter This | Edit this page View Source GetResult() Get the result (will throw an exception!) Declaration public void GetResult() Exceptions Type Condition OperationCanceledException Canceled InvalidOperationException Not canceled | Edit this page View Source OnCompleted(Action) Schedules the continuation action that's invoked when the instance completes. Declaration public void OnCompleted(Action continuation) Parameters Type Name Description Action continuation The action to invoke when the operation completes. Exceptions Type Condition ArgumentNullException The continuation argument is null (Nothing in Visual Basic). | Edit this page View Source UnsafeOnCompleted(Action) Schedules the continuation action that's invoked when the instance completes. Declaration public void UnsafeOnCompleted(Action continuation) Parameters Type Name Description Action continuation The action to invoke when the operation completes. Exceptions Type Condition ArgumentNullException The continuation argument is null (Nothing in Visual Basic). Implements ICriticalNotifyCompletion INotifyCompletion IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.CancellationOnDispose.html": {
    "href": "api/wan24.Core.CancellationOnDispose.html",
    "title": "Class CancellationOnDispose | wan24-Core",
    "keywords": "Class CancellationOnDispose CancellationOnDispose cancels a CancellationTokenSource when an object is disposing (or a CancellationToken was canceled) Inheritance object DisposableBase CancellationOnDispose Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class CancellationOnDispose : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source CancellationOnDispose(in IDisposableObject, in CancellationToken?) Constructor Declaration public CancellationOnDispose(in IDisposableObject obj, in CancellationToken? cancellationToken = null) Parameters Type Name Description IDisposableObject obj Monitored object (won't be disposed) CancellationToken? cancellationToken Monitored CancellationToken Fields | Edit this page View Source Object Monitored object (won't be disposed) Declaration public readonly IDisposableObject Object Field Value Type Description IDisposableObject | Edit this page View Source Token Monitored CancellationToken Declaration public readonly CancellationToken? Token Field Value Type Description CancellationToken? Properties | Edit this page View Source Cancellation The CancellationToken which will be canceled if the object is disposing (or the monitored CancellationToken was canceled; may be canceled already; will be canceled when disposing) Declaration public CancellationToken Cancellation { get; } Property Value Type Description CancellationToken Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source ThrowIfCanceled(in bool) Throw an exception, if canceled Declaration public bool ThrowIfCanceled(in bool throwIfCancellationRequested = true) Parameters Type Name Description bool throwIfCancellationRequested Throw an exception, if the monitored CancellationToken was canceled or this instance was disposed? Returns Type Description bool true, if the monitored object wasn't disposed and the CancellationToken wasn't canceled, false, if the CancellationToken was canceled Exceptions Type Condition OperationCanceledException The monitored CancellationToken was canceled or this instance was disposed (and throwIfCanceled was true) ObjectDisposedException The monitored object was disposed (but the monitored CancellationToken wasn't canceled) | Edit this page View Source ThrowIfDisposed() Throw an exception, if the monitored object was disposed Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public bool ThrowIfDisposed() Returns Type Description bool true, if the monitored object wasn't disposed and the CancellationToken wasn't canceled, false, if the CancellationToken was canceled Exceptions Type Condition ObjectDisposedException The monitored object was disposed (but the monitored CancellationToken wasn't canceled) Operators | Edit this page View Source implicit operator bool(in CancellationOnDispose) Cast as disposed flag Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in CancellationOnDispose cod) Parameters Type Name Description CancellationOnDispose cod CancellationOnDispose Returns Type Description bool | Edit this page View Source implicit operator CancellationToken(in CancellationOnDispose) Cast as cancellation token Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator CancellationToken(in CancellationOnDispose cod) Parameters Type Name Description CancellationOnDispose cod CancellationOnDispose Returns Type Description CancellationToken Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.CancellationTokenExtensions.html": {
    "href": "api/wan24.Core.CancellationTokenExtensions.html",
    "title": "Class CancellationTokenExtensions | wan24-Core",
    "keywords": "Class CancellationTokenExtensions CancellationToken extensions Inheritance object CancellationTokenExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class CancellationTokenExtensions Methods | Edit this page View Source GetAwaiter(CancellationToken) Get a cancellation awaiter for a cancellation token Declaration public static CancellationAwaiter GetAwaiter(this CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description CancellationAwaiter Cancellation awaiter | Edit this page View Source GetIsCancellationRequested(CancellationToken) Get if cancellation is requested and throw an exception, if canceled. Declaration public static bool GetIsCancellationRequested(this CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description bool false Exceptions Type Condition OperationCanceledException Cancellation is requested"
  },
  "api/wan24.Core.Cancellations.html": {
    "href": "api/wan24.Core.Cancellations.html",
    "title": "Class Cancellations | wan24-Core",
    "keywords": "Class Cancellations Cancellations combines multiple CancellationToken into one Inheritance object DisposableBase Cancellations Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class Cancellations : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source Cancellations(params CancellationToken[]) Constructor Declaration public Cancellations(params CancellationToken[] cts) Parameters Type Name Description CancellationToken[] cts Monitored CancellationToken Properties | Edit this page View Source Cancellation The CancellationToken which will be canceled if any of the monitored cancellation tokens was canceled Declaration public CancellationToken Cancellation { get; } Property Value Type Description CancellationToken | Edit this page View Source IsAnyCanceled Determine if any CancellationToken was canceled Declaration public bool IsAnyCanceled { get; } Property Value Type Description bool Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) Operators | Edit this page View Source implicit operator bool(in Cancellations) Cast as disposed flag Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in Cancellations cancellations) Parameters Type Name Description Cancellations cancellations Cancellations Returns Type Description bool | Edit this page View Source implicit operator CancellationToken(in Cancellations) Cast as cancellation token Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator CancellationToken(in Cancellations cancellations) Parameters Type Name Description Cancellations cancellations Cancellations Returns Type Description CancellationToken Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.CategoryLogger.html": {
    "href": "api/wan24.Core.CategoryLogger.html",
    "title": "Class CategoryLogger | wan24-Core",
    "keywords": "Class CategoryLogger Category logger prepends a category before the written message Inheritance object LoggerBase CategoryLogger Implements ILogger Inherited Members LoggerBase.Level LoggerBase.Next LoggerBase.BeginScope<TState>(TState) LoggerBase.IsEnabled(LogLevel) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class CategoryLogger : LoggerBase, ILogger Remarks Constructor Constructors | Edit this page View Source CategoryLogger(in string, in ILogger, in LogLevel?) Category logger prepends a category before the written message Declaration public CategoryLogger(in string category, in ILogger next, in LogLevel? level = null) Parameters Type Name Description string category Category ILogger next Next logger which should receive the message (including the category prefix) LogLevel? level Level Remarks Constructor Properties | Edit this page View Source Category Category Declaration public string Category { get; } Property Value Type Description string Methods | Edit this page View Source LogInt<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>) Writes a log entry Declaration protected override void LogInt<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel Level EventId eventId Event ID TState state State Exception exception Exception Func<TState, Exception, string> formatter Formatter Type Parameters Name Description TState State type Overrides LoggerBase.LogInt<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>) | Edit this page View Source Log<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>) Writes a log entry. Declaration public override void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. EventId eventId Id of the event. TState state The entry to be written. Can be also an object. Exception exception The exception related to this entry. Func<TState, Exception, string> formatter Function to create a string message of the state and exception. Type Parameters Name Description TState The type of the object to be written. Overrides LoggerBase.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>) Implements ILogger Extension Methods LoggerExtensions.GetFinalLogger(ILogger) LoggerExtensions.GetLogLevel(ILogger) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ChangeCallback.html": {
    "href": "api/wan24.Core.ChangeCallback.html",
    "title": "Class ChangeCallback | wan24-Core",
    "keywords": "Class ChangeCallback Change callback Inheritance object DisposableBase ChangeCallback Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ChangeCallback : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Remarks Constructor Constructors | Edit this page View Source ChangeCallback(in Action<object?>, in object?) Change callback Declaration public ChangeCallback(in Action<object?> callback, in object? state) Parameters Type Name Description Action<object> callback Callback object state State Remarks Constructor Properties | Edit this page View Source Callback Callback Declaration public Action<object?> Callback { get; } Property Value Type Description Action<object> | Edit this page View Source State State Declaration public object? State { get; } Property Value Type Description object Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source Invoke(in object?) Invoke the callback Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public virtual void Invoke(in object? state = null) Parameters Type Name Description object state Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ChangeCallbackExtensions.html": {
    "href": "api/wan24.Core.ChangeCallbackExtensions.html",
    "title": "Class ChangeCallbackExtensions | wan24-Core",
    "keywords": "Class ChangeCallbackExtensions Change callback extensions Inheritance object ChangeCallbackExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ChangeCallbackExtensions Methods | Edit this page View Source Invoke(IEnumerable<ChangeCallback>, in object?) Invoke all callbacks Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static void Invoke(this IEnumerable<ChangeCallback> callbacks, in object? state = null) Parameters Type Name Description IEnumerable<ChangeCallback> callbacks Callbacks object state State"
  },
  "api/wan24.Core.ChangeToken-1.DummySubscription.html": {
    "href": "api/wan24.Core.ChangeToken-1.DummySubscription.html",
    "title": "Struct ChangeToken<T>.DummySubscription | wan24-Core",
    "keywords": "Struct ChangeToken<T>.DummySubscription Dummy object notification subscription Implements IDisposable IEquatable<ChangeToken<T>.DummySubscription> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax protected readonly record struct ChangeToken<T>.DummySubscription : IDisposable, IEquatable<ChangeToken<T>.DummySubscription> Methods | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements IDisposable IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ChangeToken-1.html": {
    "href": "api/wan24.Core.ChangeToken-1.html",
    "title": "Class ChangeToken<T> | wan24-Core",
    "keywords": "Class ChangeToken<T> Change token Inheritance object ChangeToken ChangeToken<T> ConfigOption<tValue, tConfig> DisposableChangeToken<T> OverridableConfig<tFinal> Implements IChangeToken INotifyPropertyChanged IObservable<T> Inherited Members ChangeToken.Callbacks ChangeToken._HasChanged ChangeToken.SyncObject ChangeToken.ChangeIdentifier ChangeToken.HasChanged ChangeToken.ActiveChangeCallbacks ChangeToken.RegisterChangeCallback(Action<object>, object) ChangeToken.InvokeCallbacks(in object) ChangeToken.SetNewPropertyValue<T>(ref T, in T, in string) ChangeToken.PropertyChanged ChangeToken.RaisePropertyChanged(in string) ChangeToken.RaisePropertyChanged(object, PropertyChangedEventArgs) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class ChangeToken<T> : ChangeToken, IChangeToken, INotifyPropertyChanged, IObservable<T> where T : ChangeToken<T> Type Parameters Name Description T Final type Constructors | Edit this page View Source ChangeToken() Constructor Declaration protected ChangeToken() | Edit this page View Source ChangeToken(in Func<bool>) Constructor Declaration protected ChangeToken(in Func<bool> changeIdentifier) Parameters Type Name Description Func<bool> changeIdentifier Change identifier Fields | Edit this page View Source Observers Subscribed observers Declaration protected readonly List<IObserver<T>> Observers Field Value Type Description List<IObserver<T>> Methods | Edit this page View Source Subscribe(IObserver<T>) Notifies the provider that an observer is to receive notifications. Declaration public virtual IDisposable Subscribe(IObserver<T> observer) Parameters Type Name Description IObserver<T> observer The object that is to receive notifications. Returns Type Description IDisposable A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them. Implements IChangeToken INotifyPropertyChanged IObservable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ChangeToken.html": {
    "href": "api/wan24.Core.ChangeToken.html",
    "title": "Class ChangeToken | wan24-Core",
    "keywords": "Class ChangeToken Change token Inheritance object ChangeToken ChangeToken<T> DisposableChangeToken Implements IChangeToken INotifyPropertyChanged Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ChangeToken : IChangeToken, INotifyPropertyChanged Constructors | Edit this page View Source ChangeToken() Constructor Declaration public ChangeToken() | Edit this page View Source ChangeToken(in Func<bool>) Constructor Declaration public ChangeToken(in Func<bool> changeIdentifier) Parameters Type Name Description Func<bool> changeIdentifier Change identifier Fields | Edit this page View Source Callbacks Registered callbacks Declaration protected readonly HashSet<ChangeCallback> Callbacks Field Value Type Description HashSet<ChangeCallback> | Edit this page View Source _HasChanged Has changed? Declaration protected bool _HasChanged Field Value Type Description bool Properties | Edit this page View Source ActiveChangeCallbacks Indicates if this token will pro-actively raise callbacks. If false, the token consumer must poll HasChanged to detect changes. Declaration public bool ActiveChangeCallbacks { get; } Property Value Type Description bool | Edit this page View Source ChangeIdentifier Change identifier Declaration public Func<bool> ChangeIdentifier { get; protected set; } Property Value Type Description Func<bool> | Edit this page View Source HasChanged Gets a value that indicates if a change has occurred. Declaration public virtual bool HasChanged { get; set; } Property Value Type Description bool | Edit this page View Source SyncObject An object for thread synchronization Declaration public object SyncObject { get; } Property Value Type Description object Methods | Edit this page View Source InvokeCallbacks(in object?) Invoke all registered callbacks Declaration public virtual void InvokeCallbacks(in object? state = null) Parameters Type Name Description object state State | Edit this page View Source RaisePropertyChanged(object, PropertyChangedEventArgs) Raise the PropertyChanged event Declaration protected void RaisePropertyChanged(object sender, PropertyChangedEventArgs e) Parameters Type Name Description object sender Sender PropertyChangedEventArgs e Arguments | Edit this page View Source RaisePropertyChanged(in string?) Raise the PropertyChanged event Declaration public virtual void RaisePropertyChanged(in string? name = null) Parameters Type Name Description string name Name of the changed property | Edit this page View Source RegisterChangeCallback(Action<object?>, object?) Registers for a callback that will be invoked when the entry has changed. HasChanged MUST be set before the callback is invoked. Declaration public virtual IDisposable RegisterChangeCallback(Action<object?> callback, object? state = null) Parameters Type Name Description Action<object> callback The Action<T> to invoke. object state State to be passed into the callback. Returns Type Description IDisposable An IDisposable that is used to unregister the callback. | Edit this page View Source SetNewPropertyValue<T>(ref T, in T, in string) Set a new property value (will invoke callbacks and call RaisePropertyChanged(in string?)) Declaration protected virtual void SetNewPropertyValue<T>(ref T field, in T value, in string propertyName) Parameters Type Name Description T field Internal property field T value New value string propertyName Property name Type Parameters Name Description T Value type Events | Edit this page View Source PropertyChanged Occurs when a property value changes. Declaration public event PropertyChangedEventHandler? PropertyChanged Event Type Type Description PropertyChangedEventHandler Operators | Edit this page View Source implicit operator bool(in ChangeToken) Cast as changed-flag Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in ChangeToken token) Parameters Type Name Description ChangeToken token Token Returns Type Description bool Implements IChangeToken INotifyPropertyChanged Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ChangeTokenCollection-1.html": {
    "href": "api/wan24.Core.ChangeTokenCollection-1.html",
    "title": "Class ChangeTokenCollection<T> | wan24-Core",
    "keywords": "Class ChangeTokenCollection<T> Change token collection (don't forget to dispose!) Inheritance object ChangeToken ChangeToken<ChangeTokenCollection<T>> DisposableChangeToken<ChangeTokenCollection<T>> ChangeTokenCollection<T> Implements IChangeToken IObservable<ChangeTokenCollection<T>> IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IList ICollection IEnumerable INotifyCollectionChanged INotifyPropertyChanged IObserver<T> IDisposableObject IDisposable IAsyncDisposable Inherited Members ChangeToken<ChangeTokenCollection<T>>.Subscribe(IObserver<ChangeTokenCollection<T>>) ChangeToken.SyncObject ChangeToken.ChangeIdentifier ChangeToken.ActiveChangeCallbacks ChangeToken.RegisterChangeCallback(Action<object>, object) ChangeToken.InvokeCallbacks(in object) ChangeToken.PropertyChanged ChangeToken.RaisePropertyChanged(in string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class ChangeTokenCollection<T> : DisposableChangeToken<ChangeTokenCollection<T>>, IChangeToken, IObservable<ChangeTokenCollection<T>>, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged, IObserver<T>, IDisposableObject, IDisposable, IAsyncDisposable Type Parameters Name Description T Item type Constructors | Edit this page View Source ChangeTokenCollection(in int) Constructor Declaration public ChangeTokenCollection(in int capacity = 0) Parameters Type Name Description int capacity Initial capacity Properties | Edit this page View Source Count Gets the number of elements contained in the ICollection<T>. Declaration public int Count { get; } Property Value Type Description int The number of elements contained in the ICollection<T>. | Edit this page View Source HasChanged Gets a value that indicates if a change has occurred. Declaration public override bool HasChanged { get; set; } Property Value Type Description bool Overrides ChangeToken.HasChanged | Edit this page View Source IgnoreUnnamedPropertyNotifications Ignore an items PropertyChanged notification, if no property name was given with the event arguments? Declaration public bool IgnoreUnnamedPropertyNotifications { get; set; } Property Value Type Description bool | Edit this page View Source InvokeCallbacksOnPropertyChange Invoke callbacks on an items PropertyChanged event? Declaration public bool InvokeCallbacksOnPropertyChange { get; set; } Property Value Type Description bool | Edit this page View Source IsDisposed Is disposed? (final object disposing state) Declaration public bool IsDisposed { get; } Property Value Type Description bool | Edit this page View Source IsDisposing Is disposing? (is true when disposed already, too!) Declaration public bool IsDisposing { get; } Property Value Type Description bool | Edit this page View Source IsFixedSize Gets a value indicating whether the IList has a fixed size. Declaration public bool IsFixedSize { get; } Property Value Type Description bool true if the IList has a fixed size; otherwise, false. | Edit this page View Source IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool true if the ICollection<T> is read-only; otherwise, false. | Edit this page View Source IsSynchronized Gets a value indicating whether access to the ICollection is synchronized (thread safe). Declaration public bool IsSynchronized { get; } Property Value Type Description bool true if access to the ICollection is synchronized (thread safe); otherwise, false. | Edit this page View Source this[int] Gets or sets the element at the specified index. Declaration public T this[int index] { get; set; } Parameters Type Name Description int index The zero-based index of the element to get or set. Property Value Type Description T The element at the specified index. Exceptions Type Condition ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. | Edit this page View Source ObserveCollection Observe the collection (if items have been added/removed)? Declaration public bool ObserveCollection { get; set; } Property Value Type Description bool | Edit this page View Source ObserveItems Observe the collection items (if IChangeToken/INotifyPropertyChanged item properties have been changed)? Declaration public bool ObserveItems { get; init; } Property Value Type Description bool | Edit this page View Source OverrideStateOnPropertyChange Override the change token notification registration state with the changed property name, if known? Declaration public bool OverrideStateOnPropertyChange { get; set; } Property Value Type Description bool | Edit this page View Source SyncRoot Gets an object that can be used to synchronize access to the ICollection. Declaration public object SyncRoot { get; } Property Value Type Description object An object that can be used to synchronize access to the ICollection. Methods | Edit this page View Source Add(object?) Adds an item to the IList. Declaration public int Add(object? value) Parameters Type Name Description object value The object to add to the IList. Returns Type Description int The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection. Exceptions Type Condition NotSupportedException The IList is read-only. -or- The IList has a fixed size. | Edit this page View Source Add(T) Adds an item to the ICollection<T>. Declaration public void Add(T item) Parameters Type Name Description T item The object to add to the ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Clear() Removes all items from the ICollection<T>. Declaration public void Clear() Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Contains(object?) Determines whether the IList contains a specific value. Declaration public bool Contains(object? value) Parameters Type Name Description object value The object to locate in the IList. Returns Type Description bool true if the object is found in the IList; otherwise, false. | Edit this page View Source Contains(T) Determines whether the ICollection<T> contains a specific value. Declaration public bool Contains(T item) Parameters Type Name Description T item The object to locate in the ICollection<T>. Returns Type Description bool true if item is found in the ICollection<T>; otherwise, false. | Edit this page View Source CopyTo(Array, int) Copies the elements of the ICollection to an Array, starting at a particular Array index. Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. int index The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException index is less than zero. ArgumentException array is multidimensional. -or- The number of elements in the source ICollection is greater than the available space from index to the end of the destination array. -or- The type of the source ICollection cannot be cast automatically to the type of the destination array. | Edit this page View Source CopyTo(T[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides DisposableChangeToken<ChangeTokenCollection<T>>.Dispose() | Edit this page View Source DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask A task that represents the asynchronous dispose operation. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> An enumerator that can be used to iterate through the collection. | Edit this page View Source IndexOf(object?) Determines the index of a specific item in the IList. Declaration public int IndexOf(object? value) Parameters Type Name Description object value The object to locate in the IList. Returns Type Description int The index of value if found in the list; otherwise, -1. | Edit this page View Source IndexOf(T) Determines the index of a specific item in the IList<T>. Declaration public int IndexOf(T item) Parameters Type Name Description T item The object to locate in the IList<T>. Returns Type Description int The index of item if found in the list; otherwise, -1. | Edit this page View Source Insert(int, object?) Inserts an item to the IList at the specified index. Declaration public void Insert(int index, object? value) Parameters Type Name Description int index The zero-based index at which value should be inserted. object value The object to insert into the IList. Exceptions Type Condition ArgumentOutOfRangeException index is not a valid index in the IList. NotSupportedException The IList is read-only. -or- The IList has a fixed size. NullReferenceException value is null reference in the IList. | Edit this page View Source Insert(int, T) Inserts an item to the IList<T> at the specified index. Declaration public void Insert(int index, T item) Parameters Type Name Description int index The zero-based index at which item should be inserted. T item The object to insert into the IList<T>. Exceptions Type Condition ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. | Edit this page View Source OnCompleted() Notifies the observer that the provider has finished sending push-based notifications. Declaration public void OnCompleted() | Edit this page View Source OnError(Exception) Notifies the observer that the provider has experienced an error condition. Declaration public void OnError(Exception error) Parameters Type Name Description Exception error An object that provides additional information about the error. | Edit this page View Source OnNext(T) Provides the observer with new data. Declaration public void OnNext(T value) Parameters Type Name Description T value The current notification information. | Edit this page View Source Remove(object?) Removes the first occurrence of a specific object from the IList. Declaration public void Remove(object? value) Parameters Type Name Description object value The object to remove from the IList. Exceptions Type Condition NotSupportedException The IList is read-only. -or- The IList has a fixed size. | Edit this page View Source Remove(T) Removes the first occurrence of a specific object from the ICollection<T>. Declaration public bool Remove(T item) Parameters Type Name Description T item The object to remove from the ICollection<T>. Returns Type Description bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source RemoveAt(int) Removes the IList<T> item at the specified index. Declaration public void RemoveAt(int index) Parameters Type Name Description int index The zero-based index of the item to remove. Exceptions Type Condition ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. Events | Edit this page View Source CollectionChanged Occurs when the collection changes. Declaration public event NotifyCollectionChangedEventHandler? CollectionChanged Event Type Type Description NotifyCollectionChangedEventHandler | Edit this page View Source OnDisposed Raised when disposed Declaration public event IDisposableObject.Dispose_Delegate? OnDisposed Event Type Type Description IDisposableObject.Dispose_Delegate | Edit this page View Source OnDisposing Raised when disposing Declaration public event IDisposableObject.Dispose_Delegate? OnDisposing Event Type Type Description IDisposableObject.Dispose_Delegate Implements IChangeToken IObservable<T> IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IList ICollection IEnumerable INotifyCollectionChanged INotifyPropertyChanged IObserver<T> IDisposableObject IDisposable IAsyncDisposable Extension Methods CollectionExtensions.AddRangeAsync<T>(ICollection<T>, IAsyncEnumerable<T>, CancellationToken) CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.AddRange<T>(ICollection<T>, params T[]) ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ChangeTokenDictionary-2.html": {
    "href": "api/wan24.Core.ChangeTokenDictionary-2.html",
    "title": "Class ChangeTokenDictionary<tKey, tValue> | wan24-Core",
    "keywords": "Class ChangeTokenDictionary<tKey, tValue> Change token dictionary (observes values; don't forget to dispose!) Inheritance object ChangeToken ChangeToken<ChangeTokenDictionary<tKey, tValue>> DisposableChangeToken<ChangeTokenDictionary<tKey, tValue>> ChangeTokenDictionary<tKey, tValue> Implements IChangeToken IObservable<ChangeTokenDictionary<tKey, tValue>> IDictionary<tKey, tValue> ICollection<KeyValuePair<tKey, tValue>> IDictionary ICollection IReadOnlyDictionary<tKey, tValue> IReadOnlyCollection<KeyValuePair<tKey, tValue>> IEnumerable<KeyValuePair<tKey, tValue>> IEnumerable INotifyCollectionChanged INotifyPropertyChanged IObserver<tValue> IDisposableObject IDisposable IAsyncDisposable Inherited Members ChangeToken<ChangeTokenDictionary<tKey, tValue>>.Subscribe(IObserver<ChangeTokenDictionary<tKey, tValue>>) ChangeToken.SyncObject ChangeToken.ChangeIdentifier ChangeToken.HasChanged ChangeToken.ActiveChangeCallbacks ChangeToken.RegisterChangeCallback(Action<object>, object) ChangeToken.InvokeCallbacks(in object) ChangeToken.PropertyChanged ChangeToken.RaisePropertyChanged(in string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class ChangeTokenDictionary<tKey, tValue> : DisposableChangeToken<ChangeTokenDictionary<tKey, tValue>>, IChangeToken, IObservable<ChangeTokenDictionary<tKey, tValue>>, IDictionary<tKey, tValue>, ICollection<KeyValuePair<tKey, tValue>>, IDictionary, ICollection, IReadOnlyDictionary<tKey, tValue>, IReadOnlyCollection<KeyValuePair<tKey, tValue>>, IEnumerable<KeyValuePair<tKey, tValue>>, IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged, IObserver<tValue>, IDisposableObject, IDisposable, IAsyncDisposable where tKey : notnull where tValue : notnull Type Parameters Name Description tKey Key type tValue Value type Constructors | Edit this page View Source ChangeTokenDictionary(in int) Constructor Declaration public ChangeTokenDictionary(in int capacity = 0) Parameters Type Name Description int capacity Initial capacity Properties | Edit this page View Source Count Gets the number of elements contained in the ICollection<T>. Declaration public int Count { get; } Property Value Type Description int The number of elements contained in the ICollection<T>. | Edit this page View Source IgnoreUnnamedPropertyNotifications Ignore an items PropertyChanged notification, if no property name was given with the event arguments? Declaration public bool IgnoreUnnamedPropertyNotifications { get; set; } Property Value Type Description bool | Edit this page View Source InvokeCallbacksOnPropertyChange Invoke callbacks on an items PropertyChanged event? Declaration public bool InvokeCallbacksOnPropertyChange { get; set; } Property Value Type Description bool | Edit this page View Source IsDisposed Is disposed? (final object disposing state) Declaration public bool IsDisposed { get; } Property Value Type Description bool | Edit this page View Source IsDisposing Is disposing? (is true when disposed already, too!) Declaration public bool IsDisposing { get; } Property Value Type Description bool | Edit this page View Source IsFixedSize Gets a value indicating whether the IDictionary object has a fixed size. Declaration public bool IsFixedSize { get; } Property Value Type Description bool true if the IDictionary object has a fixed size; otherwise, false. | Edit this page View Source IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool true if the ICollection<T> is read-only; otherwise, false. | Edit this page View Source IsSynchronized Gets a value indicating whether access to the ICollection is synchronized (thread safe). Declaration public bool IsSynchronized { get; } Property Value Type Description bool true if access to the ICollection is synchronized (thread safe); otherwise, false. | Edit this page View Source this[object] Gets or sets the element with the specified key. Declaration public object? this[object key] { get; set; } Parameters Type Name Description object key The key of the element to get or set. Property Value Type Description object The element with the specified key, or null if the key does not exist. Exceptions Type Condition ArgumentNullException key is null. NotSupportedException The property is set and the IDictionary object is read-only. -or- The property is set, key does not exist in the collection, and the IDictionary has a fixed size. | Edit this page View Source this[tKey] Gets or sets the element with the specified key. Declaration public tValue this[tKey key] { get; set; } Parameters Type Name Description tKey key The key of the element to get or set. Property Value Type Description tValue The element with the specified key. Exceptions Type Condition ArgumentNullException key is null. KeyNotFoundException The property is retrieved and key is not found. NotSupportedException The property is set and the IDictionary<TKey, TValue> is read-only. | Edit this page View Source Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. Declaration public ICollection<tKey> Keys { get; } Property Value Type Description ICollection<tKey> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. | Edit this page View Source ObserveDictionary Observe the dictionary (if items have been added/removed)? Declaration public bool ObserveDictionary { get; set; } Property Value Type Description bool | Edit this page View Source ObserveItems Observe the collection items (if IChangeToken/INotifyPropertyChanged item properties have been changed)? Declaration public bool ObserveItems { get; init; } Property Value Type Description bool | Edit this page View Source OverrideStateOnPropertyChange Override the change token notification registration state with the changed property name, if known? Declaration public bool OverrideStateOnPropertyChange { get; set; } Property Value Type Description bool | Edit this page View Source SyncRoot Gets an object that can be used to synchronize access to the ICollection. Declaration public object SyncRoot { get; } Property Value Type Description object An object that can be used to synchronize access to the ICollection. | Edit this page View Source Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. Declaration public ICollection<tValue> Values { get; } Property Value Type Description ICollection<tValue> An ICollection<T> containing the values in the object that implements IDictionary<TKey, TValue>. Methods | Edit this page View Source Add(KeyValuePair<tKey, tValue>) Adds an item to the ICollection<T>. Declaration public void Add(KeyValuePair<tKey, tValue> item) Parameters Type Name Description KeyValuePair<tKey, tValue> item The object to add to the ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Add(object, object?) Adds an element with the provided key and value to the IDictionary object. Declaration public void Add(object key, object? value) Parameters Type Name Description object key The object to use as the key of the element to add. object value The object to use as the value of the element to add. Exceptions Type Condition ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary object. NotSupportedException The IDictionary is read-only. -or- The IDictionary has a fixed size. | Edit this page View Source Add(tKey, tValue) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. Declaration public void Add(tKey key, tValue value) Parameters Type Name Description tKey key The object to use as the key of the element to add. tValue value The object to use as the value of the element to add. Exceptions Type Condition ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary<TKey, TValue>. NotSupportedException The IDictionary<TKey, TValue> is read-only. | Edit this page View Source Clear() Removes all items from the ICollection<T>. Declaration public void Clear() Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Contains(KeyValuePair<tKey, tValue>) Determines whether the ICollection<T> contains a specific value. Declaration public bool Contains(KeyValuePair<tKey, tValue> item) Parameters Type Name Description KeyValuePair<tKey, tValue> item The object to locate in the ICollection<T>. Returns Type Description bool true if item is found in the ICollection<T>; otherwise, false. | Edit this page View Source Contains(object) Determines whether the IDictionary object contains an element with the specified key. Declaration public bool Contains(object key) Parameters Type Name Description object key The key to locate in the IDictionary object. Returns Type Description bool true if the IDictionary contains an element with the key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. | Edit this page View Source ContainsKey(tKey) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. Declaration public bool ContainsKey(tKey key) Parameters Type Name Description tKey key The key to locate in the IDictionary<TKey, TValue>. Returns Type Description bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. | Edit this page View Source CopyTo(Array, int) Copies the elements of the ICollection to an Array, starting at a particular Array index. Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. int index The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException index is less than zero. ArgumentException array is multidimensional. -or- The number of elements in the source ICollection is greater than the available space from index to the end of the destination array. -or- The type of the source ICollection cannot be cast automatically to the type of the destination array. | Edit this page View Source CopyTo(KeyValuePair<tKey, tValue>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. Declaration public void CopyTo(KeyValuePair<tKey, tValue>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair<tKey, tValue>[] array The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides DisposableChangeToken<ChangeTokenDictionary<tKey, tValue>>.Dispose() | Edit this page View Source DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask A task that represents the asynchronous dispose operation. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<KeyValuePair<tKey, tValue>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<tKey, tValue>> An enumerator that can be used to iterate through the collection. | Edit this page View Source KeyOfValue(tValue) Find the first key of a value Declaration public tKey? KeyOfValue(tValue value) Parameters Type Name Description tValue value Value Returns Type Description tKey First key | Edit this page View Source KeysOfValue(tValue) Find the keys of a value Declaration public IEnumerable<tKey> KeysOfValue(tValue value) Parameters Type Name Description tValue value Value Returns Type Description IEnumerable<tKey> Keys | Edit this page View Source OnCompleted() Notifies the observer that the provider has finished sending push-based notifications. Declaration public void OnCompleted() | Edit this page View Source OnError(Exception) Notifies the observer that the provider has experienced an error condition. Declaration public void OnError(Exception error) Parameters Type Name Description Exception error An object that provides additional information about the error. | Edit this page View Source OnNext(tValue) Provides the observer with new data. Declaration public void OnNext(tValue value) Parameters Type Name Description tValue value The current notification information. | Edit this page View Source Remove(KeyValuePair<tKey, tValue>) Removes the first occurrence of a specific object from the ICollection<T>. Declaration public bool Remove(KeyValuePair<tKey, tValue> item) Parameters Type Name Description KeyValuePair<tKey, tValue> item The object to remove from the ICollection<T>. Returns Type Description bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Remove(object) Removes the element with the specified key from the IDictionary object. Declaration public void Remove(object key) Parameters Type Name Description object key The key of the element to remove. Exceptions Type Condition ArgumentNullException key is null. NotSupportedException The IDictionary object is read-only. -or- The IDictionary has a fixed size. | Edit this page View Source Remove(tKey) Removes the element with the specified key from the IDictionary<TKey, TValue>. Declaration public bool Remove(tKey key) Parameters Type Name Description tKey key The key of the element to remove. Returns Type Description bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. Exceptions Type Condition ArgumentNullException key is null. NotSupportedException The IDictionary<TKey, TValue> is read-only. | Edit this page View Source TryGetValue(tKey, out tValue) Gets the value associated with the specified key. Declaration public bool TryGetValue(tKey key, out tValue value) Parameters Type Name Description tKey key The key whose value to get. tValue value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. Events | Edit this page View Source CollectionChanged Occurs when the collection changes. Declaration public event NotifyCollectionChangedEventHandler? CollectionChanged Event Type Type Description NotifyCollectionChangedEventHandler | Edit this page View Source OnDisposed Raised when disposed Declaration public event IDisposableObject.Dispose_Delegate? OnDisposed Event Type Type Description IDisposableObject.Dispose_Delegate | Edit this page View Source OnDisposing Raised when disposing Declaration public event IDisposableObject.Dispose_Delegate? OnDisposing Event Type Type Description IDisposableObject.Dispose_Delegate Implements IChangeToken IObservable<T> IDictionary<TKey, TValue> ICollection<T> IDictionary ICollection IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IEnumerable INotifyCollectionChanged INotifyPropertyChanged IObserver<T> IDisposableObject IDisposable IAsyncDisposable Extension Methods CollectionExtensions.AddRangeAsync<T>(ICollection<T>, IAsyncEnumerable<T>, CancellationToken) CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.AddRange<T>(ICollection<T>, params T[]) ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.CharsExtensions.html": {
    "href": "api/wan24.Core.CharsExtensions.html",
    "title": "Class CharsExtensions | wan24-Core",
    "keywords": "Class CharsExtensions char array extensions Inheritance object CharsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class CharsExtensions Methods | Edit this page View Source Clear(char[]) Clear the array Declaration public static void Clear(this char[] arr) Parameters Type Name Description char[] arr Array | Edit this page View Source DecodeBase64(char[]) Decode base64 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] DecodeBase64(this char[] str) Parameters Type Name Description char[] str base64 UTF-8 string Returns Type Description byte[] Decoded bytes | Edit this page View Source DecodeBase64(char[], byte[]) Decode base64 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int DecodeBase64(this char[] str, byte[] buffer) Parameters Type Name Description char[] str base64 UTF-8 string byte[] buffer Buffer Returns Type Description int Number of decoded characters written to buffer | Edit this page View Source DecodeBase64(ReadOnlySpan<char>) Decode base64 Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] DecodeBase64(this ReadOnlySpan<char> str) Parameters Type Name Description ReadOnlySpan<char> str base64 UTF-8 string Returns Type Description byte[] Decoded bytes | Edit this page View Source DecodeBase64(ReadOnlySpan<char>, Span<byte>) Decode base64 Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int DecodeBase64(this ReadOnlySpan<char> str, Span<byte> buffer) Parameters Type Name Description ReadOnlySpan<char> str base64 UTF-8 string Span<byte> buffer Buffer Returns Type Description int Number of decoded characters written to buffer | Edit this page View Source DecodeBase64(Span<char>) Decode base64 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] DecodeBase64(this Span<char> str) Parameters Type Name Description Span<char> str base64 UTF-8 string Returns Type Description byte[] Decoded bytes | Edit this page View Source DecodeBase64(Span<char>, Span<byte>) Decode base64 Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int DecodeBase64(this Span<char> str, Span<byte> buffer) Parameters Type Name Description Span<char> str base64 UTF-8 string Span<byte> buffer Buffer Returns Type Description int Number of decoded characters written to buffer"
  },
  "api/wan24.Core.ChecksumExtensions.html": {
    "href": "api/wan24.Core.ChecksumExtensions.html",
    "title": "Class ChecksumExtensions | wan24-Core",
    "keywords": "Class ChecksumExtensions Checksum extensions Inheritance object ChecksumExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ChecksumExtensions Methods | Edit this page View Source CreateChecksum(byte[], in int) Create a checksum Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] CreateChecksum(this byte[] data, in int len = 8) Parameters Type Name Description byte[] data Data int len Checksum length in bytes (must be greater than zero, a power of two and not larger than 256) Returns Type Description byte[] Checksum | Edit this page View Source CreateChecksum(in Memory<byte>, in int) Create a checksum Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] CreateChecksum(this in Memory<byte> data, in int len = 8) Parameters Type Name Description Memory<byte> data Data int len Checksum length in bytes (must be greater than zero, a power of two and not larger than 256) Returns Type Description byte[] Checksum | Edit this page View Source CreateChecksum(in ReadOnlyMemory<byte>, in int) Create a checksum Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] CreateChecksum(this in ReadOnlyMemory<byte> data, in int len = 8) Parameters Type Name Description ReadOnlyMemory<byte> data Data int len Checksum length in bytes (must be greater than zero, a power of two and not larger than 256) Returns Type Description byte[] Checksum | Edit this page View Source CreateChecksum(in ReadOnlySpan<byte>, in int) Create a checksum Declaration public static byte[] CreateChecksum(this in ReadOnlySpan<byte> data, in int len = 8) Parameters Type Name Description ReadOnlySpan<byte> data Data int len Checksum length in bytes (must be greater than zero, a power of two and not larger than 256) Returns Type Description byte[] Checksum | Edit this page View Source CreateChecksum(in Span<byte>, in int) Create a checksum Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] CreateChecksum(this in Span<byte> data, in int len = 8) Parameters Type Name Description Span<byte> data Data int len Checksum length in bytes (must be greater than zero, a power of two and not larger than 256) Returns Type Description byte[] Checksum | Edit this page View Source UpdateChecksum(byte[], in Span<byte>) Update a checksum Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void UpdateChecksum(this byte[] data, in Span<byte> checksum) Parameters Type Name Description byte[] data Data Span<byte> checksum Checksum (length must be greater than zero, a power of two and not larger than 256) | Edit this page View Source UpdateChecksum(in Memory<byte>, in Span<byte>) Update a checksum Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void UpdateChecksum(this in Memory<byte> data, in Span<byte> checksum) Parameters Type Name Description Memory<byte> data Data Span<byte> checksum Checksum (length must be greater than zero, a power of two and not larger than 256) | Edit this page View Source UpdateChecksum(in ReadOnlyMemory<byte>, in Span<byte>) Update a checksum Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void UpdateChecksum(this in ReadOnlyMemory<byte> data, in Span<byte> checksum) Parameters Type Name Description ReadOnlyMemory<byte> data Data Span<byte> checksum Checksum (length must be greater than zero, a power of two and not larger than 256) | Edit this page View Source UpdateChecksum(in ReadOnlySpan<byte>, in Span<byte>) Update a checksum Declaration public static void UpdateChecksum(this in ReadOnlySpan<byte> data, in Span<byte> checksum) Parameters Type Name Description ReadOnlySpan<byte> data Data Span<byte> checksum Checksum (length must be greater than zero, a power of two and not larger than 256) | Edit this page View Source UpdateChecksum(in Span<byte>, in Span<byte>) Update a checksum Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void UpdateChecksum(this in Span<byte> data, in Span<byte> checksum) Parameters Type Name Description Span<byte> data Data Span<byte> checksum Checksum (length must be greater than zero, a power of two and not larger than 256)"
  },
  "api/wan24.Core.ChecksumTransform.html": {
    "href": "api/wan24.Core.ChecksumTransform.html",
    "title": "Class ChecksumTransform | wan24-Core",
    "keywords": "Class ChecksumTransform Checksum hash algorithm Inheritance object HashAlgorithm ChecksumTransform Implements ICryptoTransform IDisposable Inherited Members HashAlgorithm.Clear() HashAlgorithm.ComputeHash(byte[]) HashAlgorithm.ComputeHash(byte[], int, int) HashAlgorithm.ComputeHash(Stream) HashAlgorithm.ComputeHashAsync(Stream, CancellationToken) HashAlgorithm.Create(string) HashAlgorithm.Dispose() HashAlgorithm.TransformBlock(byte[], int, int, byte[], int) HashAlgorithm.TransformFinalBlock(byte[], int, int) HashAlgorithm.TryComputeHash(ReadOnlySpan<byte>, Span<byte>, out int) HashAlgorithm.Hash HashAlgorithm.HashSize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class ChecksumTransform : HashAlgorithm, ICryptoTransform, IDisposable Constructors | Edit this page View Source ChecksumTransform() Constructor Declaration public ChecksumTransform() | Edit this page View Source ChecksumTransform(in byte[]) Constructor Declaration public ChecksumTransform(in byte[] checksum) Parameters Type Name Description byte[] checksum Checksum (length must be greater than zero, a power of two and not larger than 256) | Edit this page View Source ChecksumTransform(in int) Constructor Declaration public ChecksumTransform(in int len) Parameters Type Name Description int len Checksum length in bytes (must be greater than zero, a power of two and not larger than 256) Fields | Edit this page View Source ALGORITHM_NAME Algorithm name (being used when calling Register()) Declaration public const string ALGORITHM_NAME = \"Checksum\" Field Value Type Description string | Edit this page View Source HASH_LENGTH Default checksum length in bytes Declaration public const int HASH_LENGTH = 8 Field Value Type Description int Properties | Edit this page View Source CanReuseTransform Gets a value indicating whether the current transform can be reused. Declaration public override bool CanReuseTransform { get; } Property Value Type Description bool Always true. Overrides HashAlgorithm.CanReuseTransform | Edit this page View Source CanTransformMultipleBlocks When overridden in a derived class, gets a value indicating whether multiple blocks can be transformed. Declaration public override bool CanTransformMultipleBlocks { get; } Property Value Type Description bool true if multiple blocks can be transformed; otherwise, false. Overrides HashAlgorithm.CanTransformMultipleBlocks | Edit this page View Source HashAlgorithmName Hash algorithm name Declaration public static HashAlgorithmName HashAlgorithmName { get; } Property Value Type Description HashAlgorithmName | Edit this page View Source InputBlockSize When overridden in a derived class, gets the input block size. Declaration public override int InputBlockSize { get; } Property Value Type Description int The input block size. Overrides HashAlgorithm.InputBlockSize | Edit this page View Source OutputBlockSize When overridden in a derived class, gets the output block size. Declaration public override int OutputBlockSize { get; } Property Value Type Description int The output block size. Overrides HashAlgorithm.OutputBlockSize Methods | Edit this page View Source Create() Declaration public static ChecksumTransform Create() Returns Type Description ChecksumTransform | Edit this page View Source HashCore(byte[], int, int) When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash. Declaration protected override void HashCore(byte[] array, int ibStart, int cbSize) Parameters Type Name Description byte[] array The input to compute the hash code for. int ibStart The offset into the byte array from which to begin using data. int cbSize The number of bytes in the byte array to use as data. Overrides HashAlgorithm.HashCore(byte[], int, int) | Edit this page View Source HashCore(ReadOnlySpan<byte>) Routes data written to the object into the hash algorithm for computing the hash. Declaration protected override void HashCore(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source The input to compute the hash code for. Overrides HashAlgorithm.HashCore(ReadOnlySpan<byte>) | Edit this page View Source HashData(byte[]) Create a checksum from source data Declaration public static byte[] HashData(byte[] source) Parameters Type Name Description byte[] source Source data Returns Type Description byte[] Checksum | Edit this page View Source HashData(ReadOnlySpan<byte>) Create a checksum from source data Declaration public static byte[] HashData(ReadOnlySpan<byte> source) Parameters Type Name Description ReadOnlySpan<byte> source Source data Returns Type Description byte[] Checksum | Edit this page View Source HashData(ReadOnlySpan<byte>, Span<byte>) Create a checksum from source data Declaration public static int HashData(ReadOnlySpan<byte> source, Span<byte> destination) Parameters Type Name Description ReadOnlySpan<byte> source Source data Span<byte> destination Destination (the checksum; length must be greater than zero, a power of two and not larger than 256) Returns Type Description int Checksum | Edit this page View Source HashFinal() When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic hash algorithm. Declaration protected override byte[] HashFinal() Returns Type Description byte[] The computed hash code. Overrides HashAlgorithm.HashFinal() | Edit this page View Source Initialize() Resets the hash algorithm to its initial state. Declaration public override void Initialize() Overrides HashAlgorithm.Initialize() | Edit this page View Source Register() Register the algorithm to the CryptoConfig Declaration public static void Register() | Edit this page View Source TransformBlock(in ReadOnlySpan<byte>) Transform a block Declaration public void TransformBlock(in ReadOnlySpan<byte> input) Parameters Type Name Description ReadOnlySpan<byte> input Input | Edit this page View Source TryHashData(ReadOnlySpan<byte>, Span<byte>, out int) Create a checksum from source data Declaration public static bool TryHashData(ReadOnlySpan<byte> source, Span<byte> destination, out int bytesWritten) Parameters Type Name Description ReadOnlySpan<byte> source Source data Span<byte> destination Destination (the checksum; length should be greater than zero, a power of two and not larger than 256) int bytesWritten Number of bytes written to the destination (will be a power of two, if succeed) Returns Type Description bool Succeed? Implements ICryptoTransform IDisposable Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ChunkedFileStream.html": {
    "href": "api/wan24.Core.ChunkedFileStream.html",
    "title": "Class ChunkedFileStream | wan24-Core",
    "keywords": "Class ChunkedFileStream Chunked file stream helper Inheritance object ChunkedFileStream Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ChunkedFileStream Methods | Edit this page View Source Create(string, in long, FileMode, FileAccess, FileShare, FileMode, FileOptions, UnixFileMode?) Create a chunked file stream Declaration public static ChunkedStream Create(string fileName, in long chunkSize, FileMode openMode = FileMode.Open, FileAccess access = FileAccess.ReadWrite, FileShare share = FileShare.None, FileMode createMode = FileMode.CreateNew, FileOptions options = FileOptions.SequentialScan | FileOptions.Asynchronous, UnixFileMode? mode = null) Parameters Type Name Description string fileName Filename template (needs to use variable chunk (the numeric chunk index) for parsing a chunk filename using Parse(string, in Dictionary<string, string>, in StringParserOptions?) long chunkSize Chunk size in bytes FileMode openMode Open existing file mode FileAccess access File access FileShare share File share FileMode createMode File create mode FileOptions options File options UnixFileMode? mode File create mode Returns Type Description ChunkedStream Chunked stream"
  },
  "api/wan24.Core.ChunkedStream.AsyncDeleteChunk_Delegate.html": {
    "href": "api/wan24.Core.ChunkedStream.AsyncDeleteChunk_Delegate.html",
    "title": "Delegate ChunkedStream.AsyncDeleteChunk_Delegate | wan24-Core",
    "keywords": "Delegate ChunkedStream.AsyncDeleteChunk_Delegate Delegate for deleting a chunk Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task ChunkedStream.AsyncDeleteChunk_Delegate(ChunkedStream stream, int chunk, CancellationToken cancellationToken) Parameters Type Name Description ChunkedStream stream Chunked stream int chunk Chunk index CancellationToken cancellationToken Cancellation token Returns Type Description Task Delegate for deleting a chunk Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ChunkedStream.AsyncStreamFactory_Delegate.html": {
    "href": "api/wan24.Core.ChunkedStream.AsyncStreamFactory_Delegate.html",
    "title": "Delegate ChunkedStream.AsyncStreamFactory_Delegate | wan24-Core",
    "keywords": "Delegate ChunkedStream.AsyncStreamFactory_Delegate Delegate for an asynchronous chunk stream factory Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task<Stream> ChunkedStream.AsyncStreamFactory_Delegate(ChunkedStream stream, int chunk, CancellationToken cancellationToken) Parameters Type Name Description ChunkedStream stream Chunked stream int chunk Chunk index CancellationToken cancellationToken Cancellation token Returns Type Description Task<Stream> Chunk stream Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ChunkedStream.DeleteChunk_Delegate.html": {
    "href": "api/wan24.Core.ChunkedStream.DeleteChunk_Delegate.html",
    "title": "Delegate ChunkedStream.DeleteChunk_Delegate | wan24-Core",
    "keywords": "Delegate ChunkedStream.DeleteChunk_Delegate Delegate for deleting a chunk Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void ChunkedStream.DeleteChunk_Delegate(ChunkedStream stream, int chunk) Parameters Type Name Description ChunkedStream stream Chunked stream int chunk Chunk index Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ChunkedStream.StreamFactory_Delegate.html": {
    "href": "api/wan24.Core.ChunkedStream.StreamFactory_Delegate.html",
    "title": "Delegate ChunkedStream.StreamFactory_Delegate | wan24-Core",
    "keywords": "Delegate ChunkedStream.StreamFactory_Delegate Delegate for a chunk stream factory Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Stream ChunkedStream.StreamFactory_Delegate(ChunkedStream stream, int chunk) Parameters Type Name Description ChunkedStream stream Chunked stream int chunk Chunk index Returns Type Description Stream Chunk stream Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ChunkedStream.html": {
    "href": "api/wan24.Core.ChunkedStream.html",
    "title": "Class ChunkedStream | wan24-Core",
    "keywords": "Class ChunkedStream Chunked stream Inheritance object MarshalByRefObject Stream StreamBase ChunkedStream Implements IStream IDisposableObject IDisposable IAsyncDisposable Inherited Members StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ChunkedStream : StreamBase, IStream, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source ChunkedStream(in bool, in long, in StreamFactory_Delegate?, in DeleteChunk_Delegate?, in AsyncStreamFactory_Delegate?, in AsyncDeleteChunk_Delegate?, in int, in long) Constructor Declaration public ChunkedStream(in bool writable, in long chunkSize, in ChunkedStream.StreamFactory_Delegate? chunkStreamFactory, in ChunkedStream.DeleteChunk_Delegate? deleteChunk, in ChunkedStream.AsyncStreamFactory_Delegate? asyncChunkStreamFactory = null, in ChunkedStream.AsyncDeleteChunk_Delegate? asyncDeleteChunk = null, in int numberOfChunks = 0, in long lastChunkLength = 0) Parameters Type Name Description bool writable Writable? long chunkSize Chunk size in bytes ChunkedStream.StreamFactory_Delegate chunkStreamFactory Chunk stream factory ChunkedStream.DeleteChunk_Delegate deleteChunk Delete chunk ChunkedStream.AsyncStreamFactory_Delegate asyncChunkStreamFactory Asynchronous chunk stream factory ChunkedStream.AsyncDeleteChunk_Delegate asyncDeleteChunk Delete chunk asynchronous int numberOfChunks Number of existing chunks long lastChunkLength Length of the last chunk in bytes Fields | Edit this page View Source AsyncChunkStreamFactory Asynchronous chunk stream factory Declaration protected readonly ChunkedStream.AsyncStreamFactory_Delegate? AsyncChunkStreamFactory Field Value Type Description ChunkedStream.AsyncStreamFactory_Delegate | Edit this page View Source AsyncDeleteChunk Delete a chunk Declaration protected readonly ChunkedStream.AsyncDeleteChunk_Delegate? AsyncDeleteChunk Field Value Type Description ChunkedStream.AsyncDeleteChunk_Delegate | Edit this page View Source ChunkStreamFactory Chunk stream factory Declaration protected readonly ChunkedStream.StreamFactory_Delegate? ChunkStreamFactory Field Value Type Description ChunkedStream.StreamFactory_Delegate | Edit this page View Source ChunkStreams Chunk streams Declaration protected readonly Dictionary<int, Stream> ChunkStreams Field Value Type Description Dictionary<int, Stream> | Edit this page View Source DeleteChunk Delete a chunk Declaration protected readonly ChunkedStream.DeleteChunk_Delegate? DeleteChunk Field Value Type Description ChunkedStream.DeleteChunk_Delegate | Edit this page View Source _CanWrite Can write? Declaration protected readonly bool _CanWrite Field Value Type Description bool | Edit this page View Source _Length Length in bytes Declaration protected long _Length Field Value Type Description long | Edit this page View Source _ModifiedChunks Modified chunk indexes Declaration protected readonly HashSet<int> _ModifiedChunks Field Value Type Description HashSet<int> | Edit this page View Source _Position Position byte offset Declaration protected long _Position Field Value Type Description long Properties | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides Stream.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides Stream.CanSeek | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides Stream.CanWrite | Edit this page View Source ChunkSize Chunk size in bytes Declaration public long ChunkSize { get; } Property Value Type Description long | Edit this page View Source CommitOnClose Auto-commit on close? Declaration public bool CommitOnClose { get; set; } Property Value Type Description bool | Edit this page View Source CommitOnFlush Auto-commit on flush? Declaration public bool CommitOnFlush { get; set; } Property Value Type Description bool | Edit this page View Source CurrentChunk Current chunk index Declaration public int CurrentChunk { get; } Property Value Type Description int | Edit this page View Source CurrentChunkPosition Current chunk position Declaration public long CurrentChunkPosition { get; } Property Value Type Description long | Edit this page View Source CurrentNumberOfChunks Current number of chunks Declaration public int CurrentNumberOfChunks { get; } Property Value Type Description int | Edit this page View Source IsCommitted Is committed? Declaration public bool IsCommitted { get; } Property Value Type Description bool | Edit this page View Source LastChunkLength Last chunk length in bytes Declaration public long LastChunkLength { get; } Property Value Type Description long | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides Stream.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source ModifiedChunks Indexes of modified chunks Declaration public ReadOnlyCollection<int> ModifiedChunks { get; } Property Value Type Description ReadOnlyCollection<int> | Edit this page View Source NumberOfChunks Number of existing chunks Declaration public int NumberOfChunks { get; protected set; } Property Value Type Description int | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides Stream.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Methods | Edit this page View Source Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. Declaration public override void Close() Overrides StreamBase.Close() | Edit this page View Source Commit() Commit changes Declaration public virtual void Commit() | Edit this page View Source CommitAsync(CancellationToken) Commit changes Declaration public virtual Task CommitAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source DeleteChunkAsync(int, CancellationToken) Delete a chunk Declaration protected virtual Task DeleteChunkAsync(int index, CancellationToken cancellationToken = default) Parameters Type Name Description int index Chunk index CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source DeleteChunkSync(in int) Delete a chunk Declaration protected virtual void DeleteChunkSync(in int index) Parameters Type Name Description int index Chunk index | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides StreamBase.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override Task DisposeCore() Returns Type Description Task Overrides StreamBase.DisposeCore() | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides Stream.FlushAsync(CancellationToken) Exceptions Type Condition ObjectDisposedException The stream has been disposed. | Edit this page View Source GetChunkStream(in int) Get a chunk stream Declaration protected Stream GetChunkStream(in int index) Parameters Type Name Description int index Chunk index Returns Type Description Stream Chunk stream | Edit this page View Source GetChunkStreamAsync(int, CancellationToken) Get a chunk stream Declaration protected Task<Stream> GetChunkStreamAsync(int index, CancellationToken cancellationToken = default) Parameters Type Name Description int index Chunk index CancellationToken cancellationToken Cancellation token Returns Type Description Task<Stream> Chunk stream | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides Stream.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides Stream.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides Stream.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides Stream.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLengthAsync(long, CancellationToken) Set the stream length Declaration public Task SetLengthAsync(long value, CancellationToken cancellationToken = default) Parameters Type Name Description long value Length in bytes CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides Stream.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides Stream.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides Stream.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Implements IStream IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.CliArguments.html": {
    "href": "api/wan24.Core.CliArguments.html",
    "title": "Class CliArguments | wan24-Core",
    "keywords": "Class CliArguments CLI arguments (an argument key for a following value starts with -- (double dashes), a flag argument with - (single dash)) Inheritance object CliArguments Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class CliArguments Constructors | Edit this page View Source CliArguments(in IEnumerable<KeyValuePair<string, ReadOnlyCollection<string>>>) Constructor Declaration public CliArguments(in IEnumerable<KeyValuePair<string, ReadOnlyCollection<string>>> args) Parameters Type Name Description IEnumerable<KeyValuePair<string, ReadOnlyCollection<string>>> args Arguments | Edit this page View Source CliArguments(in IEnumerable<string>) Constructor Declaration public CliArguments(in IEnumerable<string> args) Parameters Type Name Description IEnumerable<string> args Arguments (an argument key for a following value starts with -- (double dashes), a flag argument with - (single dash)) | Edit this page View Source CliArguments(in ReadOnlySpan<string>) Constructor Declaration public CliArguments(in ReadOnlySpan<string> args) Parameters Type Name Description ReadOnlySpan<string> args Arguments (an argument key for a following value starts with -- (double dashes), a flag argument with - (single dash)) | Edit this page View Source CliArguments(params string[]) Constructor Declaration public CliArguments(params string[] args) Parameters Type Name Description string[] args Arguments (an argument key for a following value starts with -- (double dashes), a flag argument with - (single dash)) Fields | Edit this page View Source BACKSLASH Backslash Declaration protected const string BACKSLASH = \"\\\\\" Field Value Type Description string | Edit this page View Source ESCAPED_BACKSLASH Single quote Declaration protected const string ESCAPED_BACKSLASH = \"\\\\\\\\\" Field Value Type Description string | Edit this page View Source ReadOnlyArguments Read-only arguments Declaration protected OrderedDictionary<string, ReadOnlyCollection<string>>? ReadOnlyArguments Field Value Type Description OrderedDictionary<string, ReadOnlyCollection<string>> | Edit this page View Source STR_PARAMETER_NAME String parameter name Declaration protected const string STR_PARAMETER_NAME = \"str\" Field Value Type Description string | Edit this page View Source _Arguments Arguments Declaration protected readonly OrderedDictionary<string, ReadOnlyCollection<string>> _Arguments Field Value Type Description OrderedDictionary<string, ReadOnlyCollection<string>> Properties | Edit this page View Source Arguments Arguments Declaration public OrderedDictionary<string, ReadOnlyCollection<string>> Arguments { get; } Property Value Type Description OrderedDictionary<string, ReadOnlyCollection<string>> | Edit this page View Source Count Number of given arguments Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source this[string, bool] Get if an argument was given Declaration public bool this[in string key, in bool requireValues = false] { get; } Parameters Type Name Description string key Key bool requireValues Is the key required to have values (not be a boolean)? Property Value Type Description bool Argument was given (and has values)? | Edit this page View Source KeyLessArguments Keyless arguments Declaration public ReadOnlyCollection<string> KeyLessArguments { get; } Property Value Type Description ReadOnlyCollection<string> Methods | Edit this page View Source All(in string) Get all argument values Declaration public ReadOnlyCollection<string> All(in string key) Parameters Type Name Description string key Key Returns Type Description ReadOnlyCollection<string> Values | Edit this page View Source AllJson(string, Type) Get all JSON decoded argument values Declaration public IEnumerable<object> AllJson(string key, Type type) Parameters Type Name Description string key Key Type type Value type Returns Type Description IEnumerable<object> Values | Edit this page View Source AllJsonNullable(string, Type) Get all JSON decoded argument values Declaration public IEnumerable<object?> AllJsonNullable(string key, Type type) Parameters Type Name Description string key Key Type type Value type Returns Type Description IEnumerable<object> Values | Edit this page View Source AllJsonNullable<T>(string) Get all JSON decoded argument values Declaration public IEnumerable<T?> AllJsonNullable<T>(string key) Parameters Type Name Description string key Key Returns Type Description IEnumerable<T> Values Type Parameters Name Description T Value type | Edit this page View Source AllJson<T>(string) Get all JSON decoded argument values Declaration public IEnumerable<T> AllJson<T>(string key) Parameters Type Name Description string key Key Returns Type Description IEnumerable<T> Values Type Parameters Name Description T Value type | Edit this page View Source GetExistingKey(string) Get an existing key Declaration public string? GetExistingKey(string key) Parameters Type Name Description string key Key (case insensitive handling) Returns Type Description string Existing case sensitive key or null, if the key wasn't found | Edit this page View Source HasValues(in string) Determine if a given argument has values Declaration public bool HasValues(in string key) Parameters Type Name Description string key Key Returns Type Description bool Is has values? | Edit this page View Source Initialize(in ReadOnlySpan<string>) Initialize the instance Declaration protected void Initialize(in ReadOnlySpan<string> args) Parameters Type Name Description ReadOnlySpan<string> args Arguments | Edit this page View Source IsBoolean(in string) Determine if a given argument is a flag Declaration public bool IsBoolean(in string key) Parameters Type Name Description string key Key Returns Type Description bool Is a flag (boolean)? | Edit this page View Source NeedsEncoding(in ReadOnlySpan<char>) Determine if a value needs encoding for use as a CLI command argument Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool NeedsEncoding(in ReadOnlySpan<char> str) Parameters Type Name Description ReadOnlySpan<char> str String Returns Type Description bool Needs encoding for use as a CLI command argument? | Edit this page View Source Parse(in ReadOnlySpan<char>) Parse arguments from a string (use ' or \" for a quoted value, </code> for escaping) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static CliArguments Parse(in ReadOnlySpan<char> str) Parameters Type Name Description ReadOnlySpan<char> str String (use ' or \" for a quoted value, </code> for escaping within a quoted value, double escape </code>) Returns Type Description CliArguments Arguments | Edit this page View Source SanitizeValue(in string, in char) Sanitize a string for use as a CLI command argument Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static string SanitizeValue(in string str, in char quote = '\\'') Parameters Type Name Description string str Raw string char quote Quote character Returns Type Description string Raw (if encoding isn't required) or encoded string (will be quoted, JSON encoded and properly escaped for use as a CLI command argument and with CliArguments) | Edit this page View Source Single(in string) Get a single argument value Declaration public string Single(in string key) Parameters Type Name Description string key Key Returns Type Description string Value | Edit this page View Source SingleJson(in string, in Type) Get a single JSON decoded argument value Declaration public object SingleJson(in string key, in Type type) Parameters Type Name Description string key Key Type type Value type Returns Type Description object Value | Edit this page View Source SingleJsonNullable(in string, in Type) Get a single JSON decoded nullable argument value Declaration public object? SingleJsonNullable(in string key, in Type type) Parameters Type Name Description string key Key Type type Value type Returns Type Description object Value | Edit this page View Source SingleJsonNullable<T>(in string) Get a single JSON decoded nullable argument value Declaration public T? SingleJsonNullable<T>(in string key) Parameters Type Name Description string key Key Returns Type Description T Value Type Parameters Name Description T Value type | Edit this page View Source SingleJson<T>(in string) Get a single JSON decoded argument value Declaration public T SingleJson<T>(in string key) Parameters Type Name Description string key Key Returns Type Description T Value Type Parameters Name Description T Value type | Edit this page View Source Split(in ReadOnlySpan<char>) Split a CLI argument string into arguments (use ' or \" for a quoted value, </code> for escaping) Declaration public static string[] Split(in ReadOnlySpan<char> str) Parameters Type Name Description ReadOnlySpan<char> str String (use ' or \" for a quoted value, </code> for escaping within a quoted value, double escape </code>) Returns Type Description string[] Arguments | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() | Edit this page View Source ValueCount(in string) Get the value count for a key Declaration public int ValueCount(in string key) Parameters Type Name Description string key Key Returns Type Description int Number of values or -1, if the argument wasn't given Operators | Edit this page View Source explicit operator CliArguments(in Dictionary<string, IEnumerable<string>>) Cast from dictionary Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in Dictionary<string, IEnumerable<string>> dict) Parameters Type Name Description Dictionary<string, IEnumerable<string>> dict Dictionary Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in Dictionary<string, List<string>>) Cast from dictionary Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in Dictionary<string, List<string>> dict) Parameters Type Name Description Dictionary<string, List<string>> dict Dictionary Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in Dictionary<string, ReadOnlyCollection<string>>) Cast from dictionary Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in Dictionary<string, ReadOnlyCollection<string>> dict) Parameters Type Name Description Dictionary<string, ReadOnlyCollection<string>> dict Dictionary Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in Dictionary<string, string[]>) Cast from dictionary Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in Dictionary<string, string[]> dict) Parameters Type Name Description Dictionary<string, string[]> dict Dictionary Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in Memory<char>) Cast from string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in Memory<char> str) Parameters Type Name Description Memory<char> str String Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in Memory<string>) Cast from strings Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in Memory<string> str) Parameters Type Name Description Memory<string> str Strings Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in ReadOnlyMemory<char>) Cast from string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in ReadOnlyMemory<char> str) Parameters Type Name Description ReadOnlyMemory<char> str String Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in ReadOnlyMemory<string>) Cast from strings Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in ReadOnlyMemory<string> str) Parameters Type Name Description ReadOnlyMemory<string> str Strings Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in ReadOnlySpan<char>) Cast from string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in ReadOnlySpan<char> str) Parameters Type Name Description ReadOnlySpan<char> str String Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in ReadOnlySpan<string>) Cast from strings Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in ReadOnlySpan<string> str) Parameters Type Name Description ReadOnlySpan<string> str Strings Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in Span<char>) Cast from string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in Span<char> str) Parameters Type Name Description Span<char> str String Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in Span<string>) Cast from strings Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in Span<string> str) Parameters Type Name Description Span<string> str Strings Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in string) Cast from string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in string str) Parameters Type Name Description string str String Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in string[]) Cast from strings Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in string[] str) Parameters Type Name Description string[] str Strings Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in OrderedDictionary<string, IEnumerable<string>>) Cast from dictionary Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in OrderedDictionary<string, IEnumerable<string>> dict) Parameters Type Name Description OrderedDictionary<string, IEnumerable<string>> dict Dictionary Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in OrderedDictionary<string, List<string>>) Cast from dictionary Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in OrderedDictionary<string, List<string>> dict) Parameters Type Name Description OrderedDictionary<string, List<string>> dict Dictionary Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in OrderedDictionary<string, ReadOnlyCollection<string>>) Cast from dictionary Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in OrderedDictionary<string, ReadOnlyCollection<string>> dict) Parameters Type Name Description OrderedDictionary<string, ReadOnlyCollection<string>> dict Dictionary Returns Type Description CliArguments | Edit this page View Source explicit operator CliArguments(in OrderedDictionary<string, string[]>) Cast from dictionary Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator CliArguments(in OrderedDictionary<string, string[]> dict) Parameters Type Name Description OrderedDictionary<string, string[]> dict Dictionary Returns Type Description CliArguments | Edit this page View Source implicit operator bool(in CliArguments) Cast as arguments-flag Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator bool(in CliArguments args) Parameters Type Name Description CliArguments args Arguments Returns Type Description bool | Edit this page View Source implicit operator int(in CliArguments) Cast as arguments count Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in CliArguments args) Parameters Type Name Description CliArguments args Arguments Returns Type Description int | Edit this page View Source implicit operator string(in CliArguments) Cast as escaped arguments string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator string(in CliArguments args) Parameters Type Name Description CliArguments args Arguments Returns Type Description string Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) CliConfig.RemoveCliConfigArguments(CliArguments) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.CliConfig.html": {
    "href": "api/wan24.Core.CliConfig.html",
    "title": "Class CliConfig | wan24-Core",
    "keywords": "Class CliConfig CLI argument runtime configuration Inheritance object CliConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class CliConfig Properties | Edit this page View Source Locale Current locale to set to Current Declaration [CliConfig] public static string Locale { set; } Property Value Type Description string | Edit this page View Source LogFile The path to the logfile to use (file logger may be appended to the configured LoggerBase) Declaration [CliConfig] [StringLength(32767)] [Required] public static string LogFile { set; } Property Value Type Description string | Edit this page View Source LogLevel Log level for the last Logger (must be a LoggerBase) Declaration [CliConfig] public static LogLevel LogLevel { set; } Property Value Type Description LogLevel | Edit this page View Source LoggerType CLR type name of the logger to use (with or without namespace; may be appended to the configured LoggerBase) Declaration [CliConfig] [StringLength(255)] [Required] public static string LoggerType { set; } Property Value Type Description string Methods | Edit this page View Source Apply(CliArguments?) Apply a configuration from CLI arguments to public static properties with a CliConfigAttribute attribute Declaration public static void Apply(CliArguments? ca = null) Parameters Type Name Description CliArguments ca CLI arguments | Edit this page View Source RemoveCliConfigArguments(CliArguments) Remove CLI arguments Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static CliArguments RemoveCliConfigArguments(this CliArguments args) Parameters Type Name Description CliArguments args Arguments Returns Type Description CliArguments Arguments"
  },
  "api/wan24.Core.CliConfigAttribute.html": {
    "href": "api/wan24.Core.CliConfigAttribute.html",
    "title": "Class CliConfigAttribute | wan24-Core",
    "keywords": "Class CliConfigAttribute Attribute for a CLI argument configurable public static property Inheritance object Attribute CliConfigAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class CliConfigAttribute : Attribute Constructors | Edit this page View Source CliConfigAttribute() Constructor Declaration public CliConfigAttribute() Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.CollectionExtensions.html": {
    "href": "api/wan24.Core.CollectionExtensions.html",
    "title": "Class CollectionExtensions | wan24-Core",
    "keywords": "Class CollectionExtensions Collection extensions Inheritance object CollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class CollectionExtensions Methods | Edit this page View Source AddRangeAsync<T>(ICollection<T>, IAsyncEnumerable<T>, CancellationToken) Add items Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task AddRangeAsync<T>(this ICollection<T> collection, IAsyncEnumerable<T> items, CancellationToken cancellationToken = default) Parameters Type Name Description ICollection<T> collection Collection IAsyncEnumerable<T> items Items CancellationToken cancellationToken Cancellation token Returns Type Description Task Type Parameters Name Description T Item type | Edit this page View Source AddRange<T>(ICollection<T>, IEnumerable<T>) Add items Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static ICollection<T> AddRange<T>(this ICollection<T> collection, IEnumerable<T> items) Parameters Type Name Description ICollection<T> collection Collection IEnumerable<T> items Items Returns Type Description ICollection<T> Collection Type Parameters Name Description T Item type | Edit this page View Source AddRange<T>(ICollection<T>, params T[]) Add items Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ICollection<T> AddRange<T>(this ICollection<T> collection, params T[] items) Parameters Type Name Description ICollection<T> collection Collection T[] items Items Returns Type Description ICollection<T> Collection Type Parameters Name Description T Item type"
  },
  "api/wan24.Core.CombinedStream.html": {
    "href": "api/wan24.Core.CombinedStream.html",
    "title": "Class CombinedStream | wan24-Core",
    "keywords": "Class CombinedStream Combined streams Inheritance object MarshalByRefObject Stream StreamBase CombinedStream Implements IStream IDisposableObject IDisposable IAsyncDisposable Inherited Members StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class CombinedStream : StreamBase, IStream, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source CombinedStream(in bool, in bool, params Stream[]) Constructor Declaration public CombinedStream(in bool resetPosition, in bool leaveOpen, params Stream[] streams) Parameters Type Name Description bool resetPosition Reset the position when switching to the next stream? bool leaveOpen Leave the streams open when disposing? Stream[] streams Streams | Edit this page View Source CombinedStream(in bool, params Stream[]) Constructor Declaration public CombinedStream(in bool leaveOpen, params Stream[] streams) Parameters Type Name Description bool leaveOpen Leave the streams open when disposing? Stream[] streams Streams | Edit this page View Source CombinedStream(params Stream[]) Constructor Declaration public CombinedStream(params Stream[] streams) Parameters Type Name Description Stream[] streams Streams Fields | Edit this page View Source Lengths Stream lengths in bytes Declaration protected long[] Lengths Field Value Type Description long[] | Edit this page View Source _CanSeek Can seek? Declaration protected readonly bool _CanSeek Field Value Type Description bool | Edit this page View Source _CanWrite Can write? Declaration protected readonly bool _CanWrite Field Value Type Description bool | Edit this page View Source _Length Combined length in bytes Declaration protected long _Length Field Value Type Description long | Edit this page View Source _Position Position byte offset Declaration protected long _Position Field Value Type Description long Properties | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides Stream.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides Stream.CanSeek | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides Stream.CanWrite | Edit this page View Source CurrentStream Current stream Declaration public Stream CurrentStream { get; } Property Value Type Description Stream | Edit this page View Source CurrentStreamIndex Current stream index Declaration public int CurrentStreamIndex { get; protected set; } Property Value Type Description int | Edit this page View Source LeaveOpen Leave the streams open when disposing? Declaration public bool LeaveOpen { get; set; } Property Value Type Description bool | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides Stream.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides Stream.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source ResetPosition Reset the position when switching to the next stream? Declaration public bool ResetPosition { get; } Property Value Type Description bool | Edit this page View Source Streams Streams Declaration public ReadOnlyCollection<Stream> Streams { get; } Property Value Type Description ReadOnlyCollection<Stream> Methods | Edit this page View Source Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. Declaration public override void Close() Overrides StreamBase.Close() | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides StreamBase.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override Task DisposeCore() Returns Type Description Task Overrides StreamBase.DisposeCore() | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides Stream.FlushAsync(CancellationToken) Exceptions Type Condition ObjectDisposedException The stream has been disposed. | Edit this page View Source GetStreamIndex(in long) Get the stream index of a position Declaration public int GetStreamIndex(in long position) Parameters Type Name Description long position Position byte offset Returns Type Description int Stream index or -1, if the position exceeds the total length in bytes | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides Stream.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides Stream.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides Stream.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides Stream.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides Stream.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides Stream.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides Stream.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Implements IStream IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.CombinedTranslationTerms.html": {
    "href": "api/wan24.Core.CombinedTranslationTerms.html",
    "title": "Class CombinedTranslationTerms | wan24-Core",
    "keywords": "Class CombinedTranslationTerms Combines multiple translations Inheritance object CombinedTranslationTerms Implements ITranslationTerms IReadOnlyDictionary<string, string> IReadOnlyCollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IStringLocalizer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class CombinedTranslationTerms : ITranslationTerms, IReadOnlyDictionary<string, string>, IReadOnlyCollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IStringLocalizer Remarks Constructor Constructors | Edit this page View Source CombinedTranslationTerms(in List<ITranslationTerms>) Combines multiple translations Declaration public CombinedTranslationTerms(in List<ITranslationTerms> terms) Parameters Type Name Description List<ITranslationTerms> terms Translations to combine Remarks Constructor | Edit this page View Source CombinedTranslationTerms(params ITranslationTerms[]) Constructor Declaration public CombinedTranslationTerms(params ITranslationTerms[] terms) Parameters Type Name Description ITranslationTerms[] terms Translations to combine Properties | Edit this page View Source Count Gets the number of elements in the collection. Declaration public virtual int Count { get; } Property Value Type Description int The number of elements in the collection. | Edit this page View Source this[string, int, string[]] Get a term Declaration public virtual string this[in string key, in int count, params string[] values] { get; } Parameters Type Name Description string key Term key int count Count (for plural translation) string[] values Parser values Property Value Type Description string Term Exceptions Type Condition NotSupportedException Plural terms are not supported | Edit this page View Source this[string, string[]] Get a term Declaration public virtual string this[in string key, params string[] values] { get; } Parameters Type Name Description string key Term key string[] values Parser values Property Value Type Description string Term | Edit this page View Source Keys Gets an enumerable collection that contains the keys in the read-only dictionary. Declaration public virtual IEnumerable<string> Keys { get; } Property Value Type Description IEnumerable<string> An enumerable collection that contains the keys in the read-only dictionary. | Edit this page View Source PluralSupport Does support plural? Declaration public virtual bool PluralSupport { get; } Property Value Type Description bool | Edit this page View Source Terms Combined terms Declaration public List<ITranslationTerms> Terms { get; } Property Value Type Description List<ITranslationTerms> | Edit this page View Source Values Gets an enumerable collection that contains the values in the read-only dictionary. Declaration public virtual IEnumerable<string> Values { get; } Property Value Type Description IEnumerable<string> An enumerable collection that contains the values in the read-only dictionary. Methods | Edit this page View Source ContainsKey(string) Determines whether the read-only dictionary contains an element that has the specified key. Declaration public virtual bool ContainsKey(string key) Parameters Type Name Description string key The key to locate. Returns Type Description bool true if the read-only dictionary contains an element that has the specified key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public virtual IEnumerator<KeyValuePair<string, string>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<string, string>> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetTerm(in string, in int, params string[]) Get a term Declaration public virtual string GetTerm(in string key, in int count, params string[] values) Parameters Type Name Description string key Term key int count Count (for plural translation) string[] values Parser values Returns Type Description string Term | Edit this page View Source GetTerm(in string, params string[]) Get a term Declaration public virtual string GetTerm(in string key, params string[] values) Parameters Type Name Description string key Term key string[] values Parser values Returns Type Description string Term | Edit this page View Source StringLocalizer(string, object[]) String localizer used for the IStringLocalizer implementation Declaration protected virtual LocalizedString StringLocalizer(string name, object[] arguments) Parameters Type Name Description string name Name object[] arguments Arguments Returns Type Description LocalizedString Localized string | Edit this page View Source TryGetValue(string, out string) Gets the value that is associated with the specified key. Declaration public virtual bool TryGetValue(string key, out string value) Parameters Type Name Description string key The key to locate. string value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description bool true if the object that implements the IReadOnlyDictionary<TKey, TValue> interface contains an element that has the specified key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. Implements ITranslationTerms IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IStringLocalizer Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ConcurrentChangeTokenDictionary-2.html": {
    "href": "api/wan24.Core.ConcurrentChangeTokenDictionary-2.html",
    "title": "Class ConcurrentChangeTokenDictionary<tKey, tValue> | wan24-Core",
    "keywords": "Class ConcurrentChangeTokenDictionary<tKey, tValue> Concurrent change token dictionary (observes values; don't forget to dispose!) Inheritance object ChangeToken ChangeToken<ConcurrentChangeTokenDictionary<tKey, tValue>> DisposableChangeToken<ConcurrentChangeTokenDictionary<tKey, tValue>> ConcurrentChangeTokenDictionary<tKey, tValue> Implements IChangeToken IObservable<ConcurrentChangeTokenDictionary<tKey, tValue>> IDictionary<tKey, tValue> ICollection<KeyValuePair<tKey, tValue>> IReadOnlyDictionary<tKey, tValue> IReadOnlyCollection<KeyValuePair<tKey, tValue>> IEnumerable<KeyValuePair<tKey, tValue>> IDictionary ICollection IEnumerable INotifyCollectionChanged INotifyPropertyChanged IObserver<tValue> IDisposableObject IDisposable IAsyncDisposable Inherited Members ChangeToken<ConcurrentChangeTokenDictionary<tKey, tValue>>.Subscribe(IObserver<ConcurrentChangeTokenDictionary<tKey, tValue>>) ChangeToken.SyncObject ChangeToken.ChangeIdentifier ChangeToken.HasChanged ChangeToken.ActiveChangeCallbacks ChangeToken.RegisterChangeCallback(Action<object>, object) ChangeToken.InvokeCallbacks(in object) ChangeToken.PropertyChanged ChangeToken.RaisePropertyChanged(in string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class ConcurrentChangeTokenDictionary<tKey, tValue> : DisposableChangeToken<ConcurrentChangeTokenDictionary<tKey, tValue>>, IChangeToken, IObservable<ConcurrentChangeTokenDictionary<tKey, tValue>>, IDictionary<tKey, tValue>, ICollection<KeyValuePair<tKey, tValue>>, IReadOnlyDictionary<tKey, tValue>, IReadOnlyCollection<KeyValuePair<tKey, tValue>>, IEnumerable<KeyValuePair<tKey, tValue>>, IDictionary, ICollection, IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged, IObserver<tValue>, IDisposableObject, IDisposable, IAsyncDisposable where tKey : notnull where tValue : notnull Type Parameters Name Description tKey Key type tValue Value type Constructors | Edit this page View Source ConcurrentChangeTokenDictionary() Constructor Declaration public ConcurrentChangeTokenDictionary() | Edit this page View Source ConcurrentChangeTokenDictionary(in int, in int) Constructor Declaration public ConcurrentChangeTokenDictionary(in int concurrencyLevel, in int capacity) Parameters Type Name Description int concurrencyLevel Cuncurrency level int capacity Initial capacity Properties | Edit this page View Source Count Gets the number of elements contained in the ICollection<T>. Declaration public int Count { get; } Property Value Type Description int The number of elements contained in the ICollection<T>. | Edit this page View Source IgnoreUnnamedPropertyNotifications Ignore an items PropertyChanged notification, if no property name was given with the event arguments? Declaration public bool IgnoreUnnamedPropertyNotifications { get; set; } Property Value Type Description bool | Edit this page View Source InvokeCallbacksOnPropertyChange Invoke callbacks on an items PropertyChanged event? Declaration public bool InvokeCallbacksOnPropertyChange { get; set; } Property Value Type Description bool | Edit this page View Source IsDisposed Is disposed? (final object disposing state) Declaration public bool IsDisposed { get; } Property Value Type Description bool | Edit this page View Source IsDisposing Is disposing? (is true when disposed already, too!) Declaration public bool IsDisposing { get; } Property Value Type Description bool | Edit this page View Source IsFixedSize Gets a value indicating whether the IDictionary object has a fixed size. Declaration public bool IsFixedSize { get; } Property Value Type Description bool true if the IDictionary object has a fixed size; otherwise, false. | Edit this page View Source IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool true if the ICollection<T> is read-only; otherwise, false. | Edit this page View Source IsSynchronized Gets a value indicating whether access to the ICollection is synchronized (thread safe). Declaration public bool IsSynchronized { get; } Property Value Type Description bool true if access to the ICollection is synchronized (thread safe); otherwise, false. | Edit this page View Source this[object] Gets or sets the element with the specified key. Declaration public object? this[object key] { get; set; } Parameters Type Name Description object key The key of the element to get or set. Property Value Type Description object The element with the specified key, or null if the key does not exist. Exceptions Type Condition ArgumentNullException key is null. NotSupportedException The property is set and the IDictionary object is read-only. -or- The property is set, key does not exist in the collection, and the IDictionary has a fixed size. | Edit this page View Source this[tKey] Gets or sets the element with the specified key. Declaration public tValue this[tKey key] { get; set; } Parameters Type Name Description tKey key The key of the element to get or set. Property Value Type Description tValue The element with the specified key. Exceptions Type Condition ArgumentNullException key is null. KeyNotFoundException The property is retrieved and key is not found. NotSupportedException The property is set and the IDictionary<TKey, TValue> is read-only. | Edit this page View Source Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. Declaration public ICollection<tKey> Keys { get; } Property Value Type Description ICollection<tKey> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. | Edit this page View Source ObserveDictionary Observe the dictionary (if items have been added/removed)? Declaration public bool ObserveDictionary { get; set; } Property Value Type Description bool | Edit this page View Source ObserveItems Observe the collection items (if IChangeToken/INotifyPropertyChanged item properties have been changed)? Declaration public bool ObserveItems { get; init; } Property Value Type Description bool | Edit this page View Source OverrideStateOnPropertyChange Override the change token notification registration state with the changed property name, if known? Declaration public bool OverrideStateOnPropertyChange { get; set; } Property Value Type Description bool | Edit this page View Source SyncRoot Gets an object that can be used to synchronize access to the ICollection. Declaration public object SyncRoot { get; } Property Value Type Description object An object that can be used to synchronize access to the ICollection. | Edit this page View Source Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. Declaration public ICollection<tValue> Values { get; } Property Value Type Description ICollection<tValue> An ICollection<T> containing the values in the object that implements IDictionary<TKey, TValue>. Methods | Edit this page View Source Add(KeyValuePair<tKey, tValue>) Adds an item to the ICollection<T>. Declaration public void Add(KeyValuePair<tKey, tValue> item) Parameters Type Name Description KeyValuePair<tKey, tValue> item The object to add to the ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Add(object, object?) Adds an element with the provided key and value to the IDictionary object. Declaration public void Add(object key, object? value) Parameters Type Name Description object key The object to use as the key of the element to add. object value The object to use as the value of the element to add. Exceptions Type Condition ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary object. NotSupportedException The IDictionary is read-only. -or- The IDictionary has a fixed size. | Edit this page View Source Add(tKey, tValue) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. Declaration public void Add(tKey key, tValue value) Parameters Type Name Description tKey key The object to use as the key of the element to add. tValue value The object to use as the value of the element to add. Exceptions Type Condition ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary<TKey, TValue>. NotSupportedException The IDictionary<TKey, TValue> is read-only. | Edit this page View Source AddOrUpdate(tKey, Func<tKey, tValue>, Func<tKey, tValue, tValue>) Adds a key/value pair to the ConcurrentChangeTokenDictionary<tKey, tValue> if the key does not already exist, or updates a key/value pair in the ConcurrentChangeTokenDictionary<tKey, tValue> if the key already exists. Declaration public tValue AddOrUpdate(tKey key, Func<tKey, tValue> addValueFactory, Func<tKey, tValue, tValue> updateValueFactory) Parameters Type Name Description tKey key The key to be added or whose value should be updated Func<tKey, tValue> addValueFactory The function used to generate a value for an absent key Func<tKey, tValue, tValue> updateValueFactory The function used to generate a new value for an existing key based on the key's existing value Returns Type Description tValue The new value for the key. This will be either the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present). Exceptions Type Condition ArgumentNullException key is a null reference (Nothing in Visual Basic). ArgumentNullException addValueFactory is a null reference (Nothing in Visual Basic). ArgumentNullException updateValueFactory is a null reference (Nothing in Visual Basic). OverflowException The dictionary contains too many elements. | Edit this page View Source AddOrUpdate(tKey, tValue, Func<tKey, tValue, tValue>) Adds a key/value pair to the ConcurrentChangeTokenDictionary<tKey, tValue> if the key does not already exist, or updates a key/value pair in the ConcurrentChangeTokenDictionary<tKey, tValue> if the key already exists. Declaration public tValue AddOrUpdate(tKey key, tValue addValue, Func<tKey, tValue, tValue> updateValueFactory) Parameters Type Name Description tKey key The key to be added or whose value should be updated tValue addValue The value to be added for an absent key Func<tKey, tValue, tValue> updateValueFactory The function used to generate a new value for an existing key based on the key's existing value Returns Type Description tValue The new value for the key. This will be either the value of addValue (if the key was absent) or the result of updateValueFactory (if the key was present). Exceptions Type Condition ArgumentNullException key is a null reference (Nothing in Visual Basic). ArgumentNullException updateValueFactory is a null reference (Nothing in Visual Basic). OverflowException The dictionary contains too many elements. | Edit this page View Source AddOrUpdate<tArg>(tKey, Func<tKey, tArg, tValue>, Func<tKey, tValue, tArg, tValue>, tArg) Adds a key/value pair to the ConcurrentChangeTokenDictionary<tKey, tValue> if the key does not already exist, or updates a key/value pair in the ConcurrentDictionary<TKey, TValue> if the key already exists. Declaration public tValue AddOrUpdate<tArg>(tKey key, Func<tKey, tArg, tValue> addValueFactory, Func<tKey, tValue, tArg, tValue> updateValueFactory, tArg factoryArgument) Parameters Type Name Description tKey key The key to be added or whose value should be updated Func<tKey, tArg, tValue> addValueFactory The function used to generate a value for an absent key Func<tKey, tValue, tArg, tValue> updateValueFactory The function used to generate a new value for an existing key based on the key's existing value tArg factoryArgument An argument to pass into addValueFactory and updateValueFactory. Returns Type Description tValue The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present). Type Parameters Name Description tArg Exceptions Type Condition ArgumentNullException key is a null reference (Nothing in Visual Basic). ArgumentNullException addValueFactory is a null reference (Nothing in Visual Basic). ArgumentNullException updateValueFactory is a null reference (Nothing in Visual Basic). OverflowException The dictionary contains too many elements. | Edit this page View Source Clear() Removes all items from the ICollection<T>. Declaration public void Clear() Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Contains(KeyValuePair<tKey, tValue>) Determines whether the ICollection<T> contains a specific value. Declaration public bool Contains(KeyValuePair<tKey, tValue> item) Parameters Type Name Description KeyValuePair<tKey, tValue> item The object to locate in the ICollection<T>. Returns Type Description bool true if item is found in the ICollection<T>; otherwise, false. | Edit this page View Source Contains(object) Determines whether the IDictionary object contains an element with the specified key. Declaration public bool Contains(object key) Parameters Type Name Description object key The key to locate in the IDictionary object. Returns Type Description bool true if the IDictionary contains an element with the key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. | Edit this page View Source ContainsKey(tKey) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. Declaration public bool ContainsKey(tKey key) Parameters Type Name Description tKey key The key to locate in the IDictionary<TKey, TValue>. Returns Type Description bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. | Edit this page View Source CopyTo(Array, int) Copies the elements of the ICollection to an Array, starting at a particular Array index. Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. int index The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException index is less than zero. ArgumentException array is multidimensional. -or- The number of elements in the source ICollection is greater than the available space from index to the end of the destination array. -or- The type of the source ICollection cannot be cast automatically to the type of the destination array. | Edit this page View Source CopyTo(KeyValuePair<tKey, tValue>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. Declaration public void CopyTo(KeyValuePair<tKey, tValue>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair<tKey, tValue>[] array The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides DisposableChangeToken<ConcurrentChangeTokenDictionary<tKey, tValue>>.Dispose() | Edit this page View Source DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask A task that represents the asynchronous dispose operation. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<KeyValuePair<tKey, tValue>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<tKey, tValue>> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetOrAdd(tKey, Func<tKey, tValue>) Adds a key/value pair to the ConcurrentChangeTokenDictionary<tKey, tValue> if the key does not already exist. Declaration public tValue GetOrAdd(tKey key, Func<tKey, tValue> valueFactory) Parameters Type Name Description tKey key The key of the element to add. Func<tKey, tValue> valueFactory The function used to generate a value for the key Returns Type Description tValue The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value for the key as returned by valueFactory if the key was not in the dictionary. Exceptions Type Condition ArgumentNullException key is a null reference (Nothing in Visual Basic). ArgumentNullException valueFactory is a null reference (Nothing in Visual Basic). OverflowException The dictionary contains too many elements. | Edit this page View Source GetOrAdd(tKey, tValue) Adds a key/value pair to the ConcurrentChangeTokenDictionary<tKey, tValue> if the key does not already exist. Declaration public tValue GetOrAdd(tKey key, tValue value) Parameters Type Name Description tKey key The key of the element to add. tValue value the value to be added, if the key does not already exist Returns Type Description tValue The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary. Exceptions Type Condition ArgumentNullException key is a null reference (Nothing in Visual Basic). OverflowException The dictionary contains too many elements. | Edit this page View Source GetOrAdd<tArg>(tKey, Func<tKey, tArg, tValue>, tArg) Adds a key/value pair to the ConcurrentChangeTokenDictionary<tKey, tValue> if the key does not already exist. Declaration public tValue GetOrAdd<tArg>(tKey key, Func<tKey, tArg, tValue> valueFactory, tArg factoryArgument) Parameters Type Name Description tKey key The key of the element to add. Func<tKey, tArg, tValue> valueFactory The function used to generate a value for the key tArg factoryArgument An argument value to pass into valueFactory. Returns Type Description tValue The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value for the key as returned by valueFactory if the key was not in the dictionary. Type Parameters Name Description tArg Exceptions Type Condition ArgumentNullException key is a null reference (Nothing in Visual Basic). ArgumentNullException valueFactory is a null reference (Nothing in Visual Basic). OverflowException The dictionary contains too many elements. | Edit this page View Source KeyOfValue(tValue) Find the first key of a value Declaration public tKey? KeyOfValue(tValue value) Parameters Type Name Description tValue value Value Returns Type Description tKey First key | Edit this page View Source KeysOfValue(tValue) Find the keys of a value Declaration public IEnumerable<tKey> KeysOfValue(tValue value) Parameters Type Name Description tValue value Value Returns Type Description IEnumerable<tKey> Keys | Edit this page View Source OnCompleted() Notifies the observer that the provider has finished sending push-based notifications. Declaration public void OnCompleted() | Edit this page View Source OnError(Exception) Notifies the observer that the provider has experienced an error condition. Declaration public void OnError(Exception error) Parameters Type Name Description Exception error An object that provides additional information about the error. | Edit this page View Source OnNext(tValue) Provides the observer with new data. Declaration public void OnNext(tValue value) Parameters Type Name Description tValue value The current notification information. | Edit this page View Source Remove(KeyValuePair<tKey, tValue>) Removes the first occurrence of a specific object from the ICollection<T>. Declaration public bool Remove(KeyValuePair<tKey, tValue> item) Parameters Type Name Description KeyValuePair<tKey, tValue> item The object to remove from the ICollection<T>. Returns Type Description bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Remove(object) Removes the element with the specified key from the IDictionary object. Declaration public void Remove(object key) Parameters Type Name Description object key The key of the element to remove. Exceptions Type Condition ArgumentNullException key is null. NotSupportedException The IDictionary object is read-only. -or- The IDictionary has a fixed size. | Edit this page View Source Remove(tKey) Removes the element with the specified key from the IDictionary<TKey, TValue>. Declaration public bool Remove(tKey key) Parameters Type Name Description tKey key The key of the element to remove. Returns Type Description bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. Exceptions Type Condition ArgumentNullException key is null. NotSupportedException The IDictionary<TKey, TValue> is read-only. | Edit this page View Source TryAdd(tKey, tValue) Attempts to add the specified key and value to the ConcurrentChangeTokenDictionary<tKey, tValue>. Declaration public bool TryAdd(tKey key, tValue value) Parameters Type Name Description tKey key The key of the element to add. tValue value The value of the element to add. The value can be a null reference (Nothing in Visual Basic) for reference types. Returns Type Description bool true if the key/value pair was added to the ConcurrentChangeTokenDictionary<tKey, tValue> successfully; otherwise, false. Exceptions Type Condition ArgumentNullException key is null reference (Nothing in Visual Basic). OverflowException The ConcurrentChangeTokenDictionary<tKey, tValue> contains too many elements. | Edit this page View Source TryGetValue(tKey, out tValue) Gets the value associated with the specified key. Declaration public bool TryGetValue(tKey key, out tValue value) Parameters Type Name Description tKey key The key whose value to get. tValue value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. | Edit this page View Source TryRemove(tKey, out tValue) Attempts to remove and return the value with the specified key from the ConcurrentChangeTokenDictionary<tKey, tValue>. Declaration public bool TryRemove(tKey key, out tValue value) Parameters Type Name Description tKey key The key of the element to remove and return. tValue value When this method returns, value contains the object removed from the ConcurrentDictionary<TKey, TValue> or the default value of tValue if the operation failed. Returns Type Description bool true if an object was removed successfully; otherwise, false. Exceptions Type Condition ArgumentNullException key is a null reference (Nothing in Visual Basic). | Edit this page View Source TryUpdate(tKey, tValue, tValue) Updates the value associated with key to newValue if the existing value is equal to comparisonValue. Declaration public bool TryUpdate(tKey key, tValue newValue, tValue comparisonValue) Parameters Type Name Description tKey key The key whose value is compared with comparisonValue and possibly replaced. tValue newValue The value that replaces the value of the element with key if the comparison results in equality. tValue comparisonValue The value that is compared to the value of the element with key. Returns Type Description bool true if the value with key was equal to comparisonValue and replaced with newValue; otherwise, false. Exceptions Type Condition ArgumentNullException key is a null reference. Events | Edit this page View Source CollectionChanged Occurs when the collection changes. Declaration public event NotifyCollectionChangedEventHandler? CollectionChanged Event Type Type Description NotifyCollectionChangedEventHandler | Edit this page View Source OnDisposed Raised when disposed Declaration public event IDisposableObject.Dispose_Delegate? OnDisposed Event Type Type Description IDisposableObject.Dispose_Delegate | Edit this page View Source OnDisposing Raised when disposing Declaration public event IDisposableObject.Dispose_Delegate? OnDisposing Event Type Type Description IDisposableObject.Dispose_Delegate Implements IChangeToken IObservable<T> IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable INotifyCollectionChanged INotifyPropertyChanged IObserver<T> IDisposableObject IDisposable IAsyncDisposable Extension Methods CollectionExtensions.AddRangeAsync<T>(ICollection<T>, IAsyncEnumerable<T>, CancellationToken) CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.AddRange<T>(ICollection<T>, params T[]) ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ConfigEventArgs.html": {
    "href": "api/wan24.Core.ConfigEventArgs.html",
    "title": "Class ConfigEventArgs | wan24-Core",
    "keywords": "Class ConfigEventArgs Configuration event arguments Inheritance object EventArgs ConfigEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class ConfigEventArgs : EventArgs Remarks Constructor Constructors | Edit this page View Source ConfigEventArgs(in IConfigOption, in object?) Configuration event arguments Declaration public ConfigEventArgs(in IConfigOption option, in object? oldValue) Parameters Type Name Description IConfigOption option Option object oldValue Old value Remarks Constructor Properties | Edit this page View Source OldValue Old value Declaration public object? OldValue { get; } Property Value Type Description object | Edit this page View Source Option Option Declaration public IConfigOption Option { get; } Property Value Type Description IConfigOption Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ConfigOption-2.html": {
    "href": "api/wan24.Core.ConfigOption-2.html",
    "title": "Class ConfigOption<tValue, tConfig> | wan24-Core",
    "keywords": "Class ConfigOption<tValue, tConfig> Configuration option Inheritance object ChangeToken ChangeToken<ConfigOption<tValue, tConfig>> ConfigOption<tValue, tConfig> Implements INotifyPropertyChanged IObservable<ConfigOption<tValue, tConfig>> IConfigOption IChangeToken Inherited Members ChangeToken<ConfigOption<tValue, tConfig>>.Subscribe(IObserver<ConfigOption<tValue, tConfig>>) ChangeToken.SyncObject ChangeToken.ChangeIdentifier ChangeToken.HasChanged ChangeToken.ActiveChangeCallbacks ChangeToken.RegisterChangeCallback(Action<object>, object) ChangeToken.InvokeCallbacks(in object) ChangeToken.PropertyChanged ChangeToken.RaisePropertyChanged(in string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class ConfigOption<tValue, tConfig> : ChangeToken<ConfigOption<tValue, tConfig>>, INotifyPropertyChanged, IObservable<ConfigOption<tValue, tConfig>>, IConfigOption, IChangeToken where tConfig : OverridableConfig<tConfig>, new() Type Parameters Name Description tValue Value type tConfig Configuration type Constructors | Edit this page View Source ConfigOption(in tConfig, in string, in bool) Constructor Declaration public ConfigOption(in tConfig config, in string propertyName, in bool canBeOverridden = true) Parameters Type Name Description tConfig config Configuration string propertyName Property name bool canBeOverridden Can be overridden? | Edit this page View Source ConfigOption(in tConfig, in string, in bool, in tValue?) Constructor Declaration public ConfigOption(in tConfig config, in string propertyName, in bool canBeOverridden, in tValue? defaultValue) Parameters Type Name Description tConfig config Configuration string propertyName Property name bool canBeOverridden Can be overridden? tValue defaultValue Default value | Edit this page View Source ConfigOption(in tConfig, in string, in bool, in tValue?, in tValue?) Constructor Declaration public ConfigOption(in tConfig config, in string propertyName, in bool canBeOverridden, in tValue? value, in tValue? defaultValue) Parameters Type Name Description tConfig config Configuration string propertyName Property name bool canBeOverridden Can be overridden? tValue value Value to set tValue defaultValue Default value Properties | Edit this page View Source CanBeOverridden Can be overridden by a sub-option? Declaration public bool CanBeOverridden { get; set; } Property Value Type Description bool | Edit this page View Source CanOverride Can override the parent option? Declaration public bool CanOverride { get; } Property Value Type Description bool | Edit this page View Source Configuration Configuration Declaration public tConfig Configuration { get; } Property Value Type Description tConfig | Edit this page View Source Default Default value (returned, if is not set) Declaration public tValue? Default { get; set; } Property Value Type Description tValue | Edit this page View Source DoesOverride Does override the parent option? Declaration public bool DoesOverride { get; } Property Value Type Description bool | Edit this page View Source DynamicValueConverter Dynamic value converter callback Declaration public Func<dynamic?, object?>? DynamicValueConverter { get; set; } Property Value Type Description Func<dynamic, object> | Edit this page View Source FinalValue Final value Declaration public tValue? FinalValue { get; } Property Value Type Description tValue | Edit this page View Source GUID GUID Declaration public Guid GUID { get; } Property Value Type Description Guid | Edit this page View Source HasValue Has this option a (sub-)value? Declaration public bool HasValue { get; } Property Value Type Description bool | Edit this page View Source IsChanged Is changed? Declaration public bool IsChanged { get; } Property Value Type Description bool | Edit this page View Source IsOverridden If the sub-option overrides this option Declaration public bool IsOverridden { get; } Property Value Type Description bool | Edit this page View Source IsSet Is set? Declaration public bool IsSet { get; } Property Value Type Description bool | Edit this page View Source MasterOption Master configuration option Declaration public ConfigOption<tValue, tConfig> MasterOption { get; } Property Value Type Description ConfigOption<tValue, tConfig> | Edit this page View Source ParentDoesOverride Does the parent option override its parents option? Declaration public bool ParentDoesOverride { get; } Property Value Type Description bool | Edit this page View Source ParentOption Parent configuration option Declaration public ConfigOption<tValue, tConfig>? ParentOption { get; } Property Value Type Description ConfigOption<tValue, tConfig> | Edit this page View Source ParentValue Overriding parent option value Declaration public tValue? ParentValue { get; } Property Value Type Description tValue | Edit this page View Source PropertyName Property name Declaration public string PropertyName { get; } Property Value Type Description string | Edit this page View Source SubOption Sub-configuration option Declaration public ConfigOption<tValue, tConfig>? SubOption { get; } Property Value Type Description ConfigOption<tValue, tConfig> | Edit this page View Source SubValue Sub-configuration value Declaration public tValue? SubValue { get; } Property Value Type Description tValue | Edit this page View Source SubWantsOverride If the sub-option wants to override this option Declaration public bool SubWantsOverride { get; } Property Value Type Description bool | Edit this page View Source Value Value Declaration public tValue? Value { get; set; } Property Value Type Description tValue Methods | Edit this page View Source ResetChanged(in bool) Reset the changed state Declaration public void ResetChanged(in bool recursive = true) Parameters Type Name Description bool recursive Recursive? | Edit this page View Source SetDynamicValue(in dynamic?) Set a dynamic value Declaration public void SetDynamicValue(in dynamic? value) Parameters Type Name Description dynamic value Value | Edit this page View Source Unset(in bool) Unset the value Declaration public void Unset(in bool recursive = false) Parameters Type Name Description bool recursive Recursive? | Edit this page View Source UnsetOverrides() Unset overrides (recursive!) Declaration public void UnsetOverrides() Events | Edit this page View Source OnChange Raised when the value was changed (bubbles to the root option) Declaration public event IConfigOption.Option_Delegate? OnChange Event Type Type Description IConfigOption.Option_Delegate Operators | Edit this page View Source implicit operator tValue?(ConfigOption<tValue, tConfig>) Cast as value Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator tValue?(ConfigOption<tValue, tConfig> option) Parameters Type Name Description ConfigOption<tValue, tConfig> option Option Returns Type Description tValue Implements INotifyPropertyChanged IObservable<T> IConfigOption IChangeToken Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ConsoleLogger.html": {
    "href": "api/wan24.Core.ConsoleLogger.html",
    "title": "Class ConsoleLogger | wan24-Core",
    "keywords": "Class ConsoleLogger Console logger Inheritance object LoggerBase ConsoleLogger Implements ILogger Inherited Members LoggerBase.Level LoggerBase.Next LoggerBase.BeginScope<TState>(TState) LoggerBase.IsEnabled(LogLevel) LoggerBase.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class ConsoleLogger : LoggerBase, ILogger Remarks Constructor Constructors | Edit this page View Source ConsoleLogger(in LogLevel?, in ILogger?) Console logger Declaration public ConsoleLogger(in LogLevel? level = null, in ILogger? next = null) Parameters Type Name Description LogLevel? level Log level ILogger next Next logger which should receive the message Remarks Constructor Properties | Edit this page View Source WriteToStdErr Write to STDERR? Declaration public bool WriteToStdErr { get; set; } Property Value Type Description bool Methods | Edit this page View Source LogInt<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>) Writes a log entry Declaration protected override void LogInt<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel Level EventId eventId Event ID TState state State Exception exception Exception Func<TState, Exception, string> formatter Formatter Type Parameters Name Description TState State type Overrides LoggerBase.LogInt<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>) Implements ILogger Extension Methods LoggerExtensions.GetFinalLogger(ILogger) LoggerExtensions.GetLogLevel(ILogger) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.CounterEvent.Condition_Delegate.html": {
    "href": "api/wan24.Core.CounterEvent.Condition_Delegate.html",
    "title": "Delegate CounterEvent.Condition_Delegate | wan24-Core",
    "keywords": "Delegate CounterEvent.Condition_Delegate Delegate for a condition (CounterEvent instance is locked during the condition is evaluated) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate int? CounterEvent.Condition_Delegate() Returns Type Description int? Counter value to return or null, if the condition wasn't met Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.CounterEvent.CountEventArgs.html": {
    "href": "api/wan24.Core.CounterEvent.CountEventArgs.html",
    "title": "Class CounterEvent.CountEventArgs | wan24-Core",
    "keywords": "Class CounterEvent.CountEventArgs Arguments for the OnCount event Inheritance object EventArgs CounterEvent.CountEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class CounterEvent.CountEventArgs : EventArgs Remarks Constructor Constructors | Edit this page View Source CountEventArgs(in int, in int) Arguments for the OnCount event Declaration public CountEventArgs(in int oldValue, in int newValue) Parameters Type Name Description int oldValue Old value int newValue New value Remarks Constructor Properties | Edit this page View Source NewValue New value Declaration public int NewValue { get; } Property Value Type Description int | Edit this page View Source OldValue Old value Declaration public int OldValue { get; } Property Value Type Description int | Edit this page View Source SetValue New value to set after the event was handled, and during the CounterEvent instance is still locked Declaration public int? SetValue { get; set; } Property Value Type Description int? Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.CounterEvent.Count_Delegate.html": {
    "href": "api/wan24.Core.CounterEvent.Count_Delegate.html",
    "title": "Delegate CounterEvent.Count_Delegate | wan24-Core",
    "keywords": "Delegate CounterEvent.Count_Delegate Delegate for the OnCount event Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void CounterEvent.Count_Delegate(CounterEvent counter, CounterEvent.CountEventArgs e) Parameters Type Name Description CounterEvent counter Counter CounterEvent.CountEventArgs e Arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.CounterEvent.html": {
    "href": "api/wan24.Core.CounterEvent.html",
    "title": "Class CounterEvent | wan24-Core",
    "keywords": "Class CounterEvent Counter event Inheritance object DisposableBase CounterEvent Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class CounterEvent : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Remarks Constructor Constructors | Edit this page View Source CounterEvent(in int) Counter event Declaration public CounterEvent(in int initialValue = 0) Parameters Type Name Description int initialValue Initial counter value Remarks Constructor Properties | Edit this page View Source Counter Current counter value Declaration public int Counter { get; } Property Value Type Description int | Edit this page View Source FitNewValue Fit a new counter value into the range (to avoid an exception when setting an out of range value)? Declaration public bool FitNewValue { get; init; } Property Value Type Description bool | Edit this page View Source ForceRaiseEvent Force raising the OnCount event (even if the new counter value is equal to the old counter value)? Declaration public bool ForceRaiseEvent { get; init; } Property Value Type Description bool | Edit this page View Source MaxCounter Max. counter value Declaration public int MaxCounter { get; init; } Property Value Type Description int | Edit this page View Source MinCounter Min. counter value Declaration public int MinCounter { get; init; } Property Value Type Description int Methods | Edit this page View Source Count(in int, in bool, in CancellationToken) Count a value Declaration public int? Count(in int value = 1, in bool fitNewValue = false, in CancellationToken cancellationToken = default) Parameters Type Name Description int value Value bool fitNewValue Fit the new value into the range (won't override FitNewValue)? CancellationToken cancellationToken Cancellation token Returns Type Description int? New counter value or null, if failed (new value is out of range) | Edit this page View Source CountAsync(int, bool, CancellationToken) Count a value Declaration public Task<int?> CountAsync(int value = 1, bool fitNewValue = false, CancellationToken cancellationToken = default) Parameters Type Name Description int value Value bool fitNewValue Fit the new value into the range (won't override FitNewValue)? CancellationToken cancellationToken Cancellation token Returns Type Description Task<int?> New counter value or null, if failed (new value is out of range) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source SetCounter(in int, in CancellationToken) Set the counter to a value Declaration public int SetCounter(in int value, in CancellationToken cancellationToken = default) Parameters Type Name Description int value Value CancellationToken cancellationToken Cancellation token Returns Type Description int Old counter value | Edit this page View Source SetCounterAsync(int, CancellationToken) Set the counter to a value Declaration public Task<int> SetCounterAsync(int value, CancellationToken cancellationToken = default) Parameters Type Name Description int value Value CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Old counter value | Edit this page View Source TryCount(in int, in CancellationToken) Count a value (won't throw on overflow, won't fit the new value into the range) Declaration public int? TryCount(in int value = 1, in CancellationToken cancellationToken = default) Parameters Type Name Description int value Value CancellationToken cancellationToken Cancellation token Returns Type Description int? New counter value or null, if failed (new value is out of range) | Edit this page View Source TryCountAsync(int, CancellationToken) Count a value (won't throw on overflow, won't fit the new value into the range) Declaration public Task<int?> TryCountAsync(int value = 1, CancellationToken cancellationToken = default) Parameters Type Name Description int value Value CancellationToken cancellationToken Cancellation token Returns Type Description Task<int?> New counter value or null, if failed (new value is out of range) | Edit this page View Source WaitCondition(in Condition_Delegate, CancellationToken) Wait for a condition Declaration public int WaitCondition(in CounterEvent.Condition_Delegate condition, CancellationToken cancellationToken = default) Parameters Type Name Description CounterEvent.Condition_Delegate condition Condition (CounterEvent instance is locked during the condition is evaluated) CancellationToken cancellationToken Cancellation token Returns Type Description int Counter value | Edit this page View Source WaitConditionAsync(Condition_Delegate, CancellationToken) Wait for a condition Declaration public Task<int> WaitConditionAsync(CounterEvent.Condition_Delegate condition, CancellationToken cancellationToken = default) Parameters Type Name Description CounterEvent.Condition_Delegate condition Condition (CounterEvent instance is locked during the condition is evaluated) CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Counter value | Edit this page View Source WaitCount(CancellationToken) Wait for the counter to be counted Declaration public int WaitCount(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description int Counter value | Edit this page View Source WaitCountAsync(CancellationToken) Wait for the counter to be counted Declaration public Task<int> WaitCountAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Counter value | Edit this page View Source WaitCounterEquals(int, CancellationToken) Wait for the counter to equal a value Declaration public void WaitCounterEquals(int value, CancellationToken cancellationToken = default) Parameters Type Name Description int value Value CancellationToken cancellationToken Cancellation token | Edit this page View Source WaitCounterEqualsAsync(int, CancellationToken) Wait for the counter to equal a value Declaration public Task WaitCounterEqualsAsync(int value, CancellationToken cancellationToken = default) Parameters Type Name Description int value Value CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source WaitCounterGreater(int, CancellationToken) Wait for the counter to be greater than a value Declaration public int WaitCounterGreater(int value, CancellationToken cancellationToken = default) Parameters Type Name Description int value Value CancellationToken cancellationToken Cancellation token Returns Type Description int Counter value | Edit this page View Source WaitCounterGreaterAsync(int, CancellationToken) Wait for the counter to be greater than a value Declaration public Task<int> WaitCounterGreaterAsync(int value, CancellationToken cancellationToken = default) Parameters Type Name Description int value Value CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Counter value | Edit this page View Source WaitCounterGreaterOrEquals(int, CancellationToken) Wait for the counter to be greater or equal a value Declaration public int WaitCounterGreaterOrEquals(int value, CancellationToken cancellationToken = default) Parameters Type Name Description int value Value CancellationToken cancellationToken Cancellation token Returns Type Description int Counter value | Edit this page View Source WaitCounterGreaterOrEqualsAsync(int, CancellationToken) Wait for the counter to be greater or equal a value Declaration public Task<int> WaitCounterGreaterOrEqualsAsync(int value, CancellationToken cancellationToken = default) Parameters Type Name Description int value Value CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Counter value | Edit this page View Source WaitCounterLower(int, CancellationToken) Wait for the counter to be lower than a value Declaration public int WaitCounterLower(int value, CancellationToken cancellationToken = default) Parameters Type Name Description int value Value CancellationToken cancellationToken Cancellation token Returns Type Description int Counter value | Edit this page View Source WaitCounterLowerAsync(int, CancellationToken) Wait for the counter to lower than a value Declaration public Task<int> WaitCounterLowerAsync(int value, CancellationToken cancellationToken = default) Parameters Type Name Description int value Value CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Counter value | Edit this page View Source WaitCounterLowerOrEquals(int, CancellationToken) Wait for the counter to be lower or equal a value Declaration public int WaitCounterLowerOrEquals(int value, CancellationToken cancellationToken = default) Parameters Type Name Description int value Value CancellationToken cancellationToken Cancellation token Returns Type Description int Counter value | Edit this page View Source WaitCounterLowerOrEqualsAsync(int, CancellationToken) Wait for the counter to be lower or equal a value Declaration public Task<int> WaitCounterLowerOrEqualsAsync(int value, CancellationToken cancellationToken = default) Parameters Type Name Description int value Value CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Counter value | Edit this page View Source WaitCounterNotEquals(int, CancellationToken) Wait for the counter to equal a value Declaration public int WaitCounterNotEquals(int value, CancellationToken cancellationToken = default) Parameters Type Name Description int value Value CancellationToken cancellationToken Cancellation token Returns Type Description int Counter value | Edit this page View Source WaitCounterNotEqualsAsync(int, CancellationToken) Wait for the counter to equal a value Declaration public Task<int> WaitCounterNotEqualsAsync(int value, CancellationToken cancellationToken = default) Parameters Type Name Description int value Value CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Counter value Events | Edit this page View Source OnCount Raised when counted (CounterEvent instance is locked during event handling) Declaration public event CounterEvent.Count_Delegate? OnCount Event Type Type Description CounterEvent.Count_Delegate Operators | Edit this page View Source implicit operator int(CounterEvent) Cast as counter value Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(CounterEvent counter) Parameters Type Name Description CounterEvent counter Counter Returns Type Description int Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.CountingStream-1.html": {
    "href": "api/wan24.Core.CountingStream-1.html",
    "title": "Class CountingStream<T> | wan24-Core",
    "keywords": "Class CountingStream<T> Counting stream counts red/written bytes Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> CountingStream<T> CountingStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.LeaveOpen WrapperStream<T>.CanRead WrapperStream<T>.CanSeek WrapperStream<T>.CanWrite WrapperStream<T>.CanTimeout WrapperStream<T>.Length WrapperStream<T>.Position WrapperStream<T>.ReadTimeout WrapperStream<T>.WriteTimeout WrapperStream<T>.Flush() WrapperStream<T>.FlushAsync(CancellationToken) WrapperStream<T>.Seek(long, SeekOrigin) WrapperStream<T>.SetLength(long) WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndRead(IAsyncResult) WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndWrite(IAsyncResult) WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.Close() WrapperStream<T>.Dispose(bool) WrapperStream<T>.DisposeCore() WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class CountingStream<T> : WrapperStream<T>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Wrapped stream type Remarks Constructor Constructors | Edit this page View Source CountingStream(in T, in bool) Counting stream counts red/written bytes Declaration public CountingStream(in T baseStream, in bool leaveOpen = false) Parameters Type Name Description T baseStream Base stream bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Properties | Edit this page View Source Red Number of bytes red Declaration public virtual long Red { get; protected set; } Property Value Type Description long | Edit this page View Source State Status information Declaration public override IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Overrides WrapperStream<T>.State | Edit this page View Source Written Number of bytes written Declaration public virtual long Written { get; protected set; } Property Value Type Description long Methods | Edit this page View Source CopyTo(Stream, int) Reads the bytes from the current stream and writes them to another stream, using a specified buffer size. Both streams positions are advanced by the number of bytes copied. Declaration public override void CopyTo(Stream destination, int bufferSize) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size of the buffer. This value must be greater than zero. The default size is 81920. Overrides WrapperStream<T>.CopyTo(Stream, int) Exceptions Type Condition ArgumentNullException destination is null. ArgumentOutOfRangeException bufferSize is negative or zero. NotSupportedException The current stream does not support reading. -or- destination does not support writing. ObjectDisposedException Either the current stream or destination were closed before the CopyTo(Stream) method was called. IOException An I/O error occurred. | Edit this page View Source CopyToAsync(Stream, int, CancellationToken) Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token. Both streams positions are advanced by the number of bytes copied. Declaration public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous copy operation. Overrides WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) Exceptions Type Condition ArgumentNullException destination is null. ArgumentOutOfRangeException buffersize is negative or zero. ObjectDisposedException Either the current stream or the destination stream is disposed. NotSupportedException The current stream does not support reading, or the destination stream does not support writing. | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides WrapperStream<T>.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides WrapperStream<T>.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides WrapperStream<T>.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source ResetCounter() Reset the red/written counters Declaration public virtual void ResetCounter() | Edit this page View Source ResetRed() Reset the red bytes counter Declaration public virtual void ResetRed() | Edit this page View Source ResetWritten() Reset the written bytes counter Declaration public virtual void ResetWritten() | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides WrapperStream<T>.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides WrapperStream<T>.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides WrapperStream<T>.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.CountingStream.html": {
    "href": "api/wan24.Core.CountingStream.html",
    "title": "Class CountingStream | wan24-Core",
    "keywords": "Class CountingStream Counting stream counts red/written bytes Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> CountingStream<Stream> CountingStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members CountingStream<Stream>.Red CountingStream<Stream>.Written CountingStream<Stream>.State CountingStream<Stream>.ResetRed() CountingStream<Stream>.ResetWritten() CountingStream<Stream>.ResetCounter() CountingStream<Stream>.Write(byte[], int, int) CountingStream<Stream>.Write(ReadOnlySpan<byte>) CountingStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) CountingStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) CountingStream<Stream>.WriteByte(byte) CountingStream<Stream>.Read(byte[], int, int) CountingStream<Stream>.Read(Span<byte>) CountingStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) CountingStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) CountingStream<Stream>.ReadByte() CountingStream<Stream>.CopyTo(Stream, int) CountingStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.CanRead WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.Position WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.Flush() WrapperStream<Stream>.FlushAsync(CancellationToken) WrapperStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>.SetLength(long) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.Dispose(bool) WrapperStream<Stream>.DisposeCore() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class CountingStream : CountingStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source CountingStream(in Stream, in bool) Counting stream counts red/written bytes Declaration public CountingStream(in Stream baseStream, in bool leaveOpen = false) Parameters Type Name Description Stream baseStream Base stream bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.CutStream-1.html": {
    "href": "api/wan24.Core.CutStream-1.html",
    "title": "Class CutStream<T> | wan24-Core",
    "keywords": "Class CutStream<T> Cut stream (cuts the base stream at its position) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> CutStream<T> CutStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.LeaveOpen WrapperStream<T>.State WrapperStream<T>.CanRead WrapperStream<T>.CanSeek WrapperStream<T>.CanWrite WrapperStream<T>.CanTimeout WrapperStream<T>.ReadTimeout WrapperStream<T>.WriteTimeout WrapperStream<T>.Flush() WrapperStream<T>.FlushAsync(CancellationToken) WrapperStream<T>.CopyTo(Stream, int) WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndRead(IAsyncResult) WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndWrite(IAsyncResult) WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.Close() WrapperStream<T>.Dispose(bool) WrapperStream<T>.DisposeCore() WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class CutStream<T> : WrapperStream<T>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Base stream type Constructors | Edit this page View Source CutStream(in T, in bool) Constructor Declaration public CutStream(in T baseStream, in bool leaveOpen = false) Parameters Type Name Description T baseStream Base stream bool leaveOpen Leave the base stream open when disposing? Fields | Edit this page View Source Offset Start byte offset Declaration protected readonly long Offset Field Value Type Description long | Edit this page View Source _Length Length in bytes Declaration protected long _Length Field Value Type Description long | Edit this page View Source _Position Position byte offset Declaration protected long _Position Field Value Type Description long Properties | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides WrapperStream<T>.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides WrapperStream<T>.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Methods | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides WrapperStream<T>.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides WrapperStream<T>.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides WrapperStream<T>.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides WrapperStream<T>.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides WrapperStream<T>.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides WrapperStream<T>.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides WrapperStream<T>.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides WrapperStream<T>.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.CutStream.html": {
    "href": "api/wan24.Core.CutStream.html",
    "title": "Class CutStream | wan24-Core",
    "keywords": "Class CutStream Cut stream (cuts the base stream at its position) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> CutStream<Stream> CutStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members CutStream<Stream>.Offset CutStream<Stream>._Length CutStream<Stream>._Position CutStream<Stream>.Length CutStream<Stream>.Position CutStream<Stream>.Seek(long, SeekOrigin) CutStream<Stream>.SetLength(long) CutStream<Stream>.Read(byte[], int, int) CutStream<Stream>.Read(Span<byte>) CutStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) CutStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) CutStream<Stream>.ReadByte() CutStream<Stream>.Write(byte[], int, int) CutStream<Stream>.Write(ReadOnlySpan<byte>) CutStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) CutStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) CutStream<Stream>.WriteByte(byte) WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.State WrapperStream<Stream>.CanRead WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.Flush() WrapperStream<Stream>.FlushAsync(CancellationToken) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.Dispose(bool) WrapperStream<Stream>.DisposeCore() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class CutStream : CutStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source CutStream(in Stream, in bool) Constructor Declaration public CutStream(in Stream baseStream, in bool leaveOpen = false) Parameters Type Name Description Stream baseStream Base stream bool leaveOpen Leave the base stream open when disposing? Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DateTimeExtensions.html": {
    "href": "api/wan24.Core.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | wan24-Core",
    "keywords": "Class DateTimeExtensions DateTime extensions Inheritance object DateTimeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class DateTimeExtensions Methods | Edit this page View Source ApplyOffset(DateTime, in TimeSpan, in DateTime?) Apply an offset to a time Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static DateTime ApplyOffset(this DateTime time, in TimeSpan offset, in DateTime? reference = null) Parameters Type Name Description DateTime time Time TimeSpan offset Offset DateTime? reference Reference time Returns Type Description DateTime Time including offset | Edit this page View Source IsInRange(DateTime, in DateTime, in DateTime, in bool, in bool) Determine if a time is within a range Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsInRange(this DateTime time, in DateTime begin, in DateTime end, in bool endIncluding = false, in bool beginIncluding = true) Parameters Type Name Description DateTime time Time DateTime begin Begin DateTime end End bool endIncluding End including? bool beginIncluding Begin including? Returns Type Description bool Is within the range? | Edit this page View Source IsInRange(DateTime, in TimeSpan, in DateTime?) Determine if a time is within a reference time plus/minus an offset Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsInRange(this DateTime time, in TimeSpan offset, in DateTime? reference = null) Parameters Type Name Description DateTime time Time TimeSpan offset Offset DateTime? reference Reference time (will be Now, if not given) Returns Type Description bool Matches the reference time plus/minus the offset?"
  },
  "api/wan24.Core.DebugLogger.html": {
    "href": "api/wan24.Core.DebugLogger.html",
    "title": "Class DebugLogger | wan24-Core",
    "keywords": "Class DebugLogger Debug logger Inheritance object LoggerBase DebugLogger Implements ILogger Inherited Members LoggerBase.Level LoggerBase.Next LoggerBase.BeginScope<TState>(TState) LoggerBase.IsEnabled(LogLevel) LoggerBase.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class DebugLogger : LoggerBase, ILogger Remarks Constructor Constructors | Edit this page View Source DebugLogger(in LogLevel?, in ILogger?) Debug logger Declaration public DebugLogger(in LogLevel? level = null, in ILogger? next = null) Parameters Type Name Description LogLevel? level Log level ILogger next Next logger which should receive the message Remarks Constructor Properties | Edit this page View Source BreakDebuggerOnLevel Log level which will break the debugger Declaration public LogLevel BreakDebuggerOnLevel { get; set; } Property Value Type Description LogLevel Methods | Edit this page View Source LogInt<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>) Writes a log entry Declaration protected override void LogInt<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel Level EventId eventId Event ID TState state State Exception exception Exception Func<TState, Exception, string> formatter Formatter Type Parameters Name Description TState State type Overrides LoggerBase.LogInt<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>) Implements ILogger Extension Methods LoggerExtensions.GetFinalLogger(ILogger) LoggerExtensions.GetLogLevel(ILogger) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Delay.html": {
    "href": "api/wan24.Core.Delay.html",
    "title": "Class Delay | wan24-Core",
    "keywords": "Class Delay Delay Inheritance object DisposableBase Delay Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class Delay : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source Delay(in DateTime, in string?) Constructor Declaration public Delay(in DateTime runTime, in string? guid = null) Parameters Type Name Description DateTime runTime Runtime string guid GUID to use | Edit this page View Source Delay(in TimeSpan) Constructor Declaration public Delay(in TimeSpan delay) Parameters Type Name Description TimeSpan delay Delay Properties | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source Name Name Declaration public string? Name { get; set; } Property Value Type Description string | Edit this page View Source RunTime Runtime Declaration public DateTime RunTime { get; } Property Value Type Description DateTime | Edit this page View Source Tag Any tagged object Declaration public object? Tag { get; set; } Property Value Type Description object | Edit this page View Source Task Task Declaration public Task Task { get; } Property Value Type Description Task Methods | Edit this page View Source Cancel() Cancel (and dispose) Declaration public void Cancel() | Edit this page View Source CancelAsync() Cancel (and dispose) Declaration public Task CancelAsync() Returns Type Description Task | Edit this page View Source Complete() Complete (and dispose) Declaration public void Complete() | Edit this page View Source CompleteAsync() Complete (and dispose) Declaration public Task CompleteAsync() Returns Type Description Task | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source Fail(in Exception?) Fail (and dispose) Declaration public void Fail(in Exception? ex = null) Parameters Type Name Description Exception ex Exception | Edit this page View Source FailAsync(Exception?) Fail (and dispose) Declaration public Task FailAsync(Exception? ex = null) Parameters Type Name Description Exception ex Exception Returns Type Description Task Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DelayService.html": {
    "href": "api/wan24.Core.DelayService.html",
    "title": "Class DelayService | wan24-Core",
    "keywords": "Class DelayService Delay service Inheritance object DisposableBase HostedServiceBase TimedHostedServiceBase DelayService Implements IWillDispose ITimer IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members TimedHostedServiceBase.GUID TimedHostedServiceBase.CanPause TimedHostedServiceBase.State TimedHostedServiceBase.Interval TimedHostedServiceBase.TimerType TimedHostedServiceBase.LastRun TimedHostedServiceBase.LastDuration TimedHostedServiceBase.NextRun TimedHostedServiceBase.RunOnce TimedHostedServiceBase.SetTimerAsync(double, HostedServiceTimers?, DateTime?, CancellationToken) TimedHostedServiceBase.StartAsync(CancellationToken) TimedHostedServiceBase.StopAsync(CancellationToken) TimedHostedServiceBase.OnRan HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.OnException DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class DelayService : TimedHostedServiceBase, IWillDispose, ITimer, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Properties | Edit this page View Source Instance Instance Declaration public static DelayService Instance { get; } Property Value Type Description DelayService Methods | Edit this page View Source TimedWorkerAsync() Timed service worker Declaration protected override Task TimedWorkerAsync() Returns Type Description Task Overrides TimedHostedServiceBase.TimedWorkerAsync() Implements IWillDispose ITimer IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DelayTable.html": {
    "href": "api/wan24.Core.DelayTable.html",
    "title": "Class DelayTable | wan24-Core",
    "keywords": "Class DelayTable Delay table Inheritance object DelayTable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class DelayTable Fields | Edit this page View Source Delays Delays (key is the GUID) Declaration public static readonly ConcurrentChangeTokenDictionary<string, Delay> Delays Field Value Type Description ConcurrentChangeTokenDictionary<string, Delay>"
  },
  "api/wan24.Core.DelegateExtensions.html": {
    "href": "api/wan24.Core.DelegateExtensions.html",
    "title": "Class DelegateExtensions | wan24-Core",
    "keywords": "Class DelegateExtensions Delegate extensions Inheritance object DelegateExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class DelegateExtensions Methods | Edit this page View Source InvokeAllAsync<T>(IAsyncEnumerable<T>, CancellationToken, params object?[]) Invoke all delegates (need to return a task) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task InvokeAllAsync<T>(this IAsyncEnumerable<T> delegates, CancellationToken cancellationToken = default, params object?[] param) where T : Delegate Parameters Type Name Description IAsyncEnumerable<T> delegates Delegates CancellationToken cancellationToken Cancellation token object[] param Parameters Returns Type Description Task Type Parameters Name Description T Delegate type | Edit this page View Source InvokeAllAsync<T>(IEnumerable<T>, CancellationToken, params object?[]) Invoke all asynchronous delegates (need to return a task) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task InvokeAllAsync<T>(this IEnumerable<T> delegates, CancellationToken cancellationToken = default, params object?[] param) where T : Delegate Parameters Type Name Description IEnumerable<T> delegates Delegates CancellationToken cancellationToken Cancellation token object[] param Parameters Returns Type Description Task Type Parameters Name Description T Delegate type | Edit this page View Source InvokeAllAsync<tDelegate, tResult>(IAsyncEnumerable<tDelegate>, CancellationToken, params object?[]) Invoke all delegates (need to return a task of tResult) Declaration public static IAsyncEnumerable<tResult?> InvokeAllAsync<tDelegate, tResult>(this IAsyncEnumerable<tDelegate> delegates, CancellationToken cancellationToken = default, params object?[] param) where tDelegate : Delegate Parameters Type Name Description IAsyncEnumerable<tDelegate> delegates Delegates CancellationToken cancellationToken Cancellation token object[] param Parameters Returns Type Description IAsyncEnumerable<tResult> Type Parameters Name Description tDelegate Delegate type tResult Result type | Edit this page View Source InvokeAllAsync<tDelegate, tResult>(IEnumerable<tDelegate>, CancellationToken, params object?[]) Invoke all delegates (need to return a task of tResult) Declaration public static IAsyncEnumerable<tResult?> InvokeAllAsync<tDelegate, tResult>(this IEnumerable<tDelegate> delegates, CancellationToken cancellationToken = default, params object?[] param) where tDelegate : Delegate Parameters Type Name Description IEnumerable<tDelegate> delegates Delegates CancellationToken cancellationToken Cancellation token object[] param Parameters Returns Type Description IAsyncEnumerable<tResult> Type Parameters Name Description tDelegate Delegate type tResult Result type | Edit this page View Source InvokeAll<T>(IEnumerable<T>, params object?[]) Invoke all delegates Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static void InvokeAll<T>(this IEnumerable<T> delegates, params object?[] param) where T : Delegate Parameters Type Name Description IEnumerable<T> delegates Delegates object[] param Parameters Type Parameters Name Description T Delegate type | Edit this page View Source InvokeAll<tDelegate, tResult>(IEnumerable<tDelegate>, params object?[]) Invoke all delegates (need to return tResult) Declaration public static IEnumerable<tResult?> InvokeAll<tDelegate, tResult>(this IEnumerable<tDelegate> delegates, params object?[] param) where tDelegate : Delegate Parameters Type Name Description IEnumerable<tDelegate> delegates Delegates object[] param Parameters Returns Type Description IEnumerable<tResult> Type Parameters Name Description tDelegate Delegate type tResult Result type"
  },
  "api/wan24.Core.DiHelper.DiAsync_Delegate.html": {
    "href": "api/wan24.Core.DiHelper.DiAsync_Delegate.html",
    "title": "Delegate DiHelper.DiAsync_Delegate | wan24-Core",
    "keywords": "Delegate DiHelper.DiAsync_Delegate Asynchronous DI delegate Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task<ITryAsyncResult> DiHelper.DiAsync_Delegate(Type type, CancellationToken cancellationToken) Parameters Type Name Description Type type Type CancellationToken cancellationToken Cancellation token Returns Type Description Task<ITryAsyncResult> The result Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DiHelper.DiServiceProviderFactory.html": {
    "href": "api/wan24.Core.DiHelper.DiServiceProviderFactory.html",
    "title": "Class DiHelper.DiServiceProviderFactory | wan24-Core",
    "keywords": "Class DiHelper.DiServiceProviderFactory DI helper service provider factory Inheritance object DiHelper.DiServiceProviderFactory Implements IServiceProviderFactory<IServiceCollection> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class DiHelper.DiServiceProviderFactory : IServiceProviderFactory<IServiceCollection> Constructors | Edit this page View Source DiServiceProviderFactory(in ServiceProviderOptions?, in bool, in IServiceProviderFactory<IServiceCollection>?) Constructor Declaration public DiServiceProviderFactory(in ServiceProviderOptions? options = null, in bool scoped = true, in IServiceProviderFactory<IServiceCollection>? defaultFactory = null) Parameters Type Name Description ServiceProviderOptions options Options bool scoped Create scoped service providers? IServiceProviderFactory<IServiceCollection> defaultFactory Default service provider factory Properties | Edit this page View Source DefaultFactory Default service provider factory Declaration public IServiceProviderFactory<IServiceCollection> DefaultFactory { get; } Property Value Type Description IServiceProviderFactory<IServiceCollection> | Edit this page View Source Scoped Create scoped service providers? Declaration public bool Scoped { get; } Property Value Type Description bool Methods | Edit this page View Source CreateBuilder(IServiceCollection) Creates a container builder from an IServiceCollection. Declaration public IServiceCollection CreateBuilder(IServiceCollection services) Parameters Type Name Description IServiceCollection services The collection of services Returns Type Description IServiceCollection A container builder that can be used to create an IServiceProvider. | Edit this page View Source CreateServiceProvider(IServiceCollection) Creates an IServiceProvider from the container builder. Declaration public IServiceProvider CreateServiceProvider(IServiceCollection containerBuilder) Parameters Type Name Description IServiceCollection containerBuilder The container builder Returns Type Description IServiceProvider An IServiceProvider Implements IServiceProviderFactory<TContainerBuilder> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DiHelper.Di_Delegate.html": {
    "href": "api/wan24.Core.DiHelper.Di_Delegate.html",
    "title": "Delegate DiHelper.Di_Delegate | wan24-Core",
    "keywords": "Delegate DiHelper.Di_Delegate DI delegate Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate bool DiHelper.Di_Delegate(Type type, out object? obj) Parameters Type Name Description Type type Type object obj Object Returns Type Description bool Use the object? Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DiHelper.html": {
    "href": "api/wan24.Core.DiHelper.html",
    "title": "Class DiHelper | wan24-Core",
    "keywords": "Class DiHelper DI helper Inheritance object DiHelper ScopedDiHelper Implements IAsyncKeyedServiceProvider IAsyncServiceProvider IKeyedServiceProvider IServiceProvider IServiceProviderIsKeyedService IServiceProviderIsService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class DiHelper : IAsyncKeyedServiceProvider, IAsyncServiceProvider, IKeyedServiceProvider, IServiceProvider, IServiceProviderIsKeyedService, IServiceProviderIsService Constructors | Edit this page View Source DiHelper() Constructor Declaration public DiHelper() Fields | Edit this page View Source AsyncObjectFactories Asynchronous DI object factories Declaration public static readonly ConcurrentDictionary<Type, DiHelper.DiAsync_Delegate> AsyncObjectFactories Field Value Type Description ConcurrentDictionary<Type, DiHelper.DiAsync_Delegate> | Edit this page View Source KeyedAsyncObjectFactories Keyed asynchronous DI object factories Declaration public static readonly ConcurrentDictionary<object, ConcurrentDictionary<Type, DiHelper.DiAsync_Delegate>> KeyedAsyncObjectFactories Field Value Type Description ConcurrentDictionary<object, ConcurrentDictionary<Type, DiHelper.DiAsync_Delegate>> | Edit this page View Source KeyedObjectFactories Keyed DI object factories Declaration public static readonly ConcurrentDictionary<object, ConcurrentDictionary<Type, DiHelper.Di_Delegate>> KeyedObjectFactories Field Value Type Description ConcurrentDictionary<object, ConcurrentDictionary<Type, DiHelper.Di_Delegate>> | Edit this page View Source KeyedObjects Keyed objects Declaration protected static readonly ConcurrentDictionary<object, ConcurrentDictionary<Type, object>> KeyedObjects Field Value Type Description ConcurrentDictionary<object, ConcurrentDictionary<Type, object>> | Edit this page View Source ObjectFactories DI object factories Declaration public static readonly ConcurrentDictionary<Type, DiHelper.Di_Delegate> ObjectFactories Field Value Type Description ConcurrentDictionary<Type, DiHelper.Di_Delegate> | Edit this page View Source Objects Objects Declaration protected static readonly ConcurrentDictionary<Type, object> Objects Field Value Type Description ConcurrentDictionary<Type, object> | Edit this page View Source StaticSync Static thread synchronization Declaration protected static readonly SemaphoreSync StaticSync Field Value Type Description SemaphoreSync Properties | Edit this page View Source Instance Global instance Declaration public static DiHelper Instance { get; set; } Property Value Type Description DiHelper | Edit this page View Source NotCachedTypes Not cached types Declaration public static ReadOnlyCollection<Type> NotCachedTypes { get; } Property Value Type Description ReadOnlyCollection<Type> | Edit this page View Source ServiceProvider DI service provider Declaration public static IServiceProvider? ServiceProvider { get; set; } Property Value Type Description IServiceProvider Methods | Edit this page View Source AddDiObject(object, Type) Add a DI object to the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static object AddDiObject(object obj, Type type) Parameters Type Name Description object obj Object Type type DI type Returns Type Description object Object | Edit this page View Source AddDiObjectAsync(object, Type, CancellationToken) Add a DI object to the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<object> AddDiObjectAsync(object obj, Type type, CancellationToken cancellationToken = default) Parameters Type Name Description object obj Object Type type DI type CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Object | Edit this page View Source AddDiObjectAsync<T>(T, CancellationToken) Add a DI object to the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<T> AddDiObjectAsync<T>(T obj, CancellationToken cancellationToken = default) Parameters Type Name Description T obj Object CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Object Type Parameters Name Description T DI type | Edit this page View Source AddDiObject<T>(T) Add a DI object to the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static T AddDiObject<T>(T obj) Parameters Type Name Description T obj Object Returns Type Description T Object Type Parameters Name Description T DI type | Edit this page View Source AddKeyedDiObject(object, object, Type) Add a keyed DI object to the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static object AddKeyedDiObject(object key, object obj, Type type) Parameters Type Name Description object key Key object obj Object Type type DI type Returns Type Description object Object | Edit this page View Source AddKeyedDiObjectAsync(object, object, Type, CancellationToken) Add a keyed DI object to the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<object> AddKeyedDiObjectAsync(object key, object obj, Type type, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key object obj Object Type type DI type CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Object | Edit this page View Source AddKeyedDiObjectAsync<T>(object, T, CancellationToken) Add a keyed DI object to the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<T> AddKeyedDiObjectAsync<T>(object key, T obj, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key T obj Object CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Object Type Parameters Name Description T DI type | Edit this page View Source AddKeyedDiObject<T>(object, T) Add a keyed DI object to the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static T AddKeyedDiObject<T>(object key, T obj) Parameters Type Name Description object key Key T obj Object Returns Type Description T Object Type Parameters Name Description T DI type | Edit this page View Source AddNotCachedTypes(params Type[]) Add not cached types Declaration public static void AddNotCachedTypes(params Type[] types) Parameters Type Name Description Type[] types Types | Edit this page View Source AddNotCachedTypesAsync(CancellationToken, params Type[]) Add not cached types Declaration public static Task AddNotCachedTypesAsync(CancellationToken cancellationToken = default, params Type[] types) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Type[] types Types Returns Type Description Task | Edit this page View Source ClearKeyedObjectCache(object) Clear the keyed object cache (will dispose cached objects, if possible) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static void ClearKeyedObjectCache(object key) Parameters Type Name Description object key Key | Edit this page View Source ClearKeyedObjectCacheAsync(object, CancellationToken) Clear the object cache (will dispose cached objects, if possible) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task ClearKeyedObjectCacheAsync(object key, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source ClearObjectCache() Clear the object cache (will dispose cached objects, if possible) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static void ClearObjectCache() | Edit this page View Source ClearObjectCacheAsync(CancellationToken) Clear the object cache (will dispose cached objects, if possible) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task ClearObjectCacheAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source GetAsyncFactory(Type) Get an object factory Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static DiHelper.DiAsync_Delegate? GetAsyncFactory(Type type) Parameters Type Name Description Type type Type Returns Type Description DiHelper.DiAsync_Delegate Factory | Edit this page View Source GetDiObject(in Type, out object?, in IServiceProvider?) Get a DI object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool GetDiObject(in Type type, out object? obj, in IServiceProvider? serviceProvider = null) Parameters Type Name Description Type type Type object obj Result IServiceProvider serviceProvider Service provider Returns Type Description bool Use the result? | Edit this page View Source GetDiObjectAsync(Type, IServiceProvider?, CancellationToken) Get a DI object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<ITryAsyncResult> GetDiObjectAsync(Type type, IServiceProvider? serviceProvider = null, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Type IServiceProvider serviceProvider Service provider CancellationToken cancellationToken Cancellation token Returns Type Description Task<ITryAsyncResult> Result | Edit this page View Source GetDiObjectAsync<T>(IServiceProvider?, CancellationToken) Get a DI object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<TryAsyncResult<T>> GetDiObjectAsync<T>(IServiceProvider? serviceProvider = null, CancellationToken cancellationToken = default) Parameters Type Name Description IServiceProvider serviceProvider Service provider CancellationToken cancellationToken Cancellation token Returns Type Description Task<TryAsyncResult<T>> Result Type Parameters Name Description T Type | Edit this page View Source GetDiObject<T>(out T?, in IServiceProvider?) Get a DI object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool GetDiObject<T>(out T? obj, in IServiceProvider? serviceProvider = null) Parameters Type Name Description T obj Result IServiceProvider serviceProvider Service provider Returns Type Description bool Use the result? Type Parameters Name Description T Type | Edit this page View Source GetFactory(Type) Get an object factory Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static DiHelper.Di_Delegate? GetFactory(Type type) Parameters Type Name Description Type type Type Returns Type Description DiHelper.Di_Delegate Factory | Edit this page View Source GetKeyedAsyncFactory(object, Type) Get an object factory Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static DiHelper.DiAsync_Delegate? GetKeyedAsyncFactory(object key, Type type) Parameters Type Name Description object key Key Type type Type Returns Type Description DiHelper.DiAsync_Delegate Factory | Edit this page View Source GetKeyedDiObject(in object, in Type, out object?, in IServiceProvider?, in bool) Get a DI object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool GetKeyedDiObject(in object key, in Type type, out object? obj, in IServiceProvider? serviceProvider = null, in bool tryAll = true) Parameters Type Name Description object key Key Type type Type object obj Result IServiceProvider serviceProvider Service provider bool tryAll Try all sources (also unkeyed)? Returns Type Description bool Use the result? | Edit this page View Source GetKeyedDiObjectAsync(object, Type, IServiceProvider?, bool, CancellationToken) Get a DI object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<ITryAsyncResult> GetKeyedDiObjectAsync(object key, Type type, IServiceProvider? serviceProvider = null, bool tryAll = true, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key Type type Type IServiceProvider serviceProvider Service provider bool tryAll Try all sources (also unkeyed)? CancellationToken cancellationToken Cancellation token Returns Type Description Task<ITryAsyncResult> Result | Edit this page View Source GetKeyedDiObjectAsync<T>(object, IServiceProvider?, bool, CancellationToken) Get a DI object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<TryAsyncResult<T>> GetKeyedDiObjectAsync<T>(object key, IServiceProvider? serviceProvider = null, bool tryAll = true, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key IServiceProvider serviceProvider Service provider bool tryAll Try all sources (also unkeyed)? CancellationToken cancellationToken Cancellation token Returns Type Description Task<TryAsyncResult<T>> Result Type Parameters Name Description T Type | Edit this page View Source GetKeyedDiObject<T>(in object, out T?, in IServiceProvider?, in bool) Get a DI object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool GetKeyedDiObject<T>(in object key, out T? obj, in IServiceProvider? serviceProvider = null, in bool tryAll = true) Parameters Type Name Description object key Key T obj Result IServiceProvider serviceProvider Service provider bool tryAll Try all sources (also unkeyed)? Returns Type Description bool Use the result? Type Parameters Name Description T Type | Edit this page View Source GetKeyedFactory(object, Type) Get an object factory Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static DiHelper.Di_Delegate? GetKeyedFactory(object key, Type type) Parameters Type Name Description object key Key Type type Type Returns Type Description DiHelper.Di_Delegate Factory | Edit this page View Source GetKeyedObject(in object, in Type) Get a keyed object Declaration public static object? GetKeyedObject(in object key, in Type type) Parameters Type Name Description object key Key Type type Type Returns Type Description object Object | Edit this page View Source GetKeyedService(Type, object?) Gets the service object of the specified type. Declaration public virtual object? GetKeyedService(Type serviceType, object? serviceKey) Parameters Type Name Description Type serviceType An object that specifies the type of service object to get. object serviceKey An object that specifies the key of service object to get. Returns Type Description object A service object of type serviceType. -or- null if there is no service object of type serviceType. | Edit this page View Source GetKeyedServiceAsync(Type, object?, CancellationToken) Gets the service object of the specified type. Declaration public virtual Task<object?> GetKeyedServiceAsync(Type serviceType, object? serviceKey, CancellationToken cancellationToken = default) Parameters Type Name Description Type serviceType An object that specifies the type of service object to get. object serviceKey An object that specifies the key of service object to get. CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> A service object of type serviceType. -or- null if there is no service object of type serviceType. | Edit this page View Source GetObject(in Type) Get an object Declaration public static object? GetObject(in Type type) Parameters Type Name Description Type type Type Returns Type Description object Object | Edit this page View Source GetRequiredKeyedService(Type, object?) Gets service of type serviceType from the IServiceProvider implementing this interface. Declaration public virtual object GetRequiredKeyedService(Type serviceType, object? serviceKey) Parameters Type Name Description Type serviceType An object that specifies the type of service object to get. object serviceKey The ServiceKey of the service. Returns Type Description object A service object of type serviceType. Throws an exception if the IServiceProvider cannot create the object. | Edit this page View Source GetRequiredKeyedServiceAsync(Type, object?, CancellationToken) Gets service of type serviceType from the IServiceProvider implementing this interface. Declaration public virtual Task<object> GetRequiredKeyedServiceAsync(Type serviceType, object? serviceKey, CancellationToken cancellationToken = default) Parameters Type Name Description Type serviceType An object that specifies the type of service object to get. object serviceKey The ServiceKey of the service. CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> A service object of type serviceType. Throws an exception if the IServiceProvider cannot create the object. | Edit this page View Source GetService(Type) Gets the service object of the specified type. Declaration public virtual object? GetService(Type serviceType) Parameters Type Name Description Type serviceType An object that specifies the type of service object to get. Returns Type Description object A service object of type serviceType. -or- null if there is no service object of type serviceType. | Edit this page View Source GetServiceAsync(Type, CancellationToken) Get a service Declaration public virtual Task<object?> GetServiceAsync(Type serviceType, CancellationToken cancellationToken = default) Parameters Type Name Description Type serviceType Service type CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Service | Edit this page View Source IsKeyedService(Type, object?) Determines if the specified service type with the specified service key is available from the IServiceProvider. Declaration public virtual bool IsKeyedService(Type serviceType, object? serviceKey) Parameters Type Name Description Type serviceType An object that specifies the type of service object to test. object serviceKey The ServiceKey of the service. Returns Type Description bool true if the specified service is a available, false if it is not. | Edit this page View Source IsService(Type) Determines if the specified service type is available from the IServiceProvider. Declaration public virtual bool IsService(Type serviceType) Parameters Type Name Description Type serviceType An object that specifies the type of service object to test. Returns Type Description bool true if the specified service is a available, false if it is not. | Edit this page View Source IsTypeCached(Type) Determine if an object of the given type will be cached Declaration public static bool IsTypeCached(Type type) Parameters Type Name Description Type type Type Returns Type Description bool Will be cached? | Edit this page View Source IsTypeCachedAsync(Type, CancellationToken) Determine if an object of the given type will be cached Declaration public static Task<bool> IsTypeCachedAsync(Type type, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Type CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> Will be cached? | Edit this page View Source RemoveDiObject(Type) Remove a DI object from the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static object? RemoveDiObject(Type type) Parameters Type Name Description Type type Type Returns Type Description object Object (needs to be disposed, if applicable!) | Edit this page View Source RemoveDiObjectAsync(Type, CancellationToken) Remove a DI object from the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<object?> RemoveDiObjectAsync(Type type, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Type CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Object (needs to be disposed, if applicable!) | Edit this page View Source RemoveDiObjectAsync<T>(CancellationToken) Remove a DI object from the cache Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<T?> RemoveDiObjectAsync<T>(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Object (needs to be disposed, if applicable!) Type Parameters Name Description T Object type | Edit this page View Source RemoveDiObject<T>() Remove a DI object from the cache Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static T? RemoveDiObject<T>() Returns Type Description T Object (needs to be disposed, if applicable!) Type Parameters Name Description T DI type | Edit this page View Source RemoveDiObjects(Type) Remove all DI objects from the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static object[] RemoveDiObjects(Type type) Parameters Type Name Description Type type Type Returns Type Description object[] Objects (needs to be disposed, if applicable!) | Edit this page View Source RemoveDiObjectsAsync(Type, CancellationToken) Remove all DI objects from the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<object[]> RemoveDiObjectsAsync(Type type, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Type CancellationToken cancellationToken Cancellation token Returns Type Description Task<object[]> Object (needs to be disposed, if applicable!) | Edit this page View Source RemoveDiObjectsAsync<T>(CancellationToken) Remove all DI objects from the cache Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<T[]> RemoveDiObjectsAsync<T>(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<T[]> Objects (needs to be disposed, if applicable!) Type Parameters Name Description T Object type | Edit this page View Source RemoveDiObjects<T>() Remove a DI object from the cache Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static T[] RemoveDiObjects<T>() Returns Type Description T[] Object (needs to be disposed, if applicable!) Type Parameters Name Description T DI type | Edit this page View Source RemoveKeyedDiObject(object, Type) Remove a DI object from the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static object? RemoveKeyedDiObject(object key, Type type) Parameters Type Name Description object key Key Type type Type Returns Type Description object Object (needs to be disposed, if applicable!) | Edit this page View Source RemoveKeyedDiObjectAsync(object, Type, CancellationToken) Remove a DI object from the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<object?> RemoveKeyedDiObjectAsync(object key, Type type, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key Type type Type CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Object (needs to be disposed, if applicable!) | Edit this page View Source RemoveKeyedDiObjectAsync<T>(object, CancellationToken) Remove a DI object from the cache Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<T?> RemoveKeyedDiObjectAsync<T>(object key, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Object (needs to be disposed, if applicable!) Type Parameters Name Description T DI type | Edit this page View Source RemoveKeyedDiObject<T>(object) Remove a keyed DI object from the cache Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static T? RemoveKeyedDiObject<T>(object key) Parameters Type Name Description object key Key Returns Type Description T Object (needs to be disposed, if applicable!) Type Parameters Name Description T DI type | Edit this page View Source RemoveKeyedDiObjects(object, Type) Remove all DI objects from the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static object[] RemoveKeyedDiObjects(object key, Type type) Parameters Type Name Description object key Key Type type Type Returns Type Description object[] Objects (needs to be disposed, if applicable!) | Edit this page View Source RemoveKeyedDiObjectsAsync(object, Type, CancellationToken) Remove all DI objects from the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<object[]> RemoveKeyedDiObjectsAsync(object key, Type type, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key Type type Type CancellationToken cancellationToken Cancellation token Returns Type Description Task<object[]> Object (needs to be disposed, if applicable!) | Edit this page View Source RemoveKeyedDiObjectsAsync<T>(object, CancellationToken) Remove all DI objects from the cache Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<T[]> RemoveKeyedDiObjectsAsync<T>(object key, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key CancellationToken cancellationToken Cancellation token Returns Type Description Task<T[]> Objects (needs to be disposed, if applicable!) Type Parameters Name Description T DI type | Edit this page View Source RemoveKeyedDiObjects<T>(object) Remove a keyed DI object from the cache Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static T[] RemoveKeyedDiObjects<T>(object key) Parameters Type Name Description object key Key Returns Type Description T[] Object (needs to be disposed, if applicable!) Type Parameters Name Description T DI type | Edit this page View Source RemoveNotCachedType(Type) Remove a not cached type Declaration public static void RemoveNotCachedType(Type type) Parameters Type Name Description Type type Type | Edit this page View Source RemoveNotCachedTypeAsync(Type, CancellationToken) Remove a not cached type Declaration public static Task RemoveNotCachedTypeAsync(Type type, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Type CancellationToken cancellationToken Cancellation token Returns Type Description Task Implements IAsyncKeyedServiceProvider IAsyncServiceProvider IKeyedServiceProvider IServiceProvider IServiceProviderIsKeyedService IServiceProviderIsService Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DiHelperExtensions.html": {
    "href": "api/wan24.Core.DiHelperExtensions.html",
    "title": "Class DiHelperExtensions | wan24-Core",
    "keywords": "Class DiHelperExtensions Dependency injection helper extensions Inheritance object DiHelperExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class DiHelperExtensions Methods | Edit this page View Source GetDiObjects(IEnumerable<ParameterInfo>, object?[]?, IServiceProvider?, NullabilityInfoContext?, bool, bool) Get DI objects Declaration public static object?[] GetDiObjects(this IEnumerable<ParameterInfo> parameters, object?[]? values = null, IServiceProvider? serviceProvider = null, NullabilityInfoContext? nic = null, bool throwOnMissing = true, bool valuesAreOrdered = false) Parameters Type Name Description IEnumerable<ParameterInfo> parameters Parameters object[] values Given values IServiceProvider serviceProvider Service provider NullabilityInfoContext nic Nullability info context bool throwOnMissing Throw an exception on missing value? (will throw on missing keyed DI parameter anyway) bool valuesAreOrdered If values are ordered in the order of the given parameters Returns Type Description object[] Parameters (if the length doesn't match the number of parameters, DI failed) | Edit this page View Source GetDiObjects(IEnumerable<Type>, object?[]?, IServiceProvider?, bool, bool) Get DI objects Declaration public static object?[] GetDiObjects(this IEnumerable<Type> types, object?[]? values = null, IServiceProvider? serviceProvider = null, bool throwOnMissing = true, bool valuesAreOrdered = false) Parameters Type Name Description IEnumerable<Type> types Types object[] values Given values IServiceProvider serviceProvider Service provider bool throwOnMissing Throw an exception on missing value? bool valuesAreOrdered If values are ordered in the order of the given parameters Returns Type Description object[] DI objects (if the length doesn't match the number of types, DI failed) | Edit this page View Source GetDiObjectsAsync(IEnumerable<ParameterInfo>, object?[]?, IServiceProvider?, NullabilityInfoContext?, bool, bool, CancellationToken) Get DI objects Declaration public static Task<object?[]> GetDiObjectsAsync(this IEnumerable<ParameterInfo> parameters, object?[]? values = null, IServiceProvider? serviceProvider = null, NullabilityInfoContext? nic = null, bool throwOnMissing = true, bool valuesAreOrdered = false, CancellationToken cancellationToken = default) Parameters Type Name Description IEnumerable<ParameterInfo> parameters Parameters object[] values Given values IServiceProvider serviceProvider Service provider NullabilityInfoContext nic Nullability info context bool throwOnMissing Throw an exception on missing value? (will throw on missing keyed DI parameter anyway) bool valuesAreOrdered If values are ordered in the order of the given parameters CancellationToken cancellationToken Cancellation token Returns Type Description Task<object[]> Parameters (if the length doesn't match the number of parameters, DI failed) | Edit this page View Source GetDiObjectsAsync(IEnumerable<Type>, object?[]?, IServiceProvider?, bool, bool, CancellationToken) Get DI objects Declaration public static Task<object?[]> GetDiObjectsAsync(this IEnumerable<Type> types, object?[]? values = null, IServiceProvider? serviceProvider = null, bool throwOnMissing = true, bool valuesAreOrdered = false, CancellationToken cancellationToken = default) Parameters Type Name Description IEnumerable<Type> types Types object[] values Given values IServiceProvider serviceProvider Service provider bool throwOnMissing Throw an exception on missing value? bool valuesAreOrdered If values are ordered in the order of the given parameters CancellationToken cancellationToken Cancellation token Returns Type Description Task<object[]> DI objects (if the length doesn't match the number of types, DI failed)"
  },
  "api/wan24.Core.DictionaryExtensions.html": {
    "href": "api/wan24.Core.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | wan24-Core",
    "keywords": "Class DictionaryExtensions Dictionary extensions Inheritance object DictionaryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class DictionaryExtensions Methods | Edit this page View Source AsQueryString(Dictionary<string, string>) Get as query string (http GET request parameters) Declaration public static string AsQueryString(this Dictionary<string, string> dict) Parameters Type Name Description Dictionary<string, string> dict Dictionary Returns Type Description string Query string | Edit this page View Source Diff<tKey, tValue>(Dictionary<tKey, tValue>, in Dictionary<tKey, tValue>, in bool, in bool) Find differences between two dictionaries (different keys and values) Declaration public static Dictionary<tKey, tValue> Diff<tKey, tValue>(this Dictionary<tKey, tValue> original, in Dictionary<tKey, tValue> other, in bool existingOriginalKeysOnly = false, in bool existingOtherKeysOnly = false) where tKey : notnull Parameters Type Name Description Dictionary<tKey, tValue> original Original Dictionary<tKey, tValue> other Other (values which mismatch the source count) bool existingOriginalKeysOnly Existing keys (in the original) only? bool existingOtherKeysOnly Existing keys (in the other) only? Returns Type Description Dictionary<tKey, tValue> New dictionary which contains the different key/values Type Parameters Name Description tKey Key type tValue Value type | Edit this page View Source Merge<T>(Dictionary<string, T>, in Dictionary<string, T>, string?, in bool, in bool) Merge two dictionaries (will overwrite existing items) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Dictionary<string, T> Merge<T>(this Dictionary<string, T> dict, in Dictionary<string, T> other, string? prefix = null, in bool existingOnly = false, in bool overwrite = true) Parameters Type Name Description Dictionary<string, T> dict Input Dictionary<string, T> other Source string prefix Key prefix bool existingOnly Existing keys only? bool overwrite Overwrite existing keys? Returns Type Description Dictionary<string, T> Input Type Parameters Name Description T Value type | Edit this page View Source Merge<T>(Dictionary<string, T>, in IEnumerable<T>, string?, in bool, in bool) Merge an enumerable (with the item index as key) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Dictionary<string, T> Merge<T>(this Dictionary<string, T> dict, in IEnumerable<T> enumerable, string? prefix = null, in bool existingOnly = false, in bool overwrite = true) Parameters Type Name Description Dictionary<string, T> dict Input IEnumerable<T> enumerable Enumerable string prefix Key prefix bool existingOnly Existing keys only? bool overwrite Overwrite existing keys? Returns Type Description Dictionary<string, T> Input Type Parameters Name Description T Value type"
  },
  "api/wan24.Core.DisplayTextAttribute.html": {
    "href": "api/wan24.Core.DisplayTextAttribute.html",
    "title": "Class DisplayTextAttribute | wan24-Core",
    "keywords": "Class DisplayTextAttribute Display text Inheritance object Attribute DisplayTextAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax [AttributeUsage(AttributeTargets.All)] public sealed class DisplayTextAttribute : Attribute Remarks Constructor Constructors | Edit this page View Source DisplayTextAttribute(string) Display text Declaration public DisplayTextAttribute(string displayText) Parameters Type Name Description string displayText Display text Remarks Constructor Properties | Edit this page View Source DisplayText Display text Declaration public string DisplayText { get; } Property Value Type Description string Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DisposableAdapter.html": {
    "href": "api/wan24.Core.DisposableAdapter.html",
    "title": "Class DisposableAdapter | wan24-Core",
    "keywords": "Class DisposableAdapter Disposable adapter Inheritance object DisposableBase DisposableAdapter Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class DisposableAdapter : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Remarks Constructor Constructors | Edit this page View Source DisposableAdapter(in Dispose_Delegate, in DisposeAsync_Delegate?) Disposable adapter Declaration public DisposableAdapter(in DisposableWrapper<DisposableAdapter>.Dispose_Delegate disposer, in DisposableWrapper<DisposableAdapter>.DisposeAsync_Delegate? asyncDisposer = null) Parameters Type Name Description DisposableWrapper<DisposableAdapter>.Dispose_Delegate disposer Disposer DisposableWrapper<DisposableAdapter>.DisposeAsync_Delegate asyncDisposer Asynchronous disposer Remarks Constructor Properties | Edit this page View Source Tag Any tagged object Declaration public object? Tag { get; set; } Property Value Type Description object Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source DisposeFromDestructor() Dispose at destruction time Declaration public void DisposeFromDestructor() | Edit this page View Source EnsureNotDisposed(in bool, in bool) Ensure an undisposed state Declaration public bool EnsureNotDisposed(in bool allowDisposing = false, in bool throwException = true) Parameters Type Name Description bool allowDisposing Allow disposing? bool throwException Throw an axception when disposing/disposed? Returns Type Description bool if disposing/disposed Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DisposableBase-1.html": {
    "href": "api/wan24.Core.DisposableBase-1.html",
    "title": "Class DisposableBase<T> | wan24-Core",
    "keywords": "Class DisposableBase<T> Base class for a disposable type Inheritance object DisposableBase DisposableBase<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.Dispose(bool) DisposableBase.DisposeCore() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class DisposableBase<T> : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable where T : DisposableBase<T> Type Parameters Name Description T Final type Constructors | Edit this page View Source DisposableBase() Constructor Declaration protected DisposableBase() Fields | Edit this page View Source AsyncDisposableProperties Disposable properties Declaration protected static readonly Func<T, IAsyncDisposable?>[] AsyncDisposableProperties Field Value Type Description Func<T, IAsyncDisposable>[] | Edit this page View Source DisposableFields Disposable fields Declaration protected static readonly FieldInfo[] DisposableFields Field Value Type Description FieldInfo[] | Edit this page View Source HybridDisposableProperties Disposable properties Declaration protected static readonly Func<T, object?>[] HybridDisposableProperties Field Value Type Description Func<T, object>[] | Edit this page View Source OtherDisposableProperties Other disposable properties Declaration protected static readonly Func<T, object?>[] OtherDisposableProperties Field Value Type Description Func<T, object>[] | Edit this page View Source SyncDisposableProperties Disposable properties Declaration protected static readonly Func<T, IDisposable?>[] SyncDisposableProperties Field Value Type Description Func<T, IDisposable>[] Methods | Edit this page View Source DisposeAttributes() Dispose fields/properties with the DisposeAttribute Declaration protected override void DisposeAttributes() Overrides DisposableBase.DisposeAttributes() | Edit this page View Source DisposeAttributesAsync() Dispose fields/properties with the DisposeAttribute Declaration protected override Task DisposeAttributesAsync() Returns Type Description Task Overrides DisposableBase.DisposeAttributesAsync() Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DisposableBase.html": {
    "href": "api/wan24.Core.DisposableBase.html",
    "title": "Class DisposableBase | wan24-Core",
    "keywords": "Class DisposableBase Base class for a disposable type Inheritance object DisposableBase AsyncDisposableLazyValue<T> AsyncObjectEnumerable<T> AsyncObjectEnumerator<T> BlockingObjectPool<T> CancellationOnDispose Cancellations ChangeCallback CounterEvent Delay DisposableAdapter DisposableBase<T> DisposableLazyValue<T> DisposableLoggerBase DisposableObjectPool<T> DisposableWrapper<T> DisposingAsyncEnumerator<T> EmailAttachment EmailBase EmailTemplateBase EventThrottle GenericOptionalDisposer<T> GlobalLock GlobalLockAsync HostedServiceBase LoggerProvider MultiProcessThrottle MultiThrottledStream ObjectLock ObjectLockManager<T> OptionalDisposeAction OptionalDisposer ParallelTransaction ProcessThrottle ProcessingInfo ProcessingProgress RentedArray<T> RentedObject<T> ResetEvent SecureArrayBase<T> SemaphoreSync StoredObject<tKey, tObj> StreamProxy ThreadSafeValue<T> Timeout TimeoutValue<T> Transaction Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class DisposableBase : IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source DisposableBase() Constructor Declaration protected DisposableBase() | Edit this page View Source DisposableBase(in bool, in bool) Constructor Declaration protected DisposableBase(in bool asyncDisposing, in bool allowFinalizer = false) Parameters Type Name Description bool asyncDisposing Asynchronous disposing? bool allowFinalizer Don't count running the finalizer as an error? Fields | Edit this page View Source AllowFinalizer Don't count running the finalizer as an error? Declaration protected readonly bool AllowFinalizer Field Value Type Description bool | Edit this page View Source AsyncDisposing Asynchronous disposing? Declaration protected readonly bool AsyncDisposing Field Value Type Description bool | Edit this page View Source DisposeObjects Objects to dispose when disposing Declaration protected readonly HashSet<object> DisposeObjects Field Value Type Description HashSet<object> | Edit this page View Source DisposeSyncObject An object for thread synchronization during disposing Declaration protected readonly SemaphoreSlim DisposeSyncObject Field Value Type Description SemaphoreSlim | Edit this page View Source StackInfo Stack information Declaration protected readonly IStackInfo? StackInfo Field Value Type Description IStackInfo Properties | Edit this page View Source CreateStackInfo Create a StackInfo for every instance? Declaration public static bool CreateStackInfo { get; set; } Property Value Type Description bool | Edit this page View Source DestructorDisposing Is disposing during object destruction? Declaration protected bool DestructorDisposing { get; } Property Value Type Description bool | Edit this page View Source IsDisposed Is disposed? (final object disposing state) Declaration public bool IsDisposed { get; } Property Value Type Description bool | Edit this page View Source IsDisposing Is disposing? (is true when disposed already, too!) Declaration public bool IsDisposing { get; } Property Value Type Description bool Methods | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source Dispose(bool) Dispose Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) | Edit this page View Source DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask A task that represents the asynchronous dispose operation. | Edit this page View Source DisposeAttributes() Dispose fields/properties with the DisposeAttribute Declaration protected virtual void DisposeAttributes() | Edit this page View Source DisposeAttributesAsync() Dispose fields/properties with the DisposeAttribute Declaration protected virtual Task DisposeAttributesAsync() Returns Type Description Task | Edit this page View Source DisposeCore() Dispose Declaration protected virtual Task DisposeCore() Returns Type Description Task | Edit this page View Source EnsureUndisposed(in bool, in bool) Ensure an undisposed object state Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected bool EnsureUndisposed(in bool allowDisposing = false, in bool throwException = true) Parameters Type Name Description bool allowDisposing Allow disposing state? bool throwException Throw an exception if disposing/disposed? Returns Type Description bool Is not disposing? | Edit this page View Source ~DisposableBase() Destructor Declaration protected ~DisposableBase() | Edit this page View Source IfUndisposed(in Action, in bool) Execute an action if undisposed Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected void IfUndisposed(in Action action, in bool allowDisposing = false) Parameters Type Name Description Action action Action bool allowDisposing Allow disposing state? | Edit this page View Source IfUndisposedNullable<T>(in Func<T?>, in bool) Execute an action if undisposed Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected T? IfUndisposedNullable<T>(in Func<T?> action, in bool allowDisposing = false) Parameters Type Name Description Func<T> action Action bool allowDisposing Allow disposing state? Returns Type Description T Return value Type Parameters Name Description T Return type | Edit this page View Source IfUndisposed<T>(in Func<T>, in bool) Execute an action if undisposed Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected T IfUndisposed<T>(in Func<T> action, in bool allowDisposing = false) Parameters Type Name Description Func<T> action Action bool allowDisposing Allow disposing state? Returns Type Description T Return value Type Parameters Name Description T Return type | Edit this page View Source IfUndisposed<T>(in T, in bool) Return a value if not disposing/disposed Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected T IfUndisposed<T>(in T value, in bool allowDisposing = false) Parameters Type Name Description T value Value bool allowDisposing Allow disposing state? Returns Type Description T Value Type Parameters Name Description T Value type | Edit this page View Source LockDisposing(in TimeSpan, in CancellationToken) Lock disposing Declaration protected SemaphoreSyncContext LockDisposing(in TimeSpan timeout = default, in CancellationToken cancellationToken = default) Parameters Type Name Description TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description SemaphoreSyncContext Synchronization context (don't forget to dispose!) | Edit this page View Source LockDisposingAsync(TimeSpan, CancellationToken) Lock disposing Declaration protected Task<SemaphoreSyncContext> LockDisposingAsync(TimeSpan timeout = default, CancellationToken cancellationToken = default) Parameters Type Name Description TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description Task<SemaphoreSyncContext> Synchronization context (don't forget to dispose!) | Edit this page View Source RegisterForDispose<T>(in T) Register an object for disposing when this object is being disposed Declaration public virtual void RegisterForDispose<T>(in T disposable) Parameters Type Name Description T disposable Disposable (will be disposed) Type Parameters Name Description T Object type | Edit this page View Source TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) Lock disposing Declaration protected bool TryLockDisposing(out SemaphoreSyncContext result, in TimeSpan timeout = default, in CancellationToken cancellationToken = default) Parameters Type Name Description SemaphoreSyncContext result Result (don't forget to dispose!) TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description bool Synchronization context | Edit this page View Source TryLockDisposingAsync(TimeSpan, CancellationToken) Lock disposing Declaration protected Task<TryAsyncResult<SemaphoreSyncContext>> TryLockDisposingAsync(TimeSpan timeout = default, CancellationToken cancellationToken = default) Parameters Type Name Description TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description Task<TryAsyncResult<SemaphoreSyncContext>> Synchronization context (don't forget to dispose!) Events | Edit this page View Source OnDisposed Raised when disposed Declaration public event IDisposableObject.Dispose_Delegate? OnDisposed Event Type Type Description IDisposableObject.Dispose_Delegate | Edit this page View Source OnDisposing Raised when disposing Declaration public event IDisposableObject.Dispose_Delegate? OnDisposing Event Type Type Description IDisposableObject.Dispose_Delegate Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DisposableChangeToken-1.html": {
    "href": "api/wan24.Core.DisposableChangeToken-1.html",
    "title": "Class DisposableChangeToken<T> | wan24-Core",
    "keywords": "Class DisposableChangeToken<T> Disposable change token Inheritance object ChangeToken ChangeToken<T> DisposableChangeToken<T> ChangeTokenCollection<T> ChangeTokenDictionary<tKey, tValue> ConcurrentChangeTokenDictionary<tKey, tValue> Implements IChangeToken INotifyPropertyChanged IObservable<T> IDisposable Inherited Members ChangeToken<T>.Observers ChangeToken<T>.Subscribe(IObserver<T>) ChangeToken.Callbacks ChangeToken._HasChanged ChangeToken.SyncObject ChangeToken.ChangeIdentifier ChangeToken.HasChanged ChangeToken.ActiveChangeCallbacks ChangeToken.RegisterChangeCallback(Action<object>, object) ChangeToken.InvokeCallbacks(in object) ChangeToken.SetNewPropertyValue<T>(ref T, in T, in string) ChangeToken.PropertyChanged ChangeToken.RaisePropertyChanged(in string) ChangeToken.RaisePropertyChanged(object, PropertyChangedEventArgs) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class DisposableChangeToken<T> : ChangeToken<T>, IChangeToken, INotifyPropertyChanged, IObservable<T>, IDisposable where T : DisposableChangeToken<T> Type Parameters Name Description T Final type Constructors | Edit this page View Source DisposableChangeToken() Constructor Declaration protected DisposableChangeToken() | Edit this page View Source DisposableChangeToken(in Func<bool>) Constructor Declaration protected DisposableChangeToken(in Func<bool> changeIdentifier) Parameters Type Name Description Func<bool> changeIdentifier Change identifier Fields | Edit this page View Source InvokeCallbacksOnDispose Invoke callbacks when disposing? Declaration protected bool InvokeCallbacksOnDispose Field Value Type Description bool Methods | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public virtual void Dispose() | Edit this page View Source ~DisposableChangeToken() Destructor Declaration protected ~DisposableChangeToken() Implements IChangeToken INotifyPropertyChanged IObservable<T> IDisposable Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DisposableChangeToken.html": {
    "href": "api/wan24.Core.DisposableChangeToken.html",
    "title": "Class DisposableChangeToken | wan24-Core",
    "keywords": "Class DisposableChangeToken Disposable change token Inheritance object ChangeToken DisposableChangeToken Implements IChangeToken INotifyPropertyChanged IDisposable Inherited Members ChangeToken.Callbacks ChangeToken._HasChanged ChangeToken.SyncObject ChangeToken.ChangeIdentifier ChangeToken.HasChanged ChangeToken.ActiveChangeCallbacks ChangeToken.RegisterChangeCallback(Action<object>, object) ChangeToken.InvokeCallbacks(in object) ChangeToken.SetNewPropertyValue<T>(ref T, in T, in string) ChangeToken.PropertyChanged ChangeToken.RaisePropertyChanged(in string) ChangeToken.RaisePropertyChanged(object, PropertyChangedEventArgs) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class DisposableChangeToken : ChangeToken, IChangeToken, INotifyPropertyChanged, IDisposable Constructors | Edit this page View Source DisposableChangeToken() Constructor Declaration public DisposableChangeToken() | Edit this page View Source DisposableChangeToken(in Func<bool>) Constructor Declaration public DisposableChangeToken(in Func<bool> changeIdentifier) Parameters Type Name Description Func<bool> changeIdentifier Change identifier Fields | Edit this page View Source InvokeCallbacksOnDispose Invoke callbacks when disposing? Declaration protected bool InvokeCallbacksOnDispose Field Value Type Description bool Methods | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public virtual void Dispose() | Edit this page View Source ~DisposableChangeToken() Destructor Declaration protected ~DisposableChangeToken() Implements IChangeToken INotifyPropertyChanged IDisposable Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DisposableExtensions.html": {
    "href": "api/wan24.Core.DisposableExtensions.html",
    "title": "Class DisposableExtensions | wan24-Core",
    "keywords": "Class DisposableExtensions Disposable extensions Inheritance object DisposableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class DisposableExtensions Methods | Edit this page View Source DisposeAll(IEnumerable<IDisposable>) Dispose all Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static IEnumerable<IDisposable> DisposeAll(this IEnumerable<IDisposable> disposables) Parameters Type Name Description IEnumerable<IDisposable> disposables Disposables Returns Type Description IEnumerable<IDisposable> Disposed disposables"
  },
  "api/wan24.Core.DisposableLazyValue-1.html": {
    "href": "api/wan24.Core.DisposableLazyValue-1.html",
    "title": "Class DisposableLazyValue<T> | wan24-Core",
    "keywords": "Class DisposableLazyValue<T> Disposable lazy value Inheritance object DisposableBase DisposableLazyValue<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class DisposableLazyValue<T> : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable where T : IDisposable Type Parameters Name Description T Value type Remarks Constructor Constructors | Edit this page View Source DisposableLazyValue(in Func<T>) Disposable lazy value Declaration public DisposableLazyValue(in Func<T> factory) Parameters Type Name Description Func<T> factory Factory Remarks Constructor Properties | Edit this page View Source Value Value Declaration public T Value { get; } Property Value Type Description T Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() Operators | Edit this page View Source implicit operator bool(in DisposableLazyValue<T>) Cast as has-value-flag Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in DisposableLazyValue<T> lazyValue) Parameters Type Name Description DisposableLazyValue<T> lazyValue Lazy value Returns Type Description bool | Edit this page View Source implicit operator T(in DisposableLazyValue<T>) Cast as value Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T(in DisposableLazyValue<T> lazyValue) Parameters Type Name Description DisposableLazyValue<T> lazyValue Lazy value Returns Type Description T Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DisposableLoggerBase.html": {
    "href": "api/wan24.Core.DisposableLoggerBase.html",
    "title": "Class DisposableLoggerBase | wan24-Core",
    "keywords": "Class DisposableLoggerBase Base class for a disposable logger Inheritance object DisposableBase DisposableLoggerBase EmailLogger FileLogger Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable ILogger Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.Dispose(bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class DisposableLoggerBase : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, ILogger Remarks Constructor Constructors | Edit this page View Source DisposableLoggerBase(in LogLevel?, in ILogger?, in bool) Base class for a disposable logger Declaration protected DisposableLoggerBase(in LogLevel? level = null, in ILogger? next = null, in bool asyncDisposing = true) Parameters Type Name Description LogLevel? level Level ILogger next Next logger which should receive the message bool asyncDisposing Asynchronous disposing? Remarks Constructor Fields | Edit this page View Source RX_NL Regular expression to match a new line Declaration protected static readonly Regex RX_NL Field Value Type Description Regex Properties | Edit this page View Source Level Log level Declaration public LogLevel Level { get; set; } Property Value Type Description LogLevel | Edit this page View Source Next Next logger which should receive the message Declaration public ILogger? Next { get; set; } Property Value Type Description ILogger Methods | Edit this page View Source BeginScope<TState>(TState) Begins a logical operation scope. Declaration public IDisposable? BeginScope<TState>(TState state) where TState : notnull Parameters Type Name Description TState state The identifier for the scope. Returns Type Description IDisposable An IDisposable that ends the logical operation scope on dispose. Type Parameters Name Description TState The type of the state to begin scope for. | Edit this page View Source GetMessage<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>, bool) Get the message to log Declaration protected virtual string GetMessage<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter, bool nl = false) Parameters Type Name Description LogLevel logLevel Level EventId eventId Event ID TState state State Exception exception Exception Func<TState, Exception, string> formatter Formatter bool nl Add a new line at the end? Returns Type Description string Message Type Parameters Name Description TState State type | Edit this page View Source IsEnabled(LogLevel) Checks if the given logLevel is enabled. Declaration public bool IsEnabled(LogLevel logLevel) Parameters Type Name Description LogLevel logLevel Level to be checked. Returns Type Description bool true if enabled. | Edit this page View Source LogInt<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>) Writes a log entry Declaration protected abstract void LogInt<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel Level EventId eventId Event ID TState state State Exception exception Exception Func<TState, Exception, string> formatter Formatter Type Parameters Name Description TState State type | Edit this page View Source Log<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>) Writes a log entry. Declaration public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. EventId eventId Id of the event. TState state The entry to be written. Can be also an object. Exception exception The exception related to this entry. Func<TState, Exception, string> formatter Function to create a string message of the state and exception. Type Parameters Name Description TState The type of the object to be written. Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable ILogger Extension Methods LoggerExtensions.GetFinalLogger(ILogger) LoggerExtensions.GetLogLevel(ILogger) AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DisposableObjectPool-1.html": {
    "href": "api/wan24.Core.DisposableObjectPool-1.html",
    "title": "Class DisposableObjectPool<T> | wan24-Core",
    "keywords": "Class DisposableObjectPool<T> Disposable object pool (disposes trashed items) Inheritance object DisposableBase DisposableObjectPool<T> StreamPool<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IObjectPool<T> IObjectPool IPool Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class DisposableObjectPool<T> : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IObjectPool<T>, IObjectPool, IPool where T : IDisposable Type Parameters Name Description T Disposable item type Constructors | Edit this page View Source DisposableObjectPool(in int, in Func<T>) Constructor Declaration public DisposableObjectPool(in int capacity, in Func<T> factory) Parameters Type Name Description int capacity Capacity (may overflow a bit) Func<T> factory Item factory Fields | Edit this page View Source Factory Factory Declaration protected readonly Func<T> Factory Field Value Type Description Func<T> | Edit this page View Source Pool Pool Declaration protected readonly ConcurrentBag<T> Pool Field Value Type Description ConcurrentBag<T> Properties | Edit this page View Source Available Number of items in the pool Declaration public int Available { get; } Property Value Type Description int | Edit this page View Source Capacity Capacity Declaration public int Capacity { get; } Property Value Type Description int | Edit this page View Source ForceResetOnReturn Force resetting returned items (if they're going back to the pool)? (trashed items will be reset anyway) Declaration public bool ForceResetOnReturn { get; set; } Property Value Type Description bool | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source ItemType Item type Declaration public Type ItemType { get; } Property Value Type Description Type | Edit this page View Source Name Display name Declaration public virtual string? Name { get; set; } Property Value Type Description string | Edit this page View Source ResetOnRent Reset rented objects (if they don't come from the factory) Declaration public bool ResetOnRent { get; set; } Property Value Type Description bool Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source Rent() Rent an item Declaration public virtual T Rent() Returns Type Description T Item (IObjectPoolItem will be reset before returning) | Edit this page View Source Return(in T, in bool) Return an item Declaration public virtual void Return(in T item, in bool reset = false) Parameters Type Name Description T item Item bool reset Reset the IObjectPoolItem object? Operators | Edit this page View Source implicit operator T(in DisposableObjectPool<T>) Cast as rented object Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T(in DisposableObjectPool<T> pool) Parameters Type Name Description DisposableObjectPool<T> pool Pool Returns Type Description T Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IObjectPool<T> IObjectPool IPool Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DisposableRecordBase.html": {
    "href": "api/wan24.Core.DisposableRecordBase.html",
    "title": "Class DisposableRecordBase | wan24-Core",
    "keywords": "Class DisposableRecordBase Base class for a disposable record type Inheritance object DisposableRecordBase Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IEquatable<DisposableRecordBase> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract record DisposableRecordBase : IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IEquatable<DisposableRecordBase> Constructors | Edit this page View Source DisposableRecordBase() Constructor Declaration protected DisposableRecordBase() | Edit this page View Source DisposableRecordBase(in bool, in bool) Constructor Declaration protected DisposableRecordBase(in bool asyncDisposing, in bool allowFinalizer = false) Parameters Type Name Description bool asyncDisposing Asynchronous disposing? bool allowFinalizer Don't count running the finalizer as an error? Fields | Edit this page View Source AllowFinalizer Don't count running the finalizer as an error? Declaration protected readonly bool AllowFinalizer Field Value Type Description bool | Edit this page View Source AsyncDisposing Asynchronous disposing? Declaration protected readonly bool AsyncDisposing Field Value Type Description bool | Edit this page View Source DisposeObjects Objects to dispose when disposing Declaration protected readonly HashSet<object> DisposeObjects Field Value Type Description HashSet<object> | Edit this page View Source DisposeSyncObject An object for thread synchronization during disposing Declaration protected readonly SemaphoreSlim DisposeSyncObject Field Value Type Description SemaphoreSlim | Edit this page View Source StackInfo Stack information Declaration protected readonly IStackInfo? StackInfo Field Value Type Description IStackInfo Properties | Edit this page View Source CreateStackInfo Create a StackInfo for every instance? Declaration public static bool CreateStackInfo { get; set; } Property Value Type Description bool | Edit this page View Source DestructorDisposing Is disposing during object destruction? Declaration protected bool DestructorDisposing { get; } Property Value Type Description bool | Edit this page View Source IsDisposed Is disposed? (final object disposing state) Declaration public bool IsDisposed { get; } Property Value Type Description bool | Edit this page View Source IsDisposing Is disposing? (is true when disposed already, too!) Declaration public bool IsDisposing { get; } Property Value Type Description bool Methods | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source Dispose(bool) Dispose Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) | Edit this page View Source DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask A task that represents the asynchronous dispose operation. | Edit this page View Source DisposeAttributes() Dispose fields/properties with the DisposeAttribute Declaration protected virtual void DisposeAttributes() | Edit this page View Source DisposeAttributesAsync() Dispose fields/properties with the DisposeAttribute Declaration protected virtual Task DisposeAttributesAsync() Returns Type Description Task | Edit this page View Source DisposeCore() Dispose Declaration protected virtual Task DisposeCore() Returns Type Description Task | Edit this page View Source EnsureUndisposed(in bool, in bool) Ensure an undisposed object state Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected bool EnsureUndisposed(in bool allowDisposing = false, in bool throwException = true) Parameters Type Name Description bool allowDisposing Allow disposing state? bool throwException Throw an exception if disposing/disposed? Returns Type Description bool Is not disposing? | Edit this page View Source ~DisposableRecordBase() Destructor Declaration protected ~DisposableRecordBase() | Edit this page View Source IfUndisposed(in Action, in bool) Execute an action if undisposed Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected void IfUndisposed(in Action action, in bool allowDisposing = false) Parameters Type Name Description Action action Action bool allowDisposing Allow disposing state? | Edit this page View Source IfUndisposedNullable<T>(in Func<T?>, in bool) Execute an action if undisposed Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected T? IfUndisposedNullable<T>(in Func<T?> action, in bool allowDisposing = false) Parameters Type Name Description Func<T> action Action bool allowDisposing Allow disposing state? Returns Type Description T Return value Type Parameters Name Description T Return type | Edit this page View Source IfUndisposed<T>(in Func<T>, in bool) Execute an action if undisposed Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected T IfUndisposed<T>(in Func<T> action, in bool allowDisposing = false) Parameters Type Name Description Func<T> action Action bool allowDisposing Allow disposing state? Returns Type Description T Return value Type Parameters Name Description T Return type | Edit this page View Source IfUndisposed<T>(in T, in bool) Return a value if not disposing/disposed Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected T IfUndisposed<T>(in T value, in bool allowDisposing = false) Parameters Type Name Description T value Value bool allowDisposing Allow disposing state? Returns Type Description T Value Type Parameters Name Description T Value type | Edit this page View Source LockDisposing(in TimeSpan, in CancellationToken) Lock disposing Declaration protected SemaphoreSyncContext LockDisposing(in TimeSpan timeout = default, in CancellationToken cancellationToken = default) Parameters Type Name Description TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description SemaphoreSyncContext Synchronization context (don't forget to dispose!) | Edit this page View Source LockDisposingAsync(TimeSpan, CancellationToken) Lock disposing Declaration protected Task<SemaphoreSyncContext> LockDisposingAsync(TimeSpan timeout = default, CancellationToken cancellationToken = default) Parameters Type Name Description TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description Task<SemaphoreSyncContext> Synchronization context (don't forget to dispose!) | Edit this page View Source RegisterForDispose<T>(in T) Register an object for disposing when this object is being disposed Declaration public virtual void RegisterForDispose<T>(in T disposable) Parameters Type Name Description T disposable Disposable (will be disposed) Type Parameters Name Description T Object type | Edit this page View Source TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) Lock disposing Declaration protected bool TryLockDisposing(out SemaphoreSyncContext result, in TimeSpan timeout = default, in CancellationToken cancellationToken = default) Parameters Type Name Description SemaphoreSyncContext result Result (don't forget to dispose!) TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description bool Synchronization context | Edit this page View Source TryLockDisposingAsync(TimeSpan, CancellationToken) Lock disposing Declaration protected Task<TryAsyncResult<SemaphoreSyncContext>> TryLockDisposingAsync(TimeSpan timeout = default, CancellationToken cancellationToken = default) Parameters Type Name Description TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description Task<TryAsyncResult<SemaphoreSyncContext>> Synchronization context (don't forget to dispose!) Events | Edit this page View Source OnDisposed Raised when disposed Declaration public event IDisposableObject.Dispose_Delegate? OnDisposed Event Type Type Description IDisposableObject.Dispose_Delegate | Edit this page View Source OnDisposing Raised when disposing Declaration public event IDisposableObject.Dispose_Delegate? OnDisposing Event Type Type Description IDisposableObject.Dispose_Delegate Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IEquatable<T> Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DisposableThreadSafeValue-1.html": {
    "href": "api/wan24.Core.DisposableThreadSafeValue-1.html",
    "title": "Class DisposableThreadSafeValue<T> | wan24-Core",
    "keywords": "Class DisposableThreadSafeValue<T> Disposable thread-safe value Inheritance object DisposableBase ThreadSafeValue<T> DisposableThreadSafeValue<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members ThreadSafeValue<T>.Sync ThreadSafeValue<T>._Value ThreadSafeValue<T>.Value ThreadSafeValue<T>.SetValueAsync(T, CancellationToken) ThreadSafeValue<T>.Execute(in ThreadSafeValue<T>.Action_Delegate) ThreadSafeValue<T>.ExecuteAsync(ThreadSafeValue<T>.AsyncAction_Delegate, CancellationToken) DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class DisposableThreadSafeValue<T> : ThreadSafeValue<T>, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable where T : IDisposable Type Parameters Name Description T Value type Remarks Constructor Constructors | Edit this page View Source DisposableThreadSafeValue(in T?) Disposable thread-safe value Declaration public DisposableThreadSafeValue(in T? initialValue = default) Parameters Type Name Description T initialValue Initial value Remarks Constructor Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides ThreadSafeValue<T>.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides ThreadSafeValue<T>.DisposeCore() Operators | Edit this page View Source implicit operator DisposableThreadSafeValue<T>(in T?) Cast as new instance Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator DisposableThreadSafeValue<T>(in T? value) Parameters Type Name Description T value Value Returns Type Description DisposableThreadSafeValue<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DisposableWrapper-1.DisposeAsync_Delegate.html": {
    "href": "api/wan24.Core.DisposableWrapper-1.DisposeAsync_Delegate.html",
    "title": "Delegate DisposableWrapper<T>.DisposeAsync_Delegate | wan24-Core",
    "keywords": "Delegate DisposableWrapper<T>.DisposeAsync_Delegate Asynchronous dispose delegate Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task DisposableWrapper<T>.DisposeAsync_Delegate() Returns Type Description Task Asynchronous dispose delegate Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DisposableWrapper-1.Dispose_Delegate.html": {
    "href": "api/wan24.Core.DisposableWrapper-1.Dispose_Delegate.html",
    "title": "Delegate DisposableWrapper<T>.Dispose_Delegate | wan24-Core",
    "keywords": "Delegate DisposableWrapper<T>.Dispose_Delegate Dispose delegate Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void DisposableWrapper<T>.Dispose_Delegate(bool disposing) Parameters Type Name Description bool disposing Is disposing? Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DisposableWrapper-1.html": {
    "href": "api/wan24.Core.DisposableWrapper-1.html",
    "title": "Class DisposableWrapper<T> | wan24-Core",
    "keywords": "Class DisposableWrapper<T> Disposable wrapper Inheritance object DisposableBase DisposableWrapper<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class DisposableWrapper<T> : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Type Parameters Name Description T Wrapped object type Constructors | Edit this page View Source DisposableWrapper(in T, in DisposeAsync_Delegate, in bool) Constructor Declaration public DisposableWrapper(in T obj, in DisposableWrapper<T>.DisposeAsync_Delegate disposeAsyncAction, in bool allowDisposingObjectAccess = true) Parameters Type Name Description T obj Wrapped object DisposableWrapper<T>.DisposeAsync_Delegate disposeAsyncAction Asynchronous dispose action bool allowDisposingObjectAccess Allow disposing wrapped object access? | Edit this page View Source DisposableWrapper(in T, in Dispose_Delegate, in bool) Constructor Declaration public DisposableWrapper(in T obj, in DisposableWrapper<T>.Dispose_Delegate disposeAction, in bool allowDisposingObjectAccess = true) Parameters Type Name Description T obj Wrapped object DisposableWrapper<T>.Dispose_Delegate disposeAction Dispose action bool allowDisposingObjectAccess Allow disposing wrapped object access? | Edit this page View Source DisposableWrapper(in T, in Dispose_Delegate, in DisposeAsync_Delegate, in bool) Constructor Declaration public DisposableWrapper(in T obj, in DisposableWrapper<T>.Dispose_Delegate disposeAction, in DisposableWrapper<T>.DisposeAsync_Delegate disposeAsyncAction, in bool allowDisposingObjectAccess = true) Parameters Type Name Description T obj Wrapped object DisposableWrapper<T>.Dispose_Delegate disposeAction Dispose action DisposableWrapper<T>.DisposeAsync_Delegate disposeAsyncAction Asynchronous dispose action bool allowDisposingObjectAccess Allow disposing wrapped object access? Properties | Edit this page View Source Object Wrapped object Declaration public T Object { get; } Property Value Type Description T Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() Operators | Edit this page View Source implicit operator bool(in DisposableWrapper<T>) Cast as disposed status Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in DisposableWrapper<T> wrapper) Parameters Type Name Description DisposableWrapper<T> wrapper Wrapper Returns Type Description bool | Edit this page View Source implicit operator T(in DisposableWrapper<T>) Cast as wrapped object Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T(in DisposableWrapper<T> wrapper) Parameters Type Name Description DisposableWrapper<T> wrapper Wrapper Returns Type Description T Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DisposeAttribute.html": {
    "href": "api/wan24.Core.DisposeAttribute.html",
    "title": "Class DisposeAttribute | wan24-Core",
    "keywords": "Class DisposeAttribute Attribute for fields or properties to dispose automatic when disposing Inheritance object Attribute DisposeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class DisposeAttribute : Attribute Constructors | Edit this page View Source DisposeAttribute() Constructor Declaration public DisposeAttribute() Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.DisposingAsyncEnumerator-1.html": {
    "href": "api/wan24.Core.DisposingAsyncEnumerator-1.html",
    "title": "Class DisposingAsyncEnumerator<T> | wan24-Core",
    "keywords": "Class DisposingAsyncEnumerator<T> Disposing asynchronous enumerator (disposes tagged objects when disposing) Inheritance object DisposableBase DisposingAsyncEnumerator<T> Implements IWillDispose IDisposableObject IDisposable IAsyncEnumerator<T> IAsyncDisposable IAsyncEnumerable<T> Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class DisposingAsyncEnumerator<T> : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncEnumerator<T>, IAsyncDisposable, IAsyncEnumerable<T> Type Parameters Name Description T Item type Constructors | Edit this page View Source DisposingAsyncEnumerator(in IAsyncEnumerable<T>, params object?[]) Constructor Declaration public DisposingAsyncEnumerator(in IAsyncEnumerable<T> enumerable, params object?[] disposables) Parameters Type Name Description IAsyncEnumerable<T> enumerable Enumerable object[] disposables Disposables | Edit this page View Source DisposingAsyncEnumerator(in IAsyncEnumerable<T>, in CancellationToken, params object?[]) Constructor Declaration public DisposingAsyncEnumerator(in IAsyncEnumerable<T> enumerable, in CancellationToken cancellationToken, params object?[] disposables) Parameters Type Name Description IAsyncEnumerable<T> enumerable Enumerable CancellationToken cancellationToken Cancellation token object[] disposables Disposables | Edit this page View Source DisposingAsyncEnumerator(in IAsyncEnumerator<T>, params object?[]) Constructor Declaration public DisposingAsyncEnumerator(in IAsyncEnumerator<T> enumerator, params object?[] disposables) Parameters Type Name Description IAsyncEnumerator<T> enumerator Enumerator (will be disposed) object[] disposables Disposables | Edit this page View Source DisposingAsyncEnumerator(in IAsyncEnumerator<T>, in CancellationToken, params object?[]) Constructor Declaration public DisposingAsyncEnumerator(in IAsyncEnumerator<T> enumerator, in CancellationToken cancellationToken, params object?[] disposables) Parameters Type Name Description IAsyncEnumerator<T> enumerator Enumerator (will be disposed) CancellationToken cancellationToken Cancellation token object[] disposables Disposables Properties | Edit this page View Source Current Gets the element in the collection at the current position of the enumerator. Declaration public T Current { get; } Property Value Type Description T The element in the collection at the current position of the enumerator. Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source MoveNextAsync() Advances the enumerator asynchronously to the next element of the collection. Declaration public ValueTask<bool> MoveNextAsync() Returns Type Description ValueTask<bool> A ValueTask<TResult> that will complete with a result of true if the enumerator was successfully advanced to the next element, or false if the enumerator has passed the end of the collection. Implements IWillDispose IDisposableObject IDisposable IAsyncEnumerator<T> IAsyncDisposable IAsyncEnumerable<T> Extension Methods AsyncEnumerableExtensions.ChunkEnumAsync<T>(IAsyncEnumerable<T>, int, CancellationToken) AsyncEnumerableExtensions.DynamicContext<T>(IAsyncEnumerable<T>) AsyncEnumerableExtensions.FixedContext<T>(IAsyncEnumerable<T>) AsyncEnumerableExtensions.ToArrayAsync<T>(IAsyncEnumerable<T>, CancellationToken) AsyncEnumerableExtensions.ToDisposingAsyncEnumerator<T>(IAsyncEnumerable<T>, params object?[]) AsyncEnumerableExtensions.ToDisposingAsyncEnumerator<T>(IAsyncEnumerable<T>, in CancellationToken, params object?[]) AsyncEnumerableExtensions.ToListAsync<T>(IAsyncEnumerable<T>, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IAsyncEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IAsyncEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.ForEachAsync<T>(IAsyncEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) AsyncEnumerableExtensions.ToDisposingAsyncEnumerator<T>(IAsyncEnumerator<T>, params object?[]) AsyncEnumerableExtensions.ToDisposingAsyncEnumerator<T>(IAsyncEnumerator<T>, in CancellationToken, params object?[]) AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ENV.html": {
    "href": "api/wan24.Core.ENV.html",
    "title": "Class ENV | wan24-Core",
    "keywords": "Class ENV Environment information Inheritance object ENV Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ENV Properties | Edit this page View Source App Absolute app path including entry assembly filename (empty string, if runnng in a browser) Declaration [CliConfig] [Required] public static string App { get; set; } Property Value Type Description string | Edit this page View Source AppCommand App start command (empty string, if runnng in a browser) Declaration [CliConfig] [Required] public static string AppCommand { get; set; } Property Value Type Description string | Edit this page View Source AppFolder Absolute app folder (empty string, if runnng in a browser) Declaration [CliConfig] [Required] public static string AppFolder { get; set; } Property Value Type Description string | Edit this page View Source CliArguments (A copy of) CLI arguments Declaration public static string[] CliArguments { get; } Property Value Type Description string[] | Edit this page View Source HasCliArguments If there are any CLI arguments (excluding the first argument, which should be the assembly filename) Declaration public static bool HasCliArguments { get; } Property Value Type Description bool | Edit this page View Source IsBrowserApp Is a browser app? Declaration public static bool IsBrowserApp { get; set; } Property Value Type Description bool | Edit this page View Source IsBrowserEnvironment Is a browser environment? Declaration public static bool IsBrowserEnvironment { get; } Property Value Type Description bool | Edit this page View Source IsDebug Is a DEBUG build? Declaration public static bool IsDebug { get; } Property Value Type Description bool | Edit this page View Source IsLinux Is a Linux OS? Declaration public static bool IsLinux { get; } Property Value Type Description bool | Edit this page View Source IsPrivileged Is this process privileged to perform security sensitive actions? Declaration public static bool IsPrivileged { get; } Property Value Type Description bool | Edit this page View Source IsWindows Is a Windows OS? Declaration public static bool IsWindows { get; } Property Value Type Description bool"
  },
  "api/wan24.Core.EmailAttachment.html": {
    "href": "api/wan24.Core.EmailAttachment.html",
    "title": "Class EmailAttachment | wan24-Core",
    "keywords": "Class EmailAttachment Email attachment Inheritance object DisposableBase EmailAttachment Implements IWillDispose IEmailAttachment IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class EmailAttachment : DisposableBase, IWillDispose, IEmailAttachment, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source EmailAttachment(in string, in string, in byte[]) Constructor Declaration public EmailAttachment(in string fileName, in string mimeType, in byte[] data) Parameters Type Name Description string fileName Filename string mimeType MIME type byte[] data Data | Edit this page View Source EmailAttachment(in string, in string, in Stream) Constructor Declaration public EmailAttachment(in string fileName, in string mimeType, in Stream stream) Parameters Type Name Description string fileName Filename string mimeType MIME type Stream stream Stream | Edit this page View Source EmailAttachment(in string, in string, in long, in StreamPool<PooledMemoryStream>?, in StreamPool<PooledTempFileStream>?) Constructor Declaration protected EmailAttachment(in string fileName, in string mimeType, in long estimatedLength, in StreamPool<PooledMemoryStream>? memoryStreamPool = null, in StreamPool<PooledTempFileStream>? fileStreamPool = null) Parameters Type Name Description string fileName Filename string mimeType MIME type long estimatedLength Estimated stream length in bytes StreamPool<PooledMemoryStream> memoryStreamPool Memory stream pool to use StreamPool<PooledTempFileStream> fileStreamPool File stream pool to use | Edit this page View Source EmailAttachment(in string, in string, in string) Constructor Declaration public EmailAttachment(in string fileName, in string mimeType, in string localFileName) Parameters Type Name Description string fileName Filename string mimeType MIME type string localFileName Local filename | Edit this page View Source EmailAttachment(in IEmailAttachment, in string?, in string?, in StreamPool<PooledMemoryStream>?, in StreamPool<PooledTempFileStream>?) Constructor Declaration public EmailAttachment(in IEmailAttachment attachment, in string? fileName = null, in string? mimeType = null, in StreamPool<PooledMemoryStream>? memoryStreamPool = null, in StreamPool<PooledTempFileStream>? fileStreamPool = null) Parameters Type Name Description IEmailAttachment attachment Attachment to copy string fileName New filename string mimeType New MIME type StreamPool<PooledMemoryStream> memoryStreamPool Memory stream pool to use StreamPool<PooledTempFileStream> fileStreamPool File stream pool to use Properties | Edit this page View Source FileName Filename Declaration public virtual string FileName { get; } Property Value Type Description string | Edit this page View Source MimeType MIME type Declaration [RegularExpression(\"^(\\\\w+)\\\\/([-.\\\\w]+(?:\\\\+[-.\\\\w]+)?)$\")] public virtual string MimeType { get; } Property Value Type Description string | Edit this page View Source Stream Stream Declaration public virtual Stream Stream { get; } Property Value Type Description Stream Methods | Edit this page View Source CreateAsync(IEmailAttachment, string?, string?, StreamPool<PooledMemoryStream>?, StreamPool<PooledTempFileStream>?, CancellationToken) Copy an existing email attachment Declaration public static Task<EmailAttachment> CreateAsync(IEmailAttachment attachment, string? fileName = null, string? mimeType = null, StreamPool<PooledMemoryStream>? memoryStreamPool = null, StreamPool<PooledTempFileStream>? fileStreamPool = null, CancellationToken cancellationToken = default) Parameters Type Name Description IEmailAttachment attachment Attachment to copy string fileName New filename string mimeType New MIME type StreamPool<PooledMemoryStream> memoryStreamPool Memory stream pool to use StreamPool<PooledTempFileStream> fileStreamPool File stream pool to use CancellationToken cancellationToken Cancellation token Returns Type Description Task<EmailAttachment> Email attachment | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() Implements IWillDispose IEmailAttachment IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.EmailBase.html": {
    "href": "api/wan24.Core.EmailBase.html",
    "title": "Class EmailBase | wan24-Core",
    "keywords": "Class EmailBase Base class for an email Inheritance object DisposableBase EmailBase Implements IWillDispose IEmail IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class EmailBase : DisposableBase, IWillDispose, IEmail, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source EmailBase() Constructor Declaration protected EmailBase() | Edit this page View Source EmailBase(in string, in string, in string, in string?, in string?, params IEmailAttachment[]) Constructor Declaration protected EmailBase(in string fromEmail, in string toEmail, in string subject, in string? text = null, in string? html = null, params IEmailAttachment[] attachments) Parameters Type Name Description string fromEmail Sender email address string toEmail Recipient email address string subject Subject string text Text body string html HTML body IEmailAttachment[] attachments Attachments Fields | Edit this page View Source _Attachments Attachments Declaration protected readonly HashSet<IEmailAttachment> _Attachments Field Value Type Description HashSet<IEmailAttachment> Properties | Edit this page View Source Attachments Attached files Declaration public virtual IReadOnlyCollection<IEmailAttachment> Attachments { get; } Property Value Type Description IReadOnlyCollection<IEmailAttachment> | Edit this page View Source FromEmail Sender email address Declaration [EmailAddress] public virtual string FromEmail { get; } Property Value Type Description string | Edit this page View Source HtmlBody HTML body Declaration public virtual string? HtmlBody { get; } Property Value Type Description string | Edit this page View Source Subject Subject Declaration [RegularExpression(\"[^\\\\r\\\\n]\")] public virtual string Subject { get; } Property Value Type Description string | Edit this page View Source TextBody Text body Declaration public virtual string? TextBody { get; } Property Value Type Description string | Edit this page View Source ToEmail Recipient email address Declaration [EmailAddress] public virtual string ToEmail { get; } Property Value Type Description string Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() Implements IWillDispose IEmail IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int) EmailExtensions.Send(IEmail, IMta?) EmailExtensions.Send(IEmail, IMtaConnection) EmailExtensions.SendAsync(IEmail, IMta?, CancellationToken) EmailExtensions.SendAsync(IEmail, IMtaConnection, CancellationToken)"
  },
  "api/wan24.Core.EmailExtensions.html": {
    "href": "api/wan24.Core.EmailExtensions.html",
    "title": "Class EmailExtensions | wan24-Core",
    "keywords": "Class EmailExtensions IEmail (and IEmailTemplate) extensions Inheritance object EmailExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class EmailExtensions Methods | Edit this page View Source Send(IEmail, IMta?) Send the email Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool Send(this IEmail email, IMta? mta = null) Parameters Type Name Description IEmail email Email (will be disposed!) IMta mta MTA Returns Type Description bool If succeed | Edit this page View Source Send(IEmail, IMtaConnection) Send the email Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool Send(this IEmail email, IMtaConnection connection) Parameters Type Name Description IEmail email Email (will be disposed!) IMtaConnection connection Connection Returns Type Description bool If succeed | Edit this page View Source Send(IEmailTemplate, string, string, Dictionary<string, string>?, IMta?, params IEmailAttachment[]) Send an email Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool Send(this IEmailTemplate template, string fromEmail, string toEmail, Dictionary<string, string>? parserData = null, IMta? mta = null, params IEmailAttachment[] attachments) Parameters Type Name Description IEmailTemplate template Email template string fromEmail Sender email address string toEmail Recipient email address Dictionary<string, string> parserData Parser data IMta mta MTA IEmailAttachment[] attachments Attachments (will be disposed!) Returns Type Description bool If succeed | Edit this page View Source Send(IEmailTemplate, string, string, IMtaConnection, Dictionary<string, string>?, params IEmailAttachment[]) Send an email Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool Send(this IEmailTemplate template, string fromEmail, string toEmail, IMtaConnection connection, Dictionary<string, string>? parserData = null, params IEmailAttachment[] attachments) Parameters Type Name Description IEmailTemplate template Email template string fromEmail Sender email address string toEmail Recipient email address IMtaConnection connection Connection Dictionary<string, string> parserData Parser data IEmailAttachment[] attachments Attachments (will be disposed!) Returns Type Description bool If succeed | Edit this page View Source SendAsync(IEmail, IMta?, CancellationToken) Send the email Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<bool> SendAsync(this IEmail email, IMta? mta = null, CancellationToken cancellationToken = default) Parameters Type Name Description IEmail email Email (will be disposed!) IMta mta MTA CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If succeed | Edit this page View Source SendAsync(IEmail, IMtaConnection, CancellationToken) Send the email Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<bool> SendAsync(this IEmail email, IMtaConnection connection, CancellationToken cancellationToken = default) Parameters Type Name Description IEmail email Email (will be disposed!) IMtaConnection connection Connection CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If succeed | Edit this page View Source SendAsync(IEmailTemplate, string, string, Dictionary<string, string>?, IMta?, CancellationToken, params IEmailAttachment[]) Send an email Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<bool> SendAsync(this IEmailTemplate template, string fromEmail, string toEmail, Dictionary<string, string>? parserData = null, IMta? mta = null, CancellationToken cancellationToken = default, params IEmailAttachment[] attachments) Parameters Type Name Description IEmailTemplate template Email template string fromEmail Sender email address string toEmail Recipient email address Dictionary<string, string> parserData Parser data IMta mta MTA CancellationToken cancellationToken Cancellation token IEmailAttachment[] attachments Attachments (will be disposed!) Returns Type Description Task<bool> If succeed | Edit this page View Source SendAsync(IEmailTemplate, string, string, IMtaConnection, Dictionary<string, string>?, CancellationToken, params IEmailAttachment[]) Send an email Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<bool> SendAsync(this IEmailTemplate template, string fromEmail, string toEmail, IMtaConnection connection, Dictionary<string, string>? parserData = null, CancellationToken cancellationToken = default, params IEmailAttachment[] attachments) Parameters Type Name Description IEmailTemplate template Email template string fromEmail Sender email address string toEmail Recipient email address IMtaConnection connection Connection Dictionary<string, string> parserData Parser data CancellationToken cancellationToken Cancellation token IEmailAttachment[] attachments Attachments (will be disposed!) Returns Type Description Task<bool> If succeed"
  },
  "api/wan24.Core.EmailHelper.html": {
    "href": "api/wan24.Core.EmailHelper.html",
    "title": "Class EmailHelper | wan24-Core",
    "keywords": "Class EmailHelper Email helper Inheritance object EmailHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class EmailHelper Properties | Edit this page View Source EmailType Email type Declaration public static Type? EmailType { get; set; } Property Value Type Description Type | Edit this page View Source MtaConnection MTA connection Declaration public static IMtaConnection? MtaConnection { get; set; } Property Value Type Description IMtaConnection Methods | Edit this page View Source Create(in string, in string, in string, in string?, in string?, params IEmailAttachment[]) Create an email Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static IEmail Create(in string fromEmail, in string toEmail, in string subject, in string? text, in string? html, params IEmailAttachment[] attachments) Parameters Type Name Description string fromEmail Sender email address string toEmail Recipient email address string subject Subject string text Text body string html HTML body IEmailAttachment[] attachments Attachments Returns Type Description IEmail Email | Edit this page View Source Send(in string, in string, in string, in string?, in string?, params IEmailAttachment[]) Send an email Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool Send(in string fromEmail, in string toEmail, in string subject, in string? text, in string? html, params IEmailAttachment[] attachments) Parameters Type Name Description string fromEmail Sender email address string toEmail Recipient email address string subject Subject string text Text body string html HTML body IEmailAttachment[] attachments Attachments Returns Type Description bool If succeed | Edit this page View Source Send(in IEmail) Send an email Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool Send(in IEmail email) Parameters Type Name Description IEmail email Email (will be disposed!) Returns Type Description bool If succeed | Edit this page View Source SendAsync(string, string, string, string?, string?, CancellationToken, params IEmailAttachment[]) Send an email Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<bool> SendAsync(string fromEmail, string toEmail, string subject, string? text, string? html, CancellationToken cancellationToken = default, params IEmailAttachment[] attachments) Parameters Type Name Description string fromEmail Sender email address string toEmail Recipient email address string subject Subject string text Text body string html HTML body CancellationToken cancellationToken Cancellation token IEmailAttachment[] attachments Attachments Returns Type Description Task<bool> If succeed | Edit this page View Source SendAsync(IEmail, CancellationToken) Send an email Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<bool> SendAsync(IEmail email, CancellationToken cancellationToken = default) Parameters Type Name Description IEmail email Email (will be disposed!) CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If succeed"
  },
  "api/wan24.Core.EmailLogger.html": {
    "href": "api/wan24.Core.EmailLogger.html",
    "title": "Class EmailLogger | wan24-Core",
    "keywords": "Class EmailLogger Email logger Inheritance object DisposableBase DisposableLoggerBase EmailLogger Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable ILogger Inherited Members DisposableLoggerBase.RX_NL DisposableLoggerBase.Level DisposableLoggerBase.Next DisposableLoggerBase.BeginScope<TState>(TState) DisposableLoggerBase.IsEnabled(LogLevel) DisposableLoggerBase.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>) DisposableLoggerBase.GetMessage<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>, bool) DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class EmailLogger : DisposableLoggerBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, ILogger Remarks Constructor Constructors | Edit this page View Source EmailLogger(in IEmailTemplate, in string, in string, in LogLevel?, in LogLevel, in ILogger?, in IMta?) Email logger Declaration public EmailLogger(in IEmailTemplate template, in string fromEmail, in string toEmail, in LogLevel? level = null, in LogLevel emailLevel = LogLevel.Warning, in ILogger? next = null, in IMta? mta = null) Parameters Type Name Description IEmailTemplate template Email template (will be disposed!) string fromEmail Sender email address string toEmail Recipient email address LogLevel? level Level LogLevel emailLevel Email logging level ILogger next Next logger which should receive the message IMta mta MTA (won't be disposed) Remarks Constructor Fields | Edit this page View Source SyncObject An object for thread locking Declaration protected readonly object SyncObject Field Value Type Description object Properties | Edit this page View Source EmailLevel Email logging level Declaration public LogLevel EmailLevel { get; set; } Property Value Type Description LogLevel | Edit this page View Source FromEmail Sender email address Declaration public string FromEmail { get; set; } Property Value Type Description string | Edit this page View Source LastEmail Time of the last sent email Declaration public DateTime LastEmail { get; protected set; } Property Value Type Description DateTime | Edit this page View Source MTA MTA (won't be disposed) Declaration public IMta? MTA { get; } Property Value Type Description IMta | Edit this page View Source ParserData Parser data Declaration public Dictionary<string, string> ParserData { get; set; } Property Value Type Description Dictionary<string, string> | Edit this page View Source SendingFrequency Email sending frequency (set to Zero for sending all emails) Declaration public TimeSpan SendingFrequency { get; set; } Property Value Type Description TimeSpan | Edit this page View Source Skipped Number of skipped emails Declaration public int Skipped { get; protected set; } Property Value Type Description int | Edit this page View Source Template Email template (will be disposed!) Declaration public IEmailTemplate Template { get; } Property Value Type Description IEmailTemplate | Edit this page View Source ToEmail Recipient email address Declaration public string ToEmail { get; set; } Property Value Type Description string Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source GetParserData<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>) Get the email template parser data Declaration protected virtual Dictionary<string, string> GetParserData<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel Level EventId eventId Event ID TState state State Exception exception Exception Func<TState, Exception, string> formatter Formatter Returns Type Description Dictionary<string, string> Parser data Type Parameters Name Description TState State type | Edit this page View Source LogInt<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>) Writes a log entry Declaration protected override void LogInt<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel Level EventId eventId Event ID TState state State Exception exception Exception Func<TState, Exception, string> formatter Formatter Type Parameters Name Description TState State type Overrides DisposableLoggerBase.LogInt<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>) Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable ILogger Extension Methods LoggerExtensions.GetFinalLogger(ILogger) LoggerExtensions.GetLogLevel(ILogger) AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.EmailTemplate.html": {
    "href": "api/wan24.Core.EmailTemplate.html",
    "title": "Class EmailTemplate | wan24-Core",
    "keywords": "Class EmailTemplate Email template Inheritance object DisposableBase EmailTemplateBase EmailTemplate Implements IWillDispose IEmailTemplate IDisposableObject IDisposable IAsyncDisposable Inherited Members EmailTemplateBase._Attachments EmailTemplateBase.Subject EmailTemplateBase.TextBody EmailTemplateBase.HtmlBody EmailTemplateBase.Attachments EmailTemplateBase.CreateEmail(string, string, Dictionary<string, string>, params IEmailAttachment[]) EmailTemplateBase.CreateEmailAsync(string, string, Dictionary<string, string>, CancellationToken, params IEmailAttachment[]) EmailTemplateBase.GetData(Dictionary<string, string>) EmailTemplateBase.GetDataAsync(Dictionary<string, string>, CancellationToken) EmailTemplateBase.Dispose(bool) EmailTemplateBase.DisposeCore() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class EmailTemplate : EmailTemplateBase, IWillDispose, IEmailTemplate, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source EmailTemplate(in string, in string?, in string?, params IEmailAttachment[]) Constructor Declaration public EmailTemplate(in string subject, in string? text = null, in string? html = null, params IEmailAttachment[] attachments) Parameters Type Name Description string subject Subject string text Text body string html HTML body IEmailAttachment[] attachments Attachments | Edit this page View Source EmailTemplate(in Type, in string, in string?, in string?, params IEmailAttachment[]) Constructor Declaration public EmailTemplate(in Type emailType, in string subject, in string? text = null, in string? html = null, params IEmailAttachment[] attachments) Parameters Type Name Description Type emailType Email type (non-abstract IEmail class type) string subject Subject string text Text body string html HTML body IEmailAttachment[] attachments Attachments Properties | Edit this page View Source DefaultEmailType Default email type Declaration public static Type? DefaultEmailType { get; set; } Property Value Type Description Type | Edit this page View Source EmailType Email type Declaration public Type EmailType { get; } Property Value Type Description Type Methods | Edit this page View Source CreateEmail(string, string, string, string?, string?, HashSet<IEmailAttachment>) Create an email Declaration protected override IEmail CreateEmail(string fromEmail, string toEmail, string subject, string? text, string? html, HashSet<IEmailAttachment> attachments) Parameters Type Name Description string fromEmail Sender email address string toEmail Recipient email address string subject Subject string text Text body string html HTML body HashSet<IEmailAttachment> attachments Attachments Returns Type Description IEmail Overrides EmailTemplateBase.CreateEmail(string, string, string, string?, string?, HashSet<IEmailAttachment>) Implements IWillDispose IEmailTemplate IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int) EmailExtensions.Send(IEmailTemplate, string, string, Dictionary<string, string>?, IMta?, params IEmailAttachment[]) EmailExtensions.Send(IEmailTemplate, string, string, IMtaConnection, Dictionary<string, string>?, params IEmailAttachment[]) EmailExtensions.SendAsync(IEmailTemplate, string, string, Dictionary<string, string>?, IMta?, CancellationToken, params IEmailAttachment[]) EmailExtensions.SendAsync(IEmailTemplate, string, string, IMtaConnection, Dictionary<string, string>?, CancellationToken, params IEmailAttachment[])"
  },
  "api/wan24.Core.EmailTemplateBase-1.html": {
    "href": "api/wan24.Core.EmailTemplateBase-1.html",
    "title": "Class EmailTemplateBase<T> | wan24-Core",
    "keywords": "Class EmailTemplateBase<T> Base class for an email template Inheritance object DisposableBase EmailTemplateBase EmailTemplateBase<T> Implements IWillDispose IEmailTemplate IDisposableObject IDisposable IAsyncDisposable Inherited Members EmailTemplateBase._Attachments EmailTemplateBase.Subject EmailTemplateBase.TextBody EmailTemplateBase.HtmlBody EmailTemplateBase.Attachments EmailTemplateBase.CreateEmail(string, string, Dictionary<string, string>, params IEmailAttachment[]) EmailTemplateBase.CreateEmailAsync(string, string, Dictionary<string, string>, CancellationToken, params IEmailAttachment[]) EmailTemplateBase.GetData(Dictionary<string, string>) EmailTemplateBase.GetDataAsync(Dictionary<string, string>, CancellationToken) EmailTemplateBase.Dispose(bool) EmailTemplateBase.DisposeCore() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class EmailTemplateBase<T> : EmailTemplateBase, IWillDispose, IEmailTemplate, IDisposableObject, IDisposable, IAsyncDisposable where T : class, IEmail Type Parameters Name Description T Email type Constructors | Edit this page View Source EmailTemplateBase(in string, in string?, in string?, params IEmailAttachment[]) Constructor Declaration protected EmailTemplateBase(in string subject, in string? text = null, in string? html = null, params IEmailAttachment[] attachments) Parameters Type Name Description string subject Subject string text Text body string html HTML body IEmailAttachment[] attachments Attachments Methods | Edit this page View Source CreateEmail(string, string, string, string?, string?, HashSet<IEmailAttachment>) Create an email Declaration protected override IEmail CreateEmail(string fromEmail, string toEmail, string subject, string? text, string? html, HashSet<IEmailAttachment> attachments) Parameters Type Name Description string fromEmail Sender email address string toEmail Recipient email address string subject Subject string text Text body string html HTML body HashSet<IEmailAttachment> attachments Attachments Returns Type Description IEmail Overrides EmailTemplateBase.CreateEmail(string, string, string, string?, string?, HashSet<IEmailAttachment>) Implements IWillDispose IEmailTemplate IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int) EmailExtensions.Send(IEmailTemplate, string, string, Dictionary<string, string>?, IMta?, params IEmailAttachment[]) EmailExtensions.Send(IEmailTemplate, string, string, IMtaConnection, Dictionary<string, string>?, params IEmailAttachment[]) EmailExtensions.SendAsync(IEmailTemplate, string, string, Dictionary<string, string>?, IMta?, CancellationToken, params IEmailAttachment[]) EmailExtensions.SendAsync(IEmailTemplate, string, string, IMtaConnection, Dictionary<string, string>?, CancellationToken, params IEmailAttachment[])"
  },
  "api/wan24.Core.EmailTemplateBase.html": {
    "href": "api/wan24.Core.EmailTemplateBase.html",
    "title": "Class EmailTemplateBase | wan24-Core",
    "keywords": "Class EmailTemplateBase Base class for an email template Inheritance object DisposableBase EmailTemplateBase EmailTemplate EmailTemplateBase<T> Implements IWillDispose IEmailTemplate IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class EmailTemplateBase : DisposableBase, IWillDispose, IEmailTemplate, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source EmailTemplateBase() Constructor Declaration protected EmailTemplateBase() | Edit this page View Source EmailTemplateBase(in string, in string?, in string?, params IEmailAttachment[]) Constructor Declaration protected EmailTemplateBase(in string subject, in string? text = null, in string? html = null, params IEmailAttachment[] attachments) Parameters Type Name Description string subject Subject string text Text body string html HTML body IEmailAttachment[] attachments Attachments Fields | Edit this page View Source _Attachments Attachments Declaration protected readonly HashSet<IEmailAttachment> _Attachments Field Value Type Description HashSet<IEmailAttachment> Properties | Edit this page View Source Attachments Attachments Declaration public virtual ReadOnlyCollection<IEmailAttachment> Attachments { get; } Property Value Type Description ReadOnlyCollection<IEmailAttachment> | Edit this page View Source HtmlBody HTML body Declaration public virtual string? HtmlBody { get; } Property Value Type Description string | Edit this page View Source Subject Subject Declaration public virtual string Subject { get; } Property Value Type Description string | Edit this page View Source TextBody Text body Declaration public virtual string? TextBody { get; } Property Value Type Description string Methods | Edit this page View Source CreateEmail(string, string, Dictionary<string, string>?, params IEmailAttachment[]) Create an email from this template Declaration public virtual IEmail CreateEmail(string fromEmail, string toEmail, Dictionary<string, string>? parserData = null, params IEmailAttachment[] attachments) Parameters Type Name Description string fromEmail Sender email address string toEmail Recipient email address Dictionary<string, string> parserData Parser data IEmailAttachment[] attachments Attachments Returns Type Description IEmail Email | Edit this page View Source CreateEmail(string, string, string, string?, string?, HashSet<IEmailAttachment>) Create an email Declaration protected abstract IEmail CreateEmail(string fromEmail, string toEmail, string subject, string? text, string? html, HashSet<IEmailAttachment> attachments) Parameters Type Name Description string fromEmail Sender email address string toEmail Recipient email address string subject Subject string text Text body string html HTML body HashSet<IEmailAttachment> attachments Attachments Returns Type Description IEmail | Edit this page View Source CreateEmailAsync(string, string, Dictionary<string, string>?, CancellationToken, params IEmailAttachment[]) Create an email from this template Declaration public virtual Task<IEmail> CreateEmailAsync(string fromEmail, string toEmail, Dictionary<string, string>? parserData = null, CancellationToken cancellationToken = default, params IEmailAttachment[] attachments) Parameters Type Name Description string fromEmail Sender email address string toEmail Recipient email address Dictionary<string, string> parserData Parser data CancellationToken cancellationToken Cancellation token IEmailAttachment[] attachments Attachments Returns Type Description Task<IEmail> Email | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source GetData(Dictionary<string, string>?) Get the data of this template for creating a new email instance Declaration protected virtual (string Subject, string? TextBody, string? HtmlBody, IEmailAttachment[] Attachments) GetData(Dictionary<string, string>? parserData) Parameters Type Name Description Dictionary<string, string> parserData Parser data Returns Type Description (string Subject, string TextBody, string HtmlBody, IEmailAttachment[] Attachments) Template data | Edit this page View Source GetDataAsync(Dictionary<string, string>?, CancellationToken) Get the data of this template for creating a new email instance Declaration protected virtual Task<(string Subject, string? TextBody, string? HtmlBody, IEmailAttachment[] Attachments)> GetDataAsync(Dictionary<string, string>? parserData, CancellationToken cancellationToken) Parameters Type Name Description Dictionary<string, string> parserData Parser data CancellationToken cancellationToken Cancellation token Returns Type Description Task<(string Subject, string TextBody, string HtmlBody, IEmailAttachment[] Attachments)> Template data Implements IWillDispose IEmailTemplate IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int) EmailExtensions.Send(IEmailTemplate, string, string, Dictionary<string, string>?, IMta?, params IEmailAttachment[]) EmailExtensions.Send(IEmailTemplate, string, string, IMtaConnection, Dictionary<string, string>?, params IEmailAttachment[]) EmailExtensions.SendAsync(IEmailTemplate, string, string, Dictionary<string, string>?, IMta?, CancellationToken, params IEmailAttachment[]) EmailExtensions.SendAsync(IEmailTemplate, string, string, IMtaConnection, Dictionary<string, string>?, CancellationToken, params IEmailAttachment[])"
  },
  "api/wan24.Core.EncodedBytes.html": {
    "href": "api/wan24.Core.EncodedBytes.html",
    "title": "Struct EncodedBytes | wan24-Core",
    "keywords": "Struct EncodedBytes Encoded bytes structure Implements IList ICollection IEnumerable IStructuralComparable IStructuralEquatable IEquatable<EncodedBytes> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public readonly record struct EncodedBytes : IList, ICollection, IEnumerable, IStructuralComparable, IStructuralEquatable, IEquatable<EncodedBytes> Constructors | Edit this page View Source EncodedBytes(in char[]) Constructor Declaration public EncodedBytes(in char[] data) Parameters Type Name Description char[] data Encoded data Fields | Edit this page View Source Data Encoded data Declaration public readonly char[] Data Field Value Type Description char[] | Edit this page View Source DecodedLength Decoded length Declaration public readonly int DecodedLength Field Value Type Description int | Edit this page View Source Length Length Declaration public readonly int Length Field Value Type Description int Properties | Edit this page View Source Count Gets the number of elements contained in the ICollection. Declaration public int Count { get; } Property Value Type Description int The number of elements contained in the ICollection. | Edit this page View Source IsFixedSize Gets a value indicating whether the IList has a fixed size. Declaration public bool IsFixedSize { get; } Property Value Type Description bool true if the IList has a fixed size; otherwise, false. | Edit this page View Source IsReadOnly Gets a value indicating whether the IList is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool true if the IList is read-only; otherwise, false. | Edit this page View Source IsSynchronized Gets a value indicating whether access to the ICollection is synchronized (thread safe). Declaration public bool IsSynchronized { get; } Property Value Type Description bool true if access to the ICollection is synchronized (thread safe); otherwise, false. | Edit this page View Source this[Index] Get/set a character Declaration public char this[in Index index] { get; set; } Parameters Type Name Description Index index Index Property Value Type Description char Character | Edit this page View Source this[int] Get/set a character Declaration public char this[in int index] { get; set; } Parameters Type Name Description int index Index Property Value Type Description char Character | Edit this page View Source SyncRoot Gets an object that can be used to synchronize access to the ICollection. Declaration public object SyncRoot { get; } Property Value Type Description object An object that can be used to synchronize access to the ICollection. Methods | Edit this page View Source Add(object?) Adds an item to the IList. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public int Add(object? value) Parameters Type Name Description object value The object to add to the IList. Returns Type Description int The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection. Exceptions Type Condition NotSupportedException The IList is read-only. -or- The IList has a fixed size. | Edit this page View Source Clear() Removes all items from the IList. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public void Clear() Exceptions Type Condition NotSupportedException The IList is read-only. | Edit this page View Source CompareTo(object?, IComparer) Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public int CompareTo(object? other, IComparer comparer) Parameters Type Name Description object other The object to compare with the current instance. IComparer comparer An object that compares members of the current collection object with the corresponding members of other. Returns Type Description int A signed integer that indicates the relationship of the current collection object to other in the sort order: - If less than 0, the current instance precedes other. - If 0, the current instance and other are equal. - If greater than 0, the current instance follows other. Return value Description -1 The current instance precedes other. 0 The current instance and other are equal. 1 The current instance follows other. Exceptions Type Condition ArgumentException This instance and other are not the same type. | Edit this page View Source Contains(object?) Determines whether the IList contains a specific value. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public bool Contains(object? value) Parameters Type Name Description object value The object to locate in the IList. Returns Type Description bool true if the object is found in the IList; otherwise, false. | Edit this page View Source CopyTo(Array, int) Copies the elements of the ICollection to an Array, starting at a particular Array index. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. int index The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException index is less than zero. ArgumentException array is multidimensional. -or- The number of elements in the source ICollection is greater than the available space from index to the end of the destination array. -or- The type of the source ICollection cannot be cast automatically to the type of the destination array. | Edit this page View Source DecodeCompactNumber<T>() Decode a compact encoded numeric value Declaration [TargetedPatchingOptOut(\"Tiny method\")] public T DecodeCompactNumber<T>() where T : struct, IConvertible, IComparable, ISpanFormattable, IComparable<T>, IEquatable<T> Returns Type Description T Number Type Parameters Name Description T Number type | Edit this page View Source Equals(object?, IEqualityComparer) Determines whether an object is structurally equal to the current instance. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public bool Equals(object? other, IEqualityComparer comparer) Parameters Type Name Description object other The object to compare with the current instance. IEqualityComparer comparer An object that determines whether the current instance and other are equal. Returns Type Description bool true if the two objects are equal; otherwise, false. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through a collection. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator object that can be used to iterate through the collection. | Edit this page View Source GetHashCode(IEqualityComparer) Returns a hash code for the current instance. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public int GetHashCode(IEqualityComparer comparer) Parameters Type Name Description IEqualityComparer comparer An object that computes the hash code of the current object. Returns Type Description int The hash code for the current instance. | Edit this page View Source IndexOf(object?) Determines the index of a specific item in the IList. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public int IndexOf(object? value) Parameters Type Name Description object value The object to locate in the IList. Returns Type Description int The index of value if found in the list; otherwise, -1. | Edit this page View Source Insert(int, object?) Inserts an item to the IList at the specified index. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public void Insert(int index, object? value) Parameters Type Name Description int index The zero-based index at which value should be inserted. object value The object to insert into the IList. Exceptions Type Condition ArgumentOutOfRangeException index is not a valid index in the IList. NotSupportedException The IList is read-only. -or- The IList has a fixed size. NullReferenceException value is null reference in the IList. | Edit this page View Source Remove(object?) Removes the first occurrence of a specific object from the IList. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public void Remove(object? value) Parameters Type Name Description object value The object to remove from the IList. Exceptions Type Condition NotSupportedException The IList is read-only. -or- The IList has a fixed size. | Edit this page View Source RemoveAt(int) Removes the IList item at the specified index. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public void RemoveAt(int index) Parameters Type Name Description int index The zero-based index of the item to remove. Exceptions Type Condition ArgumentOutOfRangeException index is not a valid index in the IList. NotSupportedException The IList is read-only. -or- The IList has a fixed size. Operators | Edit this page View Source implicit operator EncodedBytes(in byte[]) Cast as EncodedBytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator EncodedBytes(in byte[] data) Parameters Type Name Description byte[] data Data Returns Type Description EncodedBytes | Edit this page View Source implicit operator EncodedBytes(in Memory<byte>) Cast as EncodedBytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator EncodedBytes(in Memory<byte> data) Parameters Type Name Description Memory<byte> data Data Returns Type Description EncodedBytes | Edit this page View Source implicit operator EncodedBytes(in ReadOnlyMemory<byte>) Cast as EncodedBytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator EncodedBytes(in ReadOnlyMemory<byte> data) Parameters Type Name Description ReadOnlyMemory<byte> data Data Returns Type Description EncodedBytes | Edit this page View Source implicit operator EncodedBytes(in ReadOnlySpan<byte>) Cast as EncodedBytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator EncodedBytes(in ReadOnlySpan<byte> data) Parameters Type Name Description ReadOnlySpan<byte> data Data Returns Type Description EncodedBytes | Edit this page View Source implicit operator EncodedBytes(in Span<byte>) Cast as EncodedBytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator EncodedBytes(in Span<byte> data) Parameters Type Name Description Span<byte> data Data Returns Type Description EncodedBytes | Edit this page View Source implicit operator EncodedBytes(in string) Cast as EncodedBytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator EncodedBytes(in string data) Parameters Type Name Description string data Data Returns Type Description EncodedBytes | Edit this page View Source implicit operator byte[](in EncodedBytes) Cast as byte array Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator byte[](in EncodedBytes eb) Parameters Type Name Description EncodedBytes eb EncodedBytes Returns Type Description byte[] | Edit this page View Source implicit operator char[](in EncodedBytes) Cast as char array Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator char[](in EncodedBytes eb) Parameters Type Name Description EncodedBytes eb EncodedBytes Returns Type Description char[] | Edit this page View Source implicit operator int(in EncodedBytes) Cast as length Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator int(in EncodedBytes eb) Parameters Type Name Description EncodedBytes eb EncodedBytes Returns Type Description int | Edit this page View Source implicit operator Memory<char>(in EncodedBytes) Cast as char memory Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator Memory<char>(in EncodedBytes eb) Parameters Type Name Description EncodedBytes eb EncodedBytes Returns Type Description Memory<char> | Edit this page View Source implicit operator ReadOnlyMemory<char>(in EncodedBytes) Cast as char memory Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator ReadOnlyMemory<char>(in EncodedBytes eb) Parameters Type Name Description EncodedBytes eb EncodedBytes Returns Type Description ReadOnlyMemory<char> | Edit this page View Source implicit operator ReadOnlySpan<char>(in EncodedBytes) Cast as char span Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator ReadOnlySpan<char>(in EncodedBytes eb) Parameters Type Name Description EncodedBytes eb EncodedBytes Returns Type Description ReadOnlySpan<char> | Edit this page View Source implicit operator Span<char>(in EncodedBytes) Cast as char span Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator Span<char>(in EncodedBytes eb) Parameters Type Name Description EncodedBytes eb EncodedBytes Returns Type Description Span<char> | Edit this page View Source implicit operator string(in EncodedBytes) Cast as string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator string(in EncodedBytes eb) Parameters Type Name Description EncodedBytes eb EncodedBytes Returns Type Description string Implements IList ICollection IEnumerable IStructuralComparable IStructuralEquatable IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.EndPointAttribute.html": {
    "href": "api/wan24.Core.EndPointAttribute.html",
    "title": "Class EndPointAttribute | wan24-Core",
    "keywords": "Class EndPointAttribute Endpoint validation attribute (for validating string as IPEndPoint or HostEndPoint) Inheritance object Attribute ValidationAttribute ValidationAttributeBase EndPointAttribute Inherited Members ValidationAttributeBase.GetErrorMessage(in ValidationContext, in string) ValidationAttributeBase.ErrorMessageFormatter ValidationAttribute.FormatErrorMessage(string) ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24CoreValidation.dll Syntax public class EndPointAttribute : ValidationAttributeBase Remarks Constructor Constructors | Edit this page View Source EndPointAttribute(params string[]) Endpoint validation attribute (for validating string as IPEndPoint or HostEndPoint) Declaration public EndPointAttribute(params string[] allowedIpSubNets) Parameters Type Name Description string[] allowedIpSubNets Allowed IP sub-nets (CIDR notation; the value needs to fit into one of these; if none are given, the value only needs to be a valid sub-net) Remarks Constructor Properties | Edit this page View Source AllowIPv4 Allow an IPv4 sub-net? Declaration public bool AllowIPv4 { get; set; } Property Value Type Description bool | Edit this page View Source AllowIPv6 Allow an IPv6 sub-net? Declaration public bool AllowIPv6 { get; set; } Property Value Type Description bool | Edit this page View Source AllowedIpSubnets Allowed IP sub-nets (CIDR notation; the value needs to fit into one of these; if none are given, the value only needs to be a valid sub-net) Declaration public FrozenSet<IpSubNet> AllowedIpSubnets { get; } Property Value Type Description FrozenSet<IpSubNet> Methods | Edit this page View Source IsValid(object?, ValidationContext) Validates the specified value with respect to the current validation attribute. Declaration protected override ValidationResult? IsValid(object? value, ValidationContext validationContext) Parameters Type Name Description object value The value to validate. ValidationContext validationContext The context information about the validation operation. Returns Type Description ValidationResult An instance of the ValidationResult class. Overrides ValidationAttribute.IsValid(object, ValidationContext) Exceptions Type Condition InvalidOperationException The current attribute is malformed. NotImplementedException IsValid(object, ValidationContext) has not been implemented by a derived class. Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.EnumExtensions.html": {
    "href": "api/wan24.Core.EnumExtensions.html",
    "title": "Class EnumExtensions | wan24-Core",
    "keywords": "Class EnumExtensions Enumeration extensions Inheritance object EnumExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class EnumExtensions Methods | Edit this page View Source CastType<T>(object) Cast a type Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static T CastType<T>(object value) where T : struct, IConvertible Parameters Type Name Description object value Enumeration value Returns Type Description T Numeric value Type Parameters Name Description T Numeric result type | Edit this page View Source ContainsAllFlags<T>(T, in T) Determine if an enumeration value contains all of the given flags Declaration public static bool ContainsAllFlags<T>(this T value, in T flags) where T : struct, Enum, IConvertible Parameters Type Name Description T value Value T flags Flags Returns Type Description bool Contains all flags? Type Parameters Name Description T Enumeration type | Edit this page View Source ContainsAnyFlag<T>(T, params T[]) Determine if an enumeration value contains any of the given flags Declaration public static bool ContainsAnyFlag<T>(this T value, params T[] flags) where T : struct, Enum, IConvertible Parameters Type Name Description T value Value T[] flags Flags Returns Type Description bool Contains any flags? Type Parameters Name Description T Enumeration type | Edit this page View Source GetContainedFlags<T>(T, params T[]) Get contained flags Declaration public static IEnumerable<T> GetContainedFlags<T>(this T value, params T[] flags) where T : struct, Enum, IConvertible Parameters Type Name Description T value Value T[] flags Flags Returns Type Description IEnumerable<T> Contained flags Type Parameters Name Description T Enumeration type | Edit this page View Source GetEnumInfo(Type) Get enumeration information Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static IEnumInfo GetEnumInfo(this Type type) Parameters Type Name Description Type type Enumeration type Returns Type Description IEnumInfo Information | Edit this page View Source GetInfo<T>() Get enumeration information Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static EnumInfo<T> GetInfo<T>() where T : struct, Enum, IConvertible Returns Type Description EnumInfo<T> Information Type Parameters Name Description T Enumeration type | Edit this page View Source GetInfo<T>(T) Get enumeration information Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static EnumInfo<T> GetInfo<T>(this T value) where T : struct, Enum, IConvertible Parameters Type Name Description T value Value Returns Type Description EnumInfo<T> Information Type Parameters Name Description T Enumeration type | Edit this page View Source IsFlag<T>(T) Determine if a mixed enumeration value is a flag Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsFlag<T>(this T value) where T : struct, Enum, IConvertible Parameters Type Name Description T value Value Returns Type Description bool Is a flag? Type Parameters Name Description T Enumeration type | Edit this page View Source IsValidEnumerationValue(object) Determine if an enumeration value is valid Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsValidEnumerationValue(this object value) Parameters Type Name Description object value Value Returns Type Description bool Is valid? | Edit this page View Source IsValidEnumerationValue<T>(T) Determine if an enumeration value is valid Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsValidEnumerationValue<T>(this T value) where T : struct, Enum, IConvertible Parameters Type Name Description T value Value Returns Type Description bool Is valid? Type Parameters Name Description T | Edit this page View Source IsValid<T>(T) Determine if an enumeration value is valid Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsValid<T>(this T value) where T : struct, Enum, IConvertible Parameters Type Name Description T value Value Returns Type Description bool Is valid? Type Parameters Name Description T Enumeration type | Edit this page View Source IsValue<T>(T) Determine if a mixed enumeration value is a value (not a flag) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsValue<T>(this T value) where T : struct, Enum, IConvertible Parameters Type Name Description T value Value Returns Type Description bool Is a value (not a flag)? Type Parameters Name Description T Enumeration type | Edit this page View Source OnlyFlags<T>(T) Get only the flags from a mixed enumeration flags value Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static T OnlyFlags<T>(this T value) where T : struct, Enum, IConvertible Parameters Type Name Description T value Value Returns Type Description T Only flags Type Parameters Name Description T Enumeration type | Edit this page View Source RemoveFlags<T>(T) Remove flags from a mixed enumeration flags value Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static T RemoveFlags<T>(this T value) where T : struct, Enum, IConvertible Parameters Type Name Description T value Value Returns Type Description T Value without flags Type Parameters Name Description T Enumeration type"
  },
  "api/wan24.Core.EnumInfo-1.html": {
    "href": "api/wan24.Core.EnumInfo-1.html",
    "title": "Class EnumInfo<T> | wan24-Core",
    "keywords": "Class EnumInfo<T> Enumeration information Inheritance object EnumInfo<T> Implements IEnumInfo<T> IEnumInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class EnumInfo<T> : IEnumInfo<T>, IEnumInfo where T : struct, Enum, IConvertible Type Parameters Name Description T Enumeration type Constructors | Edit this page View Source EnumInfo() Constructor Declaration public EnumInfo() Fields | Edit this page View Source FLAGS_NAME Flags value name Declaration public const string FLAGS_NAME = \"FLAGS\" Field Value Type Description string Properties | Edit this page View Source Default Default value Declaration public static T Default { get; } Property Value Type Description T | Edit this page View Source DefaultValue Default value Declaration public Enum DefaultValue { get; } Property Value Type Description Enum | Edit this page View Source DisplayTexts Value display texts Declaration public static FrozenDictionary<string, string> DisplayTexts { get; } Property Value Type Description FrozenDictionary<string, string> | Edit this page View Source EnumFlagValues Flag values Declaration public FrozenSet<T> EnumFlagValues { get; } Property Value Type Description FrozenSet<T> | Edit this page View Source EnumKeyValues All enumeration keys and their enumeration values Declaration public FrozenDictionary<string, T> EnumKeyValues { get; } Property Value Type Description FrozenDictionary<string, T> | Edit this page View Source EnumNames Enumeration names Declaration public FrozenSet<string> EnumNames { get; } Property Value Type Description FrozenSet<string> | Edit this page View Source EnumValues Enumeration values Declaration public FrozenSet<T> EnumValues { get; } Property Value Type Description FrozenSet<T> | Edit this page View Source FlagValues Flag values Declaration public static FrozenSet<T> FlagValues { get; } Property Value Type Description FrozenSet<T> | Edit this page View Source Flags Flags value Declaration public static object Flags { get; } Property Value Type Description object | Edit this page View Source FlagsValue Flags Declaration public object FlagsValue { get; } Property Value Type Description object | Edit this page View Source HasFlags Has the FlagsAttribute attribute? Declaration public bool HasFlags { get; } Property Value Type Description bool | Edit this page View Source HasFlagsAttribute Has the FlagsAttribute attribute? Declaration public static bool HasFlagsAttribute { get; } Property Value Type Description bool | Edit this page View Source IsMixed Is a mixed enumeration which contains values and flags? Declaration public bool IsMixed { get; } Property Value Type Description bool | Edit this page View Source IsMixedEnum Is a mixed enumeration which contains values and flags? Declaration public static bool IsMixedEnum { get; } Property Value Type Description bool | Edit this page View Source IsUnsigned Is the numeric value unsigned? Declaration public static bool IsUnsigned { get; } Property Value Type Description bool | Edit this page View Source IsUnsignedNumeric Is the numeric value unsigned? Declaration public bool IsUnsignedNumeric { get; } Property Value Type Description bool | Edit this page View Source KeyValues All enumeration keys and their enumeration values Declaration public static FrozenDictionary<string, T> KeyValues { get; } Property Value Type Description FrozenDictionary<string, T> | Edit this page View Source Names Enumeration names Declaration public static FrozenSet<string> Names { get; } Property Value Type Description FrozenSet<string> | Edit this page View Source NumericEnumValues All enumeration values and their numeric values as dictionary Declaration public FrozenDictionary<string, object> NumericEnumValues { get; } Property Value Type Description FrozenDictionary<string, object> | Edit this page View Source NumericValues All enumeration values and their numeric values as dictionary Declaration public static FrozenDictionary<string, object> NumericValues { get; } Property Value Type Description FrozenDictionary<string, object> | Edit this page View Source ValueDisplayTexts Value display texts Declaration public FrozenDictionary<string, string> ValueDisplayTexts { get; } Property Value Type Description FrozenDictionary<string, string> | Edit this page View Source Values Enumeration values Declaration public static FrozenSet<T> Values { get; } Property Value Type Description FrozenSet<T> Methods | Edit this page View Source IsValid(in T) Determine if a value is valid Declaration public static bool IsValid(in T value) Parameters Type Name Description T value Value Returns Type Description bool Is valid? | Edit this page View Source IsValidValue(in object) Determine if the enumeration value is valid Declaration public bool IsValidValue(in object value) Parameters Type Name Description object value Value Returns Type Description bool If the value is value | Edit this page View Source IsValidValue(in T) Determine if the enumeration value is valid Declaration public bool IsValidValue(in T value) Parameters Type Name Description T value Value Returns Type Description bool If the value is value Implements IEnumInfo<T> IEnumInfo Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.EnumerableExtensions.html": {
    "href": "api/wan24.Core.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | wan24-Core",
    "keywords": "Class EnumerableExtensions Enumerable extensions Inheritance object EnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class EnumerableExtensions Methods | Edit this page View Source ChunkEnum<T>(IEnumerable<T>, int) Chunk an enumerable Declaration public static IEnumerable<T[]> ChunkEnum<T>(this IEnumerable<T> enumerable, int chunkSize) Parameters Type Name Description IEnumerable<T> enumerable Enumerable int chunkSize Chunk size Returns Type Description IEnumerable<T[]> Chunks Type Parameters Name Description T Item type | Edit this page View Source Combine<T>(IEnumerable<IEnumerable<T>>) Combine enumerables Declaration public static IEnumerable<T> Combine<T>(this IEnumerable<IEnumerable<T>> enumerables) Parameters Type Name Description IEnumerable<IEnumerable<T>> enumerables Enumerables Returns Type Description IEnumerable<T> Combined enumerable Type Parameters Name Description T Item type | Edit this page View Source ContainsAll<T>(IEnumerable<T>, params T[]) Determine if all values are contained Declaration public static bool ContainsAll<T>(this IEnumerable<T> enumerable, params T[] values) Parameters Type Name Description IEnumerable<T> enumerable Enumerable T[] values Required values Returns Type Description bool All contained? Type Parameters Name Description T Value type | Edit this page View Source ContainsAny<T>(IEnumerable<T>, params T[]) Determine if any of the values are contained Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool ContainsAny<T>(this IEnumerable<T> enumerable, params T[] values) Parameters Type Name Description IEnumerable<T> enumerable Enumerable T[] values Values Returns Type Description bool Any contained? Type Parameters Name Description T Value type | Edit this page View Source ElementIndex<T>(IEnumerable<T>, in T) Get the element index Declaration public static int ElementIndex<T>(this IEnumerable<T> enumerable, in T value) Parameters Type Name Description IEnumerable<T> enumerable Enumerable T value Element Returns Type Description int Element index or -1, if not enumerated Type Parameters Name Description T Element type"
  },
  "api/wan24.Core.EnumerableStream.html": {
    "href": "api/wan24.Core.EnumerableStream.html",
    "title": "Class EnumerableStream | wan24-Core",
    "keywords": "Class EnumerableStream Enumerable source stream Inheritance object MarshalByRefObject Stream StreamBase EnumerableStream Implements IStream IDisposableObject IDisposable IAsyncDisposable Inherited Members StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.Close() StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class EnumerableStream : StreamBase, IStream, IDisposableObject, IDisposable, IAsyncDisposable Remarks Constructor Constructors | Edit this page View Source EnumerableStream(in IEnumerable<byte>) Constructor Declaration public EnumerableStream(in IEnumerable<byte> enumerable) Parameters Type Name Description IEnumerable<byte> enumerable Enumerable | Edit this page View Source EnumerableStream(in IEnumerator<byte>) Enumerable source stream Declaration public EnumerableStream(in IEnumerator<byte> enumerator) Parameters Type Name Description IEnumerator<byte> enumerator Enumerator Remarks Constructor Fields | Edit this page View Source Enumerator Enumerator Declaration protected readonly IEnumerator<byte> Enumerator Field Value Type Description IEnumerator<byte> | Edit this page View Source _Position Position byte offset Declaration protected long _Position Field Value Type Description long Properties | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides Stream.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides Stream.CanSeek | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides Stream.CanWrite | Edit this page View Source EndOfStream Declaration public bool EndOfStream { get; protected set; } Property Value Type Description bool | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides Stream.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides Stream.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Methods | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides StreamBase.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override Task DisposeCore() Returns Type Description Task Overrides StreamBase.DisposeCore() | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides Stream.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides Stream.Read(Span<byte>) | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides Stream.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides Stream.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. Implements IStream IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.EnumerationBase-1.html": {
    "href": "api/wan24.Core.EnumerationBase-1.html",
    "title": "Class EnumerationBase<T> | wan24-Core",
    "keywords": "Class EnumerationBase<T> Base class for an enumeration Inheritance object EnumerationBase EnumerationBase<T> Implements IEnumeration IComparable IComparable<T> IEquatable<T> Inherited Members EnumerationBase.HashCode EnumerationBase.LcName EnumerationBase.Value EnumerationBase.Name EnumerationBase.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class EnumerationBase<T> : EnumerationBase, IEnumeration, IComparable, IComparable<T>, IEquatable<T> where T : EnumerationBase<T> Type Parameters Name Description T Final type (should be sealed with a private constructor!) Constructors | Edit this page View Source EnumerationBase(in int, in string) Constructor Declaration protected EnumerationBase(in int value, in string name) Parameters Type Name Description int value Numeric value string name Name Properties | Edit this page View Source AllEnumerationValues Declaration public static IReadOnlyCollection<IEnumeration> AllEnumerationValues { get; } Property Value Type Description IReadOnlyCollection<IEnumeration> | Edit this page View Source AllValues All values Declaration public static IReadOnlyCollection<T> AllValues { get; } Property Value Type Description IReadOnlyCollection<T> | Edit this page View Source KeyValues Declaration public static IReadOnlyDictionary<string, int> KeyValues { get; } Property Value Type Description IReadOnlyDictionary<string, int> | Edit this page View Source ValueKeys Declaration public static IReadOnlyDictionary<int, string> ValueKeys { get; } Property Value Type Description IReadOnlyDictionary<int, string> Methods | Edit this page View Source CompareTo(object?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public override sealed int CompareTo(object? obj) Parameters Type Name Description object obj An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Overrides EnumerationBase.CompareTo(object?) Exceptions Type Condition ArgumentException obj is not the same type as this instance. | Edit this page View Source CompareTo(T?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(T? other) Parameters Type Name Description T other An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override sealed bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source Equals(T?) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(T? other) Parameters Type Name Description T other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Get(int) Get an enumeration value Declaration public static T Get(int value) Parameters Type Name Description int value Value Returns Type Description T Enumeration value | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override sealed int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source Parse(in string) Parse an enumeration value Declaration public static T Parse(in string name) Parameters Type Name Description string name Name Returns Type Description T Enumeration value | Edit this page View Source TryGet(int, out T?) Try parsing an enumeration value Declaration public static bool TryGet(int value, out T? result) Parameters Type Name Description int value Value T result Enumeration value Returns Type Description bool If succeed | Edit this page View Source TryParse(in string, out T?) Try parsing an enumeration value Declaration public static bool TryParse(in string name, out T? result) Parameters Type Name Description string name Name T result Enumeration value Returns Type Description bool If succeed Operators | Edit this page View Source operator ==(in EnumerationBase<T>, in EnumerationBase<T>) Equal Declaration public static bool operator ==(in EnumerationBase<T> a, in EnumerationBase<T> b) Parameters Type Name Description EnumerationBase<T> a A EnumerationBase<T> b B Returns Type Description bool If equal | Edit this page View Source operator >(in EnumerationBase<T>, in EnumerationBase<T>) Greater than Declaration public static bool operator >(in EnumerationBase<T> a, in EnumerationBase<T> b) Parameters Type Name Description EnumerationBase<T> a A EnumerationBase<T> b B Returns Type Description bool If greater than | Edit this page View Source operator >=(in EnumerationBase<T>, in EnumerationBase<T>) Greater or equal to Declaration public static bool operator >=(in EnumerationBase<T> a, in EnumerationBase<T> b) Parameters Type Name Description EnumerationBase<T> a A EnumerationBase<T> b B Returns Type Description bool If greater or equal to | Edit this page View Source implicit operator int(in EnumerationBase<T>) Cast as value Declaration public static implicit operator int(in EnumerationBase<T> e) Parameters Type Name Description EnumerationBase<T> e Enumeration value Returns Type Description int | Edit this page View Source implicit operator string(in EnumerationBase<T>) Cast as name Declaration public static implicit operator string(in EnumerationBase<T> e) Parameters Type Name Description EnumerationBase<T> e Enumeration value Returns Type Description string | Edit this page View Source operator !=(in EnumerationBase<T>, in EnumerationBase<T>) Not equal Declaration public static bool operator !=(in EnumerationBase<T> a, in EnumerationBase<T> b) Parameters Type Name Description EnumerationBase<T> a A EnumerationBase<T> b B Returns Type Description bool If not equal | Edit this page View Source operator <(in EnumerationBase<T>, in EnumerationBase<T>) Lower than Declaration public static bool operator <(in EnumerationBase<T> a, in EnumerationBase<T> b) Parameters Type Name Description EnumerationBase<T> a A EnumerationBase<T> b B Returns Type Description bool If lower than | Edit this page View Source operator <=(in EnumerationBase<T>, in EnumerationBase<T>) Lower or equal to Declaration public static bool operator <=(in EnumerationBase<T> a, in EnumerationBase<T> b) Parameters Type Name Description EnumerationBase<T> a A EnumerationBase<T> b B Returns Type Description bool If lower or equal to Implements IEnumeration IComparable IComparable<T> IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.EnumerationBase.html": {
    "href": "api/wan24.Core.EnumerationBase.html",
    "title": "Class EnumerationBase | wan24-Core",
    "keywords": "Class EnumerationBase Base class for an enumeration Inheritance object EnumerationBase EnumerationBase<T> Implements IEnumeration IComparable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class EnumerationBase : IEnumeration, IComparable Constructors | Edit this page View Source EnumerationBase(in int, in string) Constructor Declaration protected EnumerationBase(in int value, in string name) Parameters Type Name Description int value Numeric value string name Name Fields | Edit this page View Source HashCode Hash code Declaration protected readonly int HashCode Field Value Type Description int | Edit this page View Source LcName Lower case name Declaration protected readonly string LcName Field Value Type Description string Properties | Edit this page View Source Name Name Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source Value Value Declaration public int Value { get; } Property Value Type Description int Methods | Edit this page View Source CompareTo(object?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public abstract int CompareTo(object? obj) Parameters Type Name Description object obj An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions Type Condition ArgumentException obj is not the same type as this instance. | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override sealed string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Implements IEnumeration IComparable Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.EnvironmentService.html": {
    "href": "api/wan24.Core.EnvironmentService.html",
    "title": "Class EnvironmentService | wan24-Core",
    "keywords": "Class EnvironmentService Environment metrics measuring service Inheritance object DisposableBase HostedServiceBase TimedHostedServiceBase EnvironmentService Implements IWillDispose ITimer IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members TimedHostedServiceBase.Timer TimedHostedServiceBase.RunningEvent TimedHostedServiceBase.WorkerSync TimedHostedServiceBase.SyncControl TimedHostedServiceBase._Interval TimedHostedServiceBase.GUID TimedHostedServiceBase.CanPause TimedHostedServiceBase.Interval TimedHostedServiceBase.TimerType TimedHostedServiceBase.LastRun TimedHostedServiceBase.LastDuration TimedHostedServiceBase.NextRun TimedHostedServiceBase.RunOnce TimedHostedServiceBase.SetTimerAsync(double, HostedServiceTimers?, DateTime?, CancellationToken) TimedHostedServiceBase.StartAsync(CancellationToken) TimedHostedServiceBase.StopAsync(CancellationToken) TimedHostedServiceBase.StartTimerAsync(CancellationToken) TimedHostedServiceBase.StopTimerAsync(CancellationToken) TimedHostedServiceBase.AfterStartAsync(CancellationToken) TimedHostedServiceBase.StoppingAsync(CancellationToken) TimedHostedServiceBase.AfterStopAsync(CancellationToken) TimedHostedServiceBase.WorkerAsync() TimedHostedServiceBase.EnableTimerAsync() TimedHostedServiceBase.Dispose(bool) TimedHostedServiceBase.DisposeCore() TimedHostedServiceBase.OnRan TimedHostedServiceBase.RaiseOnRan() HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.BeforeStopAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.AfterPauseAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.AfterResumeAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.OnException HostedServiceBase.RaiseOnException() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class EnvironmentService : TimedHostedServiceBase, IWillDispose, ITimer, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source EnvironmentService(in double, in HostedServiceTimers, in DateTime?) Constructor Declaration public EnvironmentService(in double interval, in HostedServiceTimers timer = HostedServiceTimers.Default, in DateTime? nextRun = null) Parameters Type Name Description double interval Interval in ms HostedServiceTimers timer Timer type DateTime? nextRun Fixed next run time Properties | Edit this page View Source IncludeSummaries Include summaries? Declaration public bool IncludeSummaries { get; set; } Property Value Type Description bool | Edit this page View Source LockedObjects Running timers count average Declaration public long LockedObjects { get; protected set; } Property Value Type Description long | Edit this page View Source ObjectReferences Average number of references to stored object instances Declaration public double ObjectReferences { get; protected set; } Property Value Type Description double | Edit this page View Source PreForked Average number of pre-forked object instances Declaration public long PreForked { get; protected set; } Property Value Type Description long | Edit this page View Source QueuedItems Average number of enqueued items to be processed by service workers Declaration public long QueuedItems { get; protected set; } Property Value Type Description long | Edit this page View Source RunningServices Running service count average Declaration public long RunningServices { get; protected set; } Property Value Type Description long | Edit this page View Source RunningTimers Running timers count average Declaration public long RunningTimers { get; protected set; } Property Value Type Description long | Edit this page View Source Services Service count average Declaration public long Services { get; protected set; } Property Value Type Description long | Edit this page View Source State Status information Declaration public override IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Overrides TimedHostedServiceBase.State | Edit this page View Source StoredObjects Average number of stored object instances Declaration public long StoredObjects { get; protected set; } Property Value Type Description long | Edit this page View Source Timers Timers count average Declaration public long Timers { get; protected set; } Property Value Type Description long | Edit this page View Source WorkingSet Working set average in bytes Declaration public long WorkingSet { get; protected set; } Property Value Type Description long Methods | Edit this page View Source TimedWorkerAsync() Timed service worker Declaration protected override Task TimedWorkerAsync() Returns Type Description Task Overrides TimedHostedServiceBase.TimedWorkerAsync() Implements IWillDispose ITimer IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.EquatableArray-1.EqualityComparer.html": {
    "href": "api/wan24.Core.EquatableArray-1.EqualityComparer.html",
    "title": "Class EquatableArray<T>.EqualityComparer | wan24-Core",
    "keywords": "Class EquatableArray<T>.EqualityComparer Equality comparer Inheritance object EquatableArray<T>.EqualityComparer Implements IEqualityComparer<EquatableArray<T>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class EquatableArray<T>.EqualityComparer : IEqualityComparer<EquatableArray<T>> Constructors | Edit this page View Source EqualityComparer() Constructor Declaration public EqualityComparer() Methods | Edit this page View Source Equals(EquatableArray<T>, EquatableArray<T>) Determines whether the specified objects are equal. Declaration public bool Equals(EquatableArray<T> x, EquatableArray<T> y) Parameters Type Name Description EquatableArray<T> x The first object of type T to compare. EquatableArray<T> y The second object of type T to compare. Returns Type Description bool true if the specified objects are equal; otherwise, false. | Edit this page View Source GetHashCode(EquatableArray<T>) Returns a hash code for the specified object. Declaration public int GetHashCode(EquatableArray<T> obj) Parameters Type Name Description EquatableArray<T> obj The object for which a hash code is to be returned. Returns Type Description int A hash code for the specified object. Exceptions Type Condition ArgumentNullException The type of obj is a reference type and obj is null. Implements IEqualityComparer<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.EquatableArray-1.html": {
    "href": "api/wan24.Core.EquatableArray-1.html",
    "title": "Struct EquatableArray<T> | wan24-Core",
    "keywords": "Struct EquatableArray<T> Equatable array (validates sequence validity, not object references) Implements ICloneable IList ICollection IEnumerable IStructuralComparable IStructuralEquatable IEquatable<T[]> IEquatable<EquatableArray<T>> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public readonly struct EquatableArray<T> : ICloneable, IList, ICollection, IEnumerable, IStructuralComparable, IStructuralEquatable, IEquatable<T[]>, IEquatable<EquatableArray<T>> Type Parameters Name Description T Element type Constructors | Edit this page View Source EquatableArray(in T[]) Constructor Declaration public EquatableArray(in T[] array) Parameters Type Name Description T[] array Hosted array Fields | Edit this page View Source Array Hosted array Declaration public readonly T[] Array Field Value Type Description T[] | Edit this page View Source HashCode Hash code Declaration public readonly int HashCode Field Value Type Description int Properties | Edit this page View Source IsFixedSize Gets a value indicating whether the IList has a fixed size. Declaration public bool IsFixedSize { get; } Property Value Type Description bool true if the IList has a fixed size; otherwise, false. | Edit this page View Source IsReadOnly Gets a value indicating whether the IList is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool true if the IList is read-only; otherwise, false. | Edit this page View Source IsSynchronized Gets a value indicating whether access to the ICollection is synchronized (thread safe). Declaration public bool IsSynchronized { get; } Property Value Type Description bool true if access to the ICollection is synchronized (thread safe); otherwise, false. | Edit this page View Source this[Index] Declaration public T this[Index index] { get; set; } Parameters Type Name Description Index index Property Value Type Description T | Edit this page View Source this[int] Declaration public T this[int index] { get; set; } Parameters Type Name Description int index Property Value Type Description T | Edit this page View Source Length Length as 32 bit integer Declaration public int Length { get; } Property Value Type Description int | Edit this page View Source LongLength Length as 64 bit integer Declaration public long LongLength { get; } Property Value Type Description long | Edit this page View Source SyncRoot Gets an object that can be used to synchronize access to the ICollection. Declaration public object SyncRoot { get; } Property Value Type Description object An object that can be used to synchronize access to the ICollection. Methods | Edit this page View Source Clear() Removes all items from the IList. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public void Clear() Exceptions Type Condition NotSupportedException The IList is read-only. | Edit this page View Source CloneArray() Get a clone of the hosted array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public T[] CloneArray() Returns Type Description T[] Clone | Edit this page View Source CompareTo(object?, IComparer) Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public int CompareTo(object? other, IComparer comparer) Parameters Type Name Description object other The object to compare with the current instance. IComparer comparer An object that compares members of the current collection object with the corresponding members of other. Returns Type Description int A signed integer that indicates the relationship of the current collection object to other in the sort order: - If less than 0, the current instance precedes other. - If 0, the current instance and other are equal. - If greater than 0, the current instance follows other. Return value Description -1 The current instance precedes other. 0 The current instance and other are equal. 1 The current instance follows other. Exceptions Type Condition ArgumentException This instance and other are not the same type. | Edit this page View Source Contains(object?) Determines whether the IList contains a specific value. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public bool Contains(object? value) Parameters Type Name Description object value The object to locate in the IList. Returns Type Description bool true if the object is found in the IList; otherwise, false. | Edit this page View Source Contains(in T) Determine if a value is contained Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public bool Contains(in T value) Parameters Type Name Description T value Value Returns Type Description bool If contained | Edit this page View Source CopyTo(Array, int) Copies the elements of the ICollection to an Array, starting at a particular Array index. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. int index The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException index is less than zero. ArgumentException array is multidimensional. -or- The number of elements in the source ICollection is greater than the available space from index to the end of the destination array. -or- The type of the source ICollection cannot be cast automatically to the type of the destination array. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source Equals(object?, IEqualityComparer) Determines whether an object is structurally equal to the current instance. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public bool Equals(object? other, IEqualityComparer comparer) Parameters Type Name Description object other The object to compare with the current instance. IEqualityComparer comparer An object that determines whether the current instance and other are equal. Returns Type Description bool true if the two objects are equal; otherwise, false. | Edit this page View Source Equals(T[]?) Indicates whether the current object is equal to another object of the same type. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public bool Equals(T[]? other) Parameters Type Name Description T[] other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(EquatableArray<T>) Indicates whether the current object is equal to another object of the same type. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public bool Equals(EquatableArray<T> other) Parameters Type Name Description EquatableArray<T> other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through a collection. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator object that can be used to iterate through the collection. | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source GetHashCode(IEqualityComparer) Returns a hash code for the current instance. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public int GetHashCode(IEqualityComparer comparer) Parameters Type Name Description IEqualityComparer comparer An object that computes the hash code of the current object. Returns Type Description int The hash code for the current instance. | Edit this page View Source IndexOf(object?) Determines the index of a specific item in the IList. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public int IndexOf(object? value) Parameters Type Name Description object value The object to locate in the IList. Returns Type Description int The index of value if found in the list; otherwise, -1. | Edit this page View Source IndexOf(in T) Get the index of a value Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public int IndexOf(in T value) Parameters Type Name Description T value Value Returns Type Description int Index or -1, if not found Operators | Edit this page View Source operator ==(in T[], in EquatableArray<T>) Equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in T[] a, in EquatableArray<T> b) Parameters Type Name Description T[] a A EquatableArray<T> b B Returns Type Description bool If equals | Edit this page View Source operator ==(in EquatableArray<T>, in T[]) Equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in EquatableArray<T> a, in T[] b) Parameters Type Name Description EquatableArray<T> a A T[] b B Returns Type Description bool If equals | Edit this page View Source operator ==(in EquatableArray<T>, in EquatableArray<T>) Equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in EquatableArray<T> a, in EquatableArray<T> b) Parameters Type Name Description EquatableArray<T> a A EquatableArray<T> b B Returns Type Description bool If equals | Edit this page View Source implicit operator EquatableArray<T>(in T[]) Cast as equatable array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator EquatableArray<T>(in T[] arr) Parameters Type Name Description T[] arr Array Returns Type Description EquatableArray<T> | Edit this page View Source implicit operator T[](in EquatableArray<T>) Cast as array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T[](in EquatableArray<T> arr) Parameters Type Name Description EquatableArray<T> arr Equatable array Returns Type Description T[] | Edit this page View Source operator !=(in T[], in EquatableArray<T>) Not equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in T[] a, in EquatableArray<T> b) Parameters Type Name Description T[] a A EquatableArray<T> b B Returns Type Description bool If not equals | Edit this page View Source operator !=(in EquatableArray<T>, in T[]) Not equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in EquatableArray<T> a, in T[] b) Parameters Type Name Description EquatableArray<T> a A T[] b B Returns Type Description bool If not equals | Edit this page View Source operator !=(in EquatableArray<T>, in EquatableArray<T>) Not equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in EquatableArray<T> a, in EquatableArray<T> b) Parameters Type Name Description EquatableArray<T> a A EquatableArray<T> b B Returns Type Description bool If not equals Implements ICloneable IList ICollection IEnumerable IStructuralComparable IStructuralEquatable IEquatable<T> IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.EquatableArray.html": {
    "href": "api/wan24.Core.EquatableArray.html",
    "title": "Class EquatableArray | wan24-Core",
    "keywords": "Class EquatableArray Equatable array helper Inheritance object EquatableArray Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class EquatableArray Methods | Edit this page View Source AsEquatableArray<T>(T[]) Get as equatable array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static EquatableArray<T> AsEquatableArray<T>(this T[] array) Parameters Type Name Description T[] array Array Returns Type Description EquatableArray<T> Equatable array Type Parameters Name Description T Element type | Edit this page View Source From<T>(in T[]) Create from an array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static EquatableArray<T> From<T>(in T[] array) Parameters Type Name Description T[] array Array Returns Type Description EquatableArray<T> Equatable array Type Parameters Name Description T Element type"
  },
  "api/wan24.Core.ErrorHandling.ErrorHandler_Delegate.html": {
    "href": "api/wan24.Core.ErrorHandling.ErrorHandler_Delegate.html",
    "title": "Delegate ErrorHandling.ErrorHandler_Delegate | wan24-Core",
    "keywords": "Delegate ErrorHandling.ErrorHandler_Delegate Delegate for an error handler Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void ErrorHandling.ErrorHandler_Delegate(ErrorInfo ex) Parameters Type Name Description ErrorInfo ex Exception Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ErrorHandling.html": {
    "href": "api/wan24.Core.ErrorHandling.html",
    "title": "Class ErrorHandling | wan24-Core",
    "keywords": "Class ErrorHandling Error handling Inheritance object ErrorHandling Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ErrorHandling Fields | Edit this page View Source BOOTSTRAPPER_ERROR Bootstrapper error source Declaration public const int BOOTSTRAPPER_ERROR = 6 Field Value Type Description int | Edit this page View Source DELAYED_SERVICE_ERROR Delayed service error source Declaration public const int DELAYED_SERVICE_ERROR = 2 Field Value Type Description int | Edit this page View Source DISPOSABLE_ADAPTER_ERROR Disposable adapter error source Declaration public const int DISPOSABLE_ADAPTER_ERROR = 3 Field Value Type Description int | Edit this page View Source Errors Collected errors (synchronized using SyncObject; enable by setting ErrorCollectingHandler(ErrorInfo) as ErrorHandler or calling ErrorCollectingHandler(ErrorInfo) from within your custom error handler) Declaration public static readonly Queue<ErrorInfo> Errors Field Value Type Description Queue<ErrorInfo> | Edit this page View Source SERVICE_ERROR Service error source Declaration public const int SERVICE_ERROR = 4 Field Value Type Description int | Edit this page View Source SHUTDOWN_ERROR Shutdown error source Declaration public const int SHUTDOWN_ERROR = 7 Field Value Type Description int | Edit this page View Source SyncObject An object for thread synchronization Declaration public static readonly object SyncObject Field Value Type Description object | Edit this page View Source UNHANDLED_EXCEPTION Unhandled exception error source Declaration public const int UNHANDLED_EXCEPTION = 1 Field Value Type Description int | Edit this page View Source UNSPECIFIED_ERROR_SOURCE Unspecified error source ID Declaration public const int UNSPECIFIED_ERROR_SOURCE = 0 Field Value Type Description int Properties | Edit this page View Source DebugOnError Break the attached debugger on error? Declaration public static bool DebugOnError { get; set; } Property Value Type Description bool | Edit this page View Source ErrorCountLimit Errors count limit (0 for unlimited) Declaration public static int ErrorCountLimit { get; set; } Property Value Type Description int | Edit this page View Source ErrorHandler Error handler (first chance before OnError event handlers) Declaration public static ErrorHandling.ErrorHandler_Delegate? ErrorHandler { get; set; } Property Value Type Description ErrorHandling.ErrorHandler_Delegate | Edit this page View Source ExceptionCount Exception counter (volatile value) Declaration public static int ExceptionCount { get; set; } Property Value Type Description int Methods | Edit this page View Source DefaultErrorHandler(ErrorInfo) Default error handler Declaration public static void DefaultErrorHandler(ErrorInfo info) Parameters Type Name Description ErrorInfo info Error information | Edit this page View Source ErrorCollectingHandler(ErrorInfo) An error collecting handler which stores exceptions in Errors (may be used as default error handler) Declaration public static void ErrorCollectingHandler(ErrorInfo ex) Parameters Type Name Description ErrorInfo ex Exception | Edit this page View Source Handle(in ErrorInfo) Handle an error (writes to the logging, too!) Declaration public static void Handle(in ErrorInfo ex) Parameters Type Name Description ErrorInfo ex Exception Events | Edit this page View Source OnError Raised ion error Declaration public static event ErrorHandling.ErrorHandler_Delegate? OnError Event Type Type Description ErrorHandling.ErrorHandler_Delegate"
  },
  "api/wan24.Core.ErrorInfo.html": {
    "href": "api/wan24.Core.ErrorInfo.html",
    "title": "Class ErrorInfo | wan24-Core",
    "keywords": "Class ErrorInfo Error information for ErrorHandling Inheritance object ErrorInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ErrorInfo Constructors | Edit this page View Source ErrorInfo(in Exception, in int, in object?) Constructor Declaration public ErrorInfo(in Exception ex, in int source = 0, in object? tag = null) Parameters Type Name Description Exception ex Exception int source Source ID object tag Any tagged object | Edit this page View Source ErrorInfo(in string, in Exception, in int, in object?) Constructor Declaration public ErrorInfo(in string info, in Exception ex, in int source = 0, in object? tag = null) Parameters Type Name Description string info Information Exception ex Exception int source Source ID object tag Any tagged object Properties | Edit this page View Source Created Created time Declaration public DateTime Created { get; } Property Value Type Description DateTime | Edit this page View Source Exception Exception Declaration public Exception Exception { get; } Property Value Type Description Exception | Edit this page View Source Info Information Declaration public string? Info { get; } Property Value Type Description string | Edit this page View Source Source Error source ID Declaration public int Source { get; } Property Value Type Description int | Edit this page View Source Tag Any tagged object Declaration public object? Tag { get; } Property Value Type Description object Methods | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Operators | Edit this page View Source implicit operator ErrorInfo(in Exception) Create an instance from an Exception Declaration public static implicit operator ErrorInfo(in Exception ex) Parameters Type Name Description Exception ex Exception Returns Type Description ErrorInfo | Edit this page View Source implicit operator Exception(in ErrorInfo) Cast as Exception Declaration public static implicit operator Exception(in ErrorInfo info) Parameters Type Name Description ErrorInfo info ErrorInfo Returns Type Description Exception | Edit this page View Source implicit operator string(in ErrorInfo) Cast as string Declaration public static implicit operator string(in ErrorInfo info) Parameters Type Name Description ErrorInfo info ErrorInfo Returns Type Description string Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.EventThrottle.html": {
    "href": "api/wan24.Core.EventThrottle.html",
    "title": "Class EventThrottle | wan24-Core",
    "keywords": "Class EventThrottle Event throttle (allow to raise once within N ms) Inheritance object DisposableBase EventThrottle FileSystemEvents.FileSystemEventThrottle MultiFileSystemEvents.MultiFileSystemEventThrottle Implements IWillDispose IEventThrottle IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class EventThrottle : DisposableBase, IWillDispose, IEventThrottle, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source EventThrottle(in int) Constructor Declaration protected EventThrottle(in int timeout) Parameters Type Name Description int timeout Timeout in ms Fields | Edit this page View Source Timer Timer Declaration protected readonly Timer Timer Field Value Type Description Timer | Edit this page View Source _Timeout Timeout in ms Declaration protected int _Timeout Field Value Type Description int Properties | Edit this page View Source FirstRaised First raised time (or MinValue when never raised) Declaration public DateTime FirstRaised { get; protected set; } Property Value Type Description DateTime | Edit this page View Source IsThrottling Is throttling? Declaration public bool IsThrottling { get; } Property Value Type Description bool | Edit this page View Source LastRaised Last raised (or MinValue when never raised) Declaration public DateTime LastRaised { get; protected set; } Property Value Type Description DateTime | Edit this page View Source RaisedCount Raised count during throttling Declaration public int RaisedCount { get; protected set; } Property Value Type Description int | Edit this page View Source RaisedTime First raised time during throttling (or MinValue when not raised during throttling) Declaration public DateTime RaisedTime { get; protected set; } Property Value Type Description DateTime | Edit this page View Source SyncObject An object for thread synchronization Declaration public object SyncObject { get; } Property Value Type Description object | Edit this page View Source Timeout Timeout in ms Declaration public int Timeout { get; set; } Property Value Type Description int | Edit this page View Source TotalRaisedCount Total raised count Declaration public long TotalRaisedCount { get; protected set; } Property Value Type Description long | Edit this page View Source TotalThrottledRaisedCount Total throttled raised count Declaration public long TotalThrottledRaisedCount { get; protected set; } Property Value Type Description long Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source HandleEvent(in DateTime, in int) Handle the event Declaration protected abstract void HandleEvent(in DateTime raised, in int raisedCount) Parameters Type Name Description DateTime raised First raised time int raisedCount Raised count | Edit this page View Source Raise() Raise the event Declaration public bool Raise() Returns Type Description bool Was raised? Operators | Edit this page View Source implicit operator bool(in EventThrottle) Cast as throttling-flag Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in EventThrottle throttle) Parameters Type Name Description EventThrottle throttle Throttle Returns Type Description bool Implements IWillDispose IEventThrottle IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.EventWorkerBase.html": {
    "href": "api/wan24.Core.EventWorkerBase.html",
    "title": "Class EventWorkerBase | wan24-Core",
    "keywords": "Class EventWorkerBase Base class for an event worker Inheritance object DisposableBase HostedServiceBase EventWorkerBase Implements IWillDispose IServiceWorker IDisposableObject IDisposable IAsyncDisposable IHostedService Inherited Members HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.AfterStartAsync(CancellationToken) HostedServiceBase.BeforeStopAsync(CancellationToken) HostedServiceBase.StoppingAsync(CancellationToken) HostedServiceBase.AfterStopAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.AfterPauseAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.AfterResumeAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.OnException HostedServiceBase.RaiseOnException() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class EventWorkerBase : HostedServiceBase, IWillDispose, IServiceWorker, IDisposableObject, IDisposable, IAsyncDisposable, IHostedService Constructors | Edit this page View Source EventWorkerBase() Constructor Declaration protected EventWorkerBase() Fields | Edit this page View Source WorkEvent Work event (raised when having work) Declaration protected readonly ResetEvent WorkEvent Field Value Type Description ResetEvent Properties | Edit this page View Source IsWorking Is working? Declaration public virtual bool IsWorking { get; } Property Value Type Description bool Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides HostedServiceBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides HostedServiceBase.DisposeCore() | Edit this page View Source EventWorkerAsync() Worker method (to override and implement the actual work to do, if the work event was raised) Declaration protected abstract Task EventWorkerAsync() Returns Type Description Task | Edit this page View Source RaiseWorkEvent(in CancellationToken) Raise the work event Declaration public virtual void RaiseWorkEvent(in CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token | Edit this page View Source RaiseWorkEventAsync(CancellationToken) Raise the work event Declaration public virtual Task RaiseWorkEventAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source WorkerAsync() Service worker Declaration protected override Task WorkerAsync() Returns Type Description Task Overrides HostedServiceBase.WorkerAsync() Implements IWillDispose IServiceWorker IDisposableObject IDisposable IAsyncDisposable IHostedService Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ExactStream-1.html": {
    "href": "api/wan24.Core.ExactStream-1.html",
    "title": "Class ExactStream<T> | wan24-Core",
    "keywords": "Class ExactStream<T> Exact stream (tries to read exactly the given number of bytes until no bytes were red) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> ExactStream<T> ExactStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.LeaveOpen WrapperStream<T>.State WrapperStream<T>.CanRead WrapperStream<T>.CanSeek WrapperStream<T>.CanWrite WrapperStream<T>.CanTimeout WrapperStream<T>.Length WrapperStream<T>.Position WrapperStream<T>.ReadTimeout WrapperStream<T>.WriteTimeout WrapperStream<T>.Flush() WrapperStream<T>.FlushAsync(CancellationToken) WrapperStream<T>.ReadByte() WrapperStream<T>.Seek(long, SeekOrigin) WrapperStream<T>.SetLength(long) WrapperStream<T>.Write(byte[], int, int) WrapperStream<T>.Write(ReadOnlySpan<byte>) WrapperStream<T>.WriteByte(byte) WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) WrapperStream<T>.CopyTo(Stream, int) WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndRead(IAsyncResult) WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndWrite(IAsyncResult) WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.Close() WrapperStream<T>.Dispose(bool) WrapperStream<T>.DisposeCore() WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ExactStream<T> : WrapperStream<T>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Base stream type Constructors | Edit this page View Source ExactStream(in T, in bool) Constructor Declaration public ExactStream(in T baseStream, in bool leaveOpen = false) Parameters Type Name Description T baseStream Base stream bool leaveOpen Leave the base stream open when disposing? Methods | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides WrapperStream<T>.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides WrapperStream<T>.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ExactStream.html": {
    "href": "api/wan24.Core.ExactStream.html",
    "title": "Class ExactStream | wan24-Core",
    "keywords": "Class ExactStream Exact stream (tries to read exactly the given number of bytes until no bytes were red) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> ExactStream<Stream> ExactStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members ExactStream<Stream>.Read(byte[], int, int) ExactStream<Stream>.Read(Span<byte>) ExactStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) ExactStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.State WrapperStream<Stream>.CanRead WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.Position WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.Flush() WrapperStream<Stream>.FlushAsync(CancellationToken) WrapperStream<Stream>.ReadByte() WrapperStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>.SetLength(long) WrapperStream<Stream>.Write(byte[], int, int) WrapperStream<Stream>.Write(ReadOnlySpan<byte>) WrapperStream<Stream>.WriteByte(byte) WrapperStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) WrapperStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.Dispose(bool) WrapperStream<Stream>.DisposeCore() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ExactStream : ExactStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source ExactStream(in Stream, in bool) Exact stream (tries to read exactly the given number of bytes until no bytes were red) Declaration public ExactStream(in Stream baseStream, in bool leaveOpen = false) Parameters Type Name Description Stream baseStream Base stream bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ExchangeableStream-1.html": {
    "href": "api/wan24.Core.ExchangeableStream-1.html",
    "title": "Class ExchangeableStream<T> | wan24-Core",
    "keywords": "Class ExchangeableStream<T> Exchangeable stream Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> ExchangeableStream<T> ExchangeableStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.LeaveOpen WrapperStream<T>.State WrapperStream<T>.CanRead WrapperStream<T>.CanSeek WrapperStream<T>.CanWrite WrapperStream<T>.CanTimeout WrapperStream<T>.Length WrapperStream<T>.Position WrapperStream<T>.ReadTimeout WrapperStream<T>.WriteTimeout WrapperStream<T>.Flush() WrapperStream<T>.FlushAsync(CancellationToken) WrapperStream<T>.Read(byte[], int, int) WrapperStream<T>.Read(Span<byte>) WrapperStream<T>.ReadByte() WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) WrapperStream<T>.Seek(long, SeekOrigin) WrapperStream<T>.SetLength(long) WrapperStream<T>.Write(byte[], int, int) WrapperStream<T>.Write(ReadOnlySpan<byte>) WrapperStream<T>.WriteByte(byte) WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) WrapperStream<T>.CopyTo(Stream, int) WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndRead(IAsyncResult) WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndWrite(IAsyncResult) WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.Close() WrapperStream<T>.Dispose(bool) WrapperStream<T>.DisposeCore() WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ExchangeableStream<T> : WrapperStream<T>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Base stream type Remarks Constructor Constructors | Edit this page View Source ExchangeableStream(T, bool) Exchangeable stream Declaration public ExchangeableStream(T baseStream, bool leaveOpen = false) Parameters Type Name Description T baseStream Base stream bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Methods | Edit this page View Source SetBaseStream(T) Set a new base stream Declaration public T SetBaseStream(T newBaseStream) Parameters Type Name Description T newBaseStream New base stream Returns Type Description T Old base stream (needs to be disposed!) Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ExchangeableStream.html": {
    "href": "api/wan24.Core.ExchangeableStream.html",
    "title": "Class ExchangeableStream | wan24-Core",
    "keywords": "Class ExchangeableStream Exchangeable stream Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> ExchangeableStream<Stream> ExchangeableStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members ExchangeableStream<Stream>.SetBaseStream(Stream) WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.State WrapperStream<Stream>.CanRead WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.Position WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.Flush() WrapperStream<Stream>.FlushAsync(CancellationToken) WrapperStream<Stream>.Read(byte[], int, int) WrapperStream<Stream>.Read(Span<byte>) WrapperStream<Stream>.ReadByte() WrapperStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) WrapperStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) WrapperStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>.SetLength(long) WrapperStream<Stream>.Write(byte[], int, int) WrapperStream<Stream>.Write(ReadOnlySpan<byte>) WrapperStream<Stream>.WriteByte(byte) WrapperStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) WrapperStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.Dispose(bool) WrapperStream<Stream>.DisposeCore() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ExchangeableStream : ExchangeableStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source ExchangeableStream(Stream, bool) Exchangeable stream Declaration public ExchangeableStream(Stream baseStream, bool leaveOpen = false) Parameters Type Name Description Stream baseStream Base stream bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ExcludeValueAttribute.html": {
    "href": "api/wan24.Core.ExcludeValueAttribute.html",
    "title": "Class ExcludeValueAttribute | wan24-Core",
    "keywords": "Class ExcludeValueAttribute Attribute for AutoValueObjectBase<T> properties to exclude from the objects hash code calculation Inheritance object Attribute ExcludeValueAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax [AttributeUsage(AttributeTargets.Property, Inherited = true)] public sealed class ExcludeValueAttribute : Attribute Constructors | Edit this page View Source ExcludeValueAttribute() Constructor Declaration public ExcludeValueAttribute() Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.FileLogger.LogQueueWorker.html": {
    "href": "api/wan24.Core.FileLogger.LogQueueWorker.html",
    "title": "Class FileLogger.LogQueueWorker | wan24-Core",
    "keywords": "Class FileLogger.LogQueueWorker Log queue worker Inheritance object DisposableBase HostedServiceBase QueueWorker ItemQueueWorkerBase<string> FileLogger.LogQueueWorker Implements IWillDispose IItemQueueWorker<string> IQueueWorker IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members ItemQueueWorkerBase<string>.EnqueueAsync(string, CancellationToken) ItemQueueWorkerBase<string>.TryEnqueue(string) ItemQueueWorkerBase<string>.EnqueueRangeAsync(IEnumerable<string>, CancellationToken) ItemQueueWorkerBase<string>.EnqueueRangeAsync(IAsyncEnumerable<string>, CancellationToken) QueueWorker.GUID QueueWorker.Queued QueueWorker.State QueueWorker.EnqueueAsync(QueueWorker.Task_Delegate, CancellationToken) QueueWorker.TryEnqueue(QueueWorker.Task_Delegate, CancellationToken) QueueWorker.EnqueueRangeAsync(IEnumerable<QueueWorker.Task_Delegate>, CancellationToken) QueueWorker.EnqueueRangeAsync(IAsyncEnumerable<QueueWorker.Task_Delegate>, CancellationToken) HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.OnException DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax protected sealed class FileLogger.LogQueueWorker : ItemQueueWorkerBase<string>, IWillDispose, IItemQueueWorker<string>, IQueueWorker, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source LogQueueWorker(in string, in int, UnixFileMode?) Constructor Declaration public LogQueueWorker(in string fileName, in int maxQueue, UnixFileMode? mode) Parameters Type Name Description string fileName Filename int maxQueue Maximum number of queued messages before blocking UnixFileMode? mode Create file mode Methods | Edit this page View Source AfterStopAsync(CancellationToken) After stopped Declaration protected override Task AfterStopAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.AfterStopAsync(CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides HostedServiceBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides HostedServiceBase.DisposeCore() | Edit this page View Source ProcessItem(string, CancellationToken) Process one item Declaration protected override Task ProcessItem(string item, CancellationToken cancellationToken) Parameters Type Name Description string item Item to process CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides ItemQueueWorkerBase<string>.ProcessItem(string, CancellationToken) Implements IWillDispose IItemQueueWorker<T> IQueueWorker IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.FileLogger.html": {
    "href": "api/wan24.Core.FileLogger.html",
    "title": "Class FileLogger | wan24-Core",
    "keywords": "Class FileLogger File logger (don't forget to dispose an instance!) Inheritance object DisposableBase DisposableLoggerBase FileLogger Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable ILogger Inherited Members DisposableLoggerBase.RX_NL DisposableLoggerBase.Level DisposableLoggerBase.Next DisposableLoggerBase.BeginScope<TState>(TState) DisposableLoggerBase.IsEnabled(LogLevel) DisposableLoggerBase.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>) DisposableLoggerBase.GetMessage<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>, bool) DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class FileLogger : DisposableLoggerBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, ILogger Constructors | Edit this page View Source FileLogger(in string, in LogLevel?, in ILogger?, in int, in UnixFileMode?) Constructor Declaration protected FileLogger(in string fileName, in LogLevel? level = null, in ILogger? next = null, in int maxQueue = 2147483647, in UnixFileMode? mode = null) Parameters Type Name Description string fileName Filename LogLevel? level Log level ILogger next Next logger which should receive the message int maxQueue Maximum number of queued messages before blocking UnixFileMode? mode Create file mode Fields | Edit this page View Source Worker Worker Declaration protected readonly FileLogger.LogQueueWorker Worker Field Value Type Description FileLogger.LogQueueWorker Properties | Edit this page View Source FileName Filename Declaration public string FileName { get; } Property Value Type Description string Methods | Edit this page View Source CreateAsync(string, LogLevel, ILogger?, UnixFileMode?, CancellationToken) Create a file logger Declaration public static Task<FileLogger> CreateAsync(string fileName, LogLevel level = LogLevel.Information, ILogger? next = null, UnixFileMode? mode = null, CancellationToken cancellationToken = default) Parameters Type Name Description string fileName Filename LogLevel level Log level ILogger next Next logger which should receive the message UnixFileMode? mode Create file mode CancellationToken cancellationToken Cancellation token Returns Type Description Task<FileLogger> File logger | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source LogInt<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>) Writes a log entry Declaration protected override void LogInt<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel Level EventId eventId Event ID TState state State Exception exception Exception Func<TState, Exception, string> formatter Formatter Type Parameters Name Description TState State type Overrides DisposableLoggerBase.LogInt<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>) Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable ILogger Extension Methods LoggerExtensions.GetFinalLogger(ILogger) LoggerExtensions.GetLogLevel(ILogger) AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.FileSystemEventTypes.html": {
    "href": "api/wan24.Core.FileSystemEventTypes.html",
    "title": "Enum FileSystemEventTypes | wan24-Core",
    "keywords": "Enum FileSystemEventTypes File system event type flags Namespace: wan24.Core Assembly: wan24Core.dll Syntax [Flags] public enum FileSystemEventTypes : byte Fields Name Description All All flags Changes Changes Created Created Deleted Deleted None None Renamed Renamed Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object[]) AsyncHelper.TryDisposeAsync<FileSystemEventTypes>(FileSystemEventTypes) AsyncHelper.TryDispose<FileSystemEventTypes>(FileSystemEventTypes) EnumExtensions.ContainsAllFlags<FileSystemEventTypes>(FileSystemEventTypes, in FileSystemEventTypes) EnumExtensions.ContainsAnyFlag<FileSystemEventTypes>(FileSystemEventTypes, params FileSystemEventTypes[]) EnumExtensions.GetContainedFlags<FileSystemEventTypes>(FileSystemEventTypes, params FileSystemEventTypes[]) EnumExtensions.GetInfo<FileSystemEventTypes>(FileSystemEventTypes) EnumExtensions.IsFlag<FileSystemEventTypes>(FileSystemEventTypes) EnumExtensions.IsValidEnumerationValue<FileSystemEventTypes>(FileSystemEventTypes) EnumExtensions.IsValid<FileSystemEventTypes>(FileSystemEventTypes) EnumExtensions.IsValue<FileSystemEventTypes>(FileSystemEventTypes) EnumExtensions.OnlyFlags<FileSystemEventTypes>(FileSystemEventTypes) EnumExtensions.RemoveFlags<FileSystemEventTypes>(FileSystemEventTypes) ObjectExtensions.Do<FileSystemEventTypes, tReturn>(FileSystemEventTypes, in Func<FileSystemEventTypes, tReturn>) ObjectExtensions.EnsureValidState<FileSystemEventTypes>(FileSystemEventTypes, in bool, in string) ObjectExtensions.GetDisplayText<FileSystemEventTypes>(FileSystemEventTypes) ObjectExtensions.In<FileSystemEventTypes>(FileSystemEventTypes, in IEnumerable<FileSystemEventTypes>) ObjectExtensions.ToDictionary<FileSystemEventTypes>(FileSystemEventTypes, in int) ObjectExtensions.ToOrderedDictionary<FileSystemEventTypes>(FileSystemEventTypes, in int)"
  },
  "api/wan24.Core.FileSystemEvents.FileSystemEventThrottle.html": {
    "href": "api/wan24.Core.FileSystemEvents.FileSystemEventThrottle.html",
    "title": "Class FileSystemEvents.FileSystemEventThrottle | wan24-Core",
    "keywords": "Class FileSystemEvents.FileSystemEventThrottle Event throttle Inheritance object DisposableBase EventThrottle FileSystemEvents.FileSystemEventThrottle Implements IWillDispose IEventThrottle IDisposableObject IDisposable IAsyncDisposable Inherited Members EventThrottle.Timer EventThrottle._Timeout EventThrottle.SyncObject EventThrottle.Timeout EventThrottle.LastRaised EventThrottle.RaisedTime EventThrottle.RaisedCount EventThrottle.TotalRaisedCount EventThrottle.TotalThrottledRaisedCount EventThrottle.FirstRaised EventThrottle.IsThrottling EventThrottle.Raise() EventThrottle.Dispose(bool) DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax protected class FileSystemEvents.FileSystemEventThrottle : EventThrottle, IWillDispose, IEventThrottle, IDisposableObject, IDisposable, IAsyncDisposable Remarks Constructor Constructors | Edit this page View Source FileSystemEventThrottle(in int, in FileSystemEvents) Event throttle Declaration public FileSystemEventThrottle(in int throttle, in FileSystemEvents events) Parameters Type Name Description int throttle Throttle time in ms FileSystemEvents events Events Remarks Constructor Fields | Edit this page View Source Events Events Declaration protected readonly FileSystemEvents Events Field Value Type Description FileSystemEvents Methods | Edit this page View Source HandleEvent(in DateTime, in int) Handle the event Declaration protected override void HandleEvent(in DateTime raised, in int raisedCount) Parameters Type Name Description DateTime raised First raised time int raisedCount Raised count Overrides EventThrottle.HandleEvent(in DateTime, in int) Implements IWillDispose IEventThrottle IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.FileSystemEvents.FileSystemEventsArgs.html": {
    "href": "api/wan24.Core.FileSystemEvents.FileSystemEventsArgs.html",
    "title": "Class FileSystemEvents.FileSystemEventsArgs | wan24-Core",
    "keywords": "Class FileSystemEvents.FileSystemEventsArgs File system events OnEvents arguments Inheritance object EventArgs FileSystemEvents.FileSystemEventsArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class FileSystemEvents.FileSystemEventsArgs : EventArgs Remarks Constructor Constructors | Edit this page View Source FileSystemEventsArgs(in IReadOnlyList<FileSystemEventArgs>, in DateTime) File system events OnEvents arguments Declaration public FileSystemEventsArgs(in IReadOnlyList<FileSystemEventArgs> arguments, in DateTime raised) Parameters Type Name Description IReadOnlyList<FileSystemEventArgs> arguments File system event arguments DateTime raised Raised time Remarks Constructor Properties | Edit this page View Source Arguments File system event arguments Declaration public IReadOnlyList<FileSystemEventArgs> Arguments { get; } Property Value Type Description IReadOnlyList<FileSystemEventArgs> | Edit this page View Source Raised Raised time Declaration public DateTime Raised { get; } Property Value Type Description DateTime Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.FileSystemEvents.FileSystemEvents_Delegate.html": {
    "href": "api/wan24.Core.FileSystemEvents.FileSystemEvents_Delegate.html",
    "title": "Delegate FileSystemEvents.FileSystemEvents_Delegate | wan24-Core",
    "keywords": "Delegate FileSystemEvents.FileSystemEvents_Delegate Delegate for an event hander Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void FileSystemEvents.FileSystemEvents_Delegate(FileSystemEvents events, FileSystemEvents.FileSystemEventsArgs e) Parameters Type Name Description FileSystemEvents events Events FileSystemEvents.FileSystemEventsArgs e Arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.FileSystemEvents.html": {
    "href": "api/wan24.Core.FileSystemEvents.html",
    "title": "Class FileSystemEvents | wan24-Core",
    "keywords": "Class FileSystemEvents File system events Inheritance object DisposableBase HostedServiceBase FileSystemEvents Implements IWillDispose IServiceWorker IDisposableObject IDisposable IAsyncDisposable IHostedService Inherited Members HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.AfterStartAsync(CancellationToken) HostedServiceBase.BeforeStopAsync(CancellationToken) HostedServiceBase.StoppingAsync(CancellationToken) HostedServiceBase.AfterStopAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.AfterPauseAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.OnException HostedServiceBase.RaiseOnException() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class FileSystemEvents : HostedServiceBase, IWillDispose, IServiceWorker, IDisposableObject, IDisposable, IAsyncDisposable, IHostedService Constructors | Edit this page View Source FileSystemEvents(in string, in string, in NotifyFilters, in int, in bool, in FileSystemEventTypes) Constructor Declaration public FileSystemEvents(in string folder, in string pattern = \"*\", in NotifyFilters filters = NotifyFilters.FileName | NotifyFilters.Attributes | NotifyFilters.Size | NotifyFilters.LastWrite | NotifyFilters.LastAccess | NotifyFilters.CreationTime | NotifyFilters.Security, in int throttle = 0, in bool recursive = true, in FileSystemEventTypes events = FileSystemEventTypes.All) Parameters Type Name Description string folder Folder string pattern Pattern NotifyFilters filters Filters int throttle Throttling time in ms bool recursive Watch recursive? FileSystemEventTypes events Event types Fields | Edit this page View Source Arguments File system event arguments Declaration protected readonly List<FileSystemEventArgs> Arguments Field Value Type Description List<FileSystemEventArgs> | Edit this page View Source EventSync Events synchronization Declaration protected readonly SemaphoreSync EventSync Field Value Type Description SemaphoreSync | Edit this page View Source Throttle Event throttle Declaration protected readonly FileSystemEvents.FileSystemEventThrottle? Throttle Field Value Type Description FileSystemEvents.FileSystemEventThrottle | Edit this page View Source Watcher File system watcher Declaration protected readonly FileSystemWatcher Watcher Field Value Type Description FileSystemWatcher | Edit this page View Source WatcherEvent Watcher event (raised when having an event) Declaration protected readonly ResetEvent WatcherEvent Field Value Type Description ResetEvent Properties | Edit this page View Source CurrentEvents Number of currently collected event arguments Declaration public int CurrentEvents { get; } Property Value Type Description int | Edit this page View Source EventCount Number of times events have been raised during throttline Declaration public int EventCount { get; } Property Value Type Description int | Edit this page View Source EventRaised Time when the first event was raised during throttling Declaration public DateTime EventRaised { get; } Property Value Type Description DateTime | Edit this page View Source Events Events Declaration public FileSystemEventTypes Events { get; } Property Value Type Description FileSystemEventTypes | Edit this page View Source Filters Filters Declaration public NotifyFilters Filters { get; } Property Value Type Description NotifyFilters | Edit this page View Source Folder Watched folder Declaration public string Folder { get; } Property Value Type Description string | Edit this page View Source Last Last event data Declaration public FileSystemEvents.FileSystemEventsArgs? Last { get; protected set; } Property Value Type Description FileSystemEvents.FileSystemEventsArgs | Edit this page View Source Pattern Watched pattern Declaration public string Pattern { get; } Property Value Type Description string | Edit this page View Source Recursive Recursive? Declaration public bool Recursive { get; } Property Value Type Description bool | Edit this page View Source ThrottleTimeout Event throttle timeout in ms Declaration public int ThrottleTimeout { get; } Property Value Type Description int Methods | Edit this page View Source AfterResumeAsync(CancellationToken) After resumed from pause Declaration protected override Task AfterResumeAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.AfterResumeAsync(CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides HostedServiceBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides HostedServiceBase.DisposeCore() | Edit this page View Source HandleWatcherEvent(object, FileSystemEventArgs) Handle a file system watcher event Declaration protected virtual void HandleWatcherEvent(object sender, FileSystemEventArgs e) Parameters Type Name Description object sender Sender FileSystemEventArgs e Arguments | Edit this page View Source RaiseOnEvents(in DateTime) Raise the OnEvents event Declaration protected virtual void RaiseOnEvents(in DateTime raised) Parameters Type Name Description DateTime raised Raised time | Edit this page View Source WaitEvent(in CancellationToken) Wait for an event (canceled when the service is stopping) Declaration public virtual FileSystemEvents.FileSystemEventsArgs WaitEvent(in CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description FileSystemEvents.FileSystemEventsArgs Event data | Edit this page View Source WaitEventAsync(CancellationToken) Wait for an event (canceled when the service is stopping) Declaration public virtual Task<FileSystemEvents.FileSystemEventsArgs> WaitEventAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<FileSystemEvents.FileSystemEventsArgs> Event data | Edit this page View Source WorkerAsync() Service worker Declaration protected override Task WorkerAsync() Returns Type Description Task Overrides HostedServiceBase.WorkerAsync() Events | Edit this page View Source OnEvents Raised on event Declaration public event FileSystemEvents.FileSystemEvents_Delegate? OnEvents Event Type Type Description FileSystemEvents.FileSystemEvents_Delegate Implements IWillDispose IServiceWorker IDisposableObject IDisposable IAsyncDisposable IHostedService Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.FlushStream-1.html": {
    "href": "api/wan24.Core.FlushStream-1.html",
    "title": "Class FlushStream<T> | wan24-Core",
    "keywords": "Class FlushStream<T> Flush stream (writes to a buffer and requires a flush to write the buffer to the base stream) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> FlushStream<T> FlushStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.LeaveOpen WrapperStream<T>.CanWrite WrapperStream<T>.CanTimeout WrapperStream<T>.Length WrapperStream<T>.Position WrapperStream<T>.ReadTimeout WrapperStream<T>.WriteTimeout WrapperStream<T>.Read(byte[], int, int) WrapperStream<T>.Read(Span<byte>) WrapperStream<T>.ReadByte() WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) WrapperStream<T>.Seek(long, SeekOrigin) WrapperStream<T>.CopyTo(Stream, int) WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndRead(IAsyncResult) WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndWrite(IAsyncResult) WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.Close() WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class FlushStream<T> : WrapperStream<T>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Base stream type Constructors | Edit this page View Source FlushStream(in T, in bool, in bool) Constructor Declaration public FlushStream(in T baseStream, in bool clearBufferMemory = false, in bool leaveOpen = false) Parameters Type Name Description T baseStream Base stream bool clearBufferMemory Clear the buffer memory, when the buffer is being cleared?) bool leaveOpen Leave the base stream open when disposing? Properties | Edit this page View Source BufferSize Current buffer size in bytes Declaration public long BufferSize { get; } Property Value Type Description long | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides WrapperStream<T>.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides WrapperStream<T>.CanSeek | Edit this page View Source FlushOnWrite Automatic flush on write? Declaration public bool FlushOnWrite { get; set; } Property Value Type Description bool | Edit this page View Source IsFlushed If the buffer was flushed (is empty) Declaration public bool IsFlushed { get; } Property Value Type Description bool | Edit this page View Source MaxBuffer Max. buffer size in bytes (<1 for no limit) Declaration public long MaxBuffer { get; set; } Property Value Type Description long | Edit this page View Source State Status information Declaration public override IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Overrides WrapperStream<T>.State Methods | Edit this page View Source ClearBuffer() Clear the buffer (without writing) Declaration public virtual void ClearBuffer() | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides WrapperStream<T>.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override Task DisposeCore() Returns Type Description Task Overrides WrapperStream<T>.DisposeCore() | Edit this page View Source EnsureBufferLimit(in int) Ensure the buffer limit isn't exceeded Declaration protected void EnsureBufferLimit(in int len) Parameters Type Name Description int len Number of bytes to write Exceptions Type Condition OutOfMemoryException Buffer memory limit exceeded | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides WrapperStream<T>.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides WrapperStream<T>.FlushAsync(CancellationToken) Exceptions Type Condition ObjectDisposedException The stream has been disposed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides WrapperStream<T>.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides WrapperStream<T>.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides WrapperStream<T>.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides WrapperStream<T>.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.FlushStream.html": {
    "href": "api/wan24.Core.FlushStream.html",
    "title": "Class FlushStream | wan24-Core",
    "keywords": "Class FlushStream Flush stream (writes to a buffer and requires a flush to write the buffer to the base stream) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> FlushStream<Stream> FlushStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members FlushStream<Stream>.MaxBuffer FlushStream<Stream>.FlushOnWrite FlushStream<Stream>.BufferSize FlushStream<Stream>.IsFlushed FlushStream<Stream>.State FlushStream<Stream>.CanSeek FlushStream<Stream>.CanRead FlushStream<Stream>.ClearBuffer() FlushStream<Stream>.Flush() FlushStream<Stream>.FlushAsync(CancellationToken) FlushStream<Stream>.SetLength(long) FlushStream<Stream>.Write(byte[], int, int) FlushStream<Stream>.Write(ReadOnlySpan<byte>) FlushStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) FlushStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) FlushStream<Stream>.WriteByte(byte) FlushStream<Stream>.EnsureBufferLimit(in int) FlushStream<Stream>.Dispose(bool) FlushStream<Stream>.DisposeCore() WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.Position WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.Read(byte[], int, int) WrapperStream<Stream>.Read(Span<byte>) WrapperStream<Stream>.ReadByte() WrapperStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) WrapperStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) WrapperStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class FlushStream : FlushStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source FlushStream(in Stream, in bool, in bool) Flush stream (writes to a buffer and requires a flush to write the buffer to the base stream) Declaration public FlushStream(in Stream baseStream, in bool clearBufferMemory = false, in bool leaveOpen = false) Parameters Type Name Description Stream baseStream Base stream bool clearBufferMemory Clear the buffer memory, when the buffer is being cleared?) bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ForceAsyncStream-1.html": {
    "href": "api/wan24.Core.ForceAsyncStream-1.html",
    "title": "Class ForceAsyncStream<T> | wan24-Core",
    "keywords": "Class ForceAsyncStream<T> Forces all operations to be executed asynchronous Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> WrapperStream ForceAsyncStream<T> ForceAsyncStream Implements IStreamWrapper IStream IDisposableObject IAsyncDisposable IStatusProvider IDisposable Inherited Members WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.State WrapperStream<Stream>.CanRead WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.Position WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.FlushAsync(CancellationToken) WrapperStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) WrapperStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) WrapperStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>.SetLength(long) WrapperStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) WrapperStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.DisposeCore() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ForceAsyncStream<T> : WrapperStream, IStreamWrapper, IStream, IDisposableObject, IAsyncDisposable, IStatusProvider, IDisposable where T : Stream Type Parameters Name Description T Base stream type Constructors | Edit this page View Source ForceAsyncStream(in T, in bool) Constructor Declaration public ForceAsyncStream(in T baseStream, in bool leaveOpen = false) Parameters Type Name Description T baseStream Base stream bool leaveOpen Leave the base stream open when disposing Properties | Edit this page View Source ClearBuffers Clear buffers after use? Declaration public bool ClearBuffers { get; set; } Property Value Type Description bool Methods | Edit this page View Source Dispose() Declaration public void Dispose() | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides WrapperStream<Stream>.Dispose(bool) | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides WrapperStream<Stream>.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides WrapperStream<Stream>.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides WrapperStream<Stream>.Read(Span<byte>) | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides WrapperStream<Stream>.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides WrapperStream<Stream>.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides WrapperStream<Stream>.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides WrapperStream<Stream>.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Implements IStreamWrapper IStream IDisposableObject IAsyncDisposable IStatusProvider IDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ForceAsyncStream.html": {
    "href": "api/wan24.Core.ForceAsyncStream.html",
    "title": "Class ForceAsyncStream | wan24-Core",
    "keywords": "Class ForceAsyncStream Forces all operations to be executed asynchronous Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> WrapperStream ForceAsyncStream<Stream> ForceAsyncStream Implements IStreamWrapper IStream IDisposableObject IAsyncDisposable IStatusProvider IDisposable Inherited Members ForceAsyncStream<Stream>.ClearBuffers ForceAsyncStream<Stream>.Flush() ForceAsyncStream<Stream>.Read(byte[], int, int) ForceAsyncStream<Stream>.Read(Span<byte>) ForceAsyncStream<Stream>.ReadByte() ForceAsyncStream<Stream>.Write(byte[], int, int) ForceAsyncStream<Stream>.Write(ReadOnlySpan<byte>) ForceAsyncStream<Stream>.WriteByte(byte) ForceAsyncStream<Stream>.Dispose() ForceAsyncStream<Stream>.Dispose(bool) WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.State WrapperStream<Stream>.CanRead WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.Position WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.FlushAsync(CancellationToken) WrapperStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) WrapperStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) WrapperStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>.SetLength(long) WrapperStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) WrapperStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.DisposeCore() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ForceAsyncStream : ForceAsyncStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IAsyncDisposable, IStatusProvider, IDisposable Remarks Constructor Constructors | Edit this page View Source ForceAsyncStream(in Stream, in bool) Forces all operations to be executed asynchronous Declaration public ForceAsyncStream(in Stream baseStream, in bool leaveOpen = false) Parameters Type Name Description Stream baseStream Base stream bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Implements IStreamWrapper IStream IDisposableObject IAsyncDisposable IStatusProvider IDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ForceSyncStream-1.html": {
    "href": "api/wan24.Core.ForceSyncStream-1.html",
    "title": "Class ForceSyncStream<T> | wan24-Core",
    "keywords": "Class ForceSyncStream<T> Forces all operations to be performed synchronous Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> ForceSyncStream<T> ForceSyncStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.LeaveOpen WrapperStream<T>.State WrapperStream<T>.CanRead WrapperStream<T>.CanSeek WrapperStream<T>.CanWrite WrapperStream<T>.CanTimeout WrapperStream<T>.Length WrapperStream<T>.Position WrapperStream<T>.ReadTimeout WrapperStream<T>.WriteTimeout WrapperStream<T>.Flush() WrapperStream<T>.Read(byte[], int, int) WrapperStream<T>.Read(Span<byte>) WrapperStream<T>.ReadByte() WrapperStream<T>.Seek(long, SeekOrigin) WrapperStream<T>.SetLength(long) WrapperStream<T>.Write(byte[], int, int) WrapperStream<T>.Write(ReadOnlySpan<byte>) WrapperStream<T>.WriteByte(byte) WrapperStream<T>.CopyTo(Stream, int) WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndRead(IAsyncResult) WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndWrite(IAsyncResult) WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.Close() WrapperStream<T>.Dispose(bool) WrapperStream<T>.DisposeCore() WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ForceSyncStream<T> : WrapperStream<T>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Base stream type Constructors | Edit this page View Source ForceSyncStream(in T, in bool) Constructor Declaration public ForceSyncStream(in T baseStream, in bool leaveOpen = false) Parameters Type Name Description T baseStream Base stream bool leaveOpen Leave the base stream open when disposing Methods | Edit this page View Source DisposeAsync() Asynchronously releases the unmanaged resources used by the Stream. Declaration public override ValueTask DisposeAsync() Returns Type Description ValueTask A task that represents the asynchronous dispose operation. Overrides StreamBase.DisposeAsync() | Edit this page View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides WrapperStream<T>.FlushAsync(CancellationToken) Exceptions Type Condition ObjectDisposedException The stream has been disposed. | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ForceSyncStream.html": {
    "href": "api/wan24.Core.ForceSyncStream.html",
    "title": "Class ForceSyncStream | wan24-Core",
    "keywords": "Class ForceSyncStream Forces all operations to be performed synchronous Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> ForceSyncStream<Stream> ForceSyncStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members ForceSyncStream<Stream>.FlushAsync(CancellationToken) ForceSyncStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) ForceSyncStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) ForceSyncStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) ForceSyncStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) ForceSyncStream<Stream>.DisposeAsync() WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.State WrapperStream<Stream>.CanRead WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.Position WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.Flush() WrapperStream<Stream>.Read(byte[], int, int) WrapperStream<Stream>.Read(Span<byte>) WrapperStream<Stream>.ReadByte() WrapperStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>.SetLength(long) WrapperStream<Stream>.Write(byte[], int, int) WrapperStream<Stream>.Write(ReadOnlySpan<byte>) WrapperStream<Stream>.WriteByte(byte) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.Dispose(bool) WrapperStream<Stream>.DisposeCore() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ForceSyncStream : ForceSyncStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source ForceSyncStream(in Stream, in bool) Forces all operations to be performed synchronous Declaration public ForceSyncStream(in Stream baseStream, in bool leaveOpen = false) Parameters Type Name Description Stream baseStream Base stream bool leaveOpen Leave the base stream open when disposing Remarks Constructor Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.FsHelper.DeleteFile_Delegate.html": {
    "href": "api/wan24.Core.FsHelper.DeleteFile_Delegate.html",
    "title": "Delegate FsHelper.DeleteFile_Delegate | wan24-Core",
    "keywords": "Delegate FsHelper.DeleteFile_Delegate Delete file handler Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task FsHelper.DeleteFile_Delegate(string fn, CancellationToken cancellationToken = default) Parameters Type Name Description string fn Filename CancellationToken cancellationToken Cancellation token Returns Type Description Task Delete file handler Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.FsHelper.DeleteFolder_Delegate.html": {
    "href": "api/wan24.Core.FsHelper.DeleteFolder_Delegate.html",
    "title": "Delegate FsHelper.DeleteFolder_Delegate | wan24-Core",
    "keywords": "Delegate FsHelper.DeleteFolder_Delegate Delete folder handler (needs to delete recursive; files should be deleted already) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task FsHelper.DeleteFolder_Delegate(string path, CancellationToken cancellationToken = default) Parameters Type Name Description string path Path CancellationToken cancellationToken Cancellation token Returns Type Description Task Delete folder handler (needs to delete recursive; files should be deleted already) Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.FsHelper.html": {
    "href": "api/wan24.Core.FsHelper.html",
    "title": "Class FsHelper | wan24-Core",
    "keywords": "Class FsHelper Filesystem helper Inheritance object FsHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class FsHelper Fields | Edit this page View Source SyncObject An object for static thread locking Declaration public static readonly object SyncObject Field Value Type Description object Properties | Edit this page View Source DeleteFileHandler Delete file handler Declaration public static FsHelper.DeleteFile_Delegate? DeleteFileHandler { get; set; } Property Value Type Description FsHelper.DeleteFile_Delegate | Edit this page View Source DeleteFolderHandler Delete folder handler (needs to delete recursive; files should be deleted already) Declaration public static FsHelper.DeleteFolder_Delegate? DeleteFolderHandler { get; set; } Property Value Type Description FsHelper.DeleteFolder_Delegate | Edit this page View Source SearchFolders Search folders (lock SyncObject for modifying and GetSearchFolders(in bool) for getting them during locked for modifications) Declaration public static HashSet<string> SearchFolders { get; } Property Value Type Description HashSet<string> Methods | Edit this page View Source CreateFileStream(in string, in FileMode, in FileAccess, in FileShare, in FileOptions, UnixFileMode?, in bool, in int) Create Declaration public static FileStream CreateFileStream(in string fileName, in FileMode mode = FileMode.CreateNew, in FileAccess access = FileAccess.ReadWrite, in FileShare share = FileShare.None, in FileOptions options = FileOptions.None, UnixFileMode? permissions = null, in bool overwrite = false, in int bufferSize = 4096) Parameters Type Name Description string fileName Filename FileMode mode Mode FileAccess access Access FileShare share Share FileOptions options Options UnixFileMode? permissions Permissions bool overwrite Overwrite an existing file? int bufferSize Buffer size in bytes (zero or one to disable) Returns Type Description FileStream FileStream (don't forget to dispose!) | Edit this page View Source CreateFolder(in string, UnixFileMode?) Create a folder Declaration public static DirectoryInfo CreateFolder(in string path, UnixFileMode? permissions = null) Parameters Type Name Description string path Path UnixFileMode? permissions Permissions Returns Type Description DirectoryInfo DirectoryInfo | Edit this page View Source DefaultDeleteFileHandlerAsync(string, CancellationToken) Default delete file handler (see FsHelper.DeleteFile_Delegate; overwrites with zero and then random data before deleting; won't check for SSD HDD) Declaration public static Task DefaultDeleteFileHandlerAsync(string fn, CancellationToken cancellationToken) Parameters Type Name Description string fn Filename CancellationToken cancellationToken Cancellation tokens Returns Type Description Task | Edit this page View Source DeleteFileAsync(string, CancellationToken) Delete a file Declaration public static Task DeleteFileAsync(string fn, CancellationToken cancellationToken = default) Parameters Type Name Description string fn Filename CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source DeleteFilesAsync(IAsyncEnumerable<string>, int?, ProcessingProgress?, CancellationToken) Delete many files Declaration public static Task DeleteFilesAsync(IAsyncEnumerable<string> files, int? parallelDeleteFile = null, ProcessingProgress? progress = null, CancellationToken cancellationToken = default) Parameters Type Name Description IAsyncEnumerable<string> files Filenames int? parallelDeleteFile Number of files to delete in parallel ProcessingProgress progress Progress (total will be updated with the number of files and counted) CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source DeleteFilesAsync(IEnumerable<string>, int?, ProcessingProgress?, CancellationToken) Delete many files Declaration public static Task DeleteFilesAsync(IEnumerable<string> files, int? parallelDeleteFile = null, ProcessingProgress? progress = null, CancellationToken cancellationToken = default) Parameters Type Name Description IEnumerable<string> files Filenames int? parallelDeleteFile Number of files to delete in parallel ProcessingProgress progress Progress (total will be updated with the number of files and counted) CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source DeleteFolderAsync(string, int?, ProcessingProgress?, CancellationToken) Delete a folder recursive Declaration public static Task DeleteFolderAsync(string path, int? parallelDeleteFile = null, ProcessingProgress? progress = null, CancellationToken cancellationToken = default) Parameters Type Name Description string path Path int? parallelDeleteFile Number of files to delete in parallel ProcessingProgress progress Progress (total will be updated with the number of files and counted) CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source EnsureFolder(in string, in UnixFileMode?) Ensure a folder exists Declaration public static bool EnsureFolder(in string path, in UnixFileMode? permissions = null) Parameters Type Name Description string path Path UnixFileMode? permissions New folder permissons Returns Type Description bool New folder created? | Edit this page View Source FindFile(in string, in bool, params string[]) File a file in several folders Declaration public static string? FindFile(in string fileName, in bool includeCurrentDirectory, params string[] folders) Parameters Type Name Description string fileName Filename (or an absolute path) bool includeCurrentDirectory Include the current directory? string[] folders Folders for file lookup (if not given, the SearchFolders are being used per default) Returns Type Description string Existing filename (absolute path) or null, if not found | Edit this page View Source FindFile(in string, params string[]) File a file in several folders Declaration public static string? FindFile(in string fileName, params string[] folders) Parameters Type Name Description string fileName Filename (or an absolute path) string[] folders Folders for file lookup (if not given, the SearchFolders are being used per default) Returns Type Description string Existing filename (absolute path) or null, if not found | Edit this page View Source FindFiles(in string, Regex?, in string?, in bool, StringComparison, params string[]) Find files in a folder Declaration public static IEnumerable<string> FindFiles(in string path, Regex? rx = null, in string? searchPattern = null, in bool recursive = true, StringComparison extensionComparsion = StringComparison.OrdinalIgnoreCase, params string[] extensions) Parameters Type Name Description string path Folder path Regex rx Regular expression for matching a filename string searchPattern Search pattern bool recursive Recursive? StringComparison extensionComparsion File extension string comparsion string[] extensions File extensions Returns Type Description IEnumerable<string> Found files | Edit this page View Source FindFilesBackward(string, Regex?, string?, string?, bool, StringComparison, params string[]) Find files in a folder backward to the root (or the first unreadable parent folder or I/O error) Declaration public static IEnumerable<string> FindFilesBackward(string path, Regex? rx = null, string? searchPattern = null, string? stopPath = null, bool stopIfNotFound = false, StringComparison extensionComparsion = StringComparison.OrdinalIgnoreCase, params string[] extensions) Parameters Type Name Description string path Folder path Regex rx Regular expression for matching a filename string searchPattern Search pattern string stopPath Parent path to stop at (won't go up more from that path) bool stopIfNotFound Stop in the folder where no file was found (don't go up more)? StringComparison extensionComparsion File extension string comparsion string[] extensions File extensions Returns Type Description IEnumerable<string> Found files | Edit this page View Source FindFolders(in string, Regex?, in string?, in bool) Find folders in a folder Declaration public static IEnumerable<string> FindFolders(in string path, Regex? rx = null, in string? searchPattern = null, in bool recursive = true) Parameters Type Name Description string path Folder path Regex rx Regular expression for matching a folder name string searchPattern Search pattern bool recursive Recursive? Returns Type Description IEnumerable<string> Found folders | Edit this page View Source FindFoldersBackward(string, Regex?, string?, string?, bool) Find folders in a folder backward to the root (or the first unreadable parent folder or I/O error) Declaration public static IEnumerable<string> FindFoldersBackward(string path, Regex? rx = null, string? searchPattern = null, string? stopPath = null, bool stopIfNotFound = false) Parameters Type Name Description string path Folder path Regex rx Regular expression for matching a foldername string searchPattern Search pattern string stopPath Parent path to stop at (won't go up more from that path) bool stopIfNotFound Stop in the folder where no folder was found (don't go up more)? Returns Type Description IEnumerable<string> Found folders | Edit this page View Source GetSearchFolders(in bool) Get the search folders Declaration public static string[] GetSearchFolders(in bool includeCurrentDirectory = false) Parameters Type Name Description bool includeCurrentDirectory Include the current directory? Returns Type Description string[] Search folders | Edit this page View Source HideFile(in string) Hide a file Declaration public static bool HideFile(in string fileName) Parameters Type Name Description string fileName Filename Returns Type Description bool If hidden | Edit this page View Source NormalizeDisplayPath(in string) Normalize a path for display (current OS style; default is Linux; won't validate) Declaration public static string NormalizeDisplayPath(in string path) Parameters Type Name Description string path Path Returns Type Description string Normalized display path | Edit this page View Source NormalizeLinuxDisplayPath(in string) Normalize a Linux path for display (format path separator; won't validate!) Declaration public static string NormalizeLinuxDisplayPath(in string path) Parameters Type Name Description string path Path Returns Type Description string Normalized display path | Edit this page View Source NormalizePath(in string) Normalize a path (replace backslash with slash) Declaration public static string NormalizePath(in string path) Parameters Type Name Description string path Path Returns Type Description string Normalized path | Edit this page View Source NormalizeWindowsDisplayPath(in string) Normalize a Windows path for display (format drive letter and path separator; won't validate!) Declaration public static string NormalizeWindowsDisplayPath(in string path) Parameters Type Name Description string path Path Returns Type Description string Normalized display path | Edit this page View Source UnhideFile(in string) Unhide a file Declaration public static bool UnhideFile(in string fileName) Parameters Type Name Description string fileName Filename Returns Type Description bool If unhidden"
  },
  "api/wan24.Core.GenericHelper.html": {
    "href": "api/wan24.Core.GenericHelper.html",
    "title": "Class GenericHelper | wan24-Core",
    "keywords": "Class GenericHelper Generic helper Inheritance object GenericHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class GenericHelper Methods | Edit this page View Source AreEqual<T>(in T?, in T?) Determine if two values are equal Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool AreEqual<T>(in T? a, in T? b) Parameters Type Name Description T a A T b B Returns Type Description bool Are equal? Type Parameters Name Description T Value type | Edit this page View Source IsDefault<T>(in T?) Determine if a value is the default value Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsDefault<T>(in T? value) Parameters Type Name Description T value Value Returns Type Description bool Is the default? Type Parameters Name Description T Value type | Edit this page View Source IsNullOrDefault<T>(in T?) Determine if a value is null or the default Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsNullOrDefault<T>(in T? value) Parameters Type Name Description T value Value Returns Type Description bool Is null or the default? Type Parameters Name Description T Value type | Edit this page View Source IsNull<T>(in T?) Determine if a value is null Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsNull<T>(in T? value) Parameters Type Name Description T value Value Returns Type Description bool Is null? Type Parameters Name Description T Value type"
  },
  "api/wan24.Core.GenericOptionalDisposer-1.html": {
    "href": "api/wan24.Core.GenericOptionalDisposer-1.html",
    "title": "Class GenericOptionalDisposer<T> | wan24-Core",
    "keywords": "Class GenericOptionalDisposer<T> Generic optional disposer Inheritance object DisposableBase GenericOptionalDisposer<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class GenericOptionalDisposer<T> : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable where T : notnull Type Parameters Name Description T Remarks Constructor Constructors | Edit this page View Source GenericOptionalDisposer(in T?, in bool) Generic optional disposer Declaration public GenericOptionalDisposer(in T? obj, in bool dispose = true) Parameters Type Name Description T obj Object to dispose bool dispose Dispose the object? Remarks Constructor Properties | Edit this page View Source DisposeObject Dispose the object? Declaration public bool DisposeObject { get; set; } Property Value Type Description bool | Edit this page View Source Object Object to dispose Declaration public T? Object { get; set; } Property Value Type Description T Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Operators | Edit this page View Source implicit operator GenericOptionalDisposer<T>(in T?) Cast as disposer Declaration public static implicit operator GenericOptionalDisposer<T>(in T? obj) Parameters Type Name Description T obj Object Returns Type Description GenericOptionalDisposer<T> | Edit this page View Source implicit operator bool(in GenericOptionalDisposer<T>) Cast as disposing flag Declaration public static implicit operator bool(in GenericOptionalDisposer<T> disposer) Parameters Type Name Description GenericOptionalDisposer<T> disposer Disposer Returns Type Description bool | Edit this page View Source implicit operator T(in GenericOptionalDisposer<T>) Cast as object Declaration public static implicit operator T(in GenericOptionalDisposer<T> disposer) Parameters Type Name Description GenericOptionalDisposer<T> disposer Disposer Returns Type Description T Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.GenericTranslation-1.html": {
    "href": "api/wan24.Core.GenericTranslation-1.html",
    "title": "Class GenericTranslation<T> | wan24-Core",
    "keywords": "Class GenericTranslation<T> Generic translation Inheritance object GenericTranslation<T> Implements IStringLocalizer<T> IStringLocalizer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class GenericTranslation<T> : IStringLocalizer<T>, IStringLocalizer Type Parameters Name Description T Object type Remarks Constructor Constructors | Edit this page View Source GenericTranslation(in Translation?) Generic translation Declaration public GenericTranslation(in Translation? translation = null) Parameters Type Name Description Translation translation Base translation Remarks Constructor Properties | Edit this page View Source this[string] Gets the string resource with the given name. Declaration public virtual LocalizedString this[string name] { get; } Parameters Type Name Description string name The name of the string resource. Property Value Type Description LocalizedString The string resource as a LocalizedString. | Edit this page View Source this[string, object[]] Gets the string resource with the given name and formatted with the supplied arguments. Declaration public virtual LocalizedString this[string name, params object[] arguments] { get; } Parameters Type Name Description string name The name of the string resource. object[] arguments The values to format the string with. Property Value Type Description LocalizedString The formatted string resource as a LocalizedString. | Edit this page View Source Translation Base translation Declaration public Translation Translation { get; } Property Value Type Description Translation Methods | Edit this page View Source GetAllStrings(bool) Gets all string resources. Declaration public virtual IEnumerable<LocalizedString> GetAllStrings(bool includeParentCultures) Parameters Type Name Description bool includeParentCultures A bool indicating whether to include strings from parent cultures. Returns Type Description IEnumerable<LocalizedString> The strings. Implements IStringLocalizer<T> IStringLocalizer Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.GenericTranslationTerms-1.html": {
    "href": "api/wan24.Core.GenericTranslationTerms-1.html",
    "title": "Class GenericTranslationTerms<T> | wan24-Core",
    "keywords": "Class GenericTranslationTerms<T> Generic translation terms Inheritance object GenericTranslationTerms<T> Implements IStringLocalizer<T> IStringLocalizer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class GenericTranslationTerms<T> : IStringLocalizer<T>, IStringLocalizer Type Parameters Name Description T Object type Remarks Constructor Constructors | Edit this page View Source GenericTranslationTerms(in ITranslationTerms) Generic translation terms Declaration public GenericTranslationTerms(in ITranslationTerms terms) Parameters Type Name Description ITranslationTerms terms Base translation terms Remarks Constructor Properties | Edit this page View Source this[string] Gets the string resource with the given name. Declaration public virtual LocalizedString this[string name] { get; } Parameters Type Name Description string name The name of the string resource. Property Value Type Description LocalizedString The string resource as a LocalizedString. | Edit this page View Source this[string, object[]] Gets the string resource with the given name and formatted with the supplied arguments. Declaration public virtual LocalizedString this[string name, params object[] arguments] { get; } Parameters Type Name Description string name The name of the string resource. object[] arguments The values to format the string with. Property Value Type Description LocalizedString The formatted string resource as a LocalizedString. | Edit this page View Source Terms Base translation terms Declaration public ITranslationTerms Terms { get; } Property Value Type Description ITranslationTerms Methods | Edit this page View Source GetAllStrings(bool) Gets all string resources. Declaration public virtual IEnumerable<LocalizedString> GetAllStrings(bool includeParentCultures) Parameters Type Name Description bool includeParentCultures A bool indicating whether to include strings from parent cultures. Returns Type Description IEnumerable<LocalizedString> The strings. Implements IStringLocalizer<T> IStringLocalizer Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.GlobalLock.html": {
    "href": "api/wan24.Core.GlobalLock.html",
    "title": "Class GlobalLock | wan24-Core",
    "keywords": "Class GlobalLock Global lock using Mutex (requires to be disposed by the same thread that created the mutex!) Inheritance object DisposableBase GlobalLock Implements IWillDispose IGlobalLock IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class GlobalLock : DisposableBase, IWillDispose, IGlobalLock, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source GlobalLock(in Guid, in int) Constructor Declaration public GlobalLock(in Guid guid, in int timeout = -1) Parameters Type Name Description Guid guid GUID int timeout Timeout in ms (-n to wait for MaxValue+timeoutms) Exceptions Type Condition TimeoutException Couldn't lock within the timeout Properties | Edit this page View Source CreatedNew Created a new mutex? Declaration public bool CreatedNew { get; } Property Value Type Description bool | Edit this page View Source GUID GUID Declaration public Guid GUID { get; } Property Value Type Description Guid | Edit this page View Source ID ID Declaration public string ID { get; } Property Value Type Description string Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) Implements IWillDispose IGlobalLock IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.GlobalLockAsync.html": {
    "href": "api/wan24.Core.GlobalLockAsync.html",
    "title": "Class GlobalLockAsync | wan24-Core",
    "keywords": "Class GlobalLockAsync Global lock using Mutex for use with an asynchronous context (does have to reserve a thread during the mutex exists :( but it's possible to inject actions) Inheritance object DisposableBase GlobalLockAsync Implements IWillDispose IGlobalLock IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class GlobalLockAsync : DisposableBase, IWillDispose, IGlobalLock, IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source CreatedNew Created a new mutex? Declaration public bool CreatedNew { get; } Property Value Type Description bool | Edit this page View Source GUID GUID Declaration public Guid GUID { get; } Property Value Type Description Guid | Edit this page View Source ID ID Declaration public string ID { get; } Property Value Type Description string Methods | Edit this page View Source CreateAsync(Guid, int, bool) Create an instance Declaration public static Task<GlobalLockAsync> CreateAsync(Guid guid, int timeout = -1, bool longRunning = true) Parameters Type Name Description Guid guid GUID int timeout Timeout in ms (-n to wait for MaxValue+timeoutms) bool longRunning Create a long running task? Returns Type Description Task<GlobalLockAsync> Global lock instance Exceptions Type Condition TimeoutException Couldn't lock within the timeout | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source ExecuteAsync(in Func<object?>) Execute an action asynchronous in the global lock thread Declaration public Task<object?> ExecuteAsync(in Func<object?> action) Parameters Type Name Description Func<object> action Action Returns Type Description Task<object> Action return value Implements IWillDispose IGlobalLock IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.GroupAttribute.html": {
    "href": "api/wan24.Core.GroupAttribute.html",
    "title": "Class GroupAttribute | wan24-Core",
    "keywords": "Class GroupAttribute Group name attribute Inheritance object Attribute GroupAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class GroupAttribute : Attribute Remarks Constructor Constructors | Edit this page View Source GroupAttribute(string) Group name attribute Declaration public GroupAttribute(string name) Parameters Type Name Description string name Group name Remarks Constructor Properties | Edit this page View Source Name Group name Declaration public string Name { get; } Property Value Type Description string Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.HostEndPoint.html": {
    "href": "api/wan24.Core.HostEndPoint.html",
    "title": "Struct HostEndPoint | wan24-Core",
    "keywords": "Struct HostEndPoint Host endpoint Implements IEnumerable<IPEndPoint> IEnumerable IAsyncEnumerable<IPEndPoint> IEquatable<HostEndPoint> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public readonly record struct HostEndPoint : IEnumerable<IPEndPoint>, IEnumerable, IAsyncEnumerable<IPEndPoint>, IEquatable<HostEndPoint> Constructors | Edit this page View Source HostEndPoint(in ReadOnlySpan<byte>) Constructor Declaration public HostEndPoint(in ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer Bytes | Edit this page View Source HostEndPoint(in string, in int) Constructor Declaration public HostEndPoint(in string hostname, in int port) Parameters Type Name Description string hostname Hostname int port Port (0..65535) Fields | Edit this page View Source Hostname Hostname Declaration public readonly string Hostname Field Value Type Description string | Edit this page View Source Port Port (0..65535) Declaration public readonly int Port Field Value Type Description int Properties | Edit this page View Source AllResolvedIpEndPoints All resolved IP endpoints for the hostname Declaration public IPEndPoint[] AllResolvedIpEndPoints { get; } Property Value Type Description IPEndPoint[] | Edit this page View Source ResolvedIpEndPoints Resolved IP endpoints for the hostname Declaration public IEnumerable<IPEndPoint> ResolvedIpEndPoints { get; } Property Value Type Description IEnumerable<IPEndPoint> | Edit this page View Source StructureSize Structure size in bytes Declaration public int StructureSize { get; } Property Value Type Description int Methods | Edit this page View Source GetAsyncEnumerator(CancellationToken) Returns an enumerator that iterates asynchronously through the collection. Declaration public IAsyncEnumerator<IPEndPoint> GetAsyncEnumerator(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken A CancellationToken that may be used to cancel the asynchronous iteration. Returns Type Description IAsyncEnumerator<IPEndPoint> An enumerator that can be used to iterate asynchronously through the collection. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<IPEndPoint> GetEnumerator() Returns Type Description IEnumerator<IPEndPoint> An enumerator that can be used to iterate through the collection. | Edit this page View Source Parse(in string) Parse a host endpoint Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static HostEndPoint Parse(in string str) Parameters Type Name Description string str String Returns Type Description HostEndPoint Host endpoint | Edit this page View Source ResolveAllIpEndPointsAsync(CancellationToken) Resolve all IP endpoints for the hostname Declaration public Task<IPEndPoint[]> ResolveAllIpEndPointsAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<IPEndPoint[]> IP endpoints | Edit this page View Source ResolveIpEndPointsAsync(CancellationToken) Resolve IP endpoints for the hostname Declaration public IAsyncEnumerable<IPEndPoint> ResolveIpEndPointsAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description IAsyncEnumerable<IPEndPoint> IP endpoints | Edit this page View Source ToBytes() Get the bytes for this host endpoint Declaration [TargetedPatchingOptOut(\"Tiny method\")] public byte[] ToBytes() Returns Type Description byte[] Bytes | Edit this page View Source ToBytes(in Span<byte>) Get the bytes for this host endpoint Declaration public int ToBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer (must fit StructureSize) Returns Type Description int Number of bytes written to the buffer | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source TryParse(in string, out HostEndPoint) Try parsing a host endpoint Declaration public static bool TryParse(in string str, out HostEndPoint result) Parameters Type Name Description string str String HostEndPoint result Host endpoint Returns Type Description bool If succeeded Operators | Edit this page View Source implicit operator HostEndPoint(in byte[]) Cast from bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator HostEndPoint(in byte[] buffer) Parameters Type Name Description byte[] buffer Buffer Returns Type Description HostEndPoint | Edit this page View Source implicit operator HostEndPoint(in Memory<byte>) Cast from bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator HostEndPoint(in Memory<byte> buffer) Parameters Type Name Description Memory<byte> buffer Buffer Returns Type Description HostEndPoint | Edit this page View Source implicit operator HostEndPoint(in ReadOnlyMemory<byte>) Cast from bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator HostEndPoint(in ReadOnlyMemory<byte> buffer) Parameters Type Name Description ReadOnlyMemory<byte> buffer Buffer Returns Type Description HostEndPoint | Edit this page View Source implicit operator HostEndPoint(in ReadOnlySpan<byte>) Cast from bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator HostEndPoint(in ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer Buffer Returns Type Description HostEndPoint | Edit this page View Source implicit operator HostEndPoint(in Span<byte>) Cast from bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator HostEndPoint(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description HostEndPoint | Edit this page View Source implicit operator byte[](in HostEndPoint) Cast as bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator byte[](in HostEndPoint hep) Parameters Type Name Description HostEndPoint hep HostEndPoint Returns Type Description byte[] | Edit this page View Source implicit operator int(in HostEndPoint) Cast as port number Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in HostEndPoint hep) Parameters Type Name Description HostEndPoint hep HostEndPoint Returns Type Description int | Edit this page View Source implicit operator IPEndPoint?(in HostEndPoint) Cast as first IP endpoint Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator IPEndPoint?(in HostEndPoint hep) Parameters Type Name Description HostEndPoint hep HostEndPoint Returns Type Description IPEndPoint | Edit this page View Source implicit operator string(in HostEndPoint) Cast as hostname Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator string(in HostEndPoint hep) Parameters Type Name Description HostEndPoint hep HostEndPoint Returns Type Description string Implements IEnumerable<T> IEnumerable IAsyncEnumerable<T> IEquatable<T> Extension Methods AsyncEnumerableExtensions.ChunkEnumAsync<T>(IAsyncEnumerable<T>, int, CancellationToken) AsyncEnumerableExtensions.DynamicContext<T>(IAsyncEnumerable<T>) AsyncEnumerableExtensions.FixedContext<T>(IAsyncEnumerable<T>) AsyncEnumerableExtensions.ToArrayAsync<T>(IAsyncEnumerable<T>, CancellationToken) AsyncEnumerableExtensions.ToDisposingAsyncEnumerator<T>(IAsyncEnumerable<T>, params object?[]) AsyncEnumerableExtensions.ToDisposingAsyncEnumerator<T>(IAsyncEnumerable<T>, in CancellationToken, params object?[]) AsyncEnumerableExtensions.ToListAsync<T>(IAsyncEnumerable<T>, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IAsyncEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IAsyncEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.ForEachAsync<T>(IAsyncEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) AsyncHelper.TryDisposeAll(IEnumerable<object>) AsyncHelper.TryDisposeAllAsync(IEnumerable<object>, bool) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.HostEndPointAttribute.html": {
    "href": "api/wan24.Core.HostEndPointAttribute.html",
    "title": "Class HostEndPointAttribute | wan24-Core",
    "keywords": "Class HostEndPointAttribute Host endpoint validation attribute (for validating string or HostEndPoint value properties) Inheritance object Attribute ValidationAttribute ValidationAttributeBase HostEndPointAttribute Inherited Members ValidationAttributeBase.GetErrorMessage(in ValidationContext, in string) ValidationAttributeBase.ErrorMessageFormatter ValidationAttribute.FormatErrorMessage(string) ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24CoreValidation.dll Syntax public class HostEndPointAttribute : ValidationAttributeBase Constructors | Edit this page View Source HostEndPointAttribute() Constructor Declaration public HostEndPointAttribute() Methods | Edit this page View Source IsValid(object?, ValidationContext) Validates the specified value with respect to the current validation attribute. Declaration protected override ValidationResult? IsValid(object? value, ValidationContext validationContext) Parameters Type Name Description object value The value to validate. ValidationContext validationContext The context information about the validation operation. Returns Type Description ValidationResult An instance of the ValidationResult class. Overrides ValidationAttribute.IsValid(object, ValidationContext) Exceptions Type Condition InvalidOperationException The current attribute is malformed. NotImplementedException IsValid(object, ValidationContext) has not been implemented by a derived class. Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.HostedServiceBase.HostedService_Delegate.html": {
    "href": "api/wan24.Core.HostedServiceBase.HostedService_Delegate.html",
    "title": "Delegate HostedServiceBase.HostedService_Delegate | wan24-Core",
    "keywords": "Delegate HostedServiceBase.HostedService_Delegate Delegate for a hosted service event Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void HostedServiceBase.HostedService_Delegate(HostedServiceBase service, EventArgs e) Parameters Type Name Description HostedServiceBase service Service EventArgs e Event arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.HostedServiceBase.html": {
    "href": "api/wan24.Core.HostedServiceBase.html",
    "title": "Class HostedServiceBase | wan24-Core",
    "keywords": "Class HostedServiceBase Base class for a hosted service Inheritance object DisposableBase HostedServiceBase AsyncTimer EventWorkerBase FileSystemEvents HostedServiceCollection InstancePool<T> MultiFileSystemEvents ObjectStorageBase<tKey, tObj> QueueWorker TimedHostedServiceBase UdpBroadcast<T> Implements IWillDispose IServiceWorker IDisposableObject IDisposable IAsyncDisposable IHostedService Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class HostedServiceBase : DisposableBase, IWillDispose, IServiceWorker, IDisposableObject, IDisposable, IAsyncDisposable, IHostedService Constructors | Edit this page View Source HostedServiceBase() Constructor Declaration protected HostedServiceBase() Fields | Edit this page View Source Cancellation Cancellation token Declaration protected CancellationTokenSource? Cancellation Field Value Type Description CancellationTokenSource | Edit this page View Source PauseEvent Pause event (raised when not paused) Declaration protected readonly ResetEvent PauseEvent Field Value Type Description ResetEvent | Edit this page View Source RunEvent Run event (raised when running) Declaration protected readonly ResetEvent RunEvent Field Value Type Description ResetEvent | Edit this page View Source ServiceTask Service task Declaration protected Task? ServiceTask Field Value Type Description Task | Edit this page View Source StopTask Stop task Declaration protected volatile TaskCompletionSource? StopTask Field Value Type Description TaskCompletionSource | Edit this page View Source Sync Thread synchronization Declaration protected readonly SemaphoreSync Sync Field Value Type Description SemaphoreSync | Edit this page View Source _LastException Last exception Declaration protected Exception? _LastException Field Value Type Description Exception Properties | Edit this page View Source CanPause Can be paused Declaration public virtual bool CanPause { get; protected set; } Property Value Type Description bool | Edit this page View Source CancelToken Cancellation token Declaration protected CancellationToken CancelToken { get; } Property Value Type Description CancellationToken | Edit this page View Source ErrorSource Error source ID Declaration public int ErrorSource { get; set; } Property Value Type Description int | Edit this page View Source IsPaused Is paused? Declaration public bool IsPaused { get; } Property Value Type Description bool | Edit this page View Source IsRunning Is running? Declaration public bool IsRunning { get; protected set; } Property Value Type Description bool | Edit this page View Source IsStopping Is stopping? Declaration public bool IsStopping { get; } Property Value Type Description bool | Edit this page View Source LastException Last exception Declaration public virtual Exception? LastException { get; protected set; } Property Value Type Description Exception | Edit this page View Source Name Name Declaration public string? Name { get; set; } Property Value Type Description string | Edit this page View Source Paused Paused time (if paused) Declaration public DateTime Paused { get; protected set; } Property Value Type Description DateTime | Edit this page View Source Started Last start time Declaration public DateTime Started { get; protected set; } Property Value Type Description DateTime | Edit this page View Source Stopped Last stop time Declaration public DateTime Stopped { get; protected set; } Property Value Type Description DateTime | Edit this page View Source StoppedExceptional Stopped exceptional? Declaration public bool StoppedExceptional { get; protected set; } Property Value Type Description bool Methods | Edit this page View Source AfterPauseAsync(CancellationToken) After paused Declaration protected virtual Task AfterPauseAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source AfterResumeAsync(CancellationToken) After resumed from pause Declaration protected virtual Task AfterResumeAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source AfterStartAsync(CancellationToken) After started Declaration protected virtual Task AfterStartAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source AfterStopAsync(CancellationToken) After stopped Declaration protected virtual Task AfterStopAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source BeforePauseAsync(CancellationToken) Before pause Declaration protected virtual Task BeforePauseAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source BeforeResumeAsync(CancellationToken) Before resuming from pause Declaration protected virtual Task BeforeResumeAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source BeforeStartAsync(CancellationToken) Before starting Declaration protected virtual Task BeforeStartAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source BeforeStopAsync(CancellationToken) Before stopping Declaration protected virtual Task BeforeStopAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source EnsureNotCanceled(in bool) Ensure not being canceled Declaration protected virtual bool EnsureNotCanceled(in bool throwOnCancellation = true) Parameters Type Name Description bool throwOnCancellation Throw an exception if canceled? Returns Type Description bool If not canceled Exceptions Type Condition OperationCanceledException The service was canceled | Edit this page View Source EnsureRunning(in bool) Ensure running Declaration protected virtual bool EnsureRunning(in bool throwOnNotRunning = true) Parameters Type Name Description bool throwOnNotRunning Throw an exception if not running? Returns Type Description bool If running Exceptions Type Condition InvalidOperationException The service isn't running | Edit this page View Source PauseAsync(CancellationToken) Declaration public virtual Task PauseAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Edit this page View Source PausingAsync(CancellationToken) When pausing Declaration protected virtual Task PausingAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source RaiseOnException() Raise the OnException event Declaration protected virtual void RaiseOnException() | Edit this page View Source ResumeAsync(CancellationToken) Declaration public virtual Task ResumeAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Edit this page View Source ResumingAsync(CancellationToken) When resuming Declaration protected virtual Task ResumingAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source RunServiceAsync() Service handler Declaration protected Task RunServiceAsync() Returns Type Description Task | Edit this page View Source StartAsync(CancellationToken) Triggered when the application host is ready to start the service. Declaration public virtual Task StartAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Indicates that the start process has been aborted. Returns Type Description Task A Task that represents the asynchronous Start operation. | Edit this page View Source StartingAsync(CancellationToken) When starting Declaration protected virtual Task StartingAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source StopAsync(CancellationToken) Triggered when the application host is performing a graceful shutdown. Declaration public virtual Task StopAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Indicates that the shutdown process should no longer be graceful. Returns Type Description Task A Task that represents the asynchronous Stop operation. | Edit this page View Source StoppingAsync(CancellationToken) When stopping Declaration protected virtual Task StoppingAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() | Edit this page View Source WorkerAsync() Service worker Declaration protected abstract Task WorkerAsync() Returns Type Description Task Events | Edit this page View Source OnException Raised on exception Declaration public event HostedServiceBase.HostedService_Delegate? OnException Event Type Type Description HostedServiceBase.HostedService_Delegate Operators | Edit this page View Source implicit operator bool(in HostedServiceBase) Cast as running-flag Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in HostedServiceBase service) Parameters Type Name Description HostedServiceBase service Service Returns Type Description bool Implements IWillDispose IServiceWorker IDisposableObject IDisposable IAsyncDisposable IHostedService Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.HostedServiceCollection.html": {
    "href": "api/wan24.Core.HostedServiceCollection.html",
    "title": "Class HostedServiceCollection | wan24-Core",
    "keywords": "Class HostedServiceCollection Hosted service collection Inheritance object DisposableBase HostedServiceBase HostedServiceCollection Implements IWillDispose IServiceWorker IDisposableObject IDisposable IAsyncDisposable IHostedService Inherited Members HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.BeforeStopAsync(CancellationToken) HostedServiceBase.StoppingAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.OnException HostedServiceBase.RaiseOnException() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class HostedServiceCollection : HostedServiceBase, IWillDispose, IServiceWorker, IDisposableObject, IDisposable, IAsyncDisposable, IHostedService Constructors | Edit this page View Source HostedServiceCollection() Constructor Declaration public HostedServiceCollection() Fields | Edit this page View Source ServicesSync Services synchronization Declaration protected readonly SemaphoreSync ServicesSync Field Value Type Description SemaphoreSync | Edit this page View Source _Services Services Declaration protected readonly List<IHostedService> _Services Field Value Type Description List<IHostedService> Properties | Edit this page View Source Count Number of services Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Services Services Declaration public IHostedService[] Services { get; } Property Value Type Description IHostedService[] Methods | Edit this page View Source Add(in IHostedService, in CancellationToken) Add a service Declaration public void Add(in IHostedService service, in CancellationToken cancellationToken = default) Parameters Type Name Description IHostedService service Service (will be disposed, if not removed until disposing!) CancellationToken cancellationToken Cancellation token | Edit this page View Source AddAsync(IHostedService, CancellationToken) Add a service Declaration public Task AddAsync(IHostedService service, CancellationToken cancellationToken = default) Parameters Type Name Description IHostedService service Service (will be disposed, if not removed until disposing!) CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source AfterPauseAsync(CancellationToken) After paused Declaration protected override Task AfterPauseAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.AfterPauseAsync(CancellationToken) | Edit this page View Source AfterResumeAsync(CancellationToken) After resumed from pause Declaration protected override Task AfterResumeAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.AfterResumeAsync(CancellationToken) | Edit this page View Source AfterStartAsync(CancellationToken) After started Declaration protected override Task AfterStartAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.AfterStartAsync(CancellationToken) | Edit this page View Source AfterStopAsync(CancellationToken) After stopped Declaration protected override Task AfterStopAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.AfterStopAsync(CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides HostedServiceBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides HostedServiceBase.DisposeCore() | Edit this page View Source Remove(in IHostedService, in CancellationToken) Remove a service Declaration public bool Remove(in IHostedService service, in CancellationToken cancellationToken = default) Parameters Type Name Description IHostedService service Service CancellationToken cancellationToken Cancellation token Returns Type Description bool If removed | Edit this page View Source RemoveAsync(IHostedService, CancellationToken) Remove a service Declaration public Task<bool> RemoveAsync(IHostedService service, CancellationToken cancellationToken = default) Parameters Type Name Description IHostedService service Service CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> If removed | Edit this page View Source WorkerAsync() Service worker Declaration protected override Task WorkerAsync() Returns Type Description Task Overrides HostedServiceBase.WorkerAsync() Implements IWillDispose IServiceWorker IDisposableObject IDisposable IAsyncDisposable IHostedService Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.HostedServiceTimers.html": {
    "href": "api/wan24.Core.HostedServiceTimers.html",
    "title": "Enum HostedServiceTimers | wan24-Core",
    "keywords": "Enum HostedServiceTimers Hosted service timer types Namespace: wan24.Core Assembly: wan24Core.dll Syntax public enum HostedServiceTimers : byte Fields Name Description Default Default (restart after processed) Exact Exact (restart to match the exact interval without processing time) ExactCatchingUp Exact and catching up (restart to match the exact interval without processing time and catch up missing processing runs without a delay) Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object[]) AsyncHelper.TryDisposeAsync<HostedServiceTimers>(HostedServiceTimers) AsyncHelper.TryDispose<HostedServiceTimers>(HostedServiceTimers) EnumExtensions.ContainsAllFlags<HostedServiceTimers>(HostedServiceTimers, in HostedServiceTimers) EnumExtensions.ContainsAnyFlag<HostedServiceTimers>(HostedServiceTimers, params HostedServiceTimers[]) EnumExtensions.GetContainedFlags<HostedServiceTimers>(HostedServiceTimers, params HostedServiceTimers[]) EnumExtensions.GetInfo<HostedServiceTimers>(HostedServiceTimers) EnumExtensions.IsFlag<HostedServiceTimers>(HostedServiceTimers) EnumExtensions.IsValidEnumerationValue<HostedServiceTimers>(HostedServiceTimers) EnumExtensions.IsValid<HostedServiceTimers>(HostedServiceTimers) EnumExtensions.IsValue<HostedServiceTimers>(HostedServiceTimers) EnumExtensions.OnlyFlags<HostedServiceTimers>(HostedServiceTimers) EnumExtensions.RemoveFlags<HostedServiceTimers>(HostedServiceTimers) ObjectExtensions.Do<HostedServiceTimers, tReturn>(HostedServiceTimers, in Func<HostedServiceTimers, tReturn>) ObjectExtensions.EnsureValidState<HostedServiceTimers>(HostedServiceTimers, in bool, in string) ObjectExtensions.GetDisplayText<HostedServiceTimers>(HostedServiceTimers) ObjectExtensions.In<HostedServiceTimers>(HostedServiceTimers, in IEnumerable<HostedServiceTimers>) ObjectExtensions.ToDictionary<HostedServiceTimers>(HostedServiceTimers, in int) ObjectExtensions.ToOrderedDictionary<HostedServiceTimers>(HostedServiceTimers, in int)"
  },
  "api/wan24.Core.Hsb.html": {
    "href": "api/wan24.Core.Hsb.html",
    "title": "Struct Hsb | wan24-Core",
    "keywords": "Struct Hsb HSB Implements IEquatable<Hsb> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public readonly record struct Hsb : IEquatable<Hsb> Constructors | Edit this page View Source Hsb() Constructor Declaration public Hsb() | Edit this page View Source Hsb(in ReadOnlySpan<byte>) Constructor Declaration public Hsb(in ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer Buffer | Edit this page View Source Hsb(in float, in float, in float, in float) Constructor Declaration public Hsb(in float hue, in float saturation = 1, in float brightness = 1, in float alpha = 1) Parameters Type Name Description float hue Hue (%) float saturation Saturation (%) float brightness Brightness (%) float alpha Alpha (%) Fields | Edit this page View Source ALPHA_FIELD_BYTE_OFFSET Alpha field byte offset Declaration public const int ALPHA_FIELD_BYTE_OFFSET = 12 Field Value Type Description int | Edit this page View Source Alpha Alpha (%) Declaration public readonly float Alpha Field Value Type Description float | Edit this page View Source BINARY_SIZE Binary size in bytes Declaration public const int BINARY_SIZE = 16 Field Value Type Description int | Edit this page View Source BRIGHTNESS_FIELD_BYTE_OFFSET Brightness field byte offset Declaration public const int BRIGHTNESS_FIELD_BYTE_OFFSET = 8 Field Value Type Description int | Edit this page View Source Black Black Declaration public static readonly Hsb Black Field Value Type Description Hsb | Edit this page View Source Brightness Brightness (%) Declaration public readonly float Brightness Field Value Type Description float | Edit this page View Source HUE_FIELD_BYTE_OFFSET Hue field byte offset Declaration public const int HUE_FIELD_BYTE_OFFSET = 0 Field Value Type Description int | Edit this page View Source Hue Hue (%) Declaration public readonly float Hue Field Value Type Description float | Edit this page View Source SATURATION_FIELD_BYTE_OFFSET Saturation field byte offset Declaration public const int SATURATION_FIELD_BYTE_OFFSET = 4 Field Value Type Description int | Edit this page View Source STRUCTURE_SIZE Structure size in bytes Declaration public const int STRUCTURE_SIZE = 16 Field Value Type Description int | Edit this page View Source Saturation Saturation (%) Declaration public readonly float Saturation Field Value Type Description float | Edit this page View Source White White Declaration public static readonly Hsb White Field Value Type Description Hsb Properties | Edit this page View Source HueDegree Hue degree value Declaration public float HueDegree { get; } Property Value Type Description float Methods | Edit this page View Source AddAlpha(in float) Get this instance with an added alpha value Declaration public Hsb AddAlpha(in float alpha) Parameters Type Name Description float alpha Alpha (%) Returns Type Description Hsb Hsb | Edit this page View Source AddBrightness(in float) Get this instance with an added brightness value Declaration public Hsb AddBrightness(in float brightness) Parameters Type Name Description float brightness Brightness (%) Returns Type Description Hsb Hsb | Edit this page View Source AddHue(in float) Get this instance with an added hue value Declaration public Hsb AddHue(in float hue) Parameters Type Name Description float hue Hue (%) Returns Type Description Hsb Hsb | Edit this page View Source AddSaturation(in float) Get this instance with an added saturation value Declaration public Hsb AddSaturation(in float saturation) Parameters Type Name Description float saturation Saturation (%) Returns Type Description Hsb Hsb | Edit this page View Source FromRgb(in Rgb) Create from RGB Declaration public static Hsb FromRgb(in Rgb rgb) Parameters Type Name Description Rgb rgb Rgb Returns Type Description Hsb Hsb | Edit this page View Source FromRgbA(in RgbA) Create from RGBA Declaration public static Hsb FromRgbA(in RgbA rgb) Parameters Type Name Description RgbA rgb RgbA Returns Type Description Hsb Hsb | Edit this page View Source GetBytes() Get bytes Declaration public byte[] GetBytes() Returns Type Description byte[] Bytes | Edit this page View Source GetBytes(in Span<byte>) Get bytes Declaration public Span<byte> GetBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Span<byte> Buffer | Edit this page View Source Parse(in string) Parse from a string Declaration public static Hsb Parse(in string str) Parameters Type Name Description string str string Returns Type Description Hsb Hsb | Edit this page View Source ToRgbA() Get as RGBA Declaration public RgbA ToRgbA() Returns Type Description RgbA RgbA | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source TryParse(in string, out Hsb) Parse from a string Declaration public static bool TryParse(in string str, out Hsb result) Parameters Type Name Description string str string Hsb result Result Returns Type Description bool If succeed | Edit this page View Source WithAlpha(in float) Get this instance with another alpha value Declaration public Hsb WithAlpha(in float alpha) Parameters Type Name Description float alpha Alpha (%) Returns Type Description Hsb Hsb | Edit this page View Source WithBrightness(in float) Get this instance with another brightness value Declaration public Hsb WithBrightness(in float brightness) Parameters Type Name Description float brightness Brightness (%) Returns Type Description Hsb Hsb | Edit this page View Source WithHue(in float) Get this instance with another hue value Declaration public Hsb WithHue(in float hue) Parameters Type Name Description float hue Hue (%) Returns Type Description Hsb Hsb | Edit this page View Source WithSaturation(in float) Get this instance with another saturation value Declaration public Hsb WithSaturation(in float saturation) Parameters Type Name Description float saturation Saturation (%) Returns Type Description Hsb Hsb Operators | Edit this page View Source implicit operator Hsb(in byte[]) Cast from bytes Declaration public static implicit operator Hsb(in byte[] buffer) Parameters Type Name Description byte[] buffer Buffer Returns Type Description Hsb | Edit this page View Source implicit operator Hsb(in Memory<byte>) Cast from bytes Declaration public static implicit operator Hsb(in Memory<byte> buffer) Parameters Type Name Description Memory<byte> buffer Buffer Returns Type Description Hsb | Edit this page View Source implicit operator Hsb(in ReadOnlyMemory<byte>) Cast from bytes Declaration public static implicit operator Hsb(in ReadOnlyMemory<byte> buffer) Parameters Type Name Description ReadOnlyMemory<byte> buffer Buffer Returns Type Description Hsb | Edit this page View Source implicit operator Hsb(in ReadOnlySpan<byte>) Cast from bytes Declaration public static implicit operator Hsb(in ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer Buffer Returns Type Description Hsb | Edit this page View Source implicit operator Hsb(in Span<byte>) Cast from bytes Declaration public static implicit operator Hsb(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description Hsb | Edit this page View Source implicit operator byte[](in Hsb) Cast as bytes Declaration public static implicit operator byte[](in Hsb hsb) Parameters Type Name Description Hsb hsb Hsb Returns Type Description byte[] | Edit this page View Source implicit operator Rgb(in Hsb) Cast as Rgb Declaration public static implicit operator Rgb(in Hsb hsb) Parameters Type Name Description Hsb hsb Hsb Returns Type Description Rgb | Edit this page View Source implicit operator RgbA(in Hsb) Cast as RgbA Declaration public static implicit operator RgbA(in Hsb hsb) Parameters Type Name Description Hsb hsb Hsb Returns Type Description RgbA | Edit this page View Source implicit operator Hsb(in Rgb) Cast from Rgb Declaration public static implicit operator Hsb(in Rgb rgb) Parameters Type Name Description Rgb rgb Rgb Returns Type Description Hsb | Edit this page View Source implicit operator Hsb(in RgbA) Cast from RgbA Declaration public static implicit operator Hsb(in RgbA buffer) Parameters Type Name Description RgbA buffer RgbA Returns Type Description Hsb Implements IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.HubStream.html": {
    "href": "api/wan24.Core.HubStream.html",
    "title": "Class HubStream | wan24-Core",
    "keywords": "Class HubStream Hub stream (write-only, all writing operations go to all target streams - in parallel, when using asynchronous methods; length/position targets the first stream per default) Inheritance object MarshalByRefObject Stream StreamBase HubStream Implements IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class HubStream : StreamBase, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source HubStream(in bool, params Stream[]) Constructor Declaration public HubStream(in bool leaveOpen, params Stream[] targets) Parameters Type Name Description bool leaveOpen Leave the target streams open when disposing? Stream[] targets Target streams | Edit this page View Source HubStream(params Stream[]) Constructor Declaration public HubStream(params Stream[] targets) Parameters Type Name Description Stream[] targets Target streams Fields | Edit this page View Source _CanSeek Can seek? Declaration protected bool? _CanSeek Field Value Type Description bool? Properties | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override sealed bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides Stream.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override sealed bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides Stream.CanSeek | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override sealed bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides Stream.CanWrite | Edit this page View Source LeaveOpen Leave the target streams open when disposing? Declaration public bool LeaveOpen { get; set; } Property Value Type Description bool | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override sealed long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides Stream.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides Stream.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source State Status information Declaration public virtual IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> | Edit this page View Source Targets Target streams Declaration public FrozenSet<Stream> Targets { get; } Property Value Type Description FrozenSet<Stream> Methods | Edit this page View Source Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. Declaration public override void Close() Overrides StreamBase.Close() | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides StreamBase.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override Task DisposeCore() Returns Type Description Task Overrides StreamBase.DisposeCore() | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides Stream.FlushAsync(CancellationToken) Exceptions Type Condition ObjectDisposedException The stream has been disposed. | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides Stream.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides Stream.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides Stream.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides Stream.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides Stream.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Implements IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IAppConfig.html": {
    "href": "api/wan24.Core.IAppConfig.html",
    "title": "Interface IAppConfig | wan24-Core",
    "keywords": "Interface IAppConfig Interface for an app configuration Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IAppConfig Methods | Edit this page View Source Apply() Apply this app configuration Declaration void Apply() | Edit this page View Source ApplyAsync(CancellationToken) Apply this app configuration Declaration Task ApplyAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IArray-1.html": {
    "href": "api/wan24.Core.IArray-1.html",
    "title": "Interface IArray<T> | wan24-Core",
    "keywords": "Interface IArray<T> Interface for an array Inherited Members IEnumerable<T>.GetEnumerator() IEquatable<Memory<T>>.Equals(Memory<T>) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IArray<T> : IEnumerable<T>, IEnumerable, IEquatable<Memory<T>> Type Parameters Name Description T Element type Properties | Edit this page View Source Array Array Declaration T[] Array { get; } Property Value Type Description T[] | Edit this page View Source this[Index, Index] Get a range Declaration Memory<T> this[Index start, Index end] { get; } Parameters Type Name Description Index start Start Index end End Property Value Type Description Memory<T> Range memory | Edit this page View Source this[int] Get/set an element Declaration T this[int offset] { get; set; } Parameters Type Name Description int offset Index Property Value Type Description T Element | Edit this page View Source this[Range] Get a range Declaration Memory<T> this[Range range] { get; } Parameters Type Name Description Range range Range Property Value Type Description Memory<T> Range memory | Edit this page View Source Length Length Declaration int Length { get; } Property Value Type Description int | Edit this page View Source LongLength Length Declaration long LongLength { get; } Property Value Type Description long | Edit this page View Source Memory Memory Declaration Memory<T> Memory { get; } Property Value Type Description Memory<T> | Edit this page View Source Span Span Declaration Span<T> Span { get; } Property Value Type Description Span<T> Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IAsyncEvent-2.EventHandlerAsync_Delegate.html": {
    "href": "api/wan24.Core.IAsyncEvent-2.EventHandlerAsync_Delegate.html",
    "title": "Delegate IAsyncEvent<tSender, tArgs>.EventHandlerAsync_Delegate | wan24-Core",
    "keywords": "Delegate IAsyncEvent<tSender, tArgs>.EventHandlerAsync_Delegate Event handler delegate Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task IAsyncEvent<tSender, tArgs>.EventHandlerAsync_Delegate(tSender sender, tArgs args, CancellationToken cancellationToken) Parameters Type Name Description tSender sender Sender tArgs args Arguments CancellationToken cancellationToken Cancellation token Returns Type Description Task Event handler delegate Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IAsyncEvent-2.EventHandler_Delegate.html": {
    "href": "api/wan24.Core.IAsyncEvent-2.EventHandler_Delegate.html",
    "title": "Delegate IAsyncEvent<tSender, tArgs>.EventHandler_Delegate | wan24-Core",
    "keywords": "Delegate IAsyncEvent<tSender, tArgs>.EventHandler_Delegate Event handler delegate Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void IAsyncEvent<tSender, tArgs>.EventHandler_Delegate(tSender sender, tArgs args, CancellationToken cancellationToken) Parameters Type Name Description tSender sender Sender tArgs args Arguments CancellationToken cancellationToken Cancellation token Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IAsyncEvent-2.html": {
    "href": "api/wan24.Core.IAsyncEvent-2.html",
    "title": "Interface IAsyncEvent<tSender, tArgs> | wan24-Core",
    "keywords": "Interface IAsyncEvent<tSender, tArgs> Asynchronous event interface Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IAsyncEvent<tSender, tArgs> where tSender : class where tArgs : EventArgs, new() Type Parameters Name Description tSender Sender type tArgs Arguments type Properties | Edit this page View Source AsyncEventHandlers Event handlers Declaration HashSet<IAsyncEvent<tSender, tArgs>.EventHandlerAsync_Delegate> AsyncEventHandlers { get; } Property Value Type Description HashSet<IAsyncEvent<tSender, tArgs>.EventHandlerAsync_Delegate> | Edit this page View Source Cancellation Cancellation Declaration CancellationToken? Cancellation { get; set; } Property Value Type Description CancellationToken? | Edit this page View Source EventHandlers Event handlers Declaration HashSet<IAsyncEvent<tSender, tArgs>.EventHandler_Delegate> EventHandlers { get; } Property Value Type Description HashSet<IAsyncEvent<tSender, tArgs>.EventHandler_Delegate> | Edit this page View Source Sender Sender Declaration tSender? Sender { get; } Property Value Type Description tSender | Edit this page View Source Timeout Event handler timeout Declaration TimeSpan? Timeout { get; set; } Property Value Type Description TimeSpan? Methods | Edit this page View Source DetachAll() Detach all event handlers Declaration void DetachAll() | Edit this page View Source RaiseEventAsync(TimeSpan?, CancellationToken) Raise the event Declaration Task RaiseEventAsync(TimeSpan? timeout = null, CancellationToken cancellationToken = default) Parameters Type Name Description TimeSpan? timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source RaiseEventAsync(tSender, TimeSpan?, CancellationToken) Raise the event Declaration Task RaiseEventAsync(tSender sender, TimeSpan? timeout = null, CancellationToken cancellationToken = default) Parameters Type Name Description tSender sender Sender TimeSpan? timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source RaiseEventAsync(tSender, tArgs, TimeSpan?, CancellationToken) Raise the event Declaration Task RaiseEventAsync(tSender sender, tArgs args, TimeSpan? timeout = null, CancellationToken cancellationToken = default) Parameters Type Name Description tSender sender Sender tArgs args Arguments TimeSpan? timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source RaiseEventAsync(tArgs, TimeSpan?, CancellationToken) Raise the event Declaration Task RaiseEventAsync(tArgs args, TimeSpan? timeout = null, CancellationToken cancellationToken = default) Parameters Type Name Description tArgs args Arguments TimeSpan? timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description Task Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IAsyncKeyedServiceProvider.html": {
    "href": "api/wan24.Core.IAsyncKeyedServiceProvider.html",
    "title": "Interface IAsyncKeyedServiceProvider | wan24-Core",
    "keywords": "Interface IAsyncKeyedServiceProvider Interface for an asynchronous keyed service provider Inherited Members IAsyncServiceProvider.GetServiceAsync(Type, CancellationToken) IKeyedServiceProvider.GetKeyedService(Type, object) IKeyedServiceProvider.GetRequiredKeyedService(Type, object) IServiceProvider.GetService(Type) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IAsyncKeyedServiceProvider : IAsyncServiceProvider, IKeyedServiceProvider, IServiceProvider Methods | Edit this page View Source GetKeyedServiceAsync(Type, object?, CancellationToken) Gets the service object of the specified type. Declaration Task<object?> GetKeyedServiceAsync(Type serviceType, object? serviceKey, CancellationToken cancellationToken = default) Parameters Type Name Description Type serviceType An object that specifies the type of service object to get. object serviceKey An object that specifies the key of service object to get. CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> A service object of type serviceType. -or- null if there is no service object of type serviceType. | Edit this page View Source GetRequiredKeyedServiceAsync(Type, object?, CancellationToken) Gets service of type serviceType from the IServiceProvider implementing this interface. Declaration Task<object> GetRequiredKeyedServiceAsync(Type serviceType, object? serviceKey, CancellationToken cancellationToken = default) Parameters Type Name Description Type serviceType An object that specifies the type of service object to get. object serviceKey The ServiceKey of the service. CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> A service object of type serviceType. Throws an exception if the IServiceProvider cannot create the object. Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IAsyncObjectPool-1.html": {
    "href": "api/wan24.Core.IAsyncObjectPool-1.html",
    "title": "Interface IAsyncObjectPool<T> | wan24-Core",
    "keywords": "Interface IAsyncObjectPool<T> Interface for an object pool which supports asynchronous renting / returning Inherited Members IObjectPool<T>.Rent() IObjectPool<T>.Return(in T, in bool) IObjectPool.RentObject() IObjectPool.Return(in object, in bool) IPool.Name IPool.Capacity IPool.Available IPool.ItemType Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IAsyncObjectPool<T> : IObjectPool<T>, IObjectPool, IPool Type Parameters Name Description T Item type Methods | Edit this page View Source RentAsync() Rent an item Declaration Task<T> RentAsync() Returns Type Description Task<T> Item (IObjectPoolItem will be reset before returning) | Edit this page View Source ReturnAsync(T, bool) Return an item Declaration Task ReturnAsync(T item, bool reset = false) Parameters Type Name Description T item Item bool reset Reset the IObjectPoolItem object? Returns Type Description Task Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IAsyncServiceProvider.html": {
    "href": "api/wan24.Core.IAsyncServiceProvider.html",
    "title": "Interface IAsyncServiceProvider | wan24-Core",
    "keywords": "Interface IAsyncServiceProvider Interface for an asynchronous service provider Inherited Members IServiceProvider.GetService(Type) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IAsyncServiceProvider : IServiceProvider Methods | Edit this page View Source GetServiceAsync(Type, CancellationToken) Get a service Declaration Task<object?> GetServiceAsync(Type serviceType, CancellationToken cancellationToken = default) Parameters Type Name Description Type serviceType Service type CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Service Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IConfigOption.Option_Delegate.html": {
    "href": "api/wan24.Core.IConfigOption.Option_Delegate.html",
    "title": "Delegate IConfigOption.Option_Delegate | wan24-Core",
    "keywords": "Delegate IConfigOption.Option_Delegate Delegate for option events Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void IConfigOption.Option_Delegate(IConfigOption option, object? oldValue) Parameters Type Name Description IConfigOption option Sender object oldValue Old value Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IConfigOption.html": {
    "href": "api/wan24.Core.IConfigOption.html",
    "title": "Interface IConfigOption | wan24-Core",
    "keywords": "Interface IConfigOption Interface for a configuration option Inherited Members IChangeToken.RegisterChangeCallback(Action<object>, object) IChangeToken.HasChanged IChangeToken.ActiveChangeCallbacks Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IConfigOption : IChangeToken Properties | Edit this page View Source CanBeOverridden Can be overridden by a sub-option? Declaration bool CanBeOverridden { get; set; } Property Value Type Description bool | Edit this page View Source CanOverride Can override the parent option? Declaration bool CanOverride { get; } Property Value Type Description bool | Edit this page View Source Configuration Hosting configuration Declaration IOverridableConfig Configuration { get; } Property Value Type Description IOverridableConfig | Edit this page View Source DoesOverride Does override the parent option? Declaration bool DoesOverride { get; } Property Value Type Description bool | Edit this page View Source DynamicFinalValue Dynamic final value (may be the default value, if not set and not overridden) Declaration dynamic? DynamicFinalValue { get; } Property Value Type Description dynamic | Edit this page View Source DynamicParentValue Overriding parent option dynamic value Declaration dynamic? DynamicParentValue { get; } Property Value Type Description dynamic | Edit this page View Source DynamicSubValue Sub-configuration dynamic value Declaration dynamic? DynamicSubValue { get; } Property Value Type Description dynamic | Edit this page View Source DynamicValue Dynamic value (may be the default value, if not set) Declaration dynamic? DynamicValue { get; } Property Value Type Description dynamic | Edit this page View Source FinalValue Final value (may be the default value, if not set and not overridden) Declaration object? FinalValue { get; } Property Value Type Description object | Edit this page View Source HasValue Has this option a (sub-)value? Declaration bool HasValue { get; } Property Value Type Description bool | Edit this page View Source IsChanged Is changed? Declaration bool IsChanged { get; } Property Value Type Description bool | Edit this page View Source IsOverridden If the sub-option overrides this option Declaration bool IsOverridden { get; } Property Value Type Description bool | Edit this page View Source IsSet Is set? Declaration bool IsSet { get; } Property Value Type Description bool | Edit this page View Source MasterOption Master configuration option Declaration IConfigOption MasterOption { get; } Property Value Type Description IConfigOption | Edit this page View Source ParentDoesOverride Does the parent option override its parents option? Declaration bool ParentDoesOverride { get; } Property Value Type Description bool | Edit this page View Source ParentOption Parent configuration option Declaration IConfigOption? ParentOption { get; } Property Value Type Description IConfigOption | Edit this page View Source ParentValue Overriding parent option value Declaration object? ParentValue { get; } Property Value Type Description object | Edit this page View Source PropertyName Property name Declaration string PropertyName { get; } Property Value Type Description string | Edit this page View Source SubOption Sub-configuration option Declaration IConfigOption? SubOption { get; } Property Value Type Description IConfigOption | Edit this page View Source SubValue Sub-configuration value Declaration object? SubValue { get; } Property Value Type Description object | Edit this page View Source SubWantsOverride If the sub-option wants to override this option Declaration bool SubWantsOverride { get; } Property Value Type Description bool | Edit this page View Source SyncObject An object for thread synchronization Declaration object SyncObject { get; } Property Value Type Description object | Edit this page View Source Value Value (may be the default value, if not set) Declaration object? Value { get; set; } Property Value Type Description object Methods | Edit this page View Source ResetChanged(in bool) Reset the changed state Declaration void ResetChanged(in bool recursive = true) Parameters Type Name Description bool recursive Recursive? | Edit this page View Source SetDynamicValue(in dynamic?) Set a dynamic value Declaration void SetDynamicValue(in dynamic? value) Parameters Type Name Description dynamic value Value | Edit this page View Source Unset(in bool) Unset the value Declaration void Unset(in bool recursive = false) Parameters Type Name Description bool recursive Recursive? | Edit this page View Source UnsetOverrides() Unset overrides (recursive!) Declaration void UnsetOverrides() Events | Edit this page View Source OnChange Raised when the value was changed (bubbles to the root option) Declaration event IConfigOption.Option_Delegate? OnChange Event Type Type Description IConfigOption.Option_Delegate Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IDisposableObject.Dispose_Delegate.html": {
    "href": "api/wan24.Core.IDisposableObject.Dispose_Delegate.html",
    "title": "Delegate IDisposableObject.Dispose_Delegate | wan24-Core",
    "keywords": "Delegate IDisposableObject.Dispose_Delegate Delegate for the disposing events Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void IDisposableObject.Dispose_Delegate(IDisposableObject sender, EventArgs e) Parameters Type Name Description IDisposableObject sender Sender EventArgs e Event arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IDisposableObject.html": {
    "href": "api/wan24.Core.IDisposableObject.html",
    "title": "Interface IDisposableObject | wan24-Core",
    "keywords": "Interface IDisposableObject Interface for a disposable object Inherited Members IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IDisposableObject : IDisposable, IAsyncDisposable Properties | Edit this page View Source IsDisposed Is disposed? (final object disposing state) Declaration bool IsDisposed { get; } Property Value Type Description bool | Edit this page View Source IsDisposing Is disposing? (is true when disposed already, too!) Declaration bool IsDisposing { get; } Property Value Type Description bool Events | Edit this page View Source OnDisposed Raised when disposed Declaration event IDisposableObject.Dispose_Delegate? OnDisposed Event Type Type Description IDisposableObject.Dispose_Delegate | Edit this page View Source OnDisposing Raised when disposing Declaration event IDisposableObject.Dispose_Delegate? OnDisposing Event Type Type Description IDisposableObject.Dispose_Delegate Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IEmail.html": {
    "href": "api/wan24.Core.IEmail.html",
    "title": "Interface IEmail | wan24-Core",
    "keywords": "Interface IEmail Interface for an email Inherited Members IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IEmail : IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source Attachments Attached files Declaration IReadOnlyCollection<IEmailAttachment> Attachments { get; } Property Value Type Description IReadOnlyCollection<IEmailAttachment> | Edit this page View Source FromEmail Sender email address Declaration string FromEmail { get; } Property Value Type Description string | Edit this page View Source HtmlBody HTML body Declaration string? HtmlBody { get; } Property Value Type Description string | Edit this page View Source Subject Subject Declaration string Subject { get; } Property Value Type Description string | Edit this page View Source TextBody Text body Declaration string? TextBody { get; } Property Value Type Description string | Edit this page View Source ToEmail Recipient email address Declaration string ToEmail { get; } Property Value Type Description string Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) EmailExtensions.Send(IEmail, IMta?) EmailExtensions.Send(IEmail, IMtaConnection) EmailExtensions.SendAsync(IEmail, IMta?, CancellationToken) EmailExtensions.SendAsync(IEmail, IMtaConnection, CancellationToken) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IEmailAttachment.html": {
    "href": "api/wan24.Core.IEmailAttachment.html",
    "title": "Interface IEmailAttachment | wan24-Core",
    "keywords": "Interface IEmailAttachment Interface for an email attachment Inherited Members IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IEmailAttachment : IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source FileName Filename Declaration string FileName { get; } Property Value Type Description string | Edit this page View Source MimeType MIME type Declaration string MimeType { get; } Property Value Type Description string | Edit this page View Source Stream Stream Declaration Stream Stream { get; } Property Value Type Description Stream Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IEmailTemplate.html": {
    "href": "api/wan24.Core.IEmailTemplate.html",
    "title": "Interface IEmailTemplate | wan24-Core",
    "keywords": "Interface IEmailTemplate Interface for an email template Inherited Members IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IEmailTemplate : IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source Attachments Attachments Declaration ReadOnlyCollection<IEmailAttachment> Attachments { get; } Property Value Type Description ReadOnlyCollection<IEmailAttachment> | Edit this page View Source HtmlBody HTML body Declaration string? HtmlBody { get; } Property Value Type Description string | Edit this page View Source Subject Subject Declaration string Subject { get; } Property Value Type Description string | Edit this page View Source TextBody Text body Declaration string? TextBody { get; } Property Value Type Description string Methods | Edit this page View Source CreateEmail(string, string, Dictionary<string, string>?, params IEmailAttachment[]) Create an email from this template Declaration IEmail CreateEmail(string fromEmail, string toEmail, Dictionary<string, string>? parserData = null, params IEmailAttachment[] attachments) Parameters Type Name Description string fromEmail Sender email address string toEmail Recipient email address Dictionary<string, string> parserData Parser data IEmailAttachment[] attachments Attachments Returns Type Description IEmail Email | Edit this page View Source CreateEmailAsync(string, string, Dictionary<string, string>?, CancellationToken, params IEmailAttachment[]) Create an email from this template Declaration Task<IEmail> CreateEmailAsync(string fromEmail, string toEmail, Dictionary<string, string>? parserData = null, CancellationToken cancellationToken = default, params IEmailAttachment[] attachments) Parameters Type Name Description string fromEmail Sender email address string toEmail Recipient email address Dictionary<string, string> parserData Parser data CancellationToken cancellationToken Cancellation token IEmailAttachment[] attachments Attachments Returns Type Description Task<IEmail> Email Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) EmailExtensions.Send(IEmailTemplate, string, string, Dictionary<string, string>?, IMta?, params IEmailAttachment[]) EmailExtensions.Send(IEmailTemplate, string, string, IMtaConnection, Dictionary<string, string>?, params IEmailAttachment[]) EmailExtensions.SendAsync(IEmailTemplate, string, string, Dictionary<string, string>?, IMta?, CancellationToken, params IEmailAttachment[]) EmailExtensions.SendAsync(IEmailTemplate, string, string, IMtaConnection, Dictionary<string, string>?, CancellationToken, params IEmailAttachment[]) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IEnumInfo-1.html": {
    "href": "api/wan24.Core.IEnumInfo-1.html",
    "title": "Interface IEnumInfo<T> | wan24-Core",
    "keywords": "Interface IEnumInfo<T> Interface for an enumeration information object Inherited Members IEnumInfo.DefaultValue IEnumInfo.IsUnsignedNumeric IEnumInfo.IsMixed IEnumInfo.HasFlags IEnumInfo.FlagsValue IEnumInfo.EnumNames IEnumInfo.NumericEnumValues IEnumInfo.ValueDisplayTexts IEnumInfo.IsValidValue(in object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IEnumInfo<T> : IEnumInfo where T : struct, Enum, IConvertible Type Parameters Name Description T Enumeration type Properties | Edit this page View Source EnumFlagValues Flag values Declaration FrozenSet<T> EnumFlagValues { get; } Property Value Type Description FrozenSet<T> | Edit this page View Source EnumKeyValues All enumeration keys and their enumeration values Declaration FrozenDictionary<string, T> EnumKeyValues { get; } Property Value Type Description FrozenDictionary<string, T> | Edit this page View Source EnumValues Enumeration values Declaration FrozenSet<T> EnumValues { get; } Property Value Type Description FrozenSet<T> Methods | Edit this page View Source IsValidValue(in T) Determine if the enumeration value is valid Declaration bool IsValidValue(in T value) Parameters Type Name Description T value Value Returns Type Description bool If the value is value Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IEnumInfo.html": {
    "href": "api/wan24.Core.IEnumInfo.html",
    "title": "Interface IEnumInfo | wan24-Core",
    "keywords": "Interface IEnumInfo Interface for an enumeration information object Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IEnumInfo Properties | Edit this page View Source DefaultValue Default value Declaration Enum DefaultValue { get; } Property Value Type Description Enum | Edit this page View Source EnumNames Enumeration names Declaration FrozenSet<string> EnumNames { get; } Property Value Type Description FrozenSet<string> | Edit this page View Source FlagsValue Flags Declaration object FlagsValue { get; } Property Value Type Description object | Edit this page View Source HasFlags Has the FlagsAttribute attribute? Declaration bool HasFlags { get; } Property Value Type Description bool | Edit this page View Source IsMixed Is a mixed enumeration which contains values and flags? Declaration bool IsMixed { get; } Property Value Type Description bool | Edit this page View Source IsUnsignedNumeric Is the numeric value unsigned? Declaration bool IsUnsignedNumeric { get; } Property Value Type Description bool | Edit this page View Source NumericEnumValues All enumeration values and their numeric values as dictionary Declaration FrozenDictionary<string, object> NumericEnumValues { get; } Property Value Type Description FrozenDictionary<string, object> | Edit this page View Source ValueDisplayTexts Value display texts Declaration FrozenDictionary<string, string> ValueDisplayTexts { get; } Property Value Type Description FrozenDictionary<string, string> Methods | Edit this page View Source IsValidValue(in object) Determine if the enumeration value is valid Declaration bool IsValidValue(in object value) Parameters Type Name Description object value Value Returns Type Description bool If the value is value Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IEnumeration.html": {
    "href": "api/wan24.Core.IEnumeration.html",
    "title": "Interface IEnumeration | wan24-Core",
    "keywords": "Interface IEnumeration Interface for an enumeration Inherited Members IComparable.CompareTo(object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IEnumeration : IComparable Properties | Edit this page View Source AllEnumerationValues All enumeration values Declaration public static IReadOnlyCollection<IEnumeration> AllEnumerationValues { get; } Property Value Type Description IReadOnlyCollection<IEnumeration> | Edit this page View Source KeyValues Key values Declaration public static IReadOnlyDictionary<string, int> KeyValues { get; } Property Value Type Description IReadOnlyDictionary<string, int> | Edit this page View Source Name Name Declaration string Name { get; } Property Value Type Description string | Edit this page View Source Value Value Declaration int Value { get; } Property Value Type Description int | Edit this page View Source ValueKeys Value keys Declaration public static IReadOnlyDictionary<int, string> ValueKeys { get; } Property Value Type Description IReadOnlyDictionary<int, string> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IEventThrottle.html": {
    "href": "api/wan24.Core.IEventThrottle.html",
    "title": "Interface IEventThrottle | wan24-Core",
    "keywords": "Interface IEventThrottle Interface for an event throttle Inherited Members IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IEventThrottle : IDisposableObject, IDisposable, IAsyncDisposable Methods | Edit this page View Source Raise() Raise the event Declaration bool Raise() Returns Type Description bool Was raised? Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IGlobalLock.html": {
    "href": "api/wan24.Core.IGlobalLock.html",
    "title": "Interface IGlobalLock | wan24-Core",
    "keywords": "Interface IGlobalLock Interface for a global lock Inherited Members IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IGlobalLock : IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source CreatedNew Created a new mutex? Declaration bool CreatedNew { get; } Property Value Type Description bool | Edit this page View Source GUID GUID Declaration Guid GUID { get; } Property Value Type Description Guid | Edit this page View Source ID ID Declaration string ID { get; } Property Value Type Description string Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IInstancePool-1.InstanceAsync_Delegate.html": {
    "href": "api/wan24.Core.IInstancePool-1.InstanceAsync_Delegate.html",
    "title": "Delegate IInstancePool<T>.InstanceAsync_Delegate | wan24-Core",
    "keywords": "Delegate IInstancePool<T>.InstanceAsync_Delegate Asynchronous instance factory delegate Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task<T> IInstancePool<T>.InstanceAsync_Delegate(IInstancePool<T> pool, CancellationToken cancellationToken) Parameters Type Name Description IInstancePool<T> pool Instance pool CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Instance Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IInstancePool-1.Instance_Delegate.html": {
    "href": "api/wan24.Core.IInstancePool-1.Instance_Delegate.html",
    "title": "Delegate IInstancePool<T>.Instance_Delegate | wan24-Core",
    "keywords": "Delegate IInstancePool<T>.Instance_Delegate Synchronous instance factory delegate Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate T IInstancePool<T>.Instance_Delegate(IInstancePool<T> pool) Parameters Type Name Description IInstancePool<T> pool Instance pool Returns Type Description T Instance Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IInstancePool-1.html": {
    "href": "api/wan24.Core.IInstancePool-1.html",
    "title": "Interface IInstancePool<T> | wan24-Core",
    "keywords": "Interface IInstancePool<T> Interface for an instance pool Inherited Members IInstancePool.Capacity IInstancePool.Available IInstancePool.Created IInstancePool.CreatedOnDemand IInstancePool.GetOneObject() IInstancePool.GetOneObjectAsync(CancellationToken) IInstancePool.GetManyObjects(int, CancellationToken) IInstancePool.GetManyObjectsAsync(int, CancellationToken) IServiceWorker.Name IServiceWorker.IsRunning IServiceWorker.IsPaused IServiceWorker.CanPause IServiceWorker.Started IServiceWorker.Paused IServiceWorker.Stopped IServiceWorker.StartAsync() IServiceWorker.StopAsync() IServiceWorker.RestartAsync() IServiceWorker.PauseAsync() IServiceWorker.ResumeAsync() IHostedService.StartAsync(CancellationToken) IHostedService.StopAsync(CancellationToken) IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStatusProvider.State Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IInstancePool<T> : IInstancePool, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : class Type Parameters Name Description T Object type Methods | Edit this page View Source GetMany(int, CancellationToken) Get many instances Declaration IEnumerable<T> GetMany(int count, CancellationToken cancellationToken = default) Parameters Type Name Description int count Number of instances CancellationToken cancellationToken Cancellation token Returns Type Description IEnumerable<T> Instances | Edit this page View Source GetManyAsync(int, CancellationToken) Get many instances Declaration IAsyncEnumerable<T> GetManyAsync(int count, CancellationToken cancellationToken = default) Parameters Type Name Description int count Number of instances CancellationToken cancellationToken Cancellation token Returns Type Description IAsyncEnumerable<T> Instances | Edit this page View Source GetOne() Get one instance Declaration T GetOne() Returns Type Description T Instance | Edit this page View Source GetOneAsync(CancellationToken) Get one instance Declaration Task<T> GetOneAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Instance Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IInstancePool.html": {
    "href": "api/wan24.Core.IInstancePool.html",
    "title": "Interface IInstancePool | wan24-Core",
    "keywords": "Interface IInstancePool Interface for an instance pool Inherited Members IServiceWorker.Name IServiceWorker.IsRunning IServiceWorker.IsPaused IServiceWorker.CanPause IServiceWorker.Started IServiceWorker.Paused IServiceWorker.Stopped IServiceWorker.StartAsync() IServiceWorker.StopAsync() IServiceWorker.RestartAsync() IServiceWorker.PauseAsync() IServiceWorker.ResumeAsync() IHostedService.StartAsync(CancellationToken) IHostedService.StopAsync(CancellationToken) IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStatusProvider.State Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IInstancePool : IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Properties | Edit this page View Source Available Available instances Declaration int Available { get; } Property Value Type Description int | Edit this page View Source Capacity Capacity Declaration int Capacity { get; } Property Value Type Description int | Edit this page View Source Created Total number of created instances Declaration int Created { get; } Property Value Type Description int | Edit this page View Source CreatedOnDemand Total number of on-demand created instances Declaration int CreatedOnDemand { get; } Property Value Type Description int Methods | Edit this page View Source GetManyObjects(int, CancellationToken) Get many instances Declaration IEnumerable<object> GetManyObjects(int count, CancellationToken cancellationToken = default) Parameters Type Name Description int count Number of instances CancellationToken cancellationToken Cancellation token Returns Type Description IEnumerable<object> Instances | Edit this page View Source GetManyObjectsAsync(int, CancellationToken) Get many instances Declaration IAsyncEnumerable<object> GetManyObjectsAsync(int count, CancellationToken cancellationToken = default) Parameters Type Name Description int count Number of instances CancellationToken cancellationToken Cancellation token Returns Type Description IAsyncEnumerable<object> Instances | Edit this page View Source GetOneObject() Get one instance Declaration object GetOneObject() Returns Type Description object Instance | Edit this page View Source GetOneObjectAsync(CancellationToken) Get one instance Declaration Task<object> GetOneObjectAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Instance Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IItemQueueWorker-1.html": {
    "href": "api/wan24.Core.IItemQueueWorker-1.html",
    "title": "Interface IItemQueueWorker<T> | wan24-Core",
    "keywords": "Interface IItemQueueWorker<T> Interface for an item queue worker Inherited Members IQueueWorker.Queued IQueueWorker.EnqueueAsync(QueueWorker.Task_Delegate, CancellationToken) IQueueWorker.TryEnqueue(QueueWorker.Task_Delegate, CancellationToken) IQueueWorker.EnqueueRangeAsync(IEnumerable<QueueWorker.Task_Delegate>, CancellationToken) IQueueWorker.EnqueueRangeAsync(IAsyncEnumerable<QueueWorker.Task_Delegate>, CancellationToken) IServiceWorker.Name IServiceWorker.IsRunning IServiceWorker.IsPaused IServiceWorker.CanPause IServiceWorker.Started IServiceWorker.Paused IServiceWorker.Stopped IServiceWorker.StartAsync() IServiceWorker.StopAsync() IServiceWorker.RestartAsync() IServiceWorker.PauseAsync() IServiceWorker.ResumeAsync() IHostedService.StartAsync(CancellationToken) IHostedService.StopAsync(CancellationToken) IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStatusProvider.State Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IItemQueueWorker<T> : IQueueWorker, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Type Parameters Name Description T Item type Methods | Edit this page View Source EnqueueAsync(T, CancellationToken) Enqueue an item to process Declaration ValueTask EnqueueAsync(T item, CancellationToken cancellationToken = default) Parameters Type Name Description T item Item CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask | Edit this page View Source EnqueueRangeAsync(IAsyncEnumerable<T>, CancellationToken) Enqueue many items for processing Declaration ValueTask<int> EnqueueRangeAsync(IAsyncEnumerable<T> items, CancellationToken cancellationToken = default) Parameters Type Name Description IAsyncEnumerable<T> items Items CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<int> Number of enqueued items | Edit this page View Source EnqueueRangeAsync(IEnumerable<T>, CancellationToken) Enqueue many items for processing Declaration ValueTask<int> EnqueueRangeAsync(IEnumerable<T> items, CancellationToken cancellationToken = default) Parameters Type Name Description IEnumerable<T> items Items CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<int> Number of enqueued items | Edit this page View Source TryEnqueue(T) Try enqueueing an item to process Declaration bool TryEnqueue(T item) Parameters Type Name Description T item Item Returns Type Description bool Enqueued? Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IMta.html": {
    "href": "api/wan24.Core.IMta.html",
    "title": "Interface IMta | wan24-Core",
    "keywords": "Interface IMta Interface for a MTA Inherited Members IMtaConnection.MTA IMtaConnection.Settings IMtaConnection.Send(IEmail) IMtaConnection.SendAsync(IEmail, CancellationToken) IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IMta : IMtaConnection, IDisposableObject, IDisposable, IAsyncDisposable Methods | Edit this page View Source GetConnection(IMtaSettings?) Get a connection Declaration IMtaConnection GetConnection(IMtaSettings? settings = null) Parameters Type Name Description IMtaSettings settings Settings Returns Type Description IMtaConnection Connection (if no settings were given, the instance should be returned using ReturnConnection(IMtaConnection)) | Edit this page View Source GetConnectionAsync(IMtaSettings?, CancellationToken) Get a connection Declaration Task<IMtaConnection> GetConnectionAsync(IMtaSettings? settings = null, CancellationToken cancellationToken = default) Parameters Type Name Description IMtaSettings settings Settings CancellationToken cancellationToken Cancellation token Returns Type Description Task<IMtaConnection> Connection (if no settings were given, the instance should be returned using ReturnConnectionAsync(IMtaConnection, CancellationToken)) | Edit this page View Source ReturnConnection(IMtaConnection) Return a connection Declaration void ReturnConnection(IMtaConnection connection) Parameters Type Name Description IMtaConnection connection Connection | Edit this page View Source ReturnConnectionAsync(IMtaConnection, CancellationToken) Return a connection Declaration Task ReturnConnectionAsync(IMtaConnection connection, CancellationToken cancellationToken = default) Parameters Type Name Description IMtaConnection connection Connection CancellationToken cancellationToken Cancellation token Returns Type Description Task Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IMtaConnection.html": {
    "href": "api/wan24.Core.IMtaConnection.html",
    "title": "Interface IMtaConnection | wan24-Core",
    "keywords": "Interface IMtaConnection Interface for a MTA connection Inherited Members IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IMtaConnection : IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source MTA MTA Declaration IMta MTA { get; } Property Value Type Description IMta | Edit this page View Source Settings Settings Declaration IMtaSettings Settings { get; } Property Value Type Description IMtaSettings Methods | Edit this page View Source Send(IEmail) Send an email Declaration bool Send(IEmail email) Parameters Type Name Description IEmail email Email Returns Type Description bool Succeed? | Edit this page View Source SendAsync(IEmail, CancellationToken) Send an email Declaration Task<bool> SendAsync(IEmail email, CancellationToken cancellationToken = default) Parameters Type Name Description IEmail email Email CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> Succeed? Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IMtaSettings.html": {
    "href": "api/wan24.Core.IMtaSettings.html",
    "title": "Interface IMtaSettings | wan24-Core",
    "keywords": "Interface IMtaSettings Interface for MTA settings Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IMtaSettings Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IObjectKey.html": {
    "href": "api/wan24.Core.IObjectKey.html",
    "title": "Interface IObjectKey | wan24-Core",
    "keywords": "Interface IObjectKey Interface for objects which provide an object key Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IObjectKey Properties | Edit this page View Source Key Object key Declaration object Key { get; } Property Value Type Description object Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IObjectLockManager.html": {
    "href": "api/wan24.Core.IObjectLockManager.html",
    "title": "Interface IObjectLockManager | wan24-Core",
    "keywords": "Interface IObjectLockManager Interface for an object lock manager Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IObjectLockManager Properties | Edit this page View Source ActiveLocks Number of active locks Declaration int ActiveLocks { get; } Property Value Type Description int | Edit this page View Source Name Display name Declaration string? Name { get; } Property Value Type Description string | Edit this page View Source ObjectType Managing object type Declaration Type ObjectType { get; } Property Value Type Description Type Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IObjectPool-1.html": {
    "href": "api/wan24.Core.IObjectPool-1.html",
    "title": "Interface IObjectPool<T> | wan24-Core",
    "keywords": "Interface IObjectPool<T> Interface for an object pool Inherited Members IObjectPool.RentObject() IObjectPool.Return(in object, in bool) IPool.Name IPool.Capacity IPool.Available IPool.ItemType Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IObjectPool<T> : IObjectPool, IPool Type Parameters Name Description T Item type Methods | Edit this page View Source Rent() Rent an item Declaration T Rent() Returns Type Description T Item (IObjectPoolItem will be reset before returning) | Edit this page View Source Return(in T, in bool) Return an item Declaration void Return(in T item, in bool reset = false) Parameters Type Name Description T item Item bool reset Reset the IObjectPoolItem object? Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IObjectPool.html": {
    "href": "api/wan24.Core.IObjectPool.html",
    "title": "Interface IObjectPool | wan24-Core",
    "keywords": "Interface IObjectPool Interface for an object pool Inherited Members IPool.Name IPool.Capacity IPool.Available IPool.ItemType Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IObjectPool : IPool Methods | Edit this page View Source RentObject() Rent an item Declaration object RentObject() Returns Type Description object Item (IObjectPoolItem will be reset before returning) | Edit this page View Source Return(in object, in bool) Return an item Declaration void Return(in object item, in bool reset = false) Parameters Type Name Description object item Item bool reset Reset the IObjectPoolItem object? Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IObjectPoolItem.html": {
    "href": "api/wan24.Core.IObjectPoolItem.html",
    "title": "Interface IObjectPoolItem | wan24-Core",
    "keywords": "Interface IObjectPoolItem Interface for an object pool item Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IObjectPoolItem Methods | Edit this page View Source Reset() Reset the item for re-use Declaration void Reset() Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IObjectStorage-2.html": {
    "href": "api/wan24.Core.IObjectStorage-2.html",
    "title": "Interface IObjectStorage<tKey, tObj> | wan24-Core",
    "keywords": "Interface IObjectStorage<tKey, tObj> Interface for an object storage Inherited Members IObjectStorage.InMemoryLimit IObjectStorage.Stored IObjectStorage.StoredPeak IObjectStorage.ObjectReferences IServiceWorker.Name IServiceWorker.IsRunning IServiceWorker.IsPaused IServiceWorker.CanPause IServiceWorker.Started IServiceWorker.Paused IServiceWorker.Stopped IServiceWorker.StartAsync() IServiceWorker.StopAsync() IServiceWorker.RestartAsync() IServiceWorker.PauseAsync() IServiceWorker.ResumeAsync() IHostedService.StartAsync(CancellationToken) IHostedService.StopAsync(CancellationToken) IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStatusProvider.State Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IObjectStorage<tKey, tObj> : IObjectStorage, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where tKey : notnull where tObj : class, IStoredObject<tKey> Type Parameters Name Description tKey Object key type tObj Object type Methods | Edit this page View Source GetObject(in tKey) Get an object Declaration StoredObject<tKey, tObj>? GetObject(in tKey key) Parameters Type Name Description tKey key Key Returns Type Description StoredObject<tKey, tObj> Object | Edit this page View Source GetObjectAsync(tKey, CancellationToken) Get an object Declaration Task<StoredObject<tKey, tObj>?> GetObjectAsync(tKey key, CancellationToken cancellationToken = default) Parameters Type Name Description tKey key Key CancellationToken cancellationToken Cancellation token Returns Type Description Task<StoredObject<tKey, tObj>> Object | Edit this page View Source Release(in tObj) Release an object Declaration void Release(in tObj obj) Parameters Type Name Description tObj obj Object | Edit this page View Source Remove(in tObj) Remove an object Declaration tObj Remove(in tObj obj) Parameters Type Name Description tObj obj Object Returns Type Description tObj Object Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IObjectStorage.html": {
    "href": "api/wan24.Core.IObjectStorage.html",
    "title": "Interface IObjectStorage | wan24-Core",
    "keywords": "Interface IObjectStorage Interface for an object storage Inherited Members IServiceWorker.Name IServiceWorker.IsRunning IServiceWorker.IsPaused IServiceWorker.CanPause IServiceWorker.Started IServiceWorker.Paused IServiceWorker.Stopped IServiceWorker.StartAsync() IServiceWorker.StopAsync() IServiceWorker.RestartAsync() IServiceWorker.PauseAsync() IServiceWorker.ResumeAsync() IHostedService.StartAsync(CancellationToken) IHostedService.StopAsync(CancellationToken) IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStatusProvider.State Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IObjectStorage : IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Properties | Edit this page View Source InMemoryLimit Max. number of objects to hold in memory Declaration int InMemoryLimit { get; } Property Value Type Description int | Edit this page View Source ObjectReferences Number of currently active object references Declaration long ObjectReferences { get; } Property Value Type Description long | Edit this page View Source Stored Number of objects in memory Declaration int Stored { get; } Property Value Type Description int | Edit this page View Source StoredPeak Max. counted number of objects in memory Declaration int StoredPeak { get; } Property Value Type Description int Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IOrderedDictionary-2.html": {
    "href": "api/wan24.Core.IOrderedDictionary-2.html",
    "title": "Interface IOrderedDictionary<tKey, tValue> | wan24-Core",
    "keywords": "Interface IOrderedDictionary<tKey, tValue> Interface for an ordered dictionary Inherited Members IDictionary<tKey, tValue>.Add(tKey, tValue) IDictionary<tKey, tValue>.ContainsKey(tKey) IDictionary<tKey, tValue>.Remove(tKey) IDictionary<tKey, tValue>.TryGetValue(tKey, out tValue) IDictionary<tKey, tValue>.this[tKey] IDictionary<tKey, tValue>.Keys IDictionary<tKey, tValue>.Values IOrderedDictionary.GetEnumerator() IOrderedDictionary.Insert(int, object, object) IOrderedDictionary.RemoveAt(int) IOrderedDictionary.this[int] IDictionary.Add(object, object) IDictionary.Clear() IDictionary.Contains(object) IDictionary.Remove(object) IDictionary.IsFixedSize IDictionary.IsReadOnly IDictionary.this[object] IDictionary.Keys IDictionary.Values IReadOnlyDictionary<tKey, tValue>.ContainsKey(tKey) IReadOnlyDictionary<tKey, tValue>.TryGetValue(tKey, out tValue) IReadOnlyDictionary<tKey, tValue>.this[tKey] IReadOnlyDictionary<tKey, tValue>.Keys IReadOnlyDictionary<tKey, tValue>.Values IReadOnlyCollection<KeyValuePair<tKey, tValue>>.Count ICollection.CopyTo(Array, int) ICollection.Count ICollection.IsSynchronized ICollection.SyncRoot ICollection<KeyValuePair<tKey, tValue>>.Add(KeyValuePair<tKey, tValue>) ICollection<KeyValuePair<tKey, tValue>>.Clear() ICollection<KeyValuePair<tKey, tValue>>.Contains(KeyValuePair<tKey, tValue>) ICollection<KeyValuePair<tKey, tValue>>.CopyTo(KeyValuePair<tKey, tValue>[], int) ICollection<KeyValuePair<tKey, tValue>>.Remove(KeyValuePair<tKey, tValue>) ICollection<KeyValuePair<tKey, tValue>>.IsReadOnly IEnumerable<KeyValuePair<tKey, tValue>>.GetEnumerator() ISerializable.GetObjectData(SerializationInfo, StreamingContext) IDeserializationCallback.OnDeserialization(object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IOrderedDictionary<tKey, tValue> : IDictionary<tKey, tValue>, IOrderedDictionary, IDictionary, IReadOnlyDictionary<tKey, tValue>, IReadOnlyCollection<KeyValuePair<tKey, tValue>>, ICollection, ICollection<KeyValuePair<tKey, tValue>>, IEnumerable<KeyValuePair<tKey, tValue>>, IEnumerable, ISerializable, IDeserializationCallback where tKey : notnull Type Parameters Name Description tKey Key type tValue Value type Methods | Edit this page View Source AsReadOnly() Get as read-only ordered dictionary Declaration OrderedDictionary<tKey, tValue> AsReadOnly() Returns Type Description OrderedDictionary<tKey, tValue> Read-only ordered dictionary | Edit this page View Source ContainsValue(tValue) Determine if a value is contained Declaration bool ContainsValue(tValue value) Parameters Type Name Description tValue value Value Returns Type Description bool Is contained? | Edit this page View Source GetAt(int) Get a key/value pair from an index Declaration KeyValuePair<tKey, tValue> GetAt(int index) Parameters Type Name Description int index Index Returns Type Description KeyValuePair<tKey, tValue> Key/value pair | Edit this page View Source IndexOfKey(tKey) Get the index of a key Declaration int IndexOfKey(tKey key) Parameters Type Name Description tKey key Key Returns Type Description int Index or -1, if not contained | Edit this page View Source IndexOfValue(tValue) Get the index of a value Declaration int IndexOfValue(tValue value) Parameters Type Name Description tValue value Value Returns Type Description int Index or -1, if not contained | Edit this page View Source Insert(int, tKey, tValue) Insert Declaration void Insert(int index, tKey key, tValue value) Parameters Type Name Description int index Index tKey key Key tValue value Value | Edit this page View Source ReplaceAt(int, tKey, tValue) Replace a key/value pair at an index Declaration void ReplaceAt(int index, tKey key, tValue value) Parameters Type Name Description int index Index tKey key Key tValue value Value Extension Methods CollectionExtensions.AddRangeAsync<T>(ICollection<T>, IAsyncEnumerable<T>, CancellationToken) CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.AddRange<T>(ICollection<T>, params T[]) ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IOverridableConfig.Config_Delegate.html": {
    "href": "api/wan24.Core.IOverridableConfig.Config_Delegate.html",
    "title": "Delegate IOverridableConfig.Config_Delegate | wan24-Core",
    "keywords": "Delegate IOverridableConfig.Config_Delegate Delegate for configuration events Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void IOverridableConfig.Config_Delegate(IOverridableConfig sender, ConfigEventArgs e) Parameters Type Name Description IOverridableConfig sender Sender ConfigEventArgs e Event arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IOverridableConfig.html": {
    "href": "api/wan24.Core.IOverridableConfig.html",
    "title": "Interface IOverridableConfig | wan24-Core",
    "keywords": "Interface IOverridableConfig Interface for an overridable configuration Inherited Members IChangeToken.RegisterChangeCallback(Action<object>, object) IChangeToken.HasChanged IChangeToken.ActiveChangeCallbacks Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IOverridableConfig : IChangeToken Properties | Edit this page View Source AllOptions All options Declaration IEnumerable<IConfigOption> AllOptions { get; } Property Value Type Description IEnumerable<IConfigOption> | Edit this page View Source AllOptionsDict All options dictionary (key ist the property name) Declaration Dictionary<string, IConfigOption> AllOptionsDict { get; } Property Value Type Description Dictionary<string, IConfigOption> | Edit this page View Source ChangedValues Only locally changed values (key ist the property name) Declaration Dictionary<string, object?> ChangedValues { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source ConfigLevel Configuration level (starts at 1) Declaration int ConfigLevel { get; } Property Value Type Description int | Edit this page View Source ConfigTree Configuration tree (key ist the property name, contains the set values and (if having a sub-configuration) the sub-configuration tree using the special key _sub) Declaration Dictionary<string, dynamic?> ConfigTree { get; set; } Property Value Type Description Dictionary<string, object> | Edit this page View Source DynamicChangedValues Only locally changed dynamic values (key ist the property name) Declaration Dictionary<string, dynamic?> DynamicChangedValues { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source DynamicFinalConfig Final dynamic configuration (key ist the property name, local including sub-configuration overrides) Declaration Dictionary<string, dynamic?> DynamicFinalConfig { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source DynamicLocalConfig Local dynamic configuration (key ist the property name, all set values, or all values for the master configuration) Declaration Dictionary<string, dynamic?> DynamicLocalConfig { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source DynamicOverrides Local dynamic overriding configuration (key ist the property name, only parent overriding option values, equals LocalConfig, if this is the master configuration) Declaration Dictionary<string, dynamic?> DynamicOverrides { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source DynamicSetValues Only locally set dynamic values (key ist the property name, equals DynamicLocalConfig, if this is a sub-configuration) Declaration Dictionary<string, dynamic?> DynamicSetValues { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source FinalConfig Final configuration (key ist the property name, local including sub-configuration overrides, equals LocalConfig, if this is the master configuration) Declaration Dictionary<string, object?> FinalConfig { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source GUID GUID Declaration Guid GUID { get; } Property Value Type Description Guid | Edit this page View Source LocalConfig Local configuration (key ist the property name, all set values, or all values for the master configuration) Declaration Dictionary<string, object?> LocalConfig { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source MasterConfig Master configuration Declaration IOverridableConfig MasterConfig { get; } Property Value Type Description IOverridableConfig | Edit this page View Source MissingValues Missing values (no (sub-)value set, ignores default values) Declaration IEnumerable<IConfigOption> MissingValues { get; } Property Value Type Description IEnumerable<IConfigOption> | Edit this page View Source Overrides Local overriding configuration (key ist the property name, only parent overriding option values) Declaration Dictionary<string, object?> Overrides { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source ParentConfig Overridden parent configuration Declaration IOverridableConfig? ParentConfig { get; } Property Value Type Description IOverridableConfig | Edit this page View Source Properties Property names Declaration IEnumerable<string> Properties { get; } Property Value Type Description IEnumerable<string> | Edit this page View Source SetOptions Set (and overridden) options Declaration IEnumerable<IConfigOption> SetOptions { get; } Property Value Type Description IEnumerable<IConfigOption> | Edit this page View Source SetValues Only locally set values (key ist the property name, equals LocalConfig, if this is a sub-configuration) Declaration Dictionary<string, object?> SetValues { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source SubConfig Overriding sub-configuration Declaration IOverridableConfig? SubConfig { get; } Property Value Type Description IOverridableConfig | Edit this page View Source SyncObject An object for thread synchronization Declaration object SyncObject { get; } Property Value Type Description object Methods | Edit this page View Source GetOption(in string) Get an option Declaration IConfigOption? GetOption(in string propertyName) Parameters Type Name Description string propertyName Property name Returns Type Description IConfigOption Option | Edit this page View Source ResetChanged(in bool) Reset the changed state Declaration IOverridableConfig ResetChanged(in bool recursive = true) Parameters Type Name Description bool recursive Recursive? Returns Type Description IOverridableConfig This | Edit this page View Source SetConfig(in Dictionary<string, object?>, in bool, in bool) Set a configuration Declaration IOverridableConfig SetConfig(in Dictionary<string, object?> config, in bool reset = false, in bool recursive = false) Parameters Type Name Description Dictionary<string, object> config Configuration bool reset Reset first? bool recursive Reset recursive? Returns Type Description IOverridableConfig This | Edit this page View Source UnsetAll(in bool) Unset all option values Declaration IOverridableConfig UnsetAll(in bool recursive = false) Parameters Type Name Description bool recursive Recursive? Returns Type Description IOverridableConfig This | Edit this page View Source UnsetAllOverrides() Unset all option overrides (recursive!) Declaration IOverridableConfig UnsetAllOverrides() Returns Type Description IOverridableConfig This Events | Edit this page View Source OnChange Raised when an option was changed (bubbles to the master configuration) Declaration event IOverridableConfig.Config_Delegate? OnChange Event Type Type Description IOverridableConfig.Config_Delegate Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IParallelQueueWorker.html": {
    "href": "api/wan24.Core.IParallelQueueWorker.html",
    "title": "Interface IParallelQueueWorker | wan24-Core",
    "keywords": "Interface IParallelQueueWorker Interface for a parallel queue worker Inherited Members IQueueWorker.Queued IQueueWorker.EnqueueAsync(QueueWorker.Task_Delegate, CancellationToken) IQueueWorker.TryEnqueue(QueueWorker.Task_Delegate, CancellationToken) IQueueWorker.EnqueueRangeAsync(IEnumerable<QueueWorker.Task_Delegate>, CancellationToken) IQueueWorker.EnqueueRangeAsync(IAsyncEnumerable<QueueWorker.Task_Delegate>, CancellationToken) IServiceWorker.Name IServiceWorker.IsRunning IServiceWorker.IsPaused IServiceWorker.CanPause IServiceWorker.Started IServiceWorker.Paused IServiceWorker.Stopped IServiceWorker.StartAsync() IServiceWorker.StopAsync() IServiceWorker.RestartAsync() IServiceWorker.PauseAsync() IServiceWorker.ResumeAsync() IHostedService.StartAsync(CancellationToken) IHostedService.StopAsync(CancellationToken) IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStatusProvider.State Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IParallelQueueWorker : IQueueWorker, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Properties | Edit this page View Source Threads Number of threads Declaration int Threads { get; } Property Value Type Description int Methods | Edit this page View Source WaitBoring(CancellationToken) Wait until all queued work was done Declaration bool WaitBoring(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description bool All done? | Edit this page View Source WaitBoring(TimeSpan) Wait until all queued work was done Declaration bool WaitBoring(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Timeout Returns Type Description bool All done? | Edit this page View Source WaitBoringAsync(CancellationToken) Wait until all queued work was done Declaration Task<bool> WaitBoringAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> All done? | Edit this page View Source WaitBoringAsync(TimeSpan) Wait until all queued work was done Declaration Task<bool> WaitBoringAsync(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Timeout Returns Type Description Task<bool> All done? Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IPool.html": {
    "href": "api/wan24.Core.IPool.html",
    "title": "Interface IPool | wan24-Core",
    "keywords": "Interface IPool Interface for a pool Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IPool Properties | Edit this page View Source Available Number of available items Declaration int Available { get; } Property Value Type Description int | Edit this page View Source Capacity Capacity Declaration int Capacity { get; } Property Value Type Description int | Edit this page View Source ItemType Item type Declaration Type ItemType { get; } Property Value Type Description Type | Edit this page View Source Name Display name Declaration string? Name { get; } Property Value Type Description string Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IProcessingInfo.html": {
    "href": "api/wan24.Core.IProcessingInfo.html",
    "title": "Interface IProcessingInfo | wan24-Core",
    "keywords": "Interface IProcessingInfo Interface for a processing information Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IProcessingInfo Properties | Edit this page View Source Description Description Declaration string Description { get; } Property Value Type Description string | Edit this page View Source GUID GUID Declaration string GUID { get; } Property Value Type Description string | Edit this page View Source Started Processing start time Declaration DateTime Started { get; } Property Value Type Description DateTime | Edit this page View Source Tag Any tagged object Declaration object? Tag { get; } Property Value Type Description object Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IQueueEntry.html": {
    "href": "api/wan24.Core.IQueueEntry.html",
    "title": "Interface IQueueEntry | wan24-Core",
    "keywords": "Interface IQueueEntry Interface for a queue entry Inherited Members IStatusProvider.State Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IQueueEntry : IStatusProvider Properties | Edit this page View Source Changes Queue state changes Declaration ReadOnlyCollection<QueueEntryStateChange> Changes { get; } Property Value Type Description ReadOnlyCollection<QueueEntryStateChange> | Edit this page View Source Created Created time Declaration DateTime Created { get; } Property Value Type Description DateTime | Edit this page View Source Done Processing done time Declaration DateTime Done { get; } Property Value Type Description DateTime | Edit this page View Source GUID GUID Declaration string GUID { get; } Property Value Type Description string | Edit this page View Source Item Item Declaration object Item { get; } Property Value Type Description object | Edit this page View Source LastException Last exception Declaration Exception? LastException { get; set; } Property Value Type Description Exception | Edit this page View Source LastProcessed Last processing time Declaration DateTime LastProcessed { get; } Property Value Type Description DateTime | Edit this page View Source LastProcessingTime Last processing time Declaration TimeSpan LastProcessingTime { get; } Property Value Type Description TimeSpan | Edit this page View Source Name Name Declaration string? Name { get; set; } Property Value Type Description string | Edit this page View Source QueueState Queue state Declaration QueueEntryStates QueueState { get; set; } Property Value Type Description QueueEntryStates | Edit this page View Source TotalProcessingTime Total processing time (until done) Declaration TimeSpan TotalProcessingTime { get; } Property Value Type Description TimeSpan | Edit this page View Source WaitingProcessingTime Waiting processing time Declaration TimeSpan WaitingProcessingTime { get; } Property Value Type Description TimeSpan Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IQueueWorker.html": {
    "href": "api/wan24.Core.IQueueWorker.html",
    "title": "Interface IQueueWorker | wan24-Core",
    "keywords": "Interface IQueueWorker Interface for a queue worker Inherited Members IServiceWorker.Name IServiceWorker.IsRunning IServiceWorker.IsPaused IServiceWorker.CanPause IServiceWorker.Started IServiceWorker.Paused IServiceWorker.Stopped IServiceWorker.StartAsync() IServiceWorker.StopAsync() IServiceWorker.RestartAsync() IServiceWorker.PauseAsync() IServiceWorker.ResumeAsync() IHostedService.StartAsync(CancellationToken) IHostedService.StopAsync(CancellationToken) IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStatusProvider.State Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IQueueWorker : IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Properties | Edit this page View Source Queued Number of queued items Declaration int Queued { get; } Property Value Type Description int Methods | Edit this page View Source EnqueueAsync(Task_Delegate, CancellationToken) Enqueue Declaration ValueTask EnqueueAsync(QueueWorker.Task_Delegate task, CancellationToken cancellationToken = default) Parameters Type Name Description QueueWorker.Task_Delegate task Task CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask | Edit this page View Source EnqueueRangeAsync(IAsyncEnumerable<Task_Delegate>, CancellationToken) Enqueue many tasks for processing Declaration ValueTask<int> EnqueueRangeAsync(IAsyncEnumerable<QueueWorker.Task_Delegate> tasks, CancellationToken cancellationToken = default) Parameters Type Name Description IAsyncEnumerable<QueueWorker.Task_Delegate> tasks Tasks CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<int> Number of enqueued tasks | Edit this page View Source EnqueueRangeAsync(IEnumerable<Task_Delegate>, CancellationToken) Enqueue many tasks for processing Declaration ValueTask<int> EnqueueRangeAsync(IEnumerable<QueueWorker.Task_Delegate> tasks, CancellationToken cancellationToken = default) Parameters Type Name Description IEnumerable<QueueWorker.Task_Delegate> tasks Tasks CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<int> Number of enqueued tasks | Edit this page View Source TryEnqueue(Task_Delegate, CancellationToken) Try enqueue Declaration bool TryEnqueue(QueueWorker.Task_Delegate task, CancellationToken cancellationToken = default) Parameters Type Name Description QueueWorker.Task_Delegate task Task CancellationToken cancellationToken Cancellation token Returns Type Description bool Enqueued? Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IRentedArray-1.html": {
    "href": "api/wan24.Core.IRentedArray-1.html",
    "title": "Interface IRentedArray<T> | wan24-Core",
    "keywords": "Interface IRentedArray<T> Interface for a rented array Inherited Members IArray<T>.this[int] IArray<T>.this[Range] IArray<T>.this[Index, Index] IArray<T>.Length IArray<T>.LongLength IArray<T>.Array IArray<T>.Span IArray<T>.Memory IEnumerable<T>.GetEnumerator() IEquatable<Memory<T>>.Equals(Memory<T>) IDisposable.Dispose() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IRentedArray<T> : IArray<T>, IEnumerable<T>, IEnumerable, IEquatable<Memory<T>>, IDisposable Type Parameters Name Description T Element type Properties | Edit this page View Source Clear Clear the array when returning? Declaration bool Clear { get; set; } Property Value Type Description bool | Edit this page View Source Pool Pool Declaration ArrayPool<T> Pool { get; } Property Value Type Description ArrayPool<T> Methods | Edit this page View Source GetCopy() Create a non-rented copy of the array Declaration T[] GetCopy() Returns Type Description T[] Copy Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IRentedObject-1.html": {
    "href": "api/wan24.Core.IRentedObject-1.html",
    "title": "Interface IRentedObject<T> | wan24-Core",
    "keywords": "Interface IRentedObject<T> Interface for a rented object Inherited Members IDisposable.Dispose() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IRentedObject<T> : IDisposable Type Parameters Name Description T Object type Properties | Edit this page View Source Object Rented object Declaration T Object { get; } Property Value Type Description T | Edit this page View Source Pool Object pool Declaration IObjectPool<T> Pool { get; } Property Value Type Description IObjectPool<T> | Edit this page View Source Reset Reset the IObjectPoolItem object when returning? Declaration bool Reset { get; set; } Property Value Type Description bool Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ISecureArray-1.html": {
    "href": "api/wan24.Core.ISecureArray-1.html",
    "title": "Interface ISecureArray<T> | wan24-Core",
    "keywords": "Interface ISecureArray<T> Interface for a secure array Inherited Members IArray<T>.this[int] IArray<T>.this[Range] IArray<T>.this[Index, Index] IArray<T>.Length IArray<T>.LongLength IArray<T>.Array IArray<T>.Span IArray<T>.Memory IEnumerable<T>.GetEnumerator() IEquatable<Memory<T>>.Equals(Memory<T>) IDisposable.Dispose() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface ISecureArray<T> : IArray<T>, IEnumerable<T>, IEnumerable, IEquatable<Memory<T>>, IDisposable where T : struct Type Parameters Name Description T Element type Properties | Edit this page View Source IntPtr Pointer Declaration nint IntPtr { get; } Property Value Type Description nint Methods | Edit this page View Source DetachAndDispose() Detach the secured byte array and dispose this instance Declaration T[] DetachAndDispose() Returns Type Description T[] Unsecure byte array Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IServiceWorker.html": {
    "href": "api/wan24.Core.IServiceWorker.html",
    "title": "Interface IServiceWorker | wan24-Core",
    "keywords": "Interface IServiceWorker Interface for a service worker object Inherited Members IHostedService.StartAsync(CancellationToken) IHostedService.StopAsync(CancellationToken) IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IServiceWorker : IHostedService, IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source CanPause Can be paused Declaration bool CanPause { get; } Property Value Type Description bool | Edit this page View Source IsPaused Is paused? Declaration bool IsPaused { get; } Property Value Type Description bool | Edit this page View Source IsRunning Is running? Declaration bool IsRunning { get; } Property Value Type Description bool | Edit this page View Source Name Display name Declaration string? Name { get; } Property Value Type Description string | Edit this page View Source Paused Paused time (if paused) Declaration DateTime Paused { get; } Property Value Type Description DateTime | Edit this page View Source Started Last start time Declaration DateTime Started { get; } Property Value Type Description DateTime | Edit this page View Source Stopped Last stop time Declaration DateTime Stopped { get; } Property Value Type Description DateTime Methods | Edit this page View Source PauseAsync() Pause Declaration Task PauseAsync() Returns Type Description Task | Edit this page View Source RestartAsync() Restart Declaration Task RestartAsync() Returns Type Description Task | Edit this page View Source ResumeAsync() Resume from pause Declaration Task ResumeAsync() Returns Type Description Task | Edit this page View Source StartAsync() Start Declaration Task StartAsync() Returns Type Description Task | Edit this page View Source StopAsync() Stop Declaration Task StopAsync() Returns Type Description Task Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IServiceWorkerStatus.html": {
    "href": "api/wan24.Core.IServiceWorkerStatus.html",
    "title": "Interface IServiceWorkerStatus | wan24-Core",
    "keywords": "Interface IServiceWorkerStatus Interface for a service worker which provides status information Inherited Members IServiceWorker.Name IServiceWorker.IsRunning IServiceWorker.IsPaused IServiceWorker.CanPause IServiceWorker.Started IServiceWorker.Paused IServiceWorker.Stopped IServiceWorker.StartAsync() IServiceWorker.StopAsync() IServiceWorker.RestartAsync() IServiceWorker.PauseAsync() IServiceWorker.ResumeAsync() IHostedService.StartAsync(CancellationToken) IHostedService.StopAsync(CancellationToken) IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStatusProvider.State Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IServiceWorkerStatus : IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IStackInfo.html": {
    "href": "api/wan24.Core.IStackInfo.html",
    "title": "Interface IStackInfo | wan24-Core",
    "keywords": "Interface IStackInfo Interface for a stack information Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IStackInfo Properties | Edit this page View Source Created Created time Declaration DateTime Created { get; } Property Value Type Description DateTime | Edit this page View Source Object Object Declaration object Object { get; } Property Value Type Description object | Edit this page View Source Stack Stack Declaration string Stack { get; } Property Value Type Description string Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IStatusProvider.html": {
    "href": "api/wan24.Core.IStatusProvider.html",
    "title": "Interface IStatusProvider | wan24-Core",
    "keywords": "Interface IStatusProvider Interface for a status provider Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IStatusProvider Properties | Edit this page View Source State Status information Declaration IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IStoredObject-1.html": {
    "href": "api/wan24.Core.IStoredObject-1.html",
    "title": "Interface IStoredObject<T> | wan24-Core",
    "keywords": "Interface IStoredObject<T> Interface for a stored object Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IStoredObject<T> where T : notnull Type Parameters Name Description T Object key type Properties | Edit this page View Source ObjectKey Object key Declaration T ObjectKey { get; } Property Value Type Description T Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IStream.html": {
    "href": "api/wan24.Core.IStream.html",
    "title": "Interface IStream | wan24-Core",
    "keywords": "Interface IStream Interface for a stream Inherited Members IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IStream : IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source CanRead Can read? Declaration bool CanRead { get; } Property Value Type Description bool | Edit this page View Source CanSeek Can seek? Declaration bool CanSeek { get; } Property Value Type Description bool | Edit this page View Source CanTimeout Can timeout? Declaration bool CanTimeout { get; } Property Value Type Description bool | Edit this page View Source CanWrite Can write? Declaration bool CanWrite { get; } Property Value Type Description bool | Edit this page View Source IsClosed Is closed? Declaration bool IsClosed { get; } Property Value Type Description bool | Edit this page View Source Length Length in bytes Declaration long Length { get; } Property Value Type Description long | Edit this page View Source Name Display name Declaration string? Name { get; set; } Property Value Type Description string | Edit this page View Source Position Position byte offset Declaration long Position { get; set; } Property Value Type Description long | Edit this page View Source ReadTimeout Read timeout ms Declaration int ReadTimeout { get; set; } Property Value Type Description int | Edit this page View Source WriteTimeout Write timeout ms Declaration int WriteTimeout { get; set; } Property Value Type Description int Methods | Edit this page View Source BeginRead(byte[], int, int, AsyncCallback?, object?) Begin read Declaration IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback? callback, object? state) Parameters Type Name Description byte[] buffer Buffer int offset Byte offset int count Byte count AsyncCallback callback Callback object state State Returns Type Description IAsyncResult Result | Edit this page View Source BeginWrite(byte[], int, int, AsyncCallback?, object?) Begin write Declaration IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback? callback, object? state) Parameters Type Name Description byte[] buffer Buffer int offset Byte offset int count Byte count AsyncCallback callback Callback object state State Returns Type Description IAsyncResult Result | Edit this page View Source Close() Close Declaration void Close() | Edit this page View Source CopyTo(Stream, int) Copy to another stream Declaration void CopyTo(Stream destination, int bufferSize = 81920) Parameters Type Name Description Stream destination Target int bufferSize Buffer size in bytes | Edit this page View Source CopyToAsync(Stream, int, CancellationToken) Copy to another stream Declaration Task CopyToAsync(Stream destination, int bufferSize = 81920, CancellationToken cancellationToken = default) Parameters Type Name Description Stream destination Target int bufferSize Buffer size in bytes CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source EndRead(IAsyncResult) End read Declaration int EndRead(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult Result Returns Type Description int Number of red bytes | Edit this page View Source EndWrite(IAsyncResult) End write Declaration void EndWrite(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult Result | Edit this page View Source Flush() Flush Declaration void Flush() | Edit this page View Source FlushAsync(CancellationToken) Flush Declaration Task FlushAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source Read(byte[], int, int) Read Declaration int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer Buffer int offset Byte offset int count Byte count Returns Type Description int Number of bytes red | Edit this page View Source Read(Span<byte>) Read Declaration int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer Returns Type Description int Number of bytes red | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Read Declaration Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken = default) Parameters Type Name Description byte[] buffer Buffer int offset Byte offset int count Byte count CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Number of bytes red | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Read Declaration ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<int> Number of bytes red | Edit this page View Source ReadAtLeast(Span<byte>, int, bool) Read at least a min. of bytes Declaration int ReadAtLeast(Span<byte> buffer, int minimumBytes, bool throwOnEndOfStream = true) Parameters Type Name Description Span<byte> buffer Buffer int minimumBytes Min. number of bytes to read bool throwOnEndOfStream Throw an exception, if the min. number of bytes couldn't be red? Returns Type Description int Number of red bytes | Edit this page View Source ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Read at least a min. of bytes Declaration ValueTask<int> ReadAtLeastAsync(Memory<byte> buffer, int minimumBytes, bool throwOnEndOfStream = true, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer int minimumBytes Min. number of bytes to read bool throwOnEndOfStream Throw an exception, if the min. number of bytes couldn't be red? CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<int> Number of red bytes | Edit this page View Source ReadByte() Read one byte Declaration int ReadByte() Returns Type Description int The red byte or -1, if failed (end of stream) | Edit this page View Source ReadExactly(byte[], int, int) Read exactly the buffer length Declaration void ReadExactly(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer Buffer int offset Offset int count Count | Edit this page View Source ReadExactly(Span<byte>) Read exactly the buffer length Declaration void ReadExactly(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer | Edit this page View Source ReadExactlyAsync(byte[], int, int, CancellationToken) Read exactly the buffer length Declaration ValueTask ReadExactlyAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken = default) Parameters Type Name Description byte[] buffer Buffer int offset Offset int count Count CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask | Edit this page View Source ReadExactlyAsync(Memory<byte>, CancellationToken) Read exactly the buffer length Declaration ValueTask ReadExactlyAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask | Edit this page View Source Seek(long, SeekOrigin) Seek Declaration long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset Byte offset SeekOrigin origin Seek origin Returns Type Description long New position byte offset | Edit this page View Source SetLength(long) Set the stream length Declaration void SetLength(long value) Parameters Type Name Description long value Length in bytes | Edit this page View Source Write(byte[], int, int) Write Declaration void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer Buffer int offset Byte offset int count Byte count | Edit this page View Source Write(ReadOnlySpan<byte>) Write Declaration void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer Buffer | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Write Declaration Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken = default) Parameters Type Name Description byte[] buffer Buffer int offset Byte offset int count Byte count CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Write Declaration ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask | Edit this page View Source WriteByte(byte) Write one byte Declaration void WriteByte(byte value) Parameters Type Name Description byte value Byte Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IStreamThrottle.html": {
    "href": "api/wan24.Core.IStreamThrottle.html",
    "title": "Interface IStreamThrottle | wan24-Core",
    "keywords": "Interface IStreamThrottle Interface for a stream throttle Inherited Members IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IStreamThrottle : IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source ReadCount Read count (zero to disable read throttling) Declaration int ReadCount { get; set; } Property Value Type Description int | Edit this page View Source ReadCountQuota Quota value for the read count (used to normalize the stream collection read count) Declaration int ReadCountQuota { get; } Property Value Type Description int | Edit this page View Source WriteCount Write count (zero to disable write throttling) Declaration int WriteCount { get; set; } Property Value Type Description int | Edit this page View Source WriteCountQuota Quota value for the write count (used to normalize the stream collection write count) Declaration int WriteCountQuota { get; } Property Value Type Description int Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IStreamWrapper.html": {
    "href": "api/wan24.Core.IStreamWrapper.html",
    "title": "Interface IStreamWrapper | wan24-Core",
    "keywords": "Interface IStreamWrapper Interface for a stream wrapper Inherited Members IStream.Name IStream.IsClosed IStream.CanRead IStream.CanSeek IStream.CanWrite IStream.CanTimeout IStream.Length IStream.Position IStream.ReadTimeout IStream.WriteTimeout IStream.Flush() IStream.FlushAsync(CancellationToken) IStream.Read(byte[], int, int) IStream.Read(Span<byte>) IStream.ReadByte() IStream.ReadAsync(byte[], int, int, CancellationToken) IStream.ReadAsync(Memory<byte>, CancellationToken) IStream.ReadExactly(byte[], int, int) IStream.ReadExactly(Span<byte>) IStream.ReadExactlyAsync(Memory<byte>, CancellationToken) IStream.ReadExactlyAsync(byte[], int, int, CancellationToken) IStream.ReadAtLeast(Span<byte>, int, bool) IStream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) IStream.Seek(long, SeekOrigin) IStream.SetLength(long) IStream.Write(byte[], int, int) IStream.Write(ReadOnlySpan<byte>) IStream.WriteByte(byte) IStream.WriteAsync(byte[], int, int, CancellationToken) IStream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) IStream.CopyTo(Stream, int) IStream.CopyToAsync(Stream, int, CancellationToken) IStream.BeginRead(byte[], int, int, AsyncCallback, object) IStream.EndRead(IAsyncResult) IStream.BeginWrite(byte[], int, int, AsyncCallback, object) IStream.EndWrite(IAsyncResult) IStream.Close() IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() IStatusProvider.State Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IStreamWrapper : IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Properties | Edit this page View Source BaseStream Wrapped base stream Declaration Stream BaseStream { get; } Property Value Type Description Stream | Edit this page View Source LeaveOpen Leave the base stream open when disposing? Declaration bool LeaveOpen { get; set; } Property Value Type Description bool Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IStringValueConverter-1.html": {
    "href": "api/wan24.Core.IStringValueConverter-1.html",
    "title": "Interface IStringValueConverter<T> | wan24-Core",
    "keywords": "Interface IStringValueConverter<T> Interface for a type which supports display string/value conversion Inherited Members IStringValueConverter.DisplayString IStringValueConverter.TryParse(string, out IStringValueConverter) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IStringValueConverter<T> : IStringValueConverter Type Parameters Name Description T Object type Methods | Edit this page View Source TryParse(string?, out T?) Create a instance from a display string Declaration public static bool TryParse(string? str, out T? value) Parameters Type Name Description string str String T value Value Returns Type Description bool Succeed? Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IStringValueConverter.html": {
    "href": "api/wan24.Core.IStringValueConverter.html",
    "title": "Interface IStringValueConverter | wan24-Core",
    "keywords": "Interface IStringValueConverter Interface for a type which supports display string/value conversion Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IStringValueConverter Properties | Edit this page View Source DisplayString Get the display string for this object Declaration string DisplayString { get; } Property Value Type Description string Methods | Edit this page View Source TryParse(string?, out IStringValueConverter?) Create a instance from a display string Declaration public static bool TryParse(string? str, out IStringValueConverter? value) Parameters Type Name Description string str String IStringValueConverter value Value Returns Type Description bool Succeed? Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IThrottledStream.html": {
    "href": "api/wan24.Core.IThrottledStream.html",
    "title": "Interface IThrottledStream | wan24-Core",
    "keywords": "Interface IThrottledStream Interface for a throttled stream Inherited Members IStreamWrapper.BaseStream IStreamWrapper.LeaveOpen IStream.Name IStream.IsClosed IStream.CanRead IStream.CanSeek IStream.CanWrite IStream.CanTimeout IStream.Length IStream.Position IStream.ReadTimeout IStream.WriteTimeout IStream.Flush() IStream.FlushAsync(CancellationToken) IStream.Read(byte[], int, int) IStream.Read(Span<byte>) IStream.ReadByte() IStream.ReadAsync(byte[], int, int, CancellationToken) IStream.ReadAsync(Memory<byte>, CancellationToken) IStream.ReadExactly(byte[], int, int) IStream.ReadExactly(Span<byte>) IStream.ReadExactlyAsync(Memory<byte>, CancellationToken) IStream.ReadExactlyAsync(byte[], int, int, CancellationToken) IStream.ReadAtLeast(Span<byte>, int, bool) IStream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) IStream.Seek(long, SeekOrigin) IStream.SetLength(long) IStream.Write(byte[], int, int) IStream.Write(ReadOnlySpan<byte>) IStream.WriteByte(byte) IStream.WriteAsync(byte[], int, int, CancellationToken) IStream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) IStream.CopyTo(Stream, int) IStream.CopyToAsync(Stream, int, CancellationToken) IStream.BeginRead(byte[], int, int, AsyncCallback, object) IStream.EndRead(IAsyncResult) IStream.BeginWrite(byte[], int, int, AsyncCallback, object) IStream.EndWrite(IAsyncResult) IStream.Close() IStatusProvider.State IStreamThrottle.ReadCountQuota IStreamThrottle.ReadCount IStreamThrottle.WriteCountQuota IStreamThrottle.WriteCount IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IThrottledStream : IStreamWrapper, IStream, IStatusProvider, IStreamThrottle, IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source LastReadTimeStart Last read time start Declaration DateTime LastReadTimeStart { get; } Property Value Type Description DateTime | Edit this page View Source LastWriteTimeStart Last write time start Declaration DateTime LastWriteTimeStart { get; } Property Value Type Description DateTime | Edit this page View Source ReadTime Read time Declaration TimeSpan ReadTime { get; set; } Property Value Type Description TimeSpan | Edit this page View Source RedCount Red count since the last read time start Declaration int RedCount { get; } Property Value Type Description int | Edit this page View Source WriteTime Write time Declaration TimeSpan WriteTime { get; set; } Property Value Type Description TimeSpan | Edit this page View Source WroteCount Wrote count since last write time start Declaration int WroteCount { get; } Property Value Type Description int Methods | Edit this page View Source ResetReadThrottle() Reset the read throttle Declaration void ResetReadThrottle() | Edit this page View Source ResetWriteThrottle() Reset the write throttle Declaration void ResetWriteThrottle() Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ITimer.html": {
    "href": "api/wan24.Core.ITimer.html",
    "title": "Interface ITimer | wan24-Core",
    "keywords": "Interface ITimer Interface for a timer object Inherited Members IServiceWorker.Name IServiceWorker.IsRunning IServiceWorker.IsPaused IServiceWorker.CanPause IServiceWorker.Started IServiceWorker.Paused IServiceWorker.Stopped IServiceWorker.StartAsync() IServiceWorker.StopAsync() IServiceWorker.RestartAsync() IServiceWorker.PauseAsync() IServiceWorker.ResumeAsync() IHostedService.StartAsync(CancellationToken) IHostedService.StopAsync(CancellationToken) IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface ITimer : IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source AutoReset Auto-reset? Declaration bool AutoReset { get; } Property Value Type Description bool | Edit this page View Source Interval Interval Declaration TimeSpan Interval { get; } Property Value Type Description TimeSpan | Edit this page View Source LastElapsed Last elapsed Declaration DateTime LastElapsed { get; } Property Value Type Description DateTime | Edit this page View Source Scheduled Scheduled Declaration DateTime Scheduled { get; } Property Value Type Description DateTime Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ITranslationTerms.html": {
    "href": "api/wan24.Core.ITranslationTerms.html",
    "title": "Interface ITranslationTerms | wan24-Core",
    "keywords": "Interface ITranslationTerms Interface for a translation Inherited Members IReadOnlyDictionary<string, string>.ContainsKey(string) IReadOnlyDictionary<string, string>.TryGetValue(string, out string) IReadOnlyDictionary<string, string>.this[string] IReadOnlyDictionary<string, string>.Keys IReadOnlyDictionary<string, string>.Values IReadOnlyCollection<KeyValuePair<string, string>>.Count IEnumerable<KeyValuePair<string, string>>.GetEnumerator() IEnumerable.GetEnumerator() IStringLocalizer.GetAllStrings(bool) IStringLocalizer.this[string] IStringLocalizer.this[string, object[]] Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface ITranslationTerms : IReadOnlyDictionary<string, string>, IReadOnlyCollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IStringLocalizer Properties | Edit this page View Source this[string, int, string[]] Get a term Declaration string this[in string key, in int count, params string[] values] { get; } Parameters Type Name Description string key Term key int count Count (for plural translation) string[] values Parser values Property Value Type Description string Term Exceptions Type Condition NotSupportedException Plural terms are not supported | Edit this page View Source this[string, string[]] Get a term Declaration string this[in string key, params string[] values] { get; } Parameters Type Name Description string key Term key string[] values Parser values Property Value Type Description string Term | Edit this page View Source PluralSupport Does support plural? Declaration bool PluralSupport { get; } Property Value Type Description bool Methods | Edit this page View Source GetTerm(in string, in int, params string[]) Get a term Declaration string GetTerm(in string key, in int count, params string[] values) Parameters Type Name Description string key Term key int count Count (for plural translation) string[] values Parser values Returns Type Description string Term | Edit this page View Source GetTerm(in string, params string[]) Get a term Declaration string GetTerm(in string key, params string[] values) Parameters Type Name Description string key Term key string[] values Parser values Returns Type Description string Term Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ITryAsyncResult.html": {
    "href": "api/wan24.Core.ITryAsyncResult.html",
    "title": "Interface ITryAsyncResult | wan24-Core",
    "keywords": "Interface ITryAsyncResult Interface for a TryAsyncResult<T> Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface ITryAsyncResult Properties | Edit this page View Source Result Action result (not null, if Succeed is true) Declaration object? Result { get; } Property Value Type Description object | Edit this page View Source Succeed If succeed (Result isn't null) Declaration bool Succeed { get; } Property Value Type Description bool Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IWillDispose.html": {
    "href": "api/wan24.Core.IWillDispose.html",
    "title": "Interface IWillDispose | wan24-Core",
    "keywords": "Interface IWillDispose Interface for a disposable object which will dispose foreign disposables when disposing Inherited Members IDisposableObject.IsDisposing IDisposableObject.IsDisposed IDisposableObject.OnDisposing IDisposableObject.OnDisposed IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public interface IWillDispose : IDisposableObject, IDisposable, IAsyncDisposable Methods | Edit this page View Source RegisterForDispose<T>(in T) Register an object for disposing when this object is being disposed Declaration void RegisterForDispose<T>(in T disposable) Parameters Type Name Description T disposable Disposable (will be disposed) Type Parameters Name Description T Object type Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.InstancePool-1.html": {
    "href": "api/wan24.Core.InstancePool-1.html",
    "title": "Class InstancePool<T> | wan24-Core",
    "keywords": "Class InstancePool<T> Instance pool Inheritance object DisposableBase HostedServiceBase InstancePool<T> BlockingInstancePool<T> Implements IWillDispose IInstancePool<T> IInstancePool IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.AfterStartAsync(CancellationToken) HostedServiceBase.StoppingAsync(CancellationToken) HostedServiceBase.AfterStopAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.AfterPauseAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.AfterResumeAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.OnException HostedServiceBase.RaiseOnException() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class InstancePool<T> : HostedServiceBase, IWillDispose, IInstancePool<T>, IInstancePool, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : class Type Parameters Name Description T Object type Constructors | Edit this page View Source InstancePool(in bool, in int, in IAsyncServiceProvider?) Constructor Declaration protected InstancePool(in bool intern, in int capacity, in IAsyncServiceProvider? serviceProvider) Parameters Type Name Description bool intern Intern construction int capacity Capacity IAsyncServiceProvider serviceProvider Service provider | Edit this page View Source InstancePool(in int, in IAsyncServiceProvider?) Constructor Declaration public InstancePool(in int capacity, in IAsyncServiceProvider? serviceProvider = null) Parameters Type Name Description int capacity Capacity IAsyncServiceProvider serviceProvider Service provider | Edit this page View Source InstancePool(in int, in InstanceAsync_Delegate, in IAsyncServiceProvider?) Constructor Declaration public InstancePool(in int capacity, in IInstancePool<T>.InstanceAsync_Delegate factory, in IAsyncServiceProvider? serviceProvider = null) Parameters Type Name Description int capacity Capacity IInstancePool<T>.InstanceAsync_Delegate factory Instance factory IAsyncServiceProvider serviceProvider Service provider | Edit this page View Source InstancePool(in int, in Instance_Delegate, in IAsyncServiceProvider?) Constructor Declaration public InstancePool(in int capacity, in IInstancePool<T>.Instance_Delegate factory, in IAsyncServiceProvider? serviceProvider = null) Parameters Type Name Description int capacity Capacity IInstancePool<T>.Instance_Delegate factory Instance factory IAsyncServiceProvider serviceProvider Service provider Fields | Edit this page View Source AsyncFactory Asynchronous instance factory Declaration protected readonly IInstancePool<T>.InstanceAsync_Delegate? AsyncFactory Field Value Type Description IInstancePool<T>.InstanceAsync_Delegate | Edit this page View Source BufferSync Buffer thread synchronization (raised when creating instances) Declaration protected readonly ResetEvent BufferSync Field Value Type Description ResetEvent | Edit this page View Source Instances Instances Declaration protected readonly Channel<T> Instances Field Value Type Description Channel<T> | Edit this page View Source SyncFactory Synchronous instance factory Declaration protected readonly IInstancePool<T>.Instance_Delegate? SyncFactory Field Value Type Description IInstancePool<T>.Instance_Delegate | Edit this page View Source _Created Total number of created instances Declaration protected volatile int _Created Field Value Type Description int | Edit this page View Source _CreatedOnDemand Total number of on-demand created instances Declaration protected volatile int _CreatedOnDemand Field Value Type Description int Properties | Edit this page View Source Available Available instances Declaration public int Available { get; } Property Value Type Description int | Edit this page View Source Capacity Capacity Declaration public int Capacity { get; } Property Value Type Description int | Edit this page View Source Created Total number of created instances Declaration public int Created { get; } Property Value Type Description int | Edit this page View Source CreatedOnDemand Total number of on-demand created instances Declaration public int CreatedOnDemand { get; } Property Value Type Description int | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source ServiceProvider Service provider Declaration public IAsyncServiceProvider ServiceProvider { get; } Property Value Type Description IAsyncServiceProvider | Edit this page View Source State Status information Declaration public virtual IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Methods | Edit this page View Source BeforeStopAsync(CancellationToken) Before stopping Declaration protected override Task BeforeStopAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.BeforeStopAsync(CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides HostedServiceBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides HostedServiceBase.DisposeCore() | Edit this page View Source GetMany(int, CancellationToken) Get many instances Declaration public virtual IEnumerable<T> GetMany(int count, CancellationToken cancellationToken = default) Parameters Type Name Description int count Number of instances CancellationToken cancellationToken Cancellation token Returns Type Description IEnumerable<T> Instances | Edit this page View Source GetManyAsync(int, CancellationToken) Get many instances Declaration public virtual IAsyncEnumerable<T> GetManyAsync(int count, CancellationToken cancellationToken = default) Parameters Type Name Description int count Number of instances CancellationToken cancellationToken Cancellation token Returns Type Description IAsyncEnumerable<T> Instances | Edit this page View Source GetOne() Get one instance Declaration public virtual T GetOne() Returns Type Description T Instance | Edit this page View Source GetOneAsync(CancellationToken) Get one instance Declaration public virtual Task<T> GetOneAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Instance | Edit this page View Source WorkerAsync() Service worker Declaration protected override Task WorkerAsync() Returns Type Description Task Overrides HostedServiceBase.WorkerAsync() Implements IWillDispose IInstancePool<T> IInstancePool IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IpNetworkKind.html": {
    "href": "api/wan24.Core.IpNetworkKind.html",
    "title": "Enum IpNetworkKind | wan24-Core",
    "keywords": "Enum IpNetworkKind IP network kind enumeration Namespace: wan24.Core Assembly: wan24Core.dll Syntax [Flags] public enum IpNetworkKind : byte Fields Name Description ALL All kinds LAN Local Area Network (private intranet) Loopback Loopback (local system) None None WAN Wide Area Network (public internet) Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object[]) AsyncHelper.TryDisposeAsync<IpNetworkKind>(IpNetworkKind) AsyncHelper.TryDispose<IpNetworkKind>(IpNetworkKind) EnumExtensions.ContainsAllFlags<IpNetworkKind>(IpNetworkKind, in IpNetworkKind) EnumExtensions.ContainsAnyFlag<IpNetworkKind>(IpNetworkKind, params IpNetworkKind[]) EnumExtensions.GetContainedFlags<IpNetworkKind>(IpNetworkKind, params IpNetworkKind[]) EnumExtensions.GetInfo<IpNetworkKind>(IpNetworkKind) EnumExtensions.IsFlag<IpNetworkKind>(IpNetworkKind) EnumExtensions.IsValidEnumerationValue<IpNetworkKind>(IpNetworkKind) EnumExtensions.IsValid<IpNetworkKind>(IpNetworkKind) EnumExtensions.IsValue<IpNetworkKind>(IpNetworkKind) EnumExtensions.OnlyFlags<IpNetworkKind>(IpNetworkKind) EnumExtensions.RemoveFlags<IpNetworkKind>(IpNetworkKind) ObjectExtensions.Do<IpNetworkKind, tReturn>(IpNetworkKind, in Func<IpNetworkKind, tReturn>) ObjectExtensions.EnsureValidState<IpNetworkKind>(IpNetworkKind, in bool, in string) ObjectExtensions.GetDisplayText<IpNetworkKind>(IpNetworkKind) ObjectExtensions.In<IpNetworkKind>(IpNetworkKind, in IEnumerable<IpNetworkKind>) ObjectExtensions.ToDictionary<IpNetworkKind>(IpNetworkKind, in int) ObjectExtensions.ToOrderedDictionary<IpNetworkKind>(IpNetworkKind, in int)"
  },
  "api/wan24.Core.IpSubNet.html": {
    "href": "api/wan24.Core.IpSubNet.html",
    "title": "Struct IpSubNet | wan24-Core",
    "keywords": "Struct IpSubNet IP sub-net Implements IEnumerable<IPAddress> IEnumerable IComparable<IpSubNet> IComparable IEquatable<IpSubNet> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public readonly record struct IpSubNet : IEnumerable<IPAddress>, IEnumerable, IComparable<IpSubNet>, IComparable, IEquatable<IpSubNet> Constructors | Edit this page View Source IpSubNet(in IPAddress, in bool) Constructor Declaration public IpSubNet(in IPAddress network, in bool countAllBits = false) Parameters Type Name Description IPAddress network Network IP bool countAllBits Count all possible network mask bits? | Edit this page View Source IpSubNet(in IPAddress, in int) Constructor Declaration public IpSubNet(in IPAddress network, in int bits) Parameters Type Name Description IPAddress network Network IP int bits Sub-net bits length | Edit this page View Source IpSubNet(in IPAddress, in IPAddress) Constructor Declaration public IpSubNet(in IPAddress network, in IPAddress mask) Parameters Type Name Description IPAddress network Network IP IPAddress mask Network mask IP | Edit this page View Source IpSubNet(in BigInteger, in int) Constructor Declaration public IpSubNet(in BigInteger network, in int bits) Parameters Type Name Description BigInteger network IPv6 network IP int bits Sub-net bits length | Edit this page View Source IpSubNet(in BigInteger, in int, in bool) Constructor Declaration public IpSubNet(in BigInteger network, in int bits, in bool isIPv4) Parameters Type Name Description BigInteger network Network int bits Sub-net bits length bool isIPv4 Is an IPv4 network? | Edit this page View Source IpSubNet(in ReadOnlySpan<byte>) Constructor Declaration public IpSubNet(in ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer Buffer (IPV6_STRUCTURE_SIZE or IPV4_STRUCTURE_SIZE required) | Edit this page View Source IpSubNet(in ReadOnlySpan<char>) Constructor Declaration public IpSubNet(in ReadOnlySpan<char> subNet) Parameters Type Name Description ReadOnlySpan<char> subNet Sub-net in IP/n CIDR notation | Edit this page View Source IpSubNet(in uint, in int) Constructor Declaration public IpSubNet(in uint network, in int bits) Parameters Type Name Description uint network IPv4 network IP int bits Sub-net bits length Fields | Edit this page View Source IPV4_BITS IPv4 bits Declaration public const int IPV4_BITS = 32 Field Value Type Description int | Edit this page View Source IPV4_BYTES IPv4 bits Declaration public const int IPV4_BYTES = 4 Field Value Type Description int | Edit this page View Source IPV4_STRUCTURE_SIZE IPv4 structure size in bytes (when using GetBytes()) Declaration public const int IPV4_STRUCTURE_SIZE = 6 Field Value Type Description int | Edit this page View Source IPV6_BITS IPv6 bits Declaration public const int IPV6_BITS = 128 Field Value Type Description int | Edit this page View Source IPV6_BYTES IPv6 bits Declaration public const int IPV6_BYTES = 16 Field Value Type Description int | Edit this page View Source IPV6_STRUCTURE_SIZE IPv6 Structure size in bytes (when using GetBytes()) Declaration public const int IPV6_STRUCTURE_SIZE = 18 Field Value Type Description int | Edit this page View Source IsIPv4 Is an IPv4 sub-net? Declaration public readonly bool IsIPv4 Field Value Type Description bool | Edit this page View Source LoopbackIPv4 IPv4 loopback sub-net Declaration public static readonly IpSubNet LoopbackIPv4 Field Value Type Description IpSubNet | Edit this page View Source LoopbackIPv6 IPv6 loopback sub-net Declaration public static readonly IpSubNet LoopbackIPv6 Field Value Type Description IpSubNet | Edit this page View Source MaskBits Mask bits length Declaration public readonly byte MaskBits Field Value Type Description byte | Edit this page View Source MaxIPv4 Max. IPv4 value Declaration public static readonly BigInteger MaxIPv4 Field Value Type Description BigInteger | Edit this page View Source MaxIPv6 Max. IPv6 value Declaration public static readonly BigInteger MaxIPv6 Field Value Type Description BigInteger | Edit this page View Source Network Network Declaration public readonly BigInteger Network Field Value Type Description BigInteger | Edit this page View Source ZeroV4 IPv4 zero sub-net Declaration public static readonly IpSubNet ZeroV4 Field Value Type Description IpSubNet | Edit this page View Source ZeroV6 IPv6 zero sub-net Declaration public static readonly IpSubNet ZeroV6 Field Value Type Description IpSubNet Properties | Edit this page View Source AddressFamily Network IP address family Declaration public AddressFamily AddressFamily { get; } Property Value Type Description AddressFamily | Edit this page View Source AsIpNetwork Get as IPNetwork Declaration public IPNetwork AsIpNetwork { get; } Property Value Type Description IPNetwork | Edit this page View Source BitCount Number of bits of the network IP address family Declaration public int BitCount { get; } Property Value Type Description int | Edit this page View Source Broadcast Broadcast Declaration public BigInteger Broadcast { get; } Property Value Type Description BigInteger | Edit this page View Source BroadcastIPAddress Get the broadcast IP address Declaration public IPAddress BroadcastIPAddress { get; } Property Value Type Description IPAddress | Edit this page View Source ByteCount Number of bytes of the network IP address family Declaration public int ByteCount { get; } Property Value Type Description int | Edit this page View Source FirstUsable First usable IP address Declaration public IPAddress FirstUsable { get; } Property Value Type Description IPAddress | Edit this page View Source FullMask All bits of the network IP address family as full covering mask Declaration public BigInteger FullMask { get; } Property Value Type Description BigInteger | Edit this page View Source IPAddressCount Number of IP addresses in the sub-net Declaration public BigInteger IPAddressCount { get; } Property Value Type Description BigInteger | Edit this page View Source IPAddresses All IP addresses of this sub-net Declaration public IEnumerable<IPAddress> IPAddresses { get; } Property Value Type Description IEnumerable<IPAddress> | Edit this page View Source IsLan Is a LAN sub-net? Declaration public bool IsLan { get; } Property Value Type Description bool | Edit this page View Source IsLoopback Is a loopback sub-net? Declaration public bool IsLoopback { get; } Property Value Type Description bool | Edit this page View Source IsWan Is a WAN sub-net? Declaration public bool IsWan { get; } Property Value Type Description bool | Edit this page View Source this[BigInteger, BigInteger] Get an IP address range within this sub-net Declaration public IEnumerable<IPAddress> this[BigInteger startIndex, BigInteger count] { get; } Parameters Type Name Description BigInteger startIndex Start index BigInteger count Count Property Value Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source this[BigInteger] Get an IP address Declaration public IPAddress this[in BigInteger index] { get; } Parameters Type Name Description BigInteger index Index Property Value Type Description IPAddress IP address | Edit this page View Source LastUsable Last usable IP address Declaration public IPAddress LastUsable { get; } Property Value Type Description IPAddress | Edit this page View Source Mask Network mask Declaration public BigInteger Mask { get; } Property Value Type Description BigInteger | Edit this page View Source MaskIPAddress Get the network mask as IP address Declaration public IPAddress MaskIPAddress { get; } Property Value Type Description IPAddress | Edit this page View Source MaskedNetwork Masked network address Declaration public BigInteger MaskedNetwork { get; } Property Value Type Description BigInteger | Edit this page View Source MaskedNetworkIPAddress Get the masked network IP address Declaration public IPAddress MaskedNetworkIPAddress { get; } Property Value Type Description IPAddress | Edit this page View Source NetworkIPAddress Get the network as IP address Declaration public IPAddress NetworkIPAddress { get; } Property Value Type Description IPAddress | Edit this page View Source NetworkInterfaces Get all network interfaces which have a matching unicast IP address configured Declaration public IEnumerable<NetworkInterface> NetworkInterfaces { get; } Property Value Type Description IEnumerable<NetworkInterface> | Edit this page View Source NetworkKind IP network kind Declaration public IpNetworkKind NetworkKind { get; } Property Value Type Description IpNetworkKind | Edit this page View Source ParentSubNet Get the pre-defined parent sub-net of this loopback or LAN sub-net (returns this, if this is a WAN sub-net) Declaration public IpSubNet ParentSubNet { get; } Property Value Type Description IpSubNet | Edit this page View Source StructureSize Structure size in bytes when calling GetBytes() Declaration public int StructureSize { get; } Property Value Type Description int | Edit this page View Source UnicastAddresses Get all matching unicast IP address configuration information Declaration public IEnumerable<UnicastIPAddressInformation> UnicastAddresses { get; } Property Value Type Description IEnumerable<UnicastIPAddressInformation> | Edit this page View Source UsableIPAddressCount Number of usable IP addresses in the sub-net Declaration public BigInteger UsableIPAddressCount { get; } Property Value Type Description BigInteger | Edit this page View Source UsableIPAddresses All usable IP addresses of this sub-net Declaration public IEnumerable<IPAddress> UsableIPAddresses { get; } Property Value Type Description IEnumerable<IPAddress> Methods | Edit this page View Source CombineWith(in IpSubNet) Combine this sub-net with another sub-net Declaration public IpSubNet CombineWith(in IpSubNet net) Parameters Type Name Description IpSubNet net Sub-net (address family needs to be matching) Returns Type Description IpSubNet Combined sub-net | Edit this page View Source CompareTo(IpSubNet) Compare this instance mask bits length with another instances mask bits length Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public int CompareTo(IpSubNet other) Parameters Type Name Description IpSubNet other Other Returns Type Description int Result | Edit this page View Source GetBigInteger(in IPAddress) Get an IP address as BigInteger Declaration public static BigInteger GetBigInteger(in IPAddress ip) Parameters Type Name Description IPAddress ip IPAddress Returns Type Description BigInteger BigInteger | Edit this page View Source GetBytes() Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public byte[] GetBytes() Returns Type Description byte[] Bytes (IPV6_STRUCTURE_SIZE or IPV4_STRUCTURE_SIZE) | Edit this page View Source GetBytes(in Span<byte>) Get bytes Declaration public void GetBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Buffer (IPV6_STRUCTURE_SIZE or IPV4_STRUCTURE_SIZE required) | Edit this page View Source GetEnumerator() Get a sub-net IP address range enumerator Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public IEnumerator<IPAddress> GetEnumerator() Returns Type Description IEnumerator<IPAddress> Enumerator | Edit this page View Source GetIPAddress(in BigInteger) Get IP bits as IP address Declaration public IPAddress GetIPAddress(in BigInteger bits) Parameters Type Name Description BigInteger bits Bits Returns Type Description IPAddress IP address | Edit this page View Source GetUnicastAddresses(NetworkInterface) Get all matching unicast IP address configuration information Declaration public IEnumerable<UnicastIPAddressInformation> GetUnicastAddresses(NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Ethernet adapter Returns Type Description IEnumerable<UnicastIPAddressInformation> Unicast IP address configuration information | Edit this page View Source Includes(in IPAddress, in bool) Determine if this sub-net includes an IP address (won't do IPv4/6 conversions!) Declaration public bool Includes(in IPAddress ip, in bool throwOnError = true) Parameters Type Name Description IPAddress ip IP address (address family needs to be matching!) bool throwOnError Throw an exception on IP address family mismatch? Returns Type Description bool Sub-net includes the given IP address? Exceptions Type Condition ArgumentException IP address family mismatch | Edit this page View Source Intersects(in IpSubNet) Determine if this sub-net intersects with another sub-net (won't do IPv4/6 conversions!) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public bool Intersects(in IpSubNet net) Parameters Type Name Description IpSubNet net Sub-net (address family needs to be matching) Returns Type Description bool If this sub-net intersects | Edit this page View Source IsCompatibleWith(in IpSubNet) Determine if this sub-net is compatible with another sub-net (same address family and network, but maybe a different size) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public bool IsCompatibleWith(in IpSubNet net) Parameters Type Name Description IpSubNet net Sub-net Returns Type Description bool Is compatible? | Edit this page View Source IsWithin(in IpSubNet) Determine if this sub-net is within another sub-net (won't do IPv4/6 conversions!) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public bool IsWithin(in IpSubNet net) Parameters Type Name Description IpSubNet net Sub-net (address family needs to be matching) Returns Type Description bool If this sub-net is within | Edit this page View Source Parse(in ReadOnlySpan<char>) Parse from a string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static IpSubNet Parse(in ReadOnlySpan<char> subNet) Parameters Type Name Description ReadOnlySpan<char> subNet Sub-net in IP/n CIDR notation Returns Type Description IpSubNet Sub-net | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source TryParse(in ReadOnlySpan<char>, out IpSubNet) Try parsing from a string Declaration public static bool TryParse(in ReadOnlySpan<char> subNet, out IpSubNet result) Parameters Type Name Description ReadOnlySpan<char> subNet Sub-net in IP/n CIDR notation IpSubNet result Result Returns Type Description bool If succeed Operators | Edit this page View Source operator +(in IpSubNet, in IpSubNet) Combine two sub-nets Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static IpSubNet operator +(in IpSubNet a, in IpSubNet b) Parameters Type Name Description IpSubNet a A IpSubNet b B Returns Type Description IpSubNet Combined sub-net | Edit this page View Source operator &(in IpSubNet, in IpSubNet) Determine if two sub-nets intersect, or if A fits into B Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static IpSubNet operator &(in IpSubNet a, in IpSubNet b) Parameters Type Name Description IpSubNet a A IpSubNet b B Returns Type Description IpSubNet A, if A fits into B, or B, if A intersects B, or ZeroV4, if no intersection at all | Edit this page View Source operator |(in IpSubNet, in IpSubNet) Merge two compatible sub-nets Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static IpSubNet operator |(in IpSubNet a, in IpSubNet b) Parameters Type Name Description IpSubNet a A IpSubNet b B Returns Type Description IpSubNet Merged sub-net | Edit this page View Source operator ==(in IPAddress, in IpSubNet) Does match an IP address (not a network address!)? Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in IPAddress ip, in IpSubNet net) Parameters Type Name Description IPAddress ip IP address IpSubNet net Sub-net Returns Type Description bool Does match? | Edit this page View Source operator ==(in IpSubNet, in IPAddress) Does match an IP address (not a network address!)? Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in IpSubNet net, in IPAddress ip) Parameters Type Name Description IpSubNet net Sub-net IPAddress ip IP address Returns Type Description bool Does match? | Edit this page View Source operator >(in IpSubNet, in IpSubNet) Greater than Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator >(in IpSubNet a, in IpSubNet b) Parameters Type Name Description IpSubNet a A IpSubNet b B Returns Type Description bool Is A greater than B? | Edit this page View Source operator >=(in IpSubNet, in IpSubNet) Greater or equal to Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator >=(in IpSubNet a, in IpSubNet b) Parameters Type Name Description IpSubNet a A IpSubNet b B Returns Type Description bool Is A greater or equal to B? | Edit this page View Source implicit operator IpSubNet(in byte[]) Cast from bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator IpSubNet(in byte[] data) Parameters Type Name Description byte[] data Bytes Returns Type Description IpSubNet | Edit this page View Source implicit operator IpSubNet(in Memory<byte>) Cast from bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator IpSubNet(in Memory<byte> data) Parameters Type Name Description Memory<byte> data Bytes Returns Type Description IpSubNet | Edit this page View Source implicit operator IpSubNet(in IPAddress) Cast from IPAddress (should be a network address; zero bytes count) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator IpSubNet(in IPAddress network) Parameters Type Name Description IPAddress network IPAddress Returns Type Description IpSubNet | Edit this page View Source implicit operator IpSubNet(in IPNetwork) Cast from a IPNetwork Declaration public static implicit operator IpSubNet(in IPNetwork net) Parameters Type Name Description IPNetwork net IPNetwork Returns Type Description IpSubNet | Edit this page View Source implicit operator IpSubNet(in ReadOnlyMemory<byte>) Cast from bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator IpSubNet(in ReadOnlyMemory<byte> data) Parameters Type Name Description ReadOnlyMemory<byte> data Bytes Returns Type Description IpSubNet | Edit this page View Source implicit operator IpSubNet(in ReadOnlySpan<byte>) Cast from bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator IpSubNet(in ReadOnlySpan<byte> data) Parameters Type Name Description ReadOnlySpan<byte> data Bytes Returns Type Description IpSubNet | Edit this page View Source implicit operator IpSubNet(in Span<byte>) Cast from bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator IpSubNet(in Span<byte> data) Parameters Type Name Description Span<byte> data Bytes Returns Type Description IpSubNet | Edit this page View Source implicit operator byte[](in IpSubNet) Cast as bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator byte[](in IpSubNet net) Parameters Type Name Description IpSubNet net IpSubNet Returns Type Description byte[] | Edit this page View Source implicit operator IPAddress(in IpSubNet) Cast as IPAddress (network address) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator IPAddress(in IpSubNet network) Parameters Type Name Description IpSubNet network IpSubNet Returns Type Description IPAddress | Edit this page View Source implicit operator IPAddress[](in IpSubNet) Cast as IP address list Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator IPAddress[](in IpSubNet net) Parameters Type Name Description IpSubNet net Sub-net Returns Type Description IPAddress[] | Edit this page View Source implicit operator IPNetwork(in IpSubNet) Cast as IPNetwork Declaration public static implicit operator IPNetwork(in IpSubNet net) Parameters Type Name Description IpSubNet net Sub-net Returns Type Description IPNetwork | Edit this page View Source operator !=(in IPAddress, in IpSubNet) Does not match an IP address (not a network address!)? Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in IPAddress ip, in IpSubNet net) Parameters Type Name Description IPAddress ip IP address IpSubNet net Sub-net Returns Type Description bool Does not match? | Edit this page View Source operator !=(in IpSubNet, in IPAddress) Does not match an IP address (not a network address!)? Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in IpSubNet net, in IPAddress ip) Parameters Type Name Description IpSubNet net Sub-net IPAddress ip IP address Returns Type Description bool Does not match? | Edit this page View Source operator <<(in IpSubNet, in int) Increase a sub-net size Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static IpSubNet operator <<(in IpSubNet net, in int bits) Parameters Type Name Description IpSubNet net Sub-net int bits Bits Returns Type Description IpSubNet Resized sub-net | Edit this page View Source operator <(in IpSubNet, in IpSubNet) Lower than Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator <(in IpSubNet a, in IpSubNet b) Parameters Type Name Description IpSubNet a A IpSubNet b B Returns Type Description bool Is A lower than B? | Edit this page View Source operator <=(in IpSubNet, in IpSubNet) Lower or equal to Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator <=(in IpSubNet a, in IpSubNet b) Parameters Type Name Description IpSubNet a A IpSubNet b B Returns Type Description bool Is A lower or equal to B? | Edit this page View Source operator >>(in IpSubNet, in int) Decrease a sub-net size Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static IpSubNet operator >>(in IpSubNet net, in int bits) Parameters Type Name Description IpSubNet net Sub-net int bits Bits Returns Type Description IpSubNet Resized sub-net Implements IEnumerable<T> IEnumerable IComparable<T> IComparable IEquatable<T> Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) AsyncHelper.TryDisposeAll(IEnumerable<object>) AsyncHelper.TryDisposeAllAsync(IEnumerable<object>, bool) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IpSubNetAttribute.html": {
    "href": "api/wan24.Core.IpSubNetAttribute.html",
    "title": "Class IpSubNetAttribute | wan24-Core",
    "keywords": "Class IpSubNetAttribute IP sub-net validation attribute (for validating string or IpSubNet value properties) Inheritance object Attribute ValidationAttribute ValidationAttributeBase IpSubNetAttribute Inherited Members ValidationAttributeBase.GetErrorMessage(in ValidationContext, in string) ValidationAttributeBase.ErrorMessageFormatter ValidationAttribute.FormatErrorMessage(string) ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24CoreValidation.dll Syntax public class IpSubNetAttribute : ValidationAttributeBase Remarks Constructor Constructors | Edit this page View Source IpSubNetAttribute(params string[]) IP sub-net validation attribute (for validating string or IpSubNet value properties) Declaration public IpSubNetAttribute(params string[] allowedIpSubNets) Parameters Type Name Description string[] allowedIpSubNets Allowed IP sub-nets (CIDR notation; the value needs to fit into one of these; if none are given, the value only needs to be a valid sub-net) Remarks Constructor Properties | Edit this page View Source AllowIPv4 Allow an IPv4 sub-net? Declaration public bool AllowIPv4 { get; set; } Property Value Type Description bool | Edit this page View Source AllowIPv6 Allow an IPv6 sub-net? Declaration public bool AllowIPv6 { get; set; } Property Value Type Description bool | Edit this page View Source AllowedIpSubnets Allowed IP sub-nets (CIDR notation; the value needs to fit into one of these; if none are given, the value only needs to be a valid sub-net) Declaration public ReadOnlyMemory<IpSubNet> AllowedIpSubnets { get; } Property Value Type Description ReadOnlyMemory<IpSubNet> Methods | Edit this page View Source IsValid(object?, ValidationContext) Validates the specified value with respect to the current validation attribute. Declaration protected override ValidationResult? IsValid(object? value, ValidationContext validationContext) Parameters Type Name Description object value The value to validate. ValidationContext validationContext The context information about the validation operation. Returns Type Description ValidationResult An instance of the ValidationResult class. Overrides ValidationAttribute.IsValid(object, ValidationContext) Exceptions Type Condition InvalidOperationException The current attribute is malformed. NotImplementedException IsValid(object, ValidationContext) has not been implemented by a derived class. Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.IpSubNets.html": {
    "href": "api/wan24.Core.IpSubNets.html",
    "title": "Struct IpSubNets | wan24-Core",
    "keywords": "Struct IpSubNets Read-only IP sub-net list Implements IEnumerable<IpSubNet> IEnumerable IEquatable<IpSubNets> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public readonly record struct IpSubNets : IEnumerable<IpSubNet>, IEnumerable, IEquatable<IpSubNets> Constructors | Edit this page View Source IpSubNets(params IpSubNet[]) Constructor Declaration public IpSubNets(params IpSubNet[] subNets) Parameters Type Name Description IpSubNet[] subNets IP sub-nets | Edit this page View Source IpSubNets(in IpSubNet[]) Constructor Declaration public IpSubNets(in IpSubNet[] subNets) Parameters Type Name Description IpSubNet[] subNets IP sub-nets Fields | Edit this page View Source AddressFamily IP sub-nets address family (Unknown, if empty, or Unspecified if mixed) Declaration public readonly AddressFamily AddressFamily Field Value Type Description AddressFamily | Edit this page View Source Count Number of IP sub-nets Declaration public readonly int Count Field Value Type Description int | Edit this page View Source IsLan Are all contained IP sub-nets LAN sub-nets? Declaration public readonly bool IsLan Field Value Type Description bool | Edit this page View Source IsLoopback Are all contained IP sub-nets loopback sub-nets? Declaration public readonly bool IsLoopback Field Value Type Description bool | Edit this page View Source IsWan Are all contained IP sub-nets WAN sub-nets? Declaration public readonly bool IsWan Field Value Type Description bool | Edit this page View Source NetworkKind Contained IP network kinds Declaration public readonly IpNetworkKind NetworkKind Field Value Type Description IpNetworkKind Properties | Edit this page View Source this[Index] Get an IP sub-net Declaration public IpSubNet this[in Index index] { get; } Parameters Type Name Description Index index Index Property Value Type Description IpSubNet IpSubNet | Edit this page View Source this[int] Get an IP sub-net Declaration public IpSubNet this[in int index] { get; } Parameters Type Name Description int index Index Property Value Type Description IpSubNet IpSubNet Methods | Edit this page View Source AreAllCoveredByAnyOf(in IpSubNets) Determine if all contained IP sub-nets are covered by any of the given sub-nets Declaration public bool AreAllCoveredByAnyOf(in IpSubNets subNets) Parameters Type Name Description IpSubNets subNets IpSubNets Returns Type Description bool If all are covered | Edit this page View Source Contains(in IpSubNet) Determine if an IP sub-net is contained Declaration public bool Contains(in IpSubNet subNet) Parameters Type Name Description IpSubNet subNet IpSubNet Returns Type Description bool If contained | Edit this page View Source GetAllIntersecting(IpSubNet) Get all intersecting IP sub-nets Declaration public IEnumerable<IpSubNet> GetAllIntersecting(IpSubNet subNet) Parameters Type Name Description IpSubNet subNet IpSubNet Returns Type Description IEnumerable<IpSubNet> The intersecting IP sub-nets | Edit this page View Source GetAllMatching(IpSubNet) Get all matching IP sub-nets Declaration public IEnumerable<IpSubNet> GetAllMatching(IpSubNet subNet) Parameters Type Name Description IpSubNet subNet IpSubNet Returns Type Description IEnumerable<IpSubNet> The matching IP sub-nets | Edit this page View Source GetEnumerator() Get an IP sub-net enumerator Declaration public IEnumerator<IpSubNet> GetEnumerator() Returns Type Description IEnumerator<IpSubNet> Enumerator | Edit this page View Source GetIntersecting(in IpSubNet) Get the intersecting IP sub-net Declaration public IpSubNet? GetIntersecting(in IpSubNet subNet) Parameters Type Name Description IpSubNet subNet IpSubNet Returns Type Description IpSubNet? The intersecting IP sub-net | Edit this page View Source GetMatching(in IpSubNet) Get the matching IP sub-net Declaration public IpSubNet? GetMatching(in IpSubNet subNet) Parameters Type Name Description IpSubNet subNet IpSubNet Returns Type Description IpSubNet? The matching IP sub-net | Edit this page View Source Includes(in IPAddress) Determine if an IP address is included in any IP sub-net Declaration public bool Includes(in IPAddress ip) Parameters Type Name Description IPAddress ip IPAddress Returns Type Description bool If included in any IP sub-net | Edit this page View Source Including(in IPAddress) Get the IP sub-net which includes an IP address Declaration public IpSubNet? Including(in IPAddress ip) Parameters Type Name Description IPAddress ip IPAddress Returns Type Description IpSubNet? The including IP sub-net | Edit this page View Source IndexOf(in IpSubNet) Get the index of an IP sub-net Declaration public int IndexOf(in IpSubNet subNet) Parameters Type Name Description IpSubNet subNet IpSubNet Returns Type Description int Index or -1, if not contained | Edit this page View Source IntersectsWith(in IpSubNet) Determine if an IP sub-net is intersecting with any IP sub-net Declaration public bool IntersectsWith(in IpSubNet subNet) Parameters Type Name Description IpSubNet subNet IpSubNet Returns Type Description bool If included in any IP sub-net | Edit this page View Source IntersectsWith(in IpSubNets) Determine if the given IP sub-nets intersect any contained sub-nets Declaration public bool IntersectsWith(in IpSubNets subNets) Parameters Type Name Description IpSubNets subNets IpSubNets Returns Type Description bool If it intersects | Edit this page View Source IsAnyCoveredBy(in IpSubNet) Determine if an IP sub-net covers all contained sub-nets Declaration public bool IsAnyCoveredBy(in IpSubNet subNet) Parameters Type Name Description IpSubNet subNet IpSubNet Returns Type Description bool If it covers | Edit this page View Source IsAnyCoveredByAnyOf(in IpSubNets) Determine if any of the given IP sub-nets covers any of the contained sub-nets Declaration public bool IsAnyCoveredByAnyOf(in IpSubNets subNets) Parameters Type Name Description IpSubNets subNets IpSubNets Returns Type Description bool If any covers | Edit this page View Source IsCoveredBy(in IpSubNet) Determine if an IP sub-net covers all contained sub-nets Declaration public bool IsCoveredBy(in IpSubNet subNet) Parameters Type Name Description IpSubNet subNet IpSubNet Returns Type Description bool If it covers | Edit this page View Source Matches(in IpSubNet) Determine if an IP sub-net is matching into any IP sub-net Declaration public bool Matches(in IpSubNet subNet) Parameters Type Name Description IpSubNet subNet IpSubNet Returns Type Description bool If matching into any IP sub-net | Edit this page View Source ToArray() Get this as array Declaration public IpSubNet[] ToArray() Returns Type Description IpSubNet[] IP sub-net array Operators | Edit this page View Source operator +(in IpSubNets, in IpSubNet) Add an IP sub-net Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static IpSubNets operator +(in IpSubNets subNets, in IpSubNet subNet) Parameters Type Name Description IpSubNets subNets IpSubNets IpSubNet subNet IpSubNet Returns Type Description IpSubNets New IpSubNets | Edit this page View Source operator +(in IpSubNets, in IpSubNets) Add IP sub-nets Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static IpSubNets operator +(in IpSubNets subNets, in IpSubNets other) Parameters Type Name Description IpSubNets subNets IpSubNets IpSubNets other IpSubNets Returns Type Description IpSubNets IpSubNets | Edit this page View Source operator &(in IPAddress, in IpSubNets) Get the IP sub-net which includes an IP address Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static IpSubNet operator &(in IPAddress ip, in IpSubNets subNets) Parameters Type Name Description IPAddress ip IPAddress IpSubNets subNets IpSubNets Returns Type Description IpSubNet The including IP sub-net or ZeroV4 | Edit this page View Source operator &(in IpSubNet, in IpSubNets) Get the matching or intersecting IP sub-net Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static IpSubNet operator &(in IpSubNet subNet, in IpSubNets subNets) Parameters Type Name Description IpSubNet subNet IpSubNet IpSubNets subNets IpSubNets Returns Type Description IpSubNet The matching or intersecting IP sub-net, or ZeroV4, if not intersecting at al | Edit this page View Source operator &(in IpSubNets, in IPAddress) Get the IP sub-net which includes an IP address Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static IpSubNet operator &(in IpSubNets subNets, in IPAddress ip) Parameters Type Name Description IpSubNets subNets IpSubNets IPAddress ip IPAddress Returns Type Description IpSubNet The including IP sub-net or ZeroV4 | Edit this page View Source operator &(in IpSubNets, in IpSubNet) Get the matching or intersecting IP sub-net Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static IpSubNet operator &(in IpSubNets subNets, in IpSubNet subNet) Parameters Type Name Description IpSubNets subNets IpSubNets IpSubNet subNet IpSubNet Returns Type Description IpSubNet The matching or intersecting IP sub-net, or ZeroV4, if not intersecting at al | Edit this page View Source operator |(in IpSubNet, in IpSubNets) Add an IP sub-net (if it doesn't exist!) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static IpSubNets operator |(in IpSubNet subNet, in IpSubNets subNets) Parameters Type Name Description IpSubNet subNet IpSubNet IpSubNets subNets IpSubNets Returns Type Description IpSubNets IpSubNets | Edit this page View Source operator |(in IpSubNets, in IpSubNet) Add an IP sub-net (if it doesn't exist!) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static IpSubNets operator |(in IpSubNets subNets, in IpSubNet subNet) Parameters Type Name Description IpSubNets subNets IpSubNets IpSubNet subNet IpSubNet Returns Type Description IpSubNets New IpSubNets | Edit this page View Source operator |(in IpSubNets, in IpSubNets) Merge two IP sub-net lists Declaration public static IpSubNets operator |(in IpSubNets subNets, in IpSubNets other) Parameters Type Name Description IpSubNets subNets IpSubNets IpSubNets other IpSubNets Returns Type Description IpSubNets IpSubNets | Edit this page View Source operator ==(in IPAddress, in IpSubNets) Determine if an IP address is included in any IP sub-net Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in IPAddress ip, in IpSubNets subNets) Parameters Type Name Description IPAddress ip IPAddress IpSubNets subNets IpSubNets Returns Type Description bool If included in any IP sub-net | Edit this page View Source operator ==(in IpSubNets, in IPAddress) Determine if an IP address is included in any IP sub-net Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in IpSubNets subNets, in IPAddress ip) Parameters Type Name Description IpSubNets subNets IpSubNets IPAddress ip IPAddress Returns Type Description bool If included in any IP sub-net | Edit this page View Source explicit operator IpSubNet(in IpSubNets) Cast as combined IP sub-net Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static explicit operator IpSubNet(in IpSubNets subNets) Parameters Type Name Description IpSubNets subNets IpSubNets Returns Type Description IpSubNet | Edit this page View Source operator >(in IpSubNets, in IpSubNets) Count is greater Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator >(in IpSubNets a, in IpSubNets b) Parameters Type Name Description IpSubNets a A IpSubNets b B Returns Type Description bool If greater | Edit this page View Source operator >=(in IpSubNets, in IpSubNets) Count is greater or equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator >=(in IpSubNets a, in IpSubNets b) Parameters Type Name Description IpSubNets a A IpSubNets b B Returns Type Description bool If greater or equal | Edit this page View Source implicit operator int(in IpSubNets) Cast as IP sub-net count Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in IpSubNets subNets) Parameters Type Name Description IpSubNets subNets IpSubNets Returns Type Description int | Edit this page View Source implicit operator AddressFamily(in IpSubNets) Cast as IP address family Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator AddressFamily(in IpSubNets subNets) Parameters Type Name Description IpSubNets subNets IpSubNets Returns Type Description AddressFamily | Edit this page View Source implicit operator IpNetworkKind(in IpSubNets) Cast as IP network kind Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator IpNetworkKind(in IpSubNets subNets) Parameters Type Name Description IpSubNets subNets IpSubNets Returns Type Description IpNetworkKind | Edit this page View Source operator !=(in IPAddress, in IpSubNets) Determine if an IP address is not included in any IP sub-net Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in IPAddress ip, in IpSubNets subNets) Parameters Type Name Description IPAddress ip IPAddress IpSubNets subNets IpSubNets Returns Type Description bool If not included in any IP sub-net | Edit this page View Source operator !=(in IpSubNets, in IPAddress) Determine if an IP address is not included in any IP sub-net Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in IpSubNets subNets, in IPAddress ip) Parameters Type Name Description IpSubNets subNets IpSubNets IPAddress ip IPAddress Returns Type Description bool If not included in any IP sub-net | Edit this page View Source operator <(in IpSubNets, in IpSubNets) Count is lower Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator <(in IpSubNets a, in IpSubNets b) Parameters Type Name Description IpSubNets a A IpSubNets b B Returns Type Description bool If lower | Edit this page View Source operator <=(in IpSubNets, in IpSubNets) Count is lower or equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator <=(in IpSubNets a, in IpSubNets b) Parameters Type Name Description IpSubNets a A IpSubNets b B Returns Type Description bool If lower or equal | Edit this page View Source operator -(in IpSubNets, in IpSubNet) Remove an IP sub-net Declaration public static IpSubNets operator -(in IpSubNets subNets, in IpSubNet subNet) Parameters Type Name Description IpSubNets subNets IpSubNets IpSubNet subNet IpSubNet Returns Type Description IpSubNets IpSubNets | Edit this page View Source operator -(in IpSubNets, in IpSubNets) Remove IP sub-nets Declaration public static IpSubNets operator -(in IpSubNets subNets, in IpSubNets other) Parameters Type Name Description IpSubNets subNets IpSubNets IpSubNets other IpSubNets Returns Type Description IpSubNets IpSubNets Implements IEnumerable<T> IEnumerable IEquatable<T> Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ItemQueueWorkerBase-1.html": {
    "href": "api/wan24.Core.ItemQueueWorkerBase-1.html",
    "title": "Class ItemQueueWorkerBase<T> | wan24-Core",
    "keywords": "Class ItemQueueWorkerBase<T> Base class for an item queue worker Inheritance object DisposableBase HostedServiceBase QueueWorker ItemQueueWorkerBase<T> BackgroundStream<T>.WriteService FileLogger.LogQueueWorker Implements IWillDispose IItemQueueWorker<T> IQueueWorker IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members QueueWorker.Queue QueueWorker.GUID QueueWorker.Queued QueueWorker.State QueueWorker.EnqueueAsync(QueueWorker.Task_Delegate, CancellationToken) QueueWorker.TryEnqueue(QueueWorker.Task_Delegate, CancellationToken) QueueWorker.EnqueueRangeAsync(IEnumerable<QueueWorker.Task_Delegate>, CancellationToken) QueueWorker.EnqueueRangeAsync(IAsyncEnumerable<QueueWorker.Task_Delegate>, CancellationToken) QueueWorker.WorkerAsync() HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.AfterStartAsync(CancellationToken) HostedServiceBase.BeforeStopAsync(CancellationToken) HostedServiceBase.StoppingAsync(CancellationToken) HostedServiceBase.AfterStopAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.AfterPauseAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.AfterResumeAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.Dispose(bool) HostedServiceBase.DisposeCore() HostedServiceBase.OnException HostedServiceBase.RaiseOnException() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class ItemQueueWorkerBase<T> : QueueWorker, IWillDispose, IItemQueueWorker<T>, IQueueWorker, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Type Parameters Name Description T Item type Constructors | Edit this page View Source ItemQueueWorkerBase(in int) Constructor Declaration protected ItemQueueWorkerBase(in int capacity) Parameters Type Name Description int capacity Capacity Methods | Edit this page View Source EnqueueAsync(T, CancellationToken) Enqueue an item to process Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public ValueTask EnqueueAsync(T item, CancellationToken cancellationToken = default) Parameters Type Name Description T item Item CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask | Edit this page View Source EnqueueRangeAsync(IAsyncEnumerable<T>, CancellationToken) Enqueue many items for processing Declaration [TargetedPatchingOptOut(\"Tiny method\")] public ValueTask<int> EnqueueRangeAsync(IAsyncEnumerable<T> items, CancellationToken cancellationToken = default) Parameters Type Name Description IAsyncEnumerable<T> items Items CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<int> Number of enqueued items | Edit this page View Source EnqueueRangeAsync(IEnumerable<T>, CancellationToken) Enqueue many items for processing Declaration [TargetedPatchingOptOut(\"Tiny method\")] public ValueTask<int> EnqueueRangeAsync(IEnumerable<T> items, CancellationToken cancellationToken = default) Parameters Type Name Description IEnumerable<T> items Items CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<int> Number of enqueued items | Edit this page View Source ProcessItem(T, CancellationToken) Process one item Declaration protected abstract Task ProcessItem(T item, CancellationToken cancellationToken) Parameters Type Name Description T item Item to process CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source TryEnqueue(T) Try enqueueing an item to process Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public bool TryEnqueue(T item) Parameters Type Name Description T item Item Returns Type Description bool Enqueued? Implements IWillDispose IItemQueueWorker<T> IQueueWorker IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ItemRgbAttribute.html": {
    "href": "api/wan24.Core.ItemRgbAttribute.html",
    "title": "Class ItemRgbAttribute | wan24-Core",
    "keywords": "Class ItemRgbAttribute Item RGB 24 bit integer validation attribute Inheritance object Attribute ItemValidationAttribute ItemRgbAttribute Implements IItemValidationAttribute IMultipleValidations Inherited Members ItemValidationAttribute.GetValidationResult(object, ValidationContext, IServiceProvider) ItemValidationAttribute.MultiValidation(object, ValidationContext, IServiceProvider) ItemValidationAttribute.ValidationTarget ItemValidationAttribute.ValidationAttribute ItemValidationAttribute.ArrayLevel Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24CoreValidation.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field|AttributeTargets.Parameter|AttributeTargets.ReturnValue)] public class ItemRgbAttribute : ItemValidationAttribute, IItemValidationAttribute, IMultipleValidations Constructors | Edit this page View Source ItemRgbAttribute() Constructor Declaration public ItemRgbAttribute() | Edit this page View Source ItemRgbAttribute(ItemValidationTargets) Constructor Declaration public ItemRgbAttribute(ItemValidationTargets target) Parameters Type Name Description ItemValidationTargets target Validation target Implements wan24.ObjectValidation.IItemValidationAttribute wan24.ObjectValidation.IMultipleValidations Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.JsonExtensions.html": {
    "href": "api/wan24.Core.JsonExtensions.html",
    "title": "Class JsonExtensions | wan24-Core",
    "keywords": "Class JsonExtensions JSON extensions Inheritance object JsonExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class JsonExtensions Methods | Edit this page View Source DecodeJson<T>(string) Decode JSON Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static T? DecodeJson<T>(this string json) Parameters Type Name Description string json JSON string Returns Type Description T Object Type Parameters Name Description T Target type | Edit this page View Source FromJson(Type, in string) Decode a JSON string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static object? FromJson(this Type type, in string json) Parameters Type Name Description Type type Type string json JSON string Returns Type Description object Object | Edit this page View Source GetJsonValue<T>(Dictionary<string, object?>, in string, in char) Get a value from a deep JSON ditionary (an object) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static T? GetJsonValue<T>(this Dictionary<string, object?> jsonDict, in string path, in char pathSeparator = '.') Parameters Type Name Description Dictionary<string, object> jsonDict JSON dictionary string path Path char pathSeparator Path property name separator Returns Type Description T Value (null, if the path doesn't exist or the value type doesn't match) Type Parameters Name Description T Value type Exceptions Type Condition ArgumentException Invalid path | Edit this page View Source HasJsonValue(Dictionary<string, object?>, in string, in char) Determine if a deep JSON ditionary (an object) contains a value Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool HasJsonValue(this Dictionary<string, object?> jsonDict, in string path, in char pathSeparator = '.') Parameters Type Name Description Dictionary<string, object> jsonDict JSON dictionary string path Path (dot separated property names) char pathSeparator Path property name separator Returns Type Description bool If the given path has a value Exceptions Type Condition ArgumentException Invalid path | Edit this page View Source SetJsonValue<T>(Dictionary<string, object?>, in string, in T, in char) Set a value in a deep JSON dictionary (an object; missing sub-objects will be created) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Dictionary<string, object?> SetJsonValue<T>(this Dictionary<string, object?> jsonDict, in string path, in T value, in char pathSeparator = '.') Parameters Type Name Description Dictionary<string, object> jsonDict JSON dictionary string path Path (dot separated property names) T value Value to set to the path char pathSeparator Path property name separator Returns Type Description Dictionary<string, object> JSON dictionary Type Parameters Name Description T Value type Exceptions Type Condition ArgumentException An element in the path is not a JSON dictionary, or the path is invalid | Edit this page View Source ToJson(object, in bool) Get as JSON string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string ToJson(this object obj, in bool prettify = false) Parameters Type Name Description object obj Object bool prettify Prettify? Returns Type Description string JSON string | Edit this page View Source ToObject(Dictionary<string, object?>, in Type) Create an object from a JSON dictionary Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static object ToObject(this Dictionary<string, object?> jsonDict, in Type type) Parameters Type Name Description Dictionary<string, object> jsonDict JSON dictionary Type type Object type Returns Type Description object Object | Edit this page View Source ToObject<T>(Dictionary<string, object?>) Create an object from a JSON dictionary Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static T ToObject<T>(this Dictionary<string, object?> jsonDict) Parameters Type Name Description Dictionary<string, object> jsonDict JSON dictionary Returns Type Description T Object Type Parameters Name Description T Object type | Edit this page View Source TryGetJsonValue<T>(Dictionary<string, object?>, in string, out T?, in char) Get a value from a deep JSON ditionary (an object) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool TryGetJsonValue<T>(this Dictionary<string, object?> jsonDict, in string path, out T? result, in char pathSeparator = '.') Parameters Type Name Description Dictionary<string, object> jsonDict JSON dictionary string path Path (dot separated property names) T result Value char pathSeparator Path property name separator Returns Type Description bool If the value was found (anyway, the value may be null) Type Parameters Name Description T Value type Exceptions Type Condition ArgumentException Invalid path | Edit this page View Source TrySetJsonValue<T>(Dictionary<string, object?>, in string, in T, in char) Set a value in a deep JSON dictionary (an object; missing sub-objects will be created) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool TrySetJsonValue<T>(this Dictionary<string, object?> jsonDict, in string path, in T value, in char pathSeparator = '.') Parameters Type Name Description Dictionary<string, object> jsonDict JSON dictionary string path Path (dot separated property names) T value Value to set to the path char pathSeparator Path property name separator Returns Type Description bool If the value was set Type Parameters Name Description T Value type Exceptions Type Condition ArgumentException Invalid path"
  },
  "api/wan24.Core.JsonHelper.Decoder_Delegate.html": {
    "href": "api/wan24.Core.JsonHelper.Decoder_Delegate.html",
    "title": "Delegate JsonHelper.Decoder_Delegate | wan24-Core",
    "keywords": "Delegate JsonHelper.Decoder_Delegate Delegate for a JSON decoder Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate object? JsonHelper.Decoder_Delegate(Type type, string json) Parameters Type Name Description Type type Expected type string json JSON string Returns Type Description object Result Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.JsonHelper.EncoderAsync_Delegate.html": {
    "href": "api/wan24.Core.JsonHelper.EncoderAsync_Delegate.html",
    "title": "Delegate JsonHelper.EncoderAsync_Delegate | wan24-Core",
    "keywords": "Delegate JsonHelper.EncoderAsync_Delegate Delegate for a JSON encoder Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task<string> JsonHelper.EncoderAsync_Delegate(object? obj, Stream? target, bool prettify, CancellationToken cancellationToken) Parameters Type Name Description object obj Object Stream target Target stream bool prettify Prettify? CancellationToken cancellationToken Cancellation token Returns Type Description Task<string> JSON string or empty if target was given Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.JsonHelper.Encoder_Delegate.html": {
    "href": "api/wan24.Core.JsonHelper.Encoder_Delegate.html",
    "title": "Delegate JsonHelper.Encoder_Delegate | wan24-Core",
    "keywords": "Delegate JsonHelper.Encoder_Delegate Delegate for a JSON encoder Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate string JsonHelper.Encoder_Delegate(object? obj, bool prettify) Parameters Type Name Description object obj Object bool prettify Prettify? Returns Type Description string JSON string Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.JsonHelper.StreamDecoderAsync_Delegate.html": {
    "href": "api/wan24.Core.JsonHelper.StreamDecoderAsync_Delegate.html",
    "title": "Delegate JsonHelper.StreamDecoderAsync_Delegate | wan24-Core",
    "keywords": "Delegate JsonHelper.StreamDecoderAsync_Delegate Delegate for a JSON decoder Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task<object?> JsonHelper.StreamDecoderAsync_Delegate(Type type, Stream source, CancellationToken cancellationToken) Parameters Type Name Description Type type Expected type Stream source JSON stream CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Result Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.JsonHelper.StreamDecoder_Delegate.html": {
    "href": "api/wan24.Core.JsonHelper.StreamDecoder_Delegate.html",
    "title": "Delegate JsonHelper.StreamDecoder_Delegate | wan24-Core",
    "keywords": "Delegate JsonHelper.StreamDecoder_Delegate Delegate for a JSON decoder Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate object? JsonHelper.StreamDecoder_Delegate(Type type, Stream stream) Parameters Type Name Description Type type Expected type Stream stream Stream Returns Type Description object Result Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.JsonHelper.StreamEncoder_Delegate.html": {
    "href": "api/wan24.Core.JsonHelper.StreamEncoder_Delegate.html",
    "title": "Delegate JsonHelper.StreamEncoder_Delegate | wan24-Core",
    "keywords": "Delegate JsonHelper.StreamEncoder_Delegate Delegate for a JSON encoder Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void JsonHelper.StreamEncoder_Delegate(object? obj, Stream target, bool prettify) Parameters Type Name Description object obj Object Stream target Target stream bool prettify Prettify? Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.JsonHelper.StringDecoderAsync_Delegate.html": {
    "href": "api/wan24.Core.JsonHelper.StringDecoderAsync_Delegate.html",
    "title": "Delegate JsonHelper.StringDecoderAsync_Delegate | wan24-Core",
    "keywords": "Delegate JsonHelper.StringDecoderAsync_Delegate Delegate for a JSON decoder Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task<object?> JsonHelper.StringDecoderAsync_Delegate(Type type, string json, CancellationToken cancellationToken) Parameters Type Name Description Type type Expected type string json JSON string CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Result Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.JsonHelper.html": {
    "href": "api/wan24.Core.JsonHelper.html",
    "title": "Class JsonHelper | wan24-Core",
    "keywords": "Class JsonHelper JSON helper Inheritance object JsonHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class JsonHelper Fields | Edit this page View Source FALSE JSON false value Declaration public const string FALSE = \"false\" Field Value Type Description string | Edit this page View Source MIME_TYPE JSON MIME type Declaration public const string MIME_TYPE = \"application/json\" Field Value Type Description string | Edit this page View Source NULL JSON null value Declaration public const string NULL = \"null\" Field Value Type Description string | Edit this page View Source TRUE JSON true value Declaration public const string TRUE = \"true\" Field Value Type Description string Properties | Edit this page View Source Decoder JSON decoder Declaration public static JsonHelper.Decoder_Delegate Decoder { get; set; } Property Value Type Description JsonHelper.Decoder_Delegate | Edit this page View Source Encoder JSON encoder Declaration public static JsonHelper.Encoder_Delegate Encoder { get; set; } Property Value Type Description JsonHelper.Encoder_Delegate | Edit this page View Source EncoderAsync JSON encoder Declaration public static JsonHelper.EncoderAsync_Delegate EncoderAsync { get; set; } Property Value Type Description JsonHelper.EncoderAsync_Delegate | Edit this page View Source StreamDecoder JSON decoder Declaration public static JsonHelper.StreamDecoder_Delegate StreamDecoder { get; set; } Property Value Type Description JsonHelper.StreamDecoder_Delegate | Edit this page View Source StreamDecoderAsync JSON decoder Declaration public static JsonHelper.StreamDecoderAsync_Delegate StreamDecoderAsync { get; set; } Property Value Type Description JsonHelper.StreamDecoderAsync_Delegate | Edit this page View Source StreamEncoder JSON encoder Declaration public static JsonHelper.StreamEncoder_Delegate StreamEncoder { get; set; } Property Value Type Description JsonHelper.StreamEncoder_Delegate | Edit this page View Source StringDecoderAsync JSON decoder Declaration public static JsonHelper.StringDecoderAsync_Delegate StringDecoderAsync { get; set; } Property Value Type Description JsonHelper.StringDecoderAsync_Delegate Methods | Edit this page View Source DecodeAsync<T>(Stream, CancellationToken) Decode Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<T?> DecodeAsync<T>(Stream json, CancellationToken cancellationToken = default) Parameters Type Name Description Stream json JSON stream CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Result Type Parameters Name Description T Result type | Edit this page View Source DecodeAsync<T>(string, CancellationToken) Decode Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<T?> DecodeAsync<T>(string json, CancellationToken cancellationToken = default) Parameters Type Name Description string json JSON string CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Result Type Parameters Name Description T Result type | Edit this page View Source DecodeObject(in Type, in Stream) Decode an object Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static object? DecodeObject(in Type type, in Stream source) Parameters Type Name Description Type type Expected type Stream source Source stream Returns Type Description object Result | Edit this page View Source DecodeObject(in Type, in string) Decode an object Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static object? DecodeObject(in Type type, in string json) Parameters Type Name Description Type type Expected type string json JSON string Returns Type Description object Result | Edit this page View Source DecodeObjectAsync(Type, Stream, CancellationToken) Decode an object Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<object?> DecodeObjectAsync(Type type, Stream json, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Expected type Stream json JSON stream CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Result | Edit this page View Source DecodeObjectAsync(Type, string, CancellationToken) Decode an object Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<object?> DecodeObjectAsync(Type type, string json, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Expected type string json JSON string CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Result | Edit this page View Source Decode<T>(in Stream) Decode Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static T? Decode<T>(in Stream source) Parameters Type Name Description Stream source Source stream Returns Type Description T Result Type Parameters Name Description T Result type | Edit this page View Source Decode<T>(in string) Decode Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static T? Decode<T>(in string json) Parameters Type Name Description string json JSON string Returns Type Description T Result Type Parameters Name Description T Result type | Edit this page View Source Encode(in object?, in bool) Encode Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string Encode(in object? obj, in bool prettify = false) Parameters Type Name Description object obj Object bool prettify Prettify? Returns Type Description string JSON string | Edit this page View Source Encode(in object?, in Stream, in bool) Encode Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void Encode(in object? obj, in Stream target, in bool prettify = false) Parameters Type Name Description object obj Object Stream target Target stream bool prettify Prettify? | Edit this page View Source EncodeAsync(object?, Stream?, bool, CancellationToken) Encode Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<string> EncodeAsync(object? obj, Stream? target = null, bool prettify = false, CancellationToken cancellationToken = default) Parameters Type Name Description object obj Object Stream target Target stream bool prettify Prettify? CancellationToken cancellationToken Cancellation token Returns Type Description Task<string> JSON string or empty, when target was given | Edit this page View Source IsJsonArray(string) Determine if a string is a JSON array value Declaration public static bool IsJsonArray(this string json) Parameters Type Name Description string json JSON string Returns Type Description bool Is an array (may return false positives)? | Edit this page View Source IsJsonBoolean(string) Determine if a string is a JSON bool value Declaration public static bool IsJsonBoolean(this string json) Parameters Type Name Description string json JSON string Returns Type Description bool Is bool? | Edit this page View Source IsJsonFloat(string) Determine if a string is a JSON float value Declaration public static bool IsJsonFloat(this string json) Parameters Type Name Description string json JSON string Returns Type Description bool Is float? | Edit this page View Source IsJsonInt(string) Determine if a string is a JSON int value Declaration public static bool IsJsonInt(this string json) Parameters Type Name Description string json JSON string Returns Type Description bool Is int? | Edit this page View Source IsJsonNull(string) Determine if a string is a JSON null value Declaration public static bool IsJsonNull(this string json) Parameters Type Name Description string json JSON string Returns Type Description bool Is null? | Edit this page View Source IsJsonNumeric(string) Determine if a string is a JSON numeric (int/float) value Declaration public static bool IsJsonNumeric(this string json) Parameters Type Name Description string json JSON string Returns Type Description bool Is numeric? | Edit this page View Source IsJsonObject(string) Determine if a string is a JSON object value Declaration public static bool IsJsonObject(this string json) Parameters Type Name Description string json JSON string Returns Type Description bool Is an object (may return false positives)? | Edit this page View Source IsJsonString(string) Determine if a string is a JSON float value Declaration public static bool IsJsonString(this string json) Parameters Type Name Description string json JSON string Returns Type Description bool Is an float (may return false positives)? | Edit this page View Source MayBeJson(string) Determine if a string may be JSON Declaration public static bool MayBeJson(this string json) Parameters Type Name Description string json JSON string Returns Type Description bool If the string may be JSON (if false, it's not proper JSON for sure - if true, there is a possibility for false positives!)"
  },
  "api/wan24.Core.LazyValue-1.html": {
    "href": "api/wan24.Core.LazyValue-1.html",
    "title": "Class LazyValue<T> | wan24-Core",
    "keywords": "Class LazyValue<T> Lazy value Inheritance object LazyValue<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class LazyValue<T> Type Parameters Name Description T Value type Remarks Constructor Constructors | Edit this page View Source LazyValue(in Func<T>) Lazy value Declaration public LazyValue(in Func<T> factory) Parameters Type Name Description Func<T> factory Factory Remarks Constructor Properties | Edit this page View Source Value Value Declaration public T Value { get; } Property Value Type Description T Operators | Edit this page View Source implicit operator bool(in LazyValue<T>) Cast as has-value-flag Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in LazyValue<T> lazyValue) Parameters Type Name Description LazyValue<T> lazyValue Lazy value Returns Type Description bool | Edit this page View Source implicit operator T(in LazyValue<T>) Cast as value Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T(in LazyValue<T> lazyValue) Parameters Type Name Description LazyValue<T> lazyValue Lazy value Returns Type Description T Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.LimitedLengthStream-1.html": {
    "href": "api/wan24.Core.LimitedLengthStream-1.html",
    "title": "Class LimitedLengthStream<T> | wan24-Core",
    "keywords": "Class LimitedLengthStream<T> Limited length stream wrapper Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> LimitedLengthStream<T> LimitedLengthStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.LeaveOpen WrapperStream<T>.State WrapperStream<T>.CanRead WrapperStream<T>.CanSeek WrapperStream<T>.CanWrite WrapperStream<T>.CanTimeout WrapperStream<T>.ReadTimeout WrapperStream<T>.WriteTimeout WrapperStream<T>.CopyTo(Stream, int) WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndRead(IAsyncResult) WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndWrite(IAsyncResult) WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.Close() WrapperStream<T>.Dispose(bool) WrapperStream<T>.DisposeCore() WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class LimitedLengthStream<T> : WrapperStream<T>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Wrapped stream type Constructors | Edit this page View Source LimitedLengthStream(in T, in long, in bool) Constructor Declaration public LimitedLengthStream(in T baseStream, in long maxLength, in bool leaveOpen = false) Parameters Type Name Description T baseStream Base stream long maxLength Maximum length in bytes bool leaveOpen Leave the base stream open when disposing? Fields | Edit this page View Source _MaxLength Maximum length in bytes Declaration protected long _MaxLength Field Value Type Description long | Edit this page View Source _Position Current position Declaration protected long _Position Field Value Type Description long Properties | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides WrapperStream<T>.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source MaxLength Maximum length in bytes Declaration public long MaxLength { get; set; } Property Value Type Description long | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides WrapperStream<T>.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source ThrowOnReadOverflow Throw an exception, when reading overflows? Declaration public bool ThrowOnReadOverflow { get; set; } Property Value Type Description bool | Edit this page View Source UsedPosition used stream position Declaration public long UsedPosition { get; protected set; } Property Value Type Description long Methods | Edit this page View Source DetachBaseStream() Detach the base stream and dispose Declaration public virtual T DetachBaseStream() Returns Type Description T Base stream | Edit this page View Source DetachBaseStreamAsync() Detach the base stream and dispose Declaration public virtual Task<T> DetachBaseStreamAsync() Returns Type Description Task<T> Base stream | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides WrapperStream<T>.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides WrapperStream<T>.FlushAsync(CancellationToken) Exceptions Type Condition ObjectDisposedException The stream has been disposed. | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides WrapperStream<T>.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides WrapperStream<T>.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides WrapperStream<T>.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides WrapperStream<T>.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides WrapperStream<T>.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides WrapperStream<T>.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides WrapperStream<T>.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides WrapperStream<T>.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.LimitedLengthStream.html": {
    "href": "api/wan24.Core.LimitedLengthStream.html",
    "title": "Class LimitedLengthStream | wan24-Core",
    "keywords": "Class LimitedLengthStream Limited length stream wrapper Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> LimitedLengthStream<Stream> LimitedLengthStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members LimitedLengthStream<Stream>._MaxLength LimitedLengthStream<Stream>._Position LimitedLengthStream<Stream>.MaxLength LimitedLengthStream<Stream>.ThrowOnReadOverflow LimitedLengthStream<Stream>.Position LimitedLengthStream<Stream>.UsedPosition LimitedLengthStream<Stream>.Length LimitedLengthStream<Stream>.DetachBaseStream() LimitedLengthStream<Stream>.DetachBaseStreamAsync() LimitedLengthStream<Stream>.Flush() LimitedLengthStream<Stream>.FlushAsync(CancellationToken) LimitedLengthStream<Stream>.SetLength(long) LimitedLengthStream<Stream>.Write(byte[], int, int) LimitedLengthStream<Stream>.Write(ReadOnlySpan<byte>) LimitedLengthStream<Stream>.WriteByte(byte) LimitedLengthStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) LimitedLengthStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) LimitedLengthStream<Stream>.Read(byte[], int, int) LimitedLengthStream<Stream>.Read(Span<byte>) LimitedLengthStream<Stream>.ReadByte() LimitedLengthStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) LimitedLengthStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) LimitedLengthStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.State WrapperStream<Stream>.CanRead WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.Dispose(bool) WrapperStream<Stream>.DisposeCore() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class LimitedLengthStream : LimitedLengthStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source LimitedLengthStream(in Stream, in long, in bool) Limited length stream wrapper Declaration public LimitedLengthStream(in Stream baseStream, in long maxLength, in bool leaveOpen = false) Parameters Type Name Description Stream baseStream Base stream long maxLength Maximum length in bytes bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.LimitedStream-1.html": {
    "href": "api/wan24.Core.LimitedStream-1.html",
    "title": "Class LimitedStream<T> | wan24-Core",
    "keywords": "Class LimitedStream<T> Limited stream limits reading/writing/seeking (which can't be overridden from an inheriting or wrapped stream) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> LimitedStream<T> LimitedStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.LeaveOpen WrapperStream<T>.State WrapperStream<T>.CanTimeout WrapperStream<T>.ReadTimeout WrapperStream<T>.WriteTimeout WrapperStream<T>.Flush() WrapperStream<T>.FlushAsync(CancellationToken) WrapperStream<T>.CopyTo(Stream, int) WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndRead(IAsyncResult) WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndWrite(IAsyncResult) WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.Close() WrapperStream<T>.Dispose(bool) WrapperStream<T>.DisposeCore() WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class LimitedStream<T> : WrapperStream<T>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Wrapped stream type Remarks Constructor Constructors | Edit this page View Source LimitedStream(in T, in bool, in bool, in bool, in bool) Limited stream limits reading/writing/seeking (which can't be overridden from an inheriting or wrapped stream) Declaration public LimitedStream(in T baseStream, in bool canRead, in bool canWrite, in bool canSeek, in bool leaveOpen = false) Parameters Type Name Description T baseStream Base stream bool canRead Can read? bool canWrite Can write? bool canSeek Can seek? bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Fields | Edit this page View Source _CanRead Can read? Declaration protected readonly bool _CanRead Field Value Type Description bool | Edit this page View Source _CanSeek Can seek? Declaration protected readonly bool _CanSeek Field Value Type Description bool | Edit this page View Source _CanWrite Can write? Declaration protected readonly bool _CanWrite Field Value Type Description bool Properties | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override sealed bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides WrapperStream<T>.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override sealed bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides WrapperStream<T>.CanSeek | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override sealed bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides WrapperStream<T>.CanWrite | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override sealed long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides WrapperStream<T>.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override sealed long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides WrapperStream<T>.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Methods | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override sealed int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides WrapperStream<T>.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override sealed int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides WrapperStream<T>.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override sealed Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override sealed ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override sealed int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides WrapperStream<T>.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override sealed long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides WrapperStream<T>.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override sealed void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides WrapperStream<T>.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override sealed void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides WrapperStream<T>.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override sealed void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides WrapperStream<T>.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override sealed Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override sealed ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override sealed void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides WrapperStream<T>.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.LimitedStream.html": {
    "href": "api/wan24.Core.LimitedStream.html",
    "title": "Class LimitedStream | wan24-Core",
    "keywords": "Class LimitedStream Limited stream limits reading/writing/seeking (which can't be overridden from an inheriting or wrapped stream) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> LimitedStream<Stream> LimitedStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members LimitedStream<Stream>._CanRead LimitedStream<Stream>._CanWrite LimitedStream<Stream>._CanSeek LimitedStream<Stream>.CanRead LimitedStream<Stream>.CanWrite LimitedStream<Stream>.CanSeek LimitedStream<Stream>.Length LimitedStream<Stream>.Position LimitedStream<Stream>.Read(byte[], int, int) LimitedStream<Stream>.Read(Span<byte>) LimitedStream<Stream>.ReadByte() LimitedStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) LimitedStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) LimitedStream<Stream>.Write(byte[], int, int) LimitedStream<Stream>.Write(ReadOnlySpan<byte>) LimitedStream<Stream>.WriteByte(byte) LimitedStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) LimitedStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) LimitedStream<Stream>.Seek(long, SeekOrigin) LimitedStream<Stream>.SetLength(long) WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.State WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.Flush() WrapperStream<Stream>.FlushAsync(CancellationToken) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.Dispose(bool) WrapperStream<Stream>.DisposeCore() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class LimitedStream : LimitedStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source LimitedStream(in Stream, in bool, in bool, in bool, in bool) Limited stream limits reading/writing/seeking (which can't be overridden from an inheriting or wrapped stream) Declaration public LimitedStream(in Stream baseStream, in bool canRead, in bool canWrite, in bool canSeek, in bool leaveOpen = false) Parameters Type Name Description Stream baseStream Base stream bool canRead Can read? bool canWrite Can write? bool canSeek Can seek? bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.LoadTypeEventArgs.html": {
    "href": "api/wan24.Core.LoadTypeEventArgs.html",
    "title": "Class LoadTypeEventArgs | wan24-Core",
    "keywords": "Class LoadTypeEventArgs Type loader event arguments Inheritance object EventArgs LoadTypeEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class LoadTypeEventArgs : EventArgs Remarks Constructor Constructors | Edit this page View Source LoadTypeEventArgs(in string) Type loader event arguments Declaration public LoadTypeEventArgs(in string name) Parameters Type Name Description string name Requested type name Remarks Constructor Properties | Edit this page View Source Name Requested type name Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source Type Type to use Declaration public Type? Type { get; set; } Property Value Type Description Type Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.LogLevelExtensions.html": {
    "href": "api/wan24.Core.LogLevelExtensions.html",
    "title": "Class LogLevelExtensions | wan24-Core",
    "keywords": "Class LogLevelExtensions LogLevel extensions Inheritance object LogLevelExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class LogLevelExtensions Methods | Edit this page View Source IsCritical(LogLevel) Is critical? Declaration public static bool IsCritical(this LogLevel level) Parameters Type Name Description LogLevel level Log level Returns Type Description bool If critical | Edit this page View Source IsDebugging(LogLevel) Is debugging? Declaration public static bool IsDebugging(this LogLevel level) Parameters Type Name Description LogLevel level Log level Returns Type Description bool If debugging | Edit this page View Source IsError(LogLevel) Is error? Declaration public static bool IsError(this LogLevel level) Parameters Type Name Description LogLevel level Log level Returns Type Description bool If error | Edit this page View Source IsInformative(LogLevel) Is informative? Declaration public static bool IsInformative(this LogLevel level) Parameters Type Name Description LogLevel level Log level Returns Type Description bool If informative | Edit this page View Source IsNoLogging(LogLevel) Is no logging? Declaration public static bool IsNoLogging(this LogLevel level) Parameters Type Name Description LogLevel level Log level Returns Type Description bool If not logging | Edit this page View Source IsTracing(LogLevel) Is tracing? Declaration public static bool IsTracing(this LogLevel level) Parameters Type Name Description LogLevel level Log level Returns Type Description bool If tracing | Edit this page View Source IsWarning(LogLevel) Is warning? Declaration public static bool IsWarning(this LogLevel level) Parameters Type Name Description LogLevel level Log level Returns Type Description bool If warning"
  },
  "api/wan24.Core.Logger.html": {
    "href": "api/wan24.Core.Logger.html",
    "title": "Class Logger | wan24-Core",
    "keywords": "Class Logger Logger (adopts to Logging - NEVER use this as Logger!) Inheritance object LoggerBase Logger Implements ILogger Inherited Members LoggerBase.RX_NL LoggerBase.Level LoggerBase.Next LoggerBase.BeginScope<TState>(TState) LoggerBase.IsEnabled(LogLevel) LoggerBase.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>) LoggerBase.GetMessage<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>, bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class Logger : LoggerBase, ILogger Remarks Constructor Constructors | Edit this page View Source Logger(in LogLevel?, in ILogger?) Logger (adopts to Logging - NEVER use this as Logger!) Declaration public Logger(in LogLevel? level = null, in ILogger? next = null) Parameters Type Name Description LogLevel? level Log level ILogger next Next logger which should receive the message Remarks Constructor Methods | Edit this page View Source LogInt<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>) Writes a log entry Declaration protected override void LogInt<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel Level EventId eventId Event ID TState state State Exception exception Exception Func<TState, Exception, string> formatter Formatter Type Parameters Name Description TState State type Overrides LoggerBase.LogInt<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>) | Edit this page View Source WriteCritical(string, params object?[]) Write a message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void WriteCritical(string str, params object?[] args) Parameters Type Name Description string str Message object[] args Arguments | Edit this page View Source WriteDebug(string, params object?[]) Write a message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void WriteDebug(string str, params object?[] args) Parameters Type Name Description string str Message object[] args Arguments | Edit this page View Source WriteError(string, params object?[]) Write a message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void WriteError(string str, params object?[] args) Parameters Type Name Description string str Message object[] args Arguments | Edit this page View Source WriteInfo(string, params object?[]) Write a message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void WriteInfo(string str, params object?[] args) Parameters Type Name Description string str Message object[] args Arguments | Edit this page View Source WriteLog(string, in LogLevel, params object?[]) Write a message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void WriteLog(string str, in LogLevel level = LogLevel.Information, params object?[] args) Parameters Type Name Description string str Message LogLevel level Level object[] args Arguments | Edit this page View Source WriteTrace(string, params object?[]) Write a message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void WriteTrace(string str, params object?[] args) Parameters Type Name Description string str Message object[] args Arguments | Edit this page View Source WriteWarning(string, params object?[]) Write a message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void WriteWarning(string str, params object?[] args) Parameters Type Name Description string str Message object[] args Arguments Implements ILogger Extension Methods LoggerExtensions.GetFinalLogger(ILogger) LoggerExtensions.GetLogLevel(ILogger) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.LoggerBase.html": {
    "href": "api/wan24.Core.LoggerBase.html",
    "title": "Class LoggerBase | wan24-Core",
    "keywords": "Class LoggerBase Base class for a logger Inheritance object LoggerBase CategoryLogger ConsoleLogger DebugLogger Logger Implements ILogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class LoggerBase : ILogger Remarks Constructor Constructors | Edit this page View Source LoggerBase(in LogLevel?, in ILogger?) Base class for a logger Declaration protected LoggerBase(in LogLevel? level = null, in ILogger? next = null) Parameters Type Name Description LogLevel? level Level ILogger next Next logger which should receive the message Remarks Constructor Fields | Edit this page View Source RX_NL Regular expression to match a new line Declaration protected static readonly Regex RX_NL Field Value Type Description Regex Properties | Edit this page View Source Level Log level Declaration public LogLevel Level { get; set; } Property Value Type Description LogLevel | Edit this page View Source Next Next logger which should receive the message Declaration public ILogger? Next { get; set; } Property Value Type Description ILogger Methods | Edit this page View Source BeginScope<TState>(TState) Begins a logical operation scope. Declaration public IDisposable? BeginScope<TState>(TState state) where TState : notnull Parameters Type Name Description TState state The identifier for the scope. Returns Type Description IDisposable An IDisposable that ends the logical operation scope on dispose. Type Parameters Name Description TState The type of the state to begin scope for. | Edit this page View Source GetMessage<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>, bool) Get the message to log Declaration protected virtual string GetMessage<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter, bool nl = false) Parameters Type Name Description LogLevel logLevel Level EventId eventId Event ID TState state State Exception exception Exception Func<TState, Exception, string> formatter Formatter bool nl Add a new line at the end? Returns Type Description string Message Type Parameters Name Description TState State type | Edit this page View Source IsEnabled(LogLevel) Checks if the given logLevel is enabled. Declaration public bool IsEnabled(LogLevel logLevel) Parameters Type Name Description LogLevel logLevel Level to be checked. Returns Type Description bool true if enabled. | Edit this page View Source LogInt<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>) Writes a log entry Declaration protected abstract void LogInt<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel Level EventId eventId Event ID TState state State Exception exception Exception Func<TState, Exception, string> formatter Formatter Type Parameters Name Description TState State type | Edit this page View Source Log<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>) Writes a log entry. Declaration public virtual void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. EventId eventId Id of the event. TState state The entry to be written. Can be also an object. Exception exception The exception related to this entry. Func<TState, Exception, string> formatter Function to create a string message of the state and exception. Type Parameters Name Description TState The type of the object to be written. Implements ILogger Extension Methods LoggerExtensions.GetFinalLogger(ILogger) LoggerExtensions.GetLogLevel(ILogger) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.LoggerExtensions.html": {
    "href": "api/wan24.Core.LoggerExtensions.html",
    "title": "Class LoggerExtensions | wan24-Core",
    "keywords": "Class LoggerExtensions ILogger extensions Inheritance object LoggerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class LoggerExtensions Methods | Edit this page View Source GetFinalLogger(ILogger) Get the final logger Declaration public static ILogger GetFinalLogger(this ILogger logger) Parameters Type Name Description ILogger logger Logger Returns Type Description ILogger Final logger | Edit this page View Source GetLogLevel(ILogger) Get the log level from a logger, if it's an ILogger - otherwise return LogLevel Declaration public static LogLevel GetLogLevel(this ILogger logger) Parameters Type Name Description ILogger logger Logger Returns Type Description LogLevel Log level"
  },
  "api/wan24.Core.LoggerProvider.LoggerFactory_Delegate.html": {
    "href": "api/wan24.Core.LoggerProvider.LoggerFactory_Delegate.html",
    "title": "Delegate LoggerProvider.LoggerFactory_Delegate | wan24-Core",
    "keywords": "Delegate LoggerProvider.LoggerFactory_Delegate Delegate for a logger factory Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate ILogger LoggerProvider.LoggerFactory_Delegate(LoggerProvider provider, string categoryName) Parameters Type Name Description LoggerProvider provider Logger provider string categoryName Category name to prepend to logged messages Returns Type Description ILogger Logger Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.LoggerProvider.html": {
    "href": "api/wan24.Core.LoggerProvider.html",
    "title": "Class LoggerProvider | wan24-Core",
    "keywords": "Class LoggerProvider Logger provider Inheritance object DisposableBase LoggerProvider Implements IWillDispose IDisposableObject IAsyncDisposable ILoggerProvider IDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class LoggerProvider : DisposableBase, IWillDispose, IDisposableObject, IAsyncDisposable, ILoggerProvider, IDisposable Constructors | Edit this page View Source LoggerProvider(ILogger) Constructor Declaration public LoggerProvider(ILogger logger) Parameters Type Name Description ILogger logger Singleton logger instance to use | Edit this page View Source LoggerProvider(LoggerFactory_Delegate) Constructor Declaration public LoggerProvider(LoggerProvider.LoggerFactory_Delegate factory) Parameters Type Name Description LoggerProvider.LoggerFactory_Delegate factory Logger factory Methods | Edit this page View Source CreateLogger(string) Creates a new ILogger instance. Declaration public ILogger CreateLogger(string categoryName) Parameters Type Name Description string categoryName The category name for messages produced by the logger. Returns Type Description ILogger The instance of ILogger that was created. | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() Implements IWillDispose IDisposableObject IAsyncDisposable ILoggerProvider IDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Logging.html": {
    "href": "api/wan24.Core.Logging.html",
    "title": "Class Logging | wan24-Core",
    "keywords": "Class Logging Logging Inheritance object Logging Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class Logging Fields | Edit this page View Source DEFAULT_LOGLEVEL Default log level Declaration public const LogLevel DEFAULT_LOGLEVEL = Information Field Value Type Description LogLevel Properties | Edit this page View Source Critical Determine if critical Declaration public static bool Critical { get; } Property Value Type Description bool | Edit this page View Source Debug Determine if debugging Declaration public static bool Debug { get; } Property Value Type Description bool | Edit this page View Source Error Determine if error Declaration public static bool Error { get; } Property Value Type Description bool | Edit this page View Source Info Determine if informative Declaration public static bool Info { get; } Property Value Type Description bool | Edit this page View Source Logger Logger Declaration public static ILogger? Logger { get; set; } Property Value Type Description ILogger | Edit this page View Source Trace Determine if tracing Declaration public static bool Trace { get; } Property Value Type Description bool | Edit this page View Source Warning Determine if warning Declaration public static bool Warning { get; } Property Value Type Description bool Methods | Edit this page View Source IsCritical() Determine if critical Declaration public static bool IsCritical() Returns Type Description bool If critical | Edit this page View Source IsDebugging() Determine if debugging Declaration public static bool IsDebugging() Returns Type Description bool If debugging | Edit this page View Source IsError() Determine if error Declaration public static bool IsError() Returns Type Description bool If error | Edit this page View Source IsInformative() Determine if informative Declaration public static bool IsInformative() Returns Type Description bool If informative | Edit this page View Source IsTracing() Determine if tracing Declaration public static bool IsTracing() Returns Type Description bool If tracing | Edit this page View Source IsWarning() Determine if warning Declaration public static bool IsWarning() Returns Type Description bool If warning | Edit this page View Source WriteCritical(string, params object?[]) Write a message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void WriteCritical(this string str, params object?[] args) Parameters Type Name Description string str Message object[] args Arguments | Edit this page View Source WriteDebug(string, params object?[]) Write a message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void WriteDebug(this string str, params object?[] args) Parameters Type Name Description string str Message object[] args Arguments | Edit this page View Source WriteError(string, params object?[]) Write a message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void WriteError(this string str, params object?[] args) Parameters Type Name Description string str Message object[] args Arguments | Edit this page View Source WriteInfo(string, params object?[]) Write a message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void WriteInfo(this string str, params object?[] args) Parameters Type Name Description string str Message object[] args Arguments | Edit this page View Source WriteLog(string, in LogLevel, params object?[]) Write a message Declaration public static void WriteLog(this string str, in LogLevel level = LogLevel.Information, params object?[] args) Parameters Type Name Description string str Message LogLevel level Level object[] args Arguments | Edit this page View Source WriteTrace(string, params object?[]) Write a message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void WriteTrace(this string str, params object?[] args) Parameters Type Name Description string str Message object[] args Arguments | Edit this page View Source WriteWarning(string, params object?[]) Write a message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void WriteWarning(this string str, params object?[] args) Parameters Type Name Description string str Message object[] args Arguments"
  },
  "api/wan24.Core.MemoryPoolStream.html": {
    "href": "api/wan24.Core.MemoryPoolStream.html",
    "title": "Class MemoryPoolStream | wan24-Core",
    "keywords": "Class MemoryPoolStream Memory pool stream (stores in arrays from an ArrayPool<T>) Inheritance object MarshalByRefObject Stream StreamBase MemoryPoolStream PooledMemoryStream Implements IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class MemoryPoolStream : StreamBase, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source MemoryPoolStream(in ArrayPool<byte>?, in int?) Constructor Declaration public MemoryPoolStream(in ArrayPool<byte>? pool = null, in int? bufferSize = null) Parameters Type Name Description ArrayPool<byte> pool Pool int? bufferSize Buffer size in bytes | Edit this page View Source MemoryPoolStream(in byte[], in ArrayPool<byte>?, in int?) Constructor Declaration public MemoryPoolStream(in byte[] data, in ArrayPool<byte>? pool = null, in int? bufferSize = null) Parameters Type Name Description byte[] data Initial data (will be copied; stream is writable; initial position will be 0) ArrayPool<byte> pool Pool int? bufferSize Buffer size in bytes Fields | Edit this page View Source BufferIndex Buffer index Declaration protected int BufferIndex Field Value Type Description int | Edit this page View Source BufferOffset Buffer byte offset Declaration protected int BufferOffset Field Value Type Description int | Edit this page View Source Buffers Buffers Declaration protected readonly List<byte[]> Buffers Field Value Type Description List<byte[]> | Edit this page View Source LastBufferOffset Last buffer byte offset Declaration protected int LastBufferOffset Field Value Type Description int | Edit this page View Source Pool Pool Declaration protected readonly ArrayPool<byte> Pool Field Value Type Description ArrayPool<byte> | Edit this page View Source StaticSyncObject An object for static thread locking Declaration protected static readonly object StaticSyncObject Field Value Type Description object | Edit this page View Source _BufferSize Buffer site in bytes Declaration protected int _BufferSize Field Value Type Description int | Edit this page View Source _Length Length in bytes Declaration protected long _Length Field Value Type Description long | Edit this page View Source _Position Byte offset Declaration protected long _Position Field Value Type Description long Properties | Edit this page View Source BufferCount Current number of buffers Declaration public int BufferCount { get; } Property Value Type Description int | Edit this page View Source BufferLength Total buffer length in bytes Declaration public long BufferLength { get; } Property Value Type Description long | Edit this page View Source BufferSize Buffer size in bytes Declaration public int BufferSize { get; set; } Property Value Type Description int | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides Stream.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides Stream.CanSeek | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides Stream.CanWrite | Edit this page View Source CleanReturned Clean returned buffers? Declaration public bool CleanReturned { get; set; } Property Value Type Description bool | Edit this page View Source DefaultBufferSize Default buffer size in bytes Declaration public static int DefaultBufferSize { get; set; } Property Value Type Description int | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides Stream.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides Stream.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SaveOnClose Save the data on close? Declaration public bool SaveOnClose { get; set; } Property Value Type Description bool | Edit this page View Source SavedData Saved data Declaration public byte[]? SavedData { get; protected set; } Property Value Type Description byte[] | Edit this page View Source State Status information Declaration public virtual IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Methods | Edit this page View Source Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. Declaration public override void Close() Overrides StreamBase.Close() | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides StreamBase.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override Task DisposeCore() Returns Type Description Task Overrides StreamBase.DisposeCore() | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides Stream.FlushAsync(CancellationToken) Exceptions Type Condition ObjectDisposedException The stream has been disposed. | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides Stream.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides Stream.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides Stream.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides Stream.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(in long, in bool) Set a new length Declaration protected void SetLength(in long value, in bool clear) Parameters Type Name Description long value New length in bytes bool clear Clear new buffers? | Edit this page View Source ToArray() Get the written data as a new array Declaration public byte[] ToArray() Returns Type Description byte[] Array | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides Stream.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides Stream.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides Stream.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Operators | Edit this page View Source implicit operator byte[](in MemoryPoolStream) Cast as new byte array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator byte[](in MemoryPoolStream ms) Parameters Type Name Description MemoryPoolStream ms MemoryPoolStream Returns Type Description byte[] | Edit this page View Source implicit operator long(in MemoryPoolStream) Cast as length Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator long(in MemoryPoolStream ms) Parameters Type Name Description MemoryPoolStream ms MemoryPoolStream Returns Type Description long Implements IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.MultiFileSystemEvents.MultiFileSystemEventThrottle.html": {
    "href": "api/wan24.Core.MultiFileSystemEvents.MultiFileSystemEventThrottle.html",
    "title": "Class MultiFileSystemEvents.MultiFileSystemEventThrottle | wan24-Core",
    "keywords": "Class MultiFileSystemEvents.MultiFileSystemEventThrottle Event throttle Inheritance object DisposableBase EventThrottle MultiFileSystemEvents.MultiFileSystemEventThrottle Implements IWillDispose IEventThrottle IDisposableObject IDisposable IAsyncDisposable Inherited Members EventThrottle.Timer EventThrottle._Timeout EventThrottle.SyncObject EventThrottle.Timeout EventThrottle.LastRaised EventThrottle.RaisedTime EventThrottle.RaisedCount EventThrottle.TotalRaisedCount EventThrottle.TotalThrottledRaisedCount EventThrottle.FirstRaised EventThrottle.IsThrottling EventThrottle.Raise() EventThrottle.Dispose(bool) DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax protected class MultiFileSystemEvents.MultiFileSystemEventThrottle : EventThrottle, IWillDispose, IEventThrottle, IDisposableObject, IDisposable, IAsyncDisposable Remarks Constructor Constructors | Edit this page View Source MultiFileSystemEventThrottle(in int, in MultiFileSystemEvents) Event throttle Declaration public MultiFileSystemEventThrottle(in int throttle, in MultiFileSystemEvents events) Parameters Type Name Description int throttle Throttle time in ms MultiFileSystemEvents events Events Remarks Constructor Fields | Edit this page View Source Events Events Declaration protected readonly MultiFileSystemEvents Events Field Value Type Description MultiFileSystemEvents Methods | Edit this page View Source HandleEvent(in DateTime, in int) Handle the event Declaration protected override void HandleEvent(in DateTime raised, in int raisedCount) Parameters Type Name Description DateTime raised First raised time int raisedCount Raised count Overrides EventThrottle.HandleEvent(in DateTime, in int) Implements IWillDispose IEventThrottle IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.MultiFileSystemEvents.MultiFileSystemEventsArgs.html": {
    "href": "api/wan24.Core.MultiFileSystemEvents.MultiFileSystemEventsArgs.html",
    "title": "Class MultiFileSystemEvents.MultiFileSystemEventsArgs | wan24-Core",
    "keywords": "Class MultiFileSystemEvents.MultiFileSystemEventsArgs File system events OnEvents arguments Inheritance object EventArgs MultiFileSystemEvents.MultiFileSystemEventsArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class MultiFileSystemEvents.MultiFileSystemEventsArgs : EventArgs Remarks Constructor Constructors | Edit this page View Source MultiFileSystemEventsArgs(in IReadOnlyList<(FileSystemEvents, FileSystemEventsArgs)>, in DateTime) File system events OnEvents arguments Declaration public MultiFileSystemEventsArgs(in IReadOnlyList<(FileSystemEvents, FileSystemEvents.FileSystemEventsArgs)> arguments, in DateTime raised) Parameters Type Name Description IReadOnlyList<(FileSystemEvents, FileSystemEvents.FileSystemEventsArgs)> arguments File system event senders and arguments DateTime raised Raised time Remarks Constructor Properties | Edit this page View Source Arguments File system event senders and arguments Declaration public IReadOnlyList<(FileSystemEvents, FileSystemEvents.FileSystemEventsArgs)> Arguments { get; } Property Value Type Description IReadOnlyList<(FileSystemEvents, FileSystemEvents.FileSystemEventsArgs)> | Edit this page View Source Raised Raised time Declaration public DateTime Raised { get; } Property Value Type Description DateTime Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.MultiFileSystemEvents.MultiFileSystemEvents_Delegate.html": {
    "href": "api/wan24.Core.MultiFileSystemEvents.MultiFileSystemEvents_Delegate.html",
    "title": "Delegate MultiFileSystemEvents.MultiFileSystemEvents_Delegate | wan24-Core",
    "keywords": "Delegate MultiFileSystemEvents.MultiFileSystemEvents_Delegate Delegate for an event hander Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void MultiFileSystemEvents.MultiFileSystemEvents_Delegate(MultiFileSystemEvents events, MultiFileSystemEvents.MultiFileSystemEventsArgs e) Parameters Type Name Description MultiFileSystemEvents events Events MultiFileSystemEvents.MultiFileSystemEventsArgs e Arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.MultiFileSystemEvents.html": {
    "href": "api/wan24.Core.MultiFileSystemEvents.html",
    "title": "Class MultiFileSystemEvents | wan24-Core",
    "keywords": "Class MultiFileSystemEvents Multi file system events Inheritance object DisposableBase HostedServiceBase MultiFileSystemEvents Implements IWillDispose IServiceWorker IDisposableObject IDisposable IAsyncDisposable IHostedService Inherited Members HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.StoppingAsync(CancellationToken) HostedServiceBase.AfterStopAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.OnException HostedServiceBase.RaiseOnException() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class MultiFileSystemEvents : HostedServiceBase, IWillDispose, IServiceWorker, IDisposableObject, IDisposable, IAsyncDisposable, IHostedService Constructors | Edit this page View Source MultiFileSystemEvents(in int) Constructor Declaration public MultiFileSystemEvents(in int throttle = 0) Parameters Type Name Description int throttle Fields | Edit this page View Source Arguments File system event senders and arguments Declaration protected readonly List<(FileSystemEvents, FileSystemEvents.FileSystemEventsArgs)> Arguments Field Value Type Description List<(FileSystemEvents, FileSystemEvents.FileSystemEventsArgs)> | Edit this page View Source EventSync Events synchronization Declaration protected readonly SemaphoreSync EventSync Field Value Type Description SemaphoreSync | Edit this page View Source Throttle Event throttle Declaration protected readonly MultiFileSystemEvents.MultiFileSystemEventThrottle? Throttle Field Value Type Description MultiFileSystemEvents.MultiFileSystemEventThrottle | Edit this page View Source WatcherEvent Watcher event (raised when having an event) Declaration protected readonly ResetEvent WatcherEvent Field Value Type Description ResetEvent | Edit this page View Source Watchers File system watchers Declaration protected readonly ConcurrentDictionary<string, FileSystemEvents> Watchers Field Value Type Description ConcurrentDictionary<string, FileSystemEvents> Properties | Edit this page View Source Count Number of hosted file system events watchers Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Ids Hosted file system events watcher IDs Declaration public IEnumerable<string> Ids { get; } Property Value Type Description IEnumerable<string> | Edit this page View Source this[string] Get a file system events watcher Declaration public FileSystemEvents? this[string id] { get; } Parameters Type Name Description string id ID Property Value Type Description FileSystemEvents File system events watcher | Edit this page View Source Last Last event data Declaration public MultiFileSystemEvents.MultiFileSystemEventsArgs? Last { get; protected set; } Property Value Type Description MultiFileSystemEvents.MultiFileSystemEventsArgs Methods | Edit this page View Source Add(in FileSystemEvents, in CancellationToken) Add a file system events watcher Declaration public virtual string Add(in FileSystemEvents watcher, in CancellationToken cancellationToken = default) Parameters Type Name Description FileSystemEvents watcher File system events watcher (will be disposed, if not removed before disposing!) CancellationToken cancellationToken Cancellation token Returns Type Description string ID | Edit this page View Source AddAsync(FileSystemEvents, CancellationToken) Add a file system events watcher Declaration public virtual Task<string> AddAsync(FileSystemEvents watcher, CancellationToken cancellationToken = default) Parameters Type Name Description FileSystemEvents watcher File system events watcher (will be disposed, if not removed before disposing!) CancellationToken cancellationToken Cancellation token Returns Type Description Task<string> ID | Edit this page View Source AfterPauseAsync(CancellationToken) After paused Declaration protected override Task AfterPauseAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.AfterPauseAsync(CancellationToken) | Edit this page View Source AfterResumeAsync(CancellationToken) After resumed from pause Declaration protected override Task AfterResumeAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.AfterResumeAsync(CancellationToken) | Edit this page View Source AfterStartAsync(CancellationToken) After started Declaration protected override Task AfterStartAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.AfterStartAsync(CancellationToken) | Edit this page View Source BeforeStopAsync(CancellationToken) Before stopping Declaration protected override Task BeforeStopAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.BeforeStopAsync(CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides HostedServiceBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides HostedServiceBase.DisposeCore() | Edit this page View Source HandleEvent(FileSystemEvents, FileSystemEventsArgs) Handle an event Declaration protected virtual void HandleEvent(FileSystemEvents watcher, FileSystemEvents.FileSystemEventsArgs e) Parameters Type Name Description FileSystemEvents watcher Watcher FileSystemEvents.FileSystemEventsArgs e Arguments | Edit this page View Source RaiseOnEvents(in DateTime) Raise the OnEvents event Declaration protected virtual void RaiseOnEvents(in DateTime raised) Parameters Type Name Description DateTime raised Time when raised first | Edit this page View Source Remove(in string) Remove a file system events watcher Declaration public virtual FileSystemEvents Remove(in string id) Parameters Type Name Description string id ID Returns Type Description FileSystemEvents Removed file system events watcher (won'tbe disposed) | Edit this page View Source TryRemove(in string, out FileSystemEvents?) Remove a file system events watcher Declaration public virtual bool TryRemove(in string id, out FileSystemEvents? result) Parameters Type Name Description string id ID FileSystemEvents result Removed file system events watcher (won'tbe disposed) Returns Type Description bool If succeed | Edit this page View Source WaitEvent(in CancellationToken) Wait for an event (canceled when the service is stopping) Declaration public virtual MultiFileSystemEvents.MultiFileSystemEventsArgs WaitEvent(in CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description MultiFileSystemEvents.MultiFileSystemEventsArgs Event data | Edit this page View Source WaitEventAsync(CancellationToken) Wait for an event (canceled when the service is stopping) Declaration public virtual Task<MultiFileSystemEvents.MultiFileSystemEventsArgs> WaitEventAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<MultiFileSystemEvents.MultiFileSystemEventsArgs> Event data | Edit this page View Source WorkerAsync() Service worker Declaration protected override Task WorkerAsync() Returns Type Description Task Overrides HostedServiceBase.WorkerAsync() Events | Edit this page View Source OnEvents Raised on event Declaration public event MultiFileSystemEvents.MultiFileSystemEvents_Delegate? OnEvents Event Type Type Description MultiFileSystemEvents.MultiFileSystemEvents_Delegate Implements IWillDispose IServiceWorker IDisposableObject IDisposable IAsyncDisposable IHostedService Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.MultiProcessThrottle.html": {
    "href": "api/wan24.Core.MultiProcessThrottle.html",
    "title": "Class MultiProcessThrottle | wan24-Core",
    "keywords": "Class MultiProcessThrottle Multiple combined process throttles (will balance a total limit to all hosted throttles; all throttles need to use the same time restriction for this) Inheritance object DisposableBase MultiProcessThrottle Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class MultiProcessThrottle : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source MultiProcessThrottle(in int) Constructor Declaration public MultiProcessThrottle(in int totalLimit) Parameters Type Name Description int totalLimit Processing count total limit Fields | Edit this page View Source LastLimit Last processing count limit Declaration protected int LastLimit Field Value Type Description int | Edit this page View Source Sync Thread synchronization Declaration protected readonly SemaphoreSync Sync Field Value Type Description SemaphoreSync | Edit this page View Source _Throttles Throttles Declaration protected readonly HashSet<ProcessThrottle> _Throttles Field Value Type Description HashSet<ProcessThrottle> | Edit this page View Source _TotalLimit Processing count total limit Declaration protected int _TotalLimit Field Value Type Description int Properties | Edit this page View Source Count Number of hosted throttles Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source CurrentLimit Current processing count limit per hosted throttle Declaration public virtual int CurrentLimit { get; } Property Value Type Description int | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source Name Name Declaration public string? Name { get; set; } Property Value Type Description string | Edit this page View Source State Status information Declaration public virtual IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> | Edit this page View Source Throttles Hosted throttles Declaration public ProcessThrottle[] Throttles { get; } Property Value Type Description ProcessThrottle[] | Edit this page View Source TotalLimit Processing count total limit Declaration public virtual int TotalLimit { get; set; } Property Value Type Description int Methods | Edit this page View Source AddThrottleAsync<T>(T, CancellationToken) Add a throttle Declaration public Task<T> AddThrottleAsync<T>(T throttle, CancellationToken cancellationToken = default) where T : ProcessThrottle Parameters Type Name Description T throttle Throttle CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Throttle Type Parameters Name Description T Throttle type | Edit this page View Source AddThrottle<T>(T) Add a throttle Declaration public T AddThrottle<T>(T throttle) where T : ProcessThrottle Parameters Type Name Description T throttle Throttle Returns Type Description T Throttle Type Parameters Name Description T Throttle type | Edit this page View Source Clear() Remove all throttles Declaration public ProcessThrottle[] Clear() Returns Type Description ProcessThrottle[] Removed throttles | Edit this page View Source ClearAsync(CancellationToken) Remove all throttles Declaration public Task<ProcessThrottle[]> ClearAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<ProcessThrottle[]> Removed throttles | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source HandleDisposedThrottle(IDisposableObject, EventArgs) Handle a disposed throttle Declaration protected virtual void HandleDisposedThrottle(IDisposableObject obj, EventArgs e) Parameters Type Name Description IDisposableObject obj Object EventArgs e Arguments | Edit this page View Source RemoveThrottleAsync<T>(T, CancellationToken) Remove a throttle Declaration public Task<T> RemoveThrottleAsync<T>(T throttle, CancellationToken cancellationToken = default) where T : ProcessThrottle Parameters Type Name Description T throttle Throttle CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Throttle Type Parameters Name Description T Throttle type | Edit this page View Source RemoveThrottle<T>(T) Remove a throttle Declaration public T RemoveThrottle<T>(T throttle) where T : ProcessThrottle Parameters Type Name Description T throttle Throttle Returns Type Description T Throttle Type Parameters Name Description T Throttle type | Edit this page View Source SetLimitAsync(int, CancellationToken) Set a new limit Declaration public Task SetLimitAsync(int totalLimit, CancellationToken cancellationToken = default) Parameters Type Name Description int totalLimit Processing count total limit CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source UpdateCurrentLimit() Update the current processing count limit for all hosted throttles (Sync should be synchronized) Declaration protected virtual void UpdateCurrentLimit() Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.MultiThrottledStream.html": {
    "href": "api/wan24.Core.MultiThrottledStream.html",
    "title": "Class MultiThrottledStream | wan24-Core",
    "keywords": "Class MultiThrottledStream Multiple combined throttled streams (will balance a total read/write limit to all hosted streams, based on quotas; all streams need to use the same time restrictions for this) Inheritance object DisposableBase MultiThrottledStream Implements IWillDispose IStatusProvider IStreamThrottle IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class MultiThrottledStream : DisposableBase, IWillDispose, IStatusProvider, IStreamThrottle, IDisposableObject, IDisposable, IAsyncDisposable Remarks Constructor Constructors | Edit this page View Source MultiThrottledStream(in int, in int) Multiple combined throttled streams (will balance a total read/write limit to all hosted streams, based on quotas; all streams need to use the same time restrictions for this) Declaration public MultiThrottledStream(in int totalReadLimit, in int totalWriteLimit) Parameters Type Name Description int totalReadLimit Reading count total limit int totalWriteLimit Writing count total limit Remarks Constructor Fields | Edit this page View Source Sync Thread synchronization Declaration protected readonly SemaphoreSync Sync Field Value Type Description SemaphoreSync | Edit this page View Source _Parent Parent MultiThrottledStream Declaration protected MultiThrottledStream? _Parent Field Value Type Description MultiThrottledStream | Edit this page View Source _Streams Streams Declaration protected readonly HashSet<IStreamThrottle> _Streams Field Value Type Description HashSet<IStreamThrottle> | Edit this page View Source _TotalReadLimit Read count total limit Declaration protected int _TotalReadLimit Field Value Type Description int | Edit this page View Source _TotalWriteLimit Write count total limit Declaration protected int _TotalWriteLimit Field Value Type Description int Properties | Edit this page View Source Count Number of hosted streams (recursive, excluding nested MultiThrottledStream, but including their hosted stream count) Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source LongReadCountQuota Read count limit quota as 64 bit integer Declaration public long LongReadCountQuota { get; } Property Value Type Description long | Edit this page View Source LongWriteCountQuota Write count limit quota as 64 bit integer Declaration public long LongWriteCountQuota { get; } Property Value Type Description long | Edit this page View Source Name Name Declaration public string? Name { get; set; } Property Value Type Description string | Edit this page View Source Parent Parent MultiThrottledStream Declaration protected MultiThrottledStream Parent { get; } Property Value Type Description MultiThrottledStream | Edit this page View Source ReadCount Read count (zero to disable read throttling) Declaration public int ReadCount { get; set; } Property Value Type Description int | Edit this page View Source ReadCountQuota Quota value for the read count (used to normalize the stream collection read count) Declaration public int ReadCountQuota { get; } Property Value Type Description int | Edit this page View Source Root Root MultiThrottledStream Declaration protected MultiThrottledStream Root { get; } Property Value Type Description MultiThrottledStream | Edit this page View Source State Status information Declaration public virtual IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> | Edit this page View Source Streams Hosted streams (may contain nested MultiThrottledStream) Declaration public IStreamThrottle[] Streams { get; } Property Value Type Description IStreamThrottle[] | Edit this page View Source TotalReadLimit Reading count total limit Declaration public virtual int TotalReadLimit { get; set; } Property Value Type Description int | Edit this page View Source TotalWriteLimit Writing count total limit Declaration public virtual int TotalWriteLimit { get; set; } Property Value Type Description int | Edit this page View Source WriteCount Write count (zero to disable write throttling) Declaration public int WriteCount { get; set; } Property Value Type Description int | Edit this page View Source WriteCountQuota Quota value for the write count (used to normalize the stream collection write count) Declaration public int WriteCountQuota { get; } Property Value Type Description int Methods | Edit this page View Source AddStreamAsync<T>(T, CancellationToken) Add a stream Declaration public Task<T> AddStreamAsync<T>(T stream, CancellationToken cancellationToken = default) where T : IStreamThrottle Parameters Type Name Description T stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Stream Type Parameters Name Description T Stream type | Edit this page View Source AddStream<T>(T) Add a stream Declaration public T AddStream<T>(T stream) where T : IStreamThrottle Parameters Type Name Description T stream Stream Returns Type Description T Stream Type Parameters Name Description T Stream type | Edit this page View Source Clear() Remove all streams Declaration public IStreamThrottle[] Clear() Returns Type Description IStreamThrottle[] Removed streams | Edit this page View Source ClearAsync(CancellationToken) Remove all streams Declaration public Task<IStreamThrottle[]> ClearAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<IStreamThrottle[]> Removed streams | Edit this page View Source ClearUnblocked() Remove all streams Declaration protected IStreamThrottle[] ClearUnblocked() Returns Type Description IStreamThrottle[] Removed streams | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source GetLongReadCountQuotaUnblocked() Get the read count quota as 64 bit integer Declaration protected long GetLongReadCountQuotaUnblocked() Returns Type Description long Read count quota | Edit this page View Source GetLongWriteCountQuotaUnblocked() Get the write count quota as 64 bit integer Declaration protected long GetLongWriteCountQuotaUnblocked() Returns Type Description long Write count quota | Edit this page View Source HandleDisposedStream(IDisposableObject, EventArgs) Handle a disposed stream Declaration protected virtual void HandleDisposedStream(IDisposableObject obj, EventArgs e) Parameters Type Name Description IDisposableObject obj Object EventArgs e Arguments | Edit this page View Source RemoveStreamAsync<T>(T, CancellationToken) Remove a stream Declaration public Task<T> RemoveStreamAsync<T>(T stream, CancellationToken cancellationToken = default) where T : IStreamThrottle Parameters Type Name Description T stream Stream CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Stream Type Parameters Name Description T Stream type | Edit this page View Source RemoveStream<T>(T) Remove a stream Declaration public T RemoveStream<T>(T stream) where T : IStreamThrottle Parameters Type Name Description T stream Stream Returns Type Description T Stream Type Parameters Name Description T Stream type | Edit this page View Source SetLimits(int, int) Set new limits Declaration public void SetLimits(int totalReadLimit, int totalWriteLimit) Parameters Type Name Description int totalReadLimit New reading count total limit int totalWriteLimit New writing count total limit | Edit this page View Source SetLimitsAsync(int, int, CancellationToken) Set new limits Declaration public Task SetLimitsAsync(int totalReadLimit, int totalWriteLimit, CancellationToken cancellationToken = default) Parameters Type Name Description int totalReadLimit New reading count total limit int totalWriteLimit New writing count total limit CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source SetLimitsUnblocked(int, int) Set new limits Declaration protected void SetLimitsUnblocked(int totalReadLimit, int totalWriteLimit) Parameters Type Name Description int totalReadLimit New reading count total limit int totalWriteLimit New writing count total limit | Edit this page View Source UpdateCurrentLimit(bool) Update the current processing count limit for all hosted streams (Sync should be synchronized) Declaration protected virtual void UpdateCurrentLimit(bool syncRoot) Parameters Type Name Description bool syncRoot Synchronize the root? | Edit this page View Source UpdateCurrentLimitAsync(bool) Update the current processing count limit for all hosted streams (Sync should be synchronized) Declaration protected virtual Task UpdateCurrentLimitAsync(bool syncRoot) Parameters Type Name Description bool syncRoot Synchronize the root? Returns Type Description Task Implements IWillDispose IStatusProvider IStreamThrottle IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.NetworkHelper.html": {
    "href": "api/wan24.Core.NetworkHelper.html",
    "title": "Class NetworkHelper | wan24-Core",
    "keywords": "Class NetworkHelper Network helper Inheritance object NetworkHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class NetworkHelper Fields | Edit this page View Source LAN LAN sub-nets Declaration public static readonly IpSubNets LAN Field Value Type Description IpSubNets | Edit this page View Source LoopBack Loopback sub-nets Declaration public static readonly IpSubNets LoopBack Field Value Type Description IpSubNets Methods | Edit this page View Source FindTcpPort(IPAddress) Find the next free TCP port Declaration public static int FindTcpPort(this IPAddress ip) Parameters Type Name Description IPAddress ip IP address Returns Type Description int Next free TCP port | Edit this page View Source GetBroadcastAddress(IPAddress, in IPAddress) Get the broadcast IP address Declaration public static IPAddress GetBroadcastAddress(this IPAddress ip, in IPAddress mask) Parameters Type Name Description IPAddress ip IP address (IPv4 required) IPAddress mask Network mask Returns Type Description IPAddress Broadcast IP address | Edit this page View Source GetBroadcastAddress(UnicastIPAddressInformation) Get the broadcast address Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static IPAddress GetBroadcastAddress(this UnicastIPAddressInformation ip) Parameters Type Name Description UnicastIPAddressInformation ip IP address (IPv4 required) Returns Type Description IPAddress Broadcast IP address | Edit this page View Source GetIPAddresses(NetworkInterface) Get all IP addresses from an ethernet adapter Declaration public static IEnumerable<IPAddress> GetIPAddresses(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetIPV4Addresses(NetworkInterface) Get all IP addresses from an ethernet adapter Declaration public static IEnumerable<IPAddress> GetIPV4Addresses(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetIPV6Addresses(NetworkInterface) Get all IP addresses from an ethernet adapter Declaration public static IEnumerable<IPAddress> GetIPV6Addresses(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetIPv4LanSubNets(NetworkInterface) Get the sub-nets of all LAN IPv4 addresses from an ethernet adapter Declaration public static IEnumerable<IpSubNet> GetIPv4LanSubNets(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IpSubNet> IP addresses | Edit this page View Source GetIPv4SubNets(NetworkInterface) Get the sub-nets of all IPv4 addresses from an ethernet adapter Declaration public static IEnumerable<IpSubNet> GetIPv4SubNets(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IpSubNet> IP addresses | Edit this page View Source GetIPv4WanSubNets(NetworkInterface) Get the sub-nets of all WAN IPv4 addresses from an ethernet adapter Declaration public static IEnumerable<IpSubNet> GetIPv4WanSubNets(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IpSubNet> IP addresses | Edit this page View Source GetIPv6LanSubNets(NetworkInterface) Get the sub-nets of all LAN IPv6 addresses from an ethernet adapter Declaration public static IEnumerable<IpSubNet> GetIPv6LanSubNets(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IpSubNet> IP addresses | Edit this page View Source GetIPv6SubNets(NetworkInterface) Get the sub-nets of all IPv6 addresses from an ethernet adapter Declaration public static IEnumerable<IpSubNet> GetIPv6SubNets(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IpSubNet> IP addresses | Edit this page View Source GetIPv6WanSubNets(NetworkInterface) Get the sub-nets of all WAN IPv6 addresses from an ethernet adapter Declaration public static IEnumerable<IpSubNet> GetIPv6WanSubNets(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IpSubNet> IP addresses | Edit this page View Source GetInterface(IPAddress) Get the network interface of an IP address Declaration public static NetworkInterface? GetInterface(this IPAddress ip) Parameters Type Name Description IPAddress ip IP address Returns Type Description NetworkInterface Network interface | Edit this page View Source GetLanIPAddresses(NetworkInterface) Get all LAN IP addresses from an ethernet adapter Declaration public static IEnumerable<IPAddress> GetLanIPAddresses(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetLanIPv4Addresses(NetworkInterface) Get all LAN IPv4 addresses from an ethernet adapter Declaration public static IEnumerable<IPAddress> GetLanIPv4Addresses(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetLanIPv6Addresses(NetworkInterface) Get all LAN IPv6 addresses from an ethernet adapter Declaration public static IEnumerable<IPAddress> GetLanIPv6Addresses(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetLanSubNets(NetworkInterface) Get the sub-nets of all LAN IP addresses from an ethernet adapter Declaration public static IEnumerable<IpSubNet> GetLanSubNets(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IpSubNet> IP addresses | Edit this page View Source GetLocalSubNet(IPAddress) Get the private sub-net of a private IP address Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static IpSubNet? GetLocalSubNet(this IPAddress ip) Parameters Type Name Description IPAddress ip Private IP address (may be a loopback address) Returns Type Description IpSubNet? Sub-net or null, if the IP address isn't private | Edit this page View Source GetOnlineEthernetAdapters() Get all (real) online ethernet adapters Declaration public static IEnumerable<NetworkInterface> GetOnlineEthernetAdapters() Returns Type Description IEnumerable<NetworkInterface> Ethernet adapters which are online | Edit this page View Source GetOnlineIPAddresses() Get all (real) online ethernet adapter IP addresses Declaration public static IEnumerable<IPAddress> GetOnlineIPAddresses() Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetOnlineIPv4Addresses() Get all (real) online ethernet adapter IPv4 addresses Declaration public static IEnumerable<IPAddress> GetOnlineIPv4Addresses() Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetOnlineIPv6Addresses() Get all (real) online ethernet adapter IPv6 addresses Declaration public static IEnumerable<IPAddress> GetOnlineIPv6Addresses() Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetOnlineLanEthernetAdapters() Get all (real) online ethernet adapters and have a LAN IP address Declaration public static IEnumerable<NetworkInterface> GetOnlineLanEthernetAdapters() Returns Type Description IEnumerable<NetworkInterface> Ethernet adapters which are online | Edit this page View Source GetOnlineLanIPAddresses() Get all (real) online ethernet adapter LAN IP addresses Declaration public static IEnumerable<IPAddress> GetOnlineLanIPAddresses() Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetOnlineLanIPv4Addresses() Get all (real) online ethernet adapter LAN IPv4 addresses Declaration public static IEnumerable<IPAddress> GetOnlineLanIPv4Addresses() Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetOnlineLanIPv6Addresses() Get all (real) online ethernet adapter LAN IPv6 addresses Declaration public static IEnumerable<IPAddress> GetOnlineLanIPv6Addresses() Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetOnlineWanEthernetAdapters() Get all (real) online ethernet adapters and have a WAN IP address Declaration public static IEnumerable<NetworkInterface> GetOnlineWanEthernetAdapters() Returns Type Description IEnumerable<NetworkInterface> Ethernet adapters which are online | Edit this page View Source GetOnlineWanIPAddresses() Get all (real) online ethernet adapter WAN IP addresses Declaration public static IEnumerable<IPAddress> GetOnlineWanIPAddresses() Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetOnlineWanIPv4Addresses() Get all (real) online ethernet adapter WAN IPv4 addresses Declaration public static IEnumerable<IPAddress> GetOnlineWanIPv4Addresses() Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetOnlineWanIPv6Addresses() Get all (real) online ethernet adapter WAN IPv6 addresses Declaration public static IEnumerable<IPAddress> GetOnlineWanIPv6Addresses() Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetSubNet(UnicastIPAddressInformation) Get the sub-net of an IP address Declaration public static IpSubNet GetSubNet(this UnicastIPAddressInformation ip) Parameters Type Name Description UnicastIPAddressInformation ip IP address Returns Type Description IpSubNet Sub-net | Edit this page View Source GetSubNets(NetworkInterface) Get the sub-nets of all IP addresses from an ethernet adapter Declaration public static IEnumerable<IpSubNet> GetSubNets(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IpSubNet> IP addresses | Edit this page View Source GetUnicastIP(IPAddress) Get the unicast IP address information Declaration public static UnicastIPAddressInformation? GetUnicastIP(this IPAddress ip) Parameters Type Name Description IPAddress ip IP address Returns Type Description UnicastIPAddressInformation Unicast IP address information | Edit this page View Source GetWanIPAddresses(NetworkInterface) Get all WAN IP addresses from an ethernet adapter Declaration public static IEnumerable<IPAddress> GetWanIPAddresses(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetWanIPv4Addresses(NetworkInterface) Get all WAN IPv4 addresses from an ethernet adapter Declaration public static IEnumerable<IPAddress> GetWanIPv4Addresses(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetWanIPv6Addresses(NetworkInterface) Get all WAN IPv6 addresses from an ethernet adapter Declaration public static IEnumerable<IPAddress> GetWanIPv6Addresses(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IPAddress> IP addresses | Edit this page View Source GetWanSubNets(NetworkInterface) Get the sub-nets of all WAN IP addresses from an ethernet adapter Declaration public static IEnumerable<IpSubNet> GetWanSubNets(this NetworkInterface adapter) Parameters Type Name Description NetworkInterface adapter Adapter Returns Type Description IEnumerable<IpSubNet> IP addresses | Edit this page View Source IsLan(IPAddress) Determine if an IP address is a LAN IP address Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsLan(this IPAddress ip) Parameters Type Name Description IPAddress ip IP address Returns Type Description bool If the IP address is a LAN IP address | Edit this page View Source IsLoopBack(IPAddress) Determine if an IP address is a loopback IP address Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsLoopBack(this IPAddress ip) Parameters Type Name Description IPAddress ip IP address Returns Type Description bool If the IP address is a loopback IP address | Edit this page View Source IsWan(IPAddress) Determine if an IP address is a WAN IP address Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsWan(this IPAddress ip) Parameters Type Name Description IPAddress ip IP address Returns Type Description bool If the IP address is a WAN IP address"
  },
  "api/wan24.Core.NumberExtensions.html": {
    "href": "api/wan24.Core.NumberExtensions.html",
    "title": "Class NumberExtensions | wan24-Core",
    "keywords": "Class NumberExtensions Number extensions Inheritance object NumberExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class NumberExtensions Methods | Edit this page View Source GetBytes(decimal) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this decimal value) Parameters Type Name Description decimal value Value Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(decimal, in byte[]) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this decimal value, in byte[] target) Parameters Type Name Description decimal value Value byte[] target Target span Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(decimal, in Memory<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Memory<byte> GetBytes(this decimal value, in Memory<byte> target) Parameters Type Name Description decimal value Value Memory<byte> target Target memory Returns Type Description Memory<byte> Bytes (endian converted) | Edit this page View Source GetBytes(decimal, in Span<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Span<byte> GetBytes(this decimal value, in Span<byte> target) Parameters Type Name Description decimal value Value Span<byte> target Target span Returns Type Description Span<byte> Bytes (endian converted) | Edit this page View Source GetBytes(double) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this double value) Parameters Type Name Description double value Value Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(double, in byte[]) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this double value, in byte[] target) Parameters Type Name Description double value Value byte[] target Target span Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(double, in Memory<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Memory<byte> GetBytes(this double value, in Memory<byte> target) Parameters Type Name Description double value Value Memory<byte> target Target memory Returns Type Description Memory<byte> Bytes (endian converted) | Edit this page View Source GetBytes(double, in Span<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Span<byte> GetBytes(this double value, in Span<byte> target) Parameters Type Name Description double value Value Span<byte> target Target span Returns Type Description Span<byte> Bytes (endian converted) | Edit this page View Source GetBytes(short) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this short value) Parameters Type Name Description short value Value Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(short, in byte[]) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this short value, in byte[] target) Parameters Type Name Description short value Value byte[] target Target span Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(short, in Memory<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Memory<byte> GetBytes(this short value, in Memory<byte> target) Parameters Type Name Description short value Value Memory<byte> target Target memory Returns Type Description Memory<byte> Bytes (endian converted) | Edit this page View Source GetBytes(short, in Span<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Span<byte> GetBytes(this short value, in Span<byte> target) Parameters Type Name Description short value Value Span<byte> target Target span Returns Type Description Span<byte> Bytes (endian converted) | Edit this page View Source GetBytes(int) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this int value) Parameters Type Name Description int value Value Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(int, in byte[]) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this int value, in byte[] target) Parameters Type Name Description int value Value byte[] target Target span Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(int, in Memory<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Memory<byte> GetBytes(this int value, in Memory<byte> target) Parameters Type Name Description int value Value Memory<byte> target Target memory Returns Type Description Memory<byte> Bytes (endian converted) | Edit this page View Source GetBytes(int, in Span<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Span<byte> GetBytes(this int value, in Span<byte> target) Parameters Type Name Description int value Value Span<byte> target Target span Returns Type Description Span<byte> Bytes (endian converted) | Edit this page View Source GetBytes(long) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this long value) Parameters Type Name Description long value Value Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(long, in byte[]) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this long value, in byte[] target) Parameters Type Name Description long value Value byte[] target Target span Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(long, in Memory<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Memory<byte> GetBytes(this long value, in Memory<byte> target) Parameters Type Name Description long value Value Memory<byte> target Target memory Returns Type Description Memory<byte> Bytes (endian converted) | Edit this page View Source GetBytes(long, in Span<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Span<byte> GetBytes(this long value, in Span<byte> target) Parameters Type Name Description long value Value Span<byte> target Target span Returns Type Description Span<byte> Bytes (endian converted) | Edit this page View Source GetBytes(float) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this float value) Parameters Type Name Description float value Value Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(float, in byte[]) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this float value, in byte[] target) Parameters Type Name Description float value Value byte[] target Target span Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(float, in Memory<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Memory<byte> GetBytes(this float value, in Memory<byte> target) Parameters Type Name Description float value Value Memory<byte> target Target memory Returns Type Description Memory<byte> Bytes (endian converted) | Edit this page View Source GetBytes(float, in Span<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Span<byte> GetBytes(this float value, in Span<byte> target) Parameters Type Name Description float value Value Span<byte> target Target span Returns Type Description Span<byte> Bytes (endian converted) | Edit this page View Source GetBytes(ushort) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this ushort value) Parameters Type Name Description ushort value Value Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(ushort, in byte[]) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this ushort value, in byte[] target) Parameters Type Name Description ushort value Value byte[] target Target span Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(ushort, in Memory<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Memory<byte> GetBytes(this ushort value, in Memory<byte> target) Parameters Type Name Description ushort value Value Memory<byte> target Target memory Returns Type Description Memory<byte> Bytes (endian converted) | Edit this page View Source GetBytes(ushort, in Span<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Span<byte> GetBytes(this ushort value, in Span<byte> target) Parameters Type Name Description ushort value Value Span<byte> target Target span Returns Type Description Span<byte> Bytes (endian converted) | Edit this page View Source GetBytes(uint) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this uint value) Parameters Type Name Description uint value Value Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(uint, in byte[]) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this uint value, in byte[] target) Parameters Type Name Description uint value Value byte[] target Target span Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(uint, in Memory<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Memory<byte> GetBytes(this uint value, in Memory<byte> target) Parameters Type Name Description uint value Value Memory<byte> target Target memory Returns Type Description Memory<byte> Bytes (endian converted) | Edit this page View Source GetBytes(uint, in Span<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Span<byte> GetBytes(this uint value, in Span<byte> target) Parameters Type Name Description uint value Value Span<byte> target Target span Returns Type Description Span<byte> Bytes (endian converted) | Edit this page View Source GetBytes(ulong) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this ulong value) Parameters Type Name Description ulong value Value Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(ulong, in byte[]) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBytes(this ulong value, in byte[] target) Parameters Type Name Description ulong value Value byte[] target Target span Returns Type Description byte[] Bytes (endian converted) | Edit this page View Source GetBytes(ulong, in Memory<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Memory<byte> GetBytes(this ulong value, in Memory<byte> target) Parameters Type Name Description ulong value Value Memory<byte> target Target memory Returns Type Description Memory<byte> Bytes (endian converted) | Edit this page View Source GetBytes(ulong, in Span<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Span<byte> GetBytes(this ulong value, in Span<byte> target) Parameters Type Name Description ulong value Value Span<byte> target Target span Returns Type Description Span<byte> Bytes (endian converted) | Edit this page View Source IsBetween<T>(T, in T, in T) Determine if a value is within a range Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsBetween<T>(this T value, in T lowerBorder, in T higherBorder) where T : struct, IConvertible, IComparable, ISpanFormattable, IComparable<T>, IEquatable<T> Parameters Type Name Description T value Value T lowerBorder Range begin (including) T higherBorder Range end (including) Returns Type Description bool Is within the range? Type Parameters Name Description T | Edit this page View Source IsNumeric(Type) Determine if a type is numeric Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsNumeric(this Type type) Parameters Type Name Description Type type Type Returns Type Description bool Is a numeric type? | Edit this page View Source IsNumericAndUnsigned(Type) Determine if a type is numeric and unsigned Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsNumericAndUnsigned(this Type type) Parameters Type Name Description Type type Type Returns Type Description bool Is an unsigned numeric type? | Edit this page View Source IsUnsigned(Type) Determine if a numeric type is unsigned (works for enumerations, too) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsUnsigned(this Type type) Parameters Type Name Description Type type Type Returns Type Description bool Is unsigned? | Edit this page View Source IsUnsigned<T>() Determine if a numeric value is unsigned (works for enumerations, too) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsUnsigned<T>() where T : struct, IConvertible, IComparable, ISpanFormattable, IComparable<T>, IEquatable<T> Returns Type Description bool Is unsigned? Type Parameters Name Description T Value type | Edit this page View Source IsUnsigned<T>(T?) Determine if a numeric value is unsigned (works for enumerations, too) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsUnsigned<T>(this T? value) where T : struct, IConvertible, IComparable, ISpanFormattable, IComparable<T>, IEquatable<T> Parameters Type Name Description T? value Value Returns Type Description bool Is unsigned? Type Parameters Name Description T Value type | Edit this page View Source IsUnsigned<T>(T) Determine if a numeric value is unsigned (works for enumerations, too) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsUnsigned<T>(this T value) where T : struct, IConvertible, IComparable, ISpanFormattable, IComparable<T>, IEquatable<T> Parameters Type Name Description T value Value Returns Type Description bool Is unsigned? Type Parameters Name Description T Value type"
  },
  "api/wan24.Core.ObjectExtensions.html": {
    "href": "api/wan24.Core.ObjectExtensions.html",
    "title": "Class ObjectExtensions | wan24-Core",
    "keywords": "Class ObjectExtensions Object extensions Inheritance object ObjectExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ObjectExtensions Methods | Edit this page View Source ConvertType<T>(object) Change the type of an object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static T ConvertType<T>(this object obj) Parameters Type Name Description object obj Object Returns Type Description T Converted object Type Parameters Name Description T Target type | Edit this page View Source Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) Execute an action Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static tReturn Do<tObject, tReturn>(this tObject obj, in Func<tObject, tReturn> action) Parameters Type Name Description tObject obj Object Func<tObject, tReturn> action Action Returns Type Description tReturn Return value Type Parameters Name Description tObject Object type tReturn Return type | Edit this page View Source EnsureValidState<T>(T, in bool, in string?) Ensure a valid object state Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static T EnsureValidState<T>(this T obj, in bool state, in string? error = null) Parameters Type Name Description T obj Object bool state State (if false, the state is invalid) string error Error message Returns Type Description T Object Type Parameters Name Description T Object type Exceptions Type Condition InvalidOperationException The object is not in a state which allows to perform the operation | Edit this page View Source GetDisplayText<T>(T) Get the display text Declaration public static string GetDisplayText<T>(this T value) Parameters Type Name Description T value Value Returns Type Description string Display text Type Parameters Name Description T Value type | Edit this page View Source In(object, params object?[]) Determine if an object is within an object list Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool In(this object obj, params object?[] objects) Parameters Type Name Description object obj Object object[] objects Object list Returns Type Description bool Is within the object list? | Edit this page View Source In<T>(T, in IEnumerable<T?>) Determine if an object is within an object list Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool In<T>(this T obj, in IEnumerable<T?> objects) Parameters Type Name Description T obj Object IEnumerable<T> objects Object list Returns Type Description bool Is within the object list? Type Parameters Name Description T | Edit this page View Source ToDictionary<T>(T, in int) Create a dictionary from an object only using basic types which are JSON compatible (hides SensitiveDataAttribute marked property values) Declaration public static Dictionary<string, object?> ToDictionary<T>(this T obj, in int maxRecursionDepth = 32) Parameters Type Name Description T obj Object int maxRecursionDepth Maximum recursion depth Returns Type Description Dictionary<string, object> Dictionary Type Parameters Name Description T Object type | Edit this page View Source ToOrderedDictionary<T>(T, in int) Create a dictionary from an object only using basic types which are JSON compatible (hides SensitiveDataAttribute marked property values) Declaration public static OrderedDictionary<string, object?> ToOrderedDictionary<T>(this T obj, in int maxRecursionDepth = 32) Parameters Type Name Description T obj Object int maxRecursionDepth Maximum recursion depth Returns Type Description OrderedDictionary<string, object> Dictionary Type Parameters Name Description T Object type"
  },
  "api/wan24.Core.ObjectHelper.html": {
    "href": "api/wan24.Core.ObjectHelper.html",
    "title": "Class ObjectHelper | wan24-Core",
    "keywords": "Class ObjectHelper Object helper Inheritance object ObjectHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ObjectHelper Methods | Edit this page View Source AreEqual(in object?, in object?) Determine if two objects are equal Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool AreEqual(in object? a, in object? b) Parameters Type Name Description object a A object b B Returns Type Description bool Are equal? | Edit this page View Source IsNull(in object?) Determine if an object is null Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsNull(in object? obj) Parameters Type Name Description object obj Object Returns Type Description bool Is null?"
  },
  "api/wan24.Core.ObjectLock.html": {
    "href": "api/wan24.Core.ObjectLock.html",
    "title": "Class ObjectLock | wan24-Core",
    "keywords": "Class ObjectLock Object lock Inheritance object DisposableBase ObjectLock Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class ObjectLock : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source Key Object key Declaration public object Key { get; } Property Value Type Description object | Edit this page View Source Tag Tagged object Declaration public object? Tag { get; } Property Value Type Description object | Edit this page View Source Task Task for awaiting the lock being released Declaration public Task Task { get; } Property Value Type Description Task Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source RunTaskAsync(Task) Run a task asynchronous (the lock will be released when the task is done) Declaration public Task RunTaskAsync(Task task) Parameters Type Name Description Task task Task Returns Type Description Task Operators | Edit this page View Source implicit operator bool(in ObjectLock) Cast as disposing-flag Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in ObjectLock ol) Parameters Type Name Description ObjectLock ol Lock Returns Type Description bool Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ObjectLockManager-1.Lock_Delegate.html": {
    "href": "api/wan24.Core.ObjectLockManager-1.Lock_Delegate.html",
    "title": "Delegate ObjectLockManager<T>.Lock_Delegate | wan24-Core",
    "keywords": "Delegate ObjectLockManager<T>.Lock_Delegate Delegate for locking events Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void ObjectLockManager<T>.Lock_Delegate(ObjectLockManager<T> manager, object key, ObjectLock objectLock) Parameters Type Name Description ObjectLockManager<T> manager Manager object key Object key ObjectLock objectLock Lock Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ObjectLockManager-1.html": {
    "href": "api/wan24.Core.ObjectLockManager-1.html",
    "title": "Class ObjectLockManager<T> | wan24-Core",
    "keywords": "Class ObjectLockManager<T> Object lock manager Inheritance object DisposableBase ObjectLockManager<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IObjectLockManager IStatusProvider Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class ObjectLockManager<T> : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IObjectLockManager, IStatusProvider Type Parameters Name Description T Object type Constructors | Edit this page View Source ObjectLockManager() Constructor Declaration public ObjectLockManager() Properties | Edit this page View Source Count Number of active locks Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source Name Display name Declaration public string? Name { get; set; } Property Value Type Description string | Edit this page View Source Shared Shared singleton instance Declaration public static ObjectLockManager<T> Shared { get; } Property Value Type Description ObjectLockManager<T> Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source GetActiveLock(in object) Get an active lock Declaration public ObjectLock? GetActiveLock(in object key) Parameters Type Name Description object key Object key Returns Type Description ObjectLock Active lock or null, if none | Edit this page View Source GetActiveLock(in IObjectKey) Get an active lock Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public ObjectLock? GetActiveLock(in IObjectKey obj) Parameters Type Name Description IObjectKey obj Object Returns Type Description ObjectLock Active lock or null, if none | Edit this page View Source GetActiveLock<tObject>(in tObject) Get an active lock Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public ObjectLock? GetActiveLock<tObject>(in tObject obj) where tObject : T, IObjectKey Parameters Type Name Description tObject obj Object Returns Type Description ObjectLock Active lock or null, if none Type Parameters Name Description tObject Object type | Edit this page View Source LockAsync(object, object?, CancellationToken) Create am object lock asynchronous Declaration public Task<ObjectLock> LockAsync(object key, object? tag = null, CancellationToken cancellationToken = default) Parameters Type Name Description object key Object key object tag Tagged object CancellationToken cancellationToken Cancellation token Returns Type Description Task<ObjectLock> Object lock | Edit this page View Source LockAsync(object, TimeSpan, object?, CancellationToken) Create an object lock asynchronous Declaration public Task<ObjectLock> LockAsync(object key, TimeSpan timeout, object? tag = null, CancellationToken cancellationToken = default) Parameters Type Name Description object key Object key TimeSpan timeout Timeout object tag Tagged object CancellationToken cancellationToken Cancellation token Returns Type Description Task<ObjectLock> Object lock | Edit this page View Source LockAsync(in IObjectKey, in object?, in CancellationToken) Create am object lock asynchronous Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public Task<ObjectLock> LockAsync(in IObjectKey obj, in object? tag = null, in CancellationToken cancellationToken = default) Parameters Type Name Description IObjectKey obj Object object tag Tagged object CancellationToken cancellationToken Cancellation token Returns Type Description Task<ObjectLock> Object lock | Edit this page View Source LockAsync(in IObjectKey, in TimeSpan, in object?) Create an object lock asynchronous Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public Task<ObjectLock> LockAsync(in IObjectKey obj, in TimeSpan timeout, in object? tag = null) Parameters Type Name Description IObjectKey obj Object TimeSpan timeout Timeout object tag Tagged object Returns Type Description Task<ObjectLock> Object lock | Edit this page View Source LockAsync<tObject>(in tObject, in object?, in CancellationToken) Create am object lock asynchronous Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public Task<ObjectLock> LockAsync<tObject>(in tObject obj, in object? tag = null, in CancellationToken cancellationToken = default) where tObject : T, IObjectKey Parameters Type Name Description tObject obj Object object tag Tagged object CancellationToken cancellationToken Cancellation token Returns Type Description Task<ObjectLock> Object lock Type Parameters Name Description tObject Object type | Edit this page View Source LockAsync<tObject>(in tObject, in TimeSpan, in object?) Create an object lock asynchronous Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public Task<ObjectLock> LockAsync<tObject>(in tObject obj, in TimeSpan timeout, in object? tag = null) where tObject : T, IObjectKey Parameters Type Name Description tObject obj Object TimeSpan timeout Timeout object tag Tagged object Returns Type Description Task<ObjectLock> Object lock Type Parameters Name Description tObject Object type Events | Edit this page View Source OnLocked Raised when a lock was created Declaration public event ObjectLockManager<T>.Lock_Delegate? OnLocked Event Type Type Description ObjectLockManager<T>.Lock_Delegate | Edit this page View Source OnUnlocked Raised when a lock was disposed Declaration public event ObjectLockManager<T>.Lock_Delegate? OnUnlocked Event Type Type Description ObjectLockManager<T>.Lock_Delegate Operators | Edit this page View Source implicit operator int(in ObjectLockManager<T>) Cast as active locks count Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in ObjectLockManager<T> manager) Parameters Type Name Description ObjectLockManager<T> manager Manager Returns Type Description int Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IObjectLockManager IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ObjectLockTable.html": {
    "href": "api/wan24.Core.ObjectLockTable.html",
    "title": "Class ObjectLockTable | wan24-Core",
    "keywords": "Class ObjectLockTable Object locks table Inheritance object ObjectLockTable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ObjectLockTable Fields | Edit this page View Source ObjectLocks Object locks (key ia a GUID) Declaration public static readonly ConcurrentChangeTokenDictionary<string, IObjectLockManager> ObjectLocks Field Value Type Description ConcurrentChangeTokenDictionary<string, IObjectLockManager>"
  },
  "api/wan24.Core.ObjectPool-1.html": {
    "href": "api/wan24.Core.ObjectPool-1.html",
    "title": "Class ObjectPool<T> | wan24-Core",
    "keywords": "Class ObjectPool<T> Object pool Inheritance object ObjectPool<T> Implements IObjectPool<T> IObjectPool IPool Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ObjectPool<T> : IObjectPool<T>, IObjectPool, IPool Type Parameters Name Description T Item type Constructors | Edit this page View Source ObjectPool(in int, in Func<T>) Constructor Declaration public ObjectPool(in int capacity, in Func<T> factory) Parameters Type Name Description int capacity Capacity (may overflow a bit) Func<T> factory Item factory Fields | Edit this page View Source Factory Factory Declaration protected readonly Func<T> Factory Field Value Type Description Func<T> | Edit this page View Source Pool Pool Declaration protected readonly ConcurrentBag<T> Pool Field Value Type Description ConcurrentBag<T> Properties | Edit this page View Source Available Number of items in the pool Declaration public int Available { get; } Property Value Type Description int | Edit this page View Source Capacity Capacity Declaration public int Capacity { get; } Property Value Type Description int | Edit this page View Source ForceResetOnReturn Force resetting returned items (if they're going back to the pool)? (trashed items will be reset anyway) Declaration public bool ForceResetOnReturn { get; set; } Property Value Type Description bool | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source ItemType Item type Declaration public Type ItemType { get; } Property Value Type Description Type | Edit this page View Source Name Display name Declaration public virtual string? Name { get; set; } Property Value Type Description string | Edit this page View Source ResetOnRent Reset rented objects (if they don't come from the factory) Declaration public bool ResetOnRent { get; set; } Property Value Type Description bool Methods | Edit this page View Source ~ObjectPool() Destructor Declaration protected ~ObjectPool() | Edit this page View Source Rent() Rent an item Declaration public virtual T Rent() Returns Type Description T Item (IObjectPoolItem will be reset before returning) | Edit this page View Source Return(in T, in bool) Return an item Declaration public virtual void Return(in T item, in bool reset = false) Parameters Type Name Description T item Item bool reset Reset the IObjectPoolItem object? Operators | Edit this page View Source implicit operator T(in ObjectPool<T>) Cast as rented object Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T(in ObjectPool<T> pool) Parameters Type Name Description ObjectPool<T> pool Pool Returns Type Description T Implements IObjectPool<T> IObjectPool IPool Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ObjectSerializer.AsyncCustomDeserializer_Delegate.html": {
    "href": "api/wan24.Core.ObjectSerializer.AsyncCustomDeserializer_Delegate.html",
    "title": "Delegate ObjectSerializer.AsyncCustomDeserializer_Delegate | wan24-Core",
    "keywords": "Delegate ObjectSerializer.AsyncCustomDeserializer_Delegate Delegate for a custom deserializer Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task<object?> ObjectSerializer.AsyncCustomDeserializer_Delegate(string serializer, Type type, Stream source, CancellationToken cancellationToken) Parameters Type Name Description string serializer Serializer ID Type type Object type Stream source source stream CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Deserialized object Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ObjectSerializer.AsyncCustomSerializer_Delegate.html": {
    "href": "api/wan24.Core.ObjectSerializer.AsyncCustomSerializer_Delegate.html",
    "title": "Delegate ObjectSerializer.AsyncCustomSerializer_Delegate | wan24-Core",
    "keywords": "Delegate ObjectSerializer.AsyncCustomSerializer_Delegate Delegate for a custom serializer Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task ObjectSerializer.AsyncCustomSerializer_Delegate(string serializer, object? obj, Stream target, CancellationToken cancellationToken) Parameters Type Name Description string serializer Serializer ID object obj Object to serialize Stream target Target stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Delegate for a custom serializer Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ObjectSerializer.CustomDeserializer_Delegate.html": {
    "href": "api/wan24.Core.ObjectSerializer.CustomDeserializer_Delegate.html",
    "title": "Delegate ObjectSerializer.CustomDeserializer_Delegate | wan24-Core",
    "keywords": "Delegate ObjectSerializer.CustomDeserializer_Delegate Delegate for a custom deserializer Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate object? ObjectSerializer.CustomDeserializer_Delegate(string serializer, Type type, Stream source) Parameters Type Name Description string serializer Serializer ID Type type Object type Stream source source stream Returns Type Description object Deserialized object Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ObjectSerializer.CustomSerializer_Delegate.html": {
    "href": "api/wan24.Core.ObjectSerializer.CustomSerializer_Delegate.html",
    "title": "Delegate ObjectSerializer.CustomSerializer_Delegate | wan24-Core",
    "keywords": "Delegate ObjectSerializer.CustomSerializer_Delegate Delegate for a custom serializer Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void ObjectSerializer.CustomSerializer_Delegate(string serializer, object? obj, Stream target) Parameters Type Name Description string serializer Serializer ID object obj Object to serialize Stream target Target stream Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ObjectSerializer.Serializer.html": {
    "href": "api/wan24.Core.ObjectSerializer.Serializer.html",
    "title": "Enum ObjectSerializer.Serializer | wan24-Core",
    "keywords": "Enum ObjectSerializer.Serializer Serializer enumeration Namespace: wan24.Core Assembly: wan24Core.dll Syntax public enum ObjectSerializer.Serializer Fields Name Description Json JSON (uses JsonHelper) Xml XML (uses XmlSerializer) Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object[]) AsyncHelper.TryDisposeAsync<ObjectSerializer.Serializer>(ObjectSerializer.Serializer) AsyncHelper.TryDispose<ObjectSerializer.Serializer>(ObjectSerializer.Serializer) EnumExtensions.ContainsAllFlags<ObjectSerializer.Serializer>(ObjectSerializer.Serializer, in ObjectSerializer.Serializer) EnumExtensions.ContainsAnyFlag<ObjectSerializer.Serializer>(ObjectSerializer.Serializer, params ObjectSerializer.Serializer[]) EnumExtensions.GetContainedFlags<ObjectSerializer.Serializer>(ObjectSerializer.Serializer, params ObjectSerializer.Serializer[]) EnumExtensions.GetInfo<ObjectSerializer.Serializer>(ObjectSerializer.Serializer) EnumExtensions.IsFlag<ObjectSerializer.Serializer>(ObjectSerializer.Serializer) EnumExtensions.IsValidEnumerationValue<ObjectSerializer.Serializer>(ObjectSerializer.Serializer) EnumExtensions.IsValid<ObjectSerializer.Serializer>(ObjectSerializer.Serializer) EnumExtensions.IsValue<ObjectSerializer.Serializer>(ObjectSerializer.Serializer) EnumExtensions.OnlyFlags<ObjectSerializer.Serializer>(ObjectSerializer.Serializer) EnumExtensions.RemoveFlags<ObjectSerializer.Serializer>(ObjectSerializer.Serializer) ObjectExtensions.Do<ObjectSerializer.Serializer, tReturn>(ObjectSerializer.Serializer, in Func<ObjectSerializer.Serializer, tReturn>) ObjectExtensions.EnsureValidState<ObjectSerializer.Serializer>(ObjectSerializer.Serializer, in bool, in string) ObjectExtensions.GetDisplayText<ObjectSerializer.Serializer>(ObjectSerializer.Serializer) ObjectExtensions.In<ObjectSerializer.Serializer>(ObjectSerializer.Serializer, in IEnumerable<ObjectSerializer.Serializer>) ObjectExtensions.ToDictionary<ObjectSerializer.Serializer>(ObjectSerializer.Serializer, in int) ObjectExtensions.ToOrderedDictionary<ObjectSerializer.Serializer>(ObjectSerializer.Serializer, in int)"
  },
  "api/wan24.Core.ObjectSerializer.html": {
    "href": "api/wan24.Core.ObjectSerializer.html",
    "title": "Class ObjectSerializer | wan24-Core",
    "keywords": "Class ObjectSerializer Object serialization helper Inheritance object ObjectSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ObjectSerializer Fields | Edit this page View Source JSON_SERIALIZER_NAME JSON serializer Declaration public const string JSON_SERIALIZER_NAME = \"JSON\" Field Value Type Description string | Edit this page View Source NamedAsyncDeserializers Named deserializers Declaration public static readonly Dictionary<string, ObjectSerializer.AsyncCustomDeserializer_Delegate> NamedAsyncDeserializers Field Value Type Description Dictionary<string, ObjectSerializer.AsyncCustomDeserializer_Delegate> | Edit this page View Source NamedAsyncSerializers Named serializers Declaration public static readonly Dictionary<string, ObjectSerializer.AsyncCustomSerializer_Delegate> NamedAsyncSerializers Field Value Type Description Dictionary<string, ObjectSerializer.AsyncCustomSerializer_Delegate> | Edit this page View Source NamedDeserializers Named deserializers Declaration public static readonly Dictionary<string, ObjectSerializer.CustomDeserializer_Delegate> NamedDeserializers Field Value Type Description Dictionary<string, ObjectSerializer.CustomDeserializer_Delegate> | Edit this page View Source NamedSerializers Named serializers Declaration public static readonly Dictionary<string, ObjectSerializer.CustomSerializer_Delegate> NamedSerializers Field Value Type Description Dictionary<string, ObjectSerializer.CustomSerializer_Delegate> | Edit this page View Source XML_SERIALIZER_NAME XML serializer Declaration public const string XML_SERIALIZER_NAME = \"XML\" Field Value Type Description string Methods | Edit this page View Source Deserialize(in string, in Type, in Stream) Deserialize an object Declaration public static object? Deserialize(in string serializer, in Type type, in Stream source) Parameters Type Name Description string serializer Serializer name Type type Object type Stream source Source Returns Type Description object Object | Edit this page View Source Deserialize(in Type, in Stream, in Serializer) Deserialize an object Declaration public static object? Deserialize(in Type type, in Stream source, in ObjectSerializer.Serializer serializer = Serializer.Json) Parameters Type Name Description Type type Object type Stream source Source ObjectSerializer.Serializer serializer Serializer Returns Type Description object Object | Edit this page View Source DeserializeAsync(string, Type, Stream, CancellationToken) Deserialize an object Declaration public static Task<object?> DeserializeAsync(string serializer, Type type, Stream source, CancellationToken cancellationToken = default) Parameters Type Name Description string serializer Serializer name Type type Object type Stream source Source CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Object | Edit this page View Source DeserializeAsync(Type, Stream, Serializer, CancellationToken) Deserialize an object Declaration public static Task<object?> DeserializeAsync(Type type, Stream source, ObjectSerializer.Serializer serializer = Serializer.Json, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Object type Stream source Source ObjectSerializer.Serializer serializer Serializer CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Object | Edit this page View Source DeserializeAsync<T>(Stream, Serializer, CancellationToken) Deserialize an object Declaration public static Task<T?> DeserializeAsync<T>(Stream source, ObjectSerializer.Serializer serializer = Serializer.Json, CancellationToken cancellationToken = default) Parameters Type Name Description Stream source Source ObjectSerializer.Serializer serializer Serializer CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Object Type Parameters Name Description T Object type | Edit this page View Source DeserializeAsync<T>(string, Stream, CancellationToken) Deserialize an object Declaration public static Task<object?> DeserializeAsync<T>(string serializer, Stream source, CancellationToken cancellationToken = default) Parameters Type Name Description string serializer Serializer name Stream source Source CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Object Type Parameters Name Description T Object type | Edit this page View Source Deserialize<T>(in Stream, in Serializer) Deserialize an object Declaration public static T? Deserialize<T>(in Stream source, in ObjectSerializer.Serializer serializer = Serializer.Json) Parameters Type Name Description Stream source Source ObjectSerializer.Serializer serializer Serializer Returns Type Description T Object Type Parameters Name Description T Object type | Edit this page View Source Deserialize<T>(in string, in Stream) Deserialize an object Declaration public static T? Deserialize<T>(in string serializer, in Stream source) Parameters Type Name Description string serializer Serializer name Stream source Source Returns Type Description T Object Type Parameters Name Description T Object type | Edit this page View Source SerializeAsync<T>(string, T, Stream, CancellationToken) Serialize an object Declaration public static Task SerializeAsync<T>(string serializer, T obj, Stream target, CancellationToken cancellationToken = default) Parameters Type Name Description string serializer Serializer name T obj Object Stream target Target stream CancellationToken cancellationToken Cancellation token Returns Type Description Task Type Parameters Name Description T Object type | Edit this page View Source SerializeAsync<T>(T, Stream?, Serializer, bool, CancellationToken) Serialize an object Declaration public static Task<Stream> SerializeAsync<T>(T obj, Stream? target = null, ObjectSerializer.Serializer serializer = Serializer.Json, bool prettifyJson = false, CancellationToken cancellationToken = default) Parameters Type Name Description T obj Object Stream target Target stream ObjectSerializer.Serializer serializer Serializer bool prettifyJson Prettify JSON? CancellationToken cancellationToken Cancellation token Returns Type Description Task<Stream> Stream (if created, the position is at the beginning of the stream; don't forget to dispose!) Type Parameters Name Description T Object type | Edit this page View Source Serialize<T>(in string, in T, in Stream) Serialize an object Declaration public static void Serialize<T>(in string serializer, in T obj, in Stream target) Parameters Type Name Description string serializer Serializer name T obj Object Stream target Target stream Type Parameters Name Description T Object type | Edit this page View Source Serialize<T>(in T, in Stream?, in Serializer, in bool) Serialize an object Declaration public static Stream Serialize<T>(in T obj, in Stream? target = null, in ObjectSerializer.Serializer serializer = Serializer.Json, in bool prettifyJson = false) Parameters Type Name Description T obj Object Stream target Target stream ObjectSerializer.Serializer serializer Serializer bool prettifyJson Prettify JSON? Returns Type Description Stream Stream (if created, the position is at the beginning of the stream; don't forget to dispose!) Type Parameters Name Description T Object type"
  },
  "api/wan24.Core.ObjectStorageBase-2.StoredObject.html": {
    "href": "api/wan24.Core.ObjectStorageBase-2.StoredObject.html",
    "title": "Class ObjectStorageBase<tKey, tObj>.StoredObject | wan24-Core",
    "keywords": "Class ObjectStorageBase<tKey, tObj>.StoredObject Stored object Inheritance object ObjectStorageBase<tKey, tObj>.StoredObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax protected sealed class ObjectStorageBase<tKey, tObj>.StoredObject Remarks Constructor Constructors | Edit this page View Source StoredObject(tObj) Stored object Declaration public StoredObject(tObj obj) Parameters Type Name Description tObj obj Object Remarks Constructor Properties | Edit this page View Source Accessed Last access time Declaration public DateTime Accessed { get; } Property Value Type Description DateTime | Edit this page View Source Key Object key Declaration public tKey Key { get; } Property Value Type Description tKey | Edit this page View Source Object Object (when accessing the getter, the UsageCount will be increased by one) Declaration public tObj Object { get; } Property Value Type Description tObj | Edit this page View Source Stored Stored time Declaration public DateTime Stored { get; } Property Value Type Description DateTime | Edit this page View Source UsageCount Usage counter Declaration public int UsageCount { get; } Property Value Type Description int Methods | Edit this page View Source Release() Release an object usage Declaration public void Release() Exceptions Type Condition OverflowException Negative usage count Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ObjectStorageBase-2.html": {
    "href": "api/wan24.Core.ObjectStorageBase-2.html",
    "title": "Class ObjectStorageBase<tKey, tObj> | wan24-Core",
    "keywords": "Class ObjectStorageBase<tKey, tObj> Base class for an object storage Inheritance object DisposableBase HostedServiceBase ObjectStorageBase<tKey, tObj> Implements IWillDispose IObjectStorage<tKey, tObj> IObjectStorage IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.BeforeStopAsync(CancellationToken) HostedServiceBase.StoppingAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.AfterPauseAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.AfterResumeAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.OnException HostedServiceBase.RaiseOnException() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class ObjectStorageBase<tKey, tObj> : HostedServiceBase, IWillDispose, IObjectStorage<tKey, tObj>, IObjectStorage, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where tKey : notnull where tObj : class, IStoredObject<tKey> Type Parameters Name Description tKey Object key type tObj Object type Constructors | Edit this page View Source ObjectStorageBase(in int) Constructor Declaration public ObjectStorageBase(in int inMemoryLimit) Parameters Type Name Description int inMemoryLimit Max. number of objects to hold in memory Fields | Edit this page View Source CanDispose Can dispose objects? Declaration protected static readonly bool CanDispose Field Value Type Description bool | Edit this page View Source CancelRegistration Cancel registration Declaration protected CancellationTokenRegistration? CancelRegistration Field Value Type Description CancellationTokenRegistration? | Edit this page View Source CleanEvent Clean event (raised when need to dispose some objects) Declaration protected readonly ResetEvent CleanEvent Field Value Type Description ResetEvent | Edit this page View Source Storage Storage Declaration protected readonly ConcurrentDictionary<tKey, ObjectStorageBase<tKey, tObj>.StoredObject> Storage Field Value Type Description ConcurrentDictionary<tKey, ObjectStorageBase<tKey, tObj>.StoredObject> | Edit this page View Source WorkerSync Thread synchronization Declaration protected readonly SemaphoreSync WorkerSync Field Value Type Description SemaphoreSync | Edit this page View Source _StoredPeak Max. number of stored objects Declaration protected volatile int _StoredPeak Field Value Type Description int Properties | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source InMemoryLimit Max. number of objects to hold in memory Declaration public int InMemoryLimit { get; } Property Value Type Description int | Edit this page View Source ObjectReferences Number of currently active object references Declaration public long ObjectReferences { get; } Property Value Type Description long | Edit this page View Source State Status information Declaration public IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> | Edit this page View Source Stored Number of objects in memory Declaration public int Stored { get; } Property Value Type Description int | Edit this page View Source StoredPeak Max. counted number of objects in memory Declaration public int StoredPeak { get; } Property Value Type Description int Methods | Edit this page View Source AfterStartAsync(CancellationToken) After started Declaration protected override Task AfterStartAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.AfterStartAsync(CancellationToken) | Edit this page View Source AfterStopAsync(CancellationToken) After stopped Declaration protected override Task AfterStopAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.AfterStopAsync(CancellationToken) | Edit this page View Source CreateObject(in tKey) Create an object from a key (and store it) Declaration protected abstract tObj? CreateObject(in tKey key) Parameters Type Name Description tKey key Key Returns Type Description tObj Object | Edit this page View Source CreateObjectAsync(in tKey, in CancellationToken) Create an object from a key (and store it) Declaration protected abstract Task<tObj?> CreateObjectAsync(in tKey key, in CancellationToken cancellationToken) Parameters Type Name Description tKey key Key CancellationToken cancellationToken Cancellation token Returns Type Description Task<tObj> Object | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides HostedServiceBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides HostedServiceBase.DisposeCore() | Edit this page View Source GetObject(in tKey) Get an object Declaration public virtual StoredObject<tKey, tObj>? GetObject(in tKey key) Parameters Type Name Description tKey key Key Returns Type Description StoredObject<tKey, tObj> Object | Edit this page View Source GetObjectAsync(tKey, CancellationToken) Get an object Declaration public virtual Task<StoredObject<tKey, tObj>?> GetObjectAsync(tKey key, CancellationToken cancellationToken = default) Parameters Type Name Description tKey key Key CancellationToken cancellationToken Cancellation token Returns Type Description Task<StoredObject<tKey, tObj>> Object | Edit this page View Source Release(in tObj) Release an object Declaration public virtual void Release(in tObj obj) Parameters Type Name Description tObj obj Object | Edit this page View Source Remove(in tObj) Remove an object Declaration public virtual tObj Remove(in tObj obj) Parameters Type Name Description tObj obj Object Returns Type Description tObj Object | Edit this page View Source RemoveAsync(StoredObject, bool) Remove a stored object (and dispose it, if possible) Declaration protected virtual Task RemoveAsync(ObjectStorageBase<tKey, tObj>.StoredObject obj, bool sync = true) Parameters Type Name Description ObjectStorageBase<tKey, tObj>.StoredObject obj Object bool sync Synchronize threads? Returns Type Description Task | Edit this page View Source WorkerAsync() Service worker Declaration protected override Task WorkerAsync() Returns Type Description Task Overrides HostedServiceBase.WorkerAsync() Implements IWillDispose IObjectStorage<tKey, tObj> IObjectStorage IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.OptionalDisposeAction.html": {
    "href": "api/wan24.Core.OptionalDisposeAction.html",
    "title": "Class OptionalDisposeAction | wan24-Core",
    "keywords": "Class OptionalDisposeAction Optional dispose action Inheritance object DisposableBase OptionalDisposeAction Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class OptionalDisposeAction : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source OptionalDisposeAction(in Action, in bool) Constructor Declaration public OptionalDisposeAction(in Action action, in bool execute = true) Parameters Type Name Description Action action Action to execute when disposing bool execute Execute the dispose action? | Edit this page View Source OptionalDisposeAction(in Action, in Func<Task>, in bool) Constructor Declaration public OptionalDisposeAction(in Action action, in Func<Task> asyncAction, in bool execute = true) Parameters Type Name Description Action action Action to execute when disposing synchronous Func<Task> asyncAction Asynchronous action to execute when disposing asynchronous bool execute Execute the dispose actions? | Edit this page View Source OptionalDisposeAction(in Func<Task>, in bool) Constructor Declaration public OptionalDisposeAction(in Func<Task> action, in bool execute = true) Parameters Type Name Description Func<Task> action Action to execute when disposing bool execute Execute the dispose action? Properties | Edit this page View Source AsyncDisposeAction Action to execute when disposing Declaration public Func<Task>? AsyncDisposeAction { get; } Property Value Type Description Func<Task> | Edit this page View Source DisposeAction Action to execute when disposing Declaration public Action? DisposeAction { get; } Property Value Type Description Action | Edit this page View Source ExecuteDisposeAction Execute the dispose action(s)? Declaration public bool ExecuteDisposeAction { get; set; } Property Value Type Description bool Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.OptionalDisposer.html": {
    "href": "api/wan24.Core.OptionalDisposer.html",
    "title": "Class OptionalDisposer | wan24-Core",
    "keywords": "Class OptionalDisposer Optional disposer Inheritance object DisposableBase OptionalDisposer Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class OptionalDisposer : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Remarks Constructor Constructors | Edit this page View Source OptionalDisposer(in object?, in bool) Optional disposer Declaration public OptionalDisposer(in object? obj, in bool dispose = true) Parameters Type Name Description object obj Object to dispose bool dispose Dispose the object? Remarks Constructor Properties | Edit this page View Source DisposeObject Dispose the object? Declaration public bool DisposeObject { get; set; } Property Value Type Description bool | Edit this page View Source Object Object to dispose Declaration public object? Object { get; set; } Property Value Type Description object Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Operators | Edit this page View Source implicit operator bool(in OptionalDisposer) Cast as disposing flag Declaration public static implicit operator bool(in OptionalDisposer disposer) Parameters Type Name Description OptionalDisposer disposer Disposer Returns Type Description bool Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.OrderedDictionary-2.DictionaryEnumerator.html": {
    "href": "api/wan24.Core.OrderedDictionary-2.DictionaryEnumerator.html",
    "title": "Class OrderedDictionary<tKey, tValue>.DictionaryEnumerator | wan24-Core",
    "keywords": "Class OrderedDictionary<tKey, tValue>.DictionaryEnumerator Dictionary enumerator Inheritance object OrderedDictionary<tKey, tValue>.DictionaryEnumerator Implements IDictionaryEnumerator IEnumerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax protected class OrderedDictionary<tKey, tValue>.DictionaryEnumerator : IDictionaryEnumerator, IEnumerator Remarks Constructor Constructors | Edit this page View Source DictionaryEnumerator(in IEnumerator<KeyValuePair<tKey, tValue>>) Dictionary enumerator Declaration public DictionaryEnumerator(in IEnumerator<KeyValuePair<tKey, tValue>> enumerator) Parameters Type Name Description IEnumerator<KeyValuePair<tKey, tValue>> enumerator Enumerator Remarks Constructor Fields | Edit this page View Source Enumerator Enumerator Declaration protected readonly IEnumerator<KeyValuePair<tKey, tValue>> Enumerator Field Value Type Description IEnumerator<KeyValuePair<tKey, tValue>> Properties | Edit this page View Source Current Gets the element in the collection at the current position of the enumerator. Declaration public object Current { get; } Property Value Type Description object The element in the collection at the current position of the enumerator. | Edit this page View Source Entry Gets both the key and the value of the current dictionary entry. Declaration public DictionaryEntry Entry { get; } Property Value Type Description DictionaryEntry A DictionaryEntry containing both the key and the value of the current dictionary entry. Exceptions Type Condition InvalidOperationException The IDictionaryEnumerator is positioned before the first entry of the dictionary or after the last entry. | Edit this page View Source Key Gets the key of the current dictionary entry. Declaration public object Key { get; } Property Value Type Description object The key of the current element of the enumeration. Exceptions Type Condition InvalidOperationException The IDictionaryEnumerator is positioned before the first entry of the dictionary or after the last entry. | Edit this page View Source Value Gets the value of the current dictionary entry. Declaration public object? Value { get; } Property Value Type Description object The value of the current element of the enumeration. Exceptions Type Condition InvalidOperationException The IDictionaryEnumerator is positioned before the first entry of the dictionary or after the last entry. Methods | Edit this page View Source MoveNext() Advances the enumerator to the next element of the collection. Declaration public bool MoveNext() Returns Type Description bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. Exceptions Type Condition InvalidOperationException The collection was modified after the enumerator was created. | Edit this page View Source Reset() Sets the enumerator to its initial position, which is before the first element in the collection. Declaration public void Reset() Exceptions Type Condition InvalidOperationException The collection was modified after the enumerator was created. NotSupportedException The enumerator does not support being reset. Implements IDictionaryEnumerator IEnumerator Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.OrderedDictionary-2.OrderedDictionary_Delegate.html": {
    "href": "api/wan24.Core.OrderedDictionary-2.OrderedDictionary_Delegate.html",
    "title": "Delegate OrderedDictionary<tKey, tValue>.OrderedDictionary_Delegate | wan24-Core",
    "keywords": "Delegate OrderedDictionary<tKey, tValue>.OrderedDictionary_Delegate Delegate for an OrderedDictionary<tKey, tValue> event Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void OrderedDictionary<tKey, tValue>.OrderedDictionary_Delegate(OrderedDictionary<tKey, tValue> sender, int index, tKey key, tValue value) Parameters Type Name Description OrderedDictionary<tKey, tValue> sender Sender int index Key/value pair index tKey key Key tValue value Value Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.OrderedDictionary-2.html": {
    "href": "api/wan24.Core.OrderedDictionary-2.html",
    "title": "Class OrderedDictionary<tKey, tValue> | wan24-Core",
    "keywords": "Class OrderedDictionary<tKey, tValue> Ordered dictionary Inheritance object OrderedDictionary<tKey, tValue> Implements IOrderedDictionary<tKey, tValue> IDictionary<tKey, tValue> IOrderedDictionary IDictionary IReadOnlyDictionary<tKey, tValue> IReadOnlyCollection<KeyValuePair<tKey, tValue>> ICollection ICollection<KeyValuePair<tKey, tValue>> IEnumerable<KeyValuePair<tKey, tValue>> IEnumerable ISerializable IDeserializationCallback Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax [Serializable] public class OrderedDictionary<tKey, tValue> : IOrderedDictionary<tKey, tValue>, IDictionary<tKey, tValue>, IOrderedDictionary, IDictionary, IReadOnlyDictionary<tKey, tValue>, IReadOnlyCollection<KeyValuePair<tKey, tValue>>, ICollection, ICollection<KeyValuePair<tKey, tValue>>, IEnumerable<KeyValuePair<tKey, tValue>>, IEnumerable, ISerializable, IDeserializationCallback where tKey : notnull Type Parameters Name Description tKey Key type tValue Value type Constructors | Edit this page View Source OrderedDictionary() Constructor Declaration public OrderedDictionary() | Edit this page View Source OrderedDictionary(in IEnumerable<KeyValuePair<tKey, tValue>>) Constructor Declaration public OrderedDictionary(in IEnumerable<KeyValuePair<tKey, tValue>> items) Parameters Type Name Description IEnumerable<KeyValuePair<tKey, tValue>> items Items | Edit this page View Source OrderedDictionary(in int) Constructor Declaration public OrderedDictionary(in int capacity) Parameters Type Name Description int capacity Capacity | Edit this page View Source OrderedDictionary(in SerializationInfo, in StreamingContext) Constructor Declaration protected OrderedDictionary(in SerializationInfo info, in StreamingContext context) Parameters Type Name Description SerializationInfo info Serialization info StreamingContext context Streaming context | Edit this page View Source OrderedDictionary(in OrderedDictionary<tKey, tValue>) Constructor (creates a read-only dictionary) Declaration public OrderedDictionary(in OrderedDictionary<tKey, tValue> dict) Parameters Type Name Description OrderedDictionary<tKey, tValue> dict Ordered dictionary Fields | Edit this page View Source Context Streaming context Declaration protected StreamingContext? Context Field Value Type Description StreamingContext? | Edit this page View Source Info Serialization info Declaration protected SerializationInfo? Info Field Value Type Description SerializationInfo | Edit this page View Source Items Items Declaration protected readonly List<KeyValuePair<tKey, tValue>> Items Field Value Type Description List<KeyValuePair<tKey, tValue>> Properties | Edit this page View Source Count Gets the number of elements in the collection. Declaration public int Count { get; } Property Value Type Description int The number of elements in the collection. | Edit this page View Source IsFixedSize Gets a value indicating whether the IDictionary object has a fixed size. Declaration public virtual bool IsFixedSize { get; } Property Value Type Description bool true if the IDictionary object has a fixed size; otherwise, false. | Edit this page View Source IsReadOnly Gets a value indicating whether the IDictionary object is read-only. Declaration public virtual bool IsReadOnly { get; protected set; } Property Value Type Description bool true if the IDictionary object is read-only; otherwise, false. | Edit this page View Source IsSynchronized Gets a value indicating whether access to the ICollection is synchronized (thread safe). Declaration public virtual bool IsSynchronized { get; } Property Value Type Description bool true if access to the ICollection is synchronized (thread safe); otherwise, false. | Edit this page View Source this[int] Declaration public tValue this[int index] { get; set; } Parameters Type Name Description int index Property Value Type Description tValue | Edit this page View Source this[object] Gets or sets the element with the specified key. Declaration public object? this[object key] { get; set; } Parameters Type Name Description object key The key of the element to get or set. Property Value Type Description object The element with the specified key, or null if the key does not exist. Exceptions Type Condition ArgumentNullException key is null. NotSupportedException The property is set and the IDictionary object is read-only. -or- The property is set, key does not exist in the collection, and the IDictionary has a fixed size. | Edit this page View Source this[tKey] Gets or sets the element with the specified key. Declaration public tValue this[tKey key] { get; set; } Parameters Type Name Description tKey key The key of the element to get or set. Property Value Type Description tValue The element with the specified key. Exceptions Type Condition ArgumentNullException key is null. KeyNotFoundException The property is retrieved and key is not found. NotSupportedException The property is set and the IDictionary<TKey, TValue> is read-only. | Edit this page View Source Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. Declaration public ICollection<tKey> Keys { get; } Property Value Type Description ICollection<tKey> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. | Edit this page View Source SyncRoot Gets an object that can be used to synchronize access to the ICollection. Declaration public virtual object SyncRoot { get; } Property Value Type Description object An object that can be used to synchronize access to the ICollection. | Edit this page View Source Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. Declaration public ICollection<tValue> Values { get; } Property Value Type Description ICollection<tValue> An ICollection<T> containing the values in the object that implements IDictionary<TKey, TValue>. Methods | Edit this page View Source Add(KeyValuePair<tKey, tValue>) Adds an item to the ICollection<T>. Declaration public virtual void Add(KeyValuePair<tKey, tValue> item) Parameters Type Name Description KeyValuePair<tKey, tValue> item The object to add to the ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Add(object, object?) Adds an element with the provided key and value to the IDictionary object. Declaration public void Add(object key, object? value) Parameters Type Name Description object key The object to use as the key of the element to add. object value The object to use as the value of the element to add. Exceptions Type Condition ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary object. NotSupportedException The IDictionary is read-only. -or- The IDictionary has a fixed size. | Edit this page View Source Add(tKey, tValue) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. Declaration public virtual void Add(tKey key, tValue value) Parameters Type Name Description tKey key The object to use as the key of the element to add. tValue value The object to use as the value of the element to add. Exceptions Type Condition ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary<TKey, TValue>. NotSupportedException The IDictionary<TKey, TValue> is read-only. | Edit this page View Source AsReadOnly() Get as read-only ordered dictionary Declaration [TargetedPatchingOptOut(\"Tiny method\")] public OrderedDictionary<tKey, tValue> AsReadOnly() Returns Type Description OrderedDictionary<tKey, tValue> Read-only ordered dictionary | Edit this page View Source Clear() Removes all elements from the IDictionary object. Declaration public virtual void Clear() Exceptions Type Condition NotSupportedException The IDictionary object is read-only. | Edit this page View Source Contains(KeyValuePair<tKey, tValue>) Determines whether the ICollection<T> contains a specific value. Declaration public bool Contains(KeyValuePair<tKey, tValue> item) Parameters Type Name Description KeyValuePair<tKey, tValue> item The object to locate in the ICollection<T>. Returns Type Description bool true if item is found in the ICollection<T>; otherwise, false. | Edit this page View Source Contains(object) Determines whether the IDictionary object contains an element with the specified key. Declaration public bool Contains(object key) Parameters Type Name Description object key The key to locate in the IDictionary object. Returns Type Description bool true if the IDictionary contains an element with the key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. | Edit this page View Source ContainsKey(tKey) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. Declaration public bool ContainsKey(tKey key) Parameters Type Name Description tKey key The key to locate in the IDictionary<TKey, TValue>. Returns Type Description bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. | Edit this page View Source ContainsValue(tValue) Determine if a value is contained Declaration public bool ContainsValue(tValue value) Parameters Type Name Description tValue value Value Returns Type Description bool Is contained? | Edit this page View Source CopyTo(Array, int) Copies the elements of the ICollection to an Array, starting at a particular Array index. Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. int index The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException index is less than zero. ArgumentException array is multidimensional. -or- The number of elements in the source ICollection is greater than the available space from index to the end of the destination array. -or- The type of the source ICollection cannot be cast automatically to the type of the destination array. | Edit this page View Source CopyTo(KeyValuePair<tKey, tValue>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. Declaration public void CopyTo(KeyValuePair<tKey, tValue>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair<tKey, tValue>[] array The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. | Edit this page View Source EnsureExistingKey(tKey) Ensure an existing key Declaration protected int EnsureExistingKey(tKey key) Parameters Type Name Description tKey key Key Returns Type Description int Index Exceptions Type Condition KeyNotFoundException If the key doesn't exist | Edit this page View Source EnsureFreshKey(tKey) Ensure a fresh (non-existing) key Declaration protected tKey EnsureFreshKey(tKey key) Parameters Type Name Description tKey key Key Returns Type Description tKey Key Exceptions Type Condition ArgumentException If the key exists | Edit this page View Source EnsureValidIndex(int) Ensure a valid index Declaration protected int EnsureValidIndex(int index) Parameters Type Name Description int index Index Returns Type Description int Index Exceptions Type Condition IndexOutOfRangeException If the index is invalid | Edit this page View Source EnsureValidKey(object) Ensure a valid key Declaration protected object EnsureValidKey(object key) Parameters Type Name Description object key Key Returns Type Description object Key Exceptions Type Condition ArgumentException If the key is invalid | Edit this page View Source EnsureValidValue(object?) Ensure a valid value Declaration protected object? EnsureValidValue(object? value) Parameters Type Name Description object value Value Returns Type Description object Value Exceptions Type Condition ArgumentException If the value is invalid | Edit this page View Source EnsureWritable() Ensure writable Declaration protected void EnsureWritable() Exceptions Type Condition NotSupportedException If read-only | Edit this page View Source GetAt(int) Get a key/value pair from an index Declaration public KeyValuePair<tKey, tValue> GetAt(int index) Parameters Type Name Description int index Index Returns Type Description KeyValuePair<tKey, tValue> Key/value pair | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public IEnumerator<KeyValuePair<tKey, tValue>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<tKey, tValue>> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo with the data needed to serialize the target object. Declaration public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo to populate with data. StreamingContext context The destination (see StreamingContext) for this serialization. Exceptions Type Condition SecurityException The caller does not have the required permission. | Edit this page View Source IndexOfKey(tKey) Get the index of a key Declaration public int IndexOfKey(tKey key) Parameters Type Name Description tKey key Key Returns Type Description int Index or -1, if not contained | Edit this page View Source IndexOfValue(tValue) Get the index of a value Declaration public int IndexOfValue(tValue value) Parameters Type Name Description tValue value Value Returns Type Description int Index or -1, if not contained | Edit this page View Source Insert(int, object, object?) Inserts a key/value pair into the collection at the specified index. Declaration public void Insert(int index, object key, object? value) Parameters Type Name Description int index The zero-based index at which the key/value pair should be inserted. object key The object to use as the key of the element to add. object value The object to use as the value of the element to add. The value can be null. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is greater than Count. ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IOrderedDictionary collection. NotSupportedException The IOrderedDictionary collection is read-only. -or- The IOrderedDictionary collection has a fixed size. | Edit this page View Source Insert(int, tKey, tValue) Insert Declaration public void Insert(int index, tKey key, tValue value) Parameters Type Name Description int index Index tKey key Key tValue value Value | Edit this page View Source IsEqual(object?, object?) Determine if two objects are equal Declaration protected bool IsEqual(object? a, object? b) Parameters Type Name Description object a A object b B Returns Type Description bool Are equal? | Edit this page View Source OnDeserialization(object?) Runs when the entire object graph has been deserialized. Declaration public void OnDeserialization(object? sender) Parameters Type Name Description object sender The object that initiated the callback. The functionality for this parameter is not currently implemented. | Edit this page View Source RaiseOnAdded(in int, in tKey, in tValue) Raise the OnAdded event Declaration protected virtual void RaiseOnAdded(in int index, in tKey key, in tValue value) Parameters Type Name Description int index Index tKey key Key tValue value Value | Edit this page View Source RaiseOnRemoved(in int, in tKey, in tValue) Raise the OnRemoved event Declaration protected virtual void RaiseOnRemoved(in int index, in tKey key, in tValue value) Parameters Type Name Description int index Index tKey key Key tValue value Value | Edit this page View Source RaiseOnUpdated(in int, in tKey, in tValue) Raise the OnUpdated event Declaration protected virtual void RaiseOnUpdated(in int index, in tKey key, in tValue value) Parameters Type Name Description int index Previous index tKey key Previous key tValue value Previous value | Edit this page View Source Remove(KeyValuePair<tKey, tValue>) Removes the first occurrence of a specific object from the ICollection<T>. Declaration public virtual bool Remove(KeyValuePair<tKey, tValue> item) Parameters Type Name Description KeyValuePair<tKey, tValue> item The object to remove from the ICollection<T>. Returns Type Description bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Remove(object) Removes the element with the specified key from the IDictionary object. Declaration public void Remove(object key) Parameters Type Name Description object key The key of the element to remove. Exceptions Type Condition ArgumentNullException key is null. NotSupportedException The IDictionary object is read-only. -or- The IDictionary has a fixed size. | Edit this page View Source Remove(tKey) Removes the element with the specified key from the IDictionary<TKey, TValue>. Declaration public virtual bool Remove(tKey key) Parameters Type Name Description tKey key The key of the element to remove. Returns Type Description bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. Exceptions Type Condition ArgumentNullException key is null. NotSupportedException The IDictionary<TKey, TValue> is read-only. | Edit this page View Source RemoveAt(int) Removes the element at the specified index. Declaration public virtual void RemoveAt(int index) Parameters Type Name Description int index The zero-based index of the element to remove. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is equal to or greater than Count. NotSupportedException The IOrderedDictionary collection is read-only. -or- The IOrderedDictionary collection has a fixed size. | Edit this page View Source ReplaceAt(int, tKey, tValue) Replace a key/value pair at an index Declaration public void ReplaceAt(int index, tKey key, tValue value) Parameters Type Name Description int index Index tKey key Key tValue value Value | Edit this page View Source TryGetValue(tKey, out tValue) Gets the value associated with the specified key. Declaration public bool TryGetValue(tKey key, out tValue value) Parameters Type Name Description tKey key The key whose value to get. tValue value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. Events | Edit this page View Source OnAdded Raised when added a key/value pair Declaration public event OrderedDictionary<tKey, tValue>.OrderedDictionary_Delegate? OnAdded Event Type Type Description OrderedDictionary<tKey, tValue>.OrderedDictionary_Delegate | Edit this page View Source OnRemoved Raised when removed a key/value pair Declaration public event OrderedDictionary<tKey, tValue>.OrderedDictionary_Delegate? OnRemoved Event Type Type Description OrderedDictionary<tKey, tValue>.OrderedDictionary_Delegate | Edit this page View Source OnUpdated Raised when updated a value (the event handler will get the previous index, key and value) Declaration public event OrderedDictionary<tKey, tValue>.OrderedDictionary_Delegate? OnUpdated Event Type Type Description OrderedDictionary<tKey, tValue>.OrderedDictionary_Delegate Operators | Edit this page View Source implicit operator int(in OrderedDictionary<tKey, tValue>) Cast as item count Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in OrderedDictionary<tKey, tValue> dict) Parameters Type Name Description OrderedDictionary<tKey, tValue> dict Dictionary Returns Type Description int Implements IOrderedDictionary<tKey, tValue> IDictionary<TKey, TValue> IOrderedDictionary IDictionary IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> ICollection ICollection<T> IEnumerable<T> IEnumerable ISerializable IDeserializationCallback Extension Methods CollectionExtensions.AddRangeAsync<T>(ICollection<T>, IAsyncEnumerable<T>, CancellationToken) CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.AddRange<T>(ICollection<T>, params T[]) ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.OverridableConfig-1.html": {
    "href": "api/wan24.Core.OverridableConfig-1.html",
    "title": "Class OverridableConfig<tFinal> | wan24-Core",
    "keywords": "Class OverridableConfig<tFinal> Base class for an overridable configuration Inheritance object ChangeToken ChangeToken<tFinal> OverridableConfig<tFinal> Implements INotifyPropertyChanged IObservable<tFinal> IOverridableConfig IChangeToken Inherited Members ChangeToken<tFinal>.Observers ChangeToken<tFinal>.Subscribe(IObserver<tFinal>) ChangeToken.Callbacks ChangeToken._HasChanged ChangeToken.SyncObject ChangeToken.ChangeIdentifier ChangeToken.HasChanged ChangeToken.ActiveChangeCallbacks ChangeToken.RegisterChangeCallback(Action<object>, object) ChangeToken.InvokeCallbacks(in object) ChangeToken.SetNewPropertyValue<T>(ref T, in T, in string) ChangeToken.PropertyChanged ChangeToken.RaisePropertyChanged(in string) ChangeToken.RaisePropertyChanged(object, PropertyChangedEventArgs) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class OverridableConfig<tFinal> : ChangeToken<tFinal>, INotifyPropertyChanged, IObservable<tFinal>, IOverridableConfig, IChangeToken where tFinal : OverridableConfig<tFinal>, new() Type Parameters Name Description tFinal Final type Constructors | Edit this page View Source OverridableConfig() Constructor Declaration protected OverridableConfig() | Edit this page View Source OverridableConfig(in tFinal) Constructor Declaration protected OverridableConfig(in tFinal parent) Parameters Type Name Description tFinal parent Fields | Edit this page View Source DEFAULT_SUB_KEY Default sub-configuration tree key Declaration public const string DEFAULT_SUB_KEY = \"_sub\" Field Value Type Description string | Edit this page View Source OptionProperties Properties Declaration protected Dictionary<string, (PropertyInfo Property, Func<object, IConfigOption?> Getter)>? OptionProperties Field Value Type Description Dictionary<string, (PropertyInfo Property, Func<object, IConfigOption> Getter)> | Edit this page View Source SubKey Sub-configuration tree key Declaration protected string SubKey Field Value Type Description string Properties | Edit this page View Source AllOptions All options Declaration public IEnumerable<IConfigOption> AllOptions { get; } Property Value Type Description IEnumerable<IConfigOption> | Edit this page View Source AllOptionsDict All options dictionary (key ist the property name) Declaration public Dictionary<string, IConfigOption> AllOptionsDict { get; } Property Value Type Description Dictionary<string, IConfigOption> | Edit this page View Source ChangedValues Only locally changed values (key ist the property name) Declaration public Dictionary<string, object?> ChangedValues { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source ConfigLevel Configuration level (starts at 1) Declaration public int ConfigLevel { get; } Property Value Type Description int | Edit this page View Source ConfigTree Configuration tree (key ist the property name, contains the set values and (if having a sub-configuration) the sub-configuration tree using the special key _sub) Declaration public Dictionary<string, dynamic?> ConfigTree { get; set; } Property Value Type Description Dictionary<string, object> | Edit this page View Source DynamicChangedValues Only locally changed dynamic values (key ist the property name) Declaration public Dictionary<string, dynamic?> DynamicChangedValues { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source DynamicFinalConfig Final dynamic configuration (key ist the property name, local including sub-configuration overrides) Declaration public Dictionary<string, dynamic?> DynamicFinalConfig { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source DynamicLocalConfig Local dynamic configuration (key ist the property name, all set values, or all values for the master configuration) Declaration public Dictionary<string, dynamic?> DynamicLocalConfig { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source DynamicOverrides Local dynamic overriding configuration (key ist the property name, only parent overriding option values, equals LocalConfig, if this is the master configuration) Declaration public Dictionary<string, dynamic?> DynamicOverrides { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source DynamicSetValues Only locally set dynamic values (key ist the property name, equals DynamicLocalConfig, if this is a sub-configuration) Declaration public Dictionary<string, dynamic?> DynamicSetValues { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source FinalConfig Final configuration (key ist the property name, local including sub-configuration overrides, equals LocalConfig, if this is the master configuration) Declaration public Dictionary<string, object?> FinalConfig { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source GUID GUID Declaration public Guid GUID { get; } Property Value Type Description Guid | Edit this page View Source LocalConfig Local configuration (key ist the property name, all set values, or all values for the master configuration) Declaration public Dictionary<string, object?> LocalConfig { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source MasterConfig Master configuration Declaration public tFinal MasterConfig { get; } Property Value Type Description tFinal | Edit this page View Source MissingValues Missing values (no (sub-)value set, ignores default values) Declaration public IEnumerable<IConfigOption> MissingValues { get; } Property Value Type Description IEnumerable<IConfigOption> | Edit this page View Source Overrides Local overriding configuration (key ist the property name, only parent overriding option values) Declaration public Dictionary<string, object?> Overrides { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source ParentConfig Parent configuration Declaration public tFinal? ParentConfig { get; protected set; } Property Value Type Description tFinal | Edit this page View Source Properties Property names Declaration public IEnumerable<string> Properties { get; } Property Value Type Description IEnumerable<string> | Edit this page View Source SetOptions Set (and overridden) options Declaration public IEnumerable<IConfigOption> SetOptions { get; } Property Value Type Description IEnumerable<IConfigOption> | Edit this page View Source SetValues Only locally set values (key ist the property name, equals LocalConfig, if this is a sub-configuration) Declaration public Dictionary<string, object?> SetValues { get; } Property Value Type Description Dictionary<string, object> | Edit this page View Source SubConfig Overriding sub-configuration Declaration public tFinal? SubConfig { get; protected set; } Property Value Type Description tFinal Methods | Edit this page View Source GetOption(in Func<object, IConfigOption?>) Get the option Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected IConfigOption GetOption(in Func<object, IConfigOption?> getter) Parameters Type Name Description Func<object, IConfigOption> getter Property getter Returns Type Description IConfigOption Option | Edit this page View Source GetOption(in string) Get an option Declaration public IConfigOption? GetOption(in string propertyName) Parameters Type Name Description string propertyName Property name Returns Type Description IConfigOption Option | Edit this page View Source GetOptionProperties() Get option properties Declaration protected IEnumerable<(PropertyInfo Property, Func<object, IConfigOption?> Getter)> GetOptionProperties() Returns Type Description IEnumerable<(PropertyInfo Property, Func<object, IConfigOption> Getter)> Properties | Edit this page View Source GetPropertyValue(in Func<object, IConfigOption?>, in bool) Get a property value Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected object? GetPropertyValue(in Func<object, IConfigOption?> getter, in bool final = false) Parameters Type Name Description Func<object, IConfigOption> getter Property getter bool final Final value? Returns Type Description object Value | Edit this page View Source MergeTo(in tFinal, in bool, in bool) Merge to another configuration (will copy the Value (if set) and CanBeOverridden) Declaration public tFinal MergeTo(in tFinal config, in bool recursive = true, in bool setCanBeOverridden = true) Parameters Type Name Description tFinal config Configuration bool recursive Recursive? bool setCanBeOverridden Set the CanBeOverridden flags? Returns Type Description tFinal This | Edit this page View Source RaiseOnChange(in IConfigOption, in object?, in bool) Raise the OnChange event Declaration protected virtual void RaiseOnChange(in IConfigOption option, in object? oldValue, in bool changed = true) Parameters Type Name Description IConfigOption option Option object oldValue Old value bool changed Was this instance changed? | Edit this page View Source ResetChanged(in bool) Declaration public virtual tFinal ResetChanged(in bool recursive = true) Parameters Type Name Description bool recursive Returns Type Description tFinal | Edit this page View Source SetConfig(in Dictionary<string, object?>, in bool, in bool) Set a configuration Declaration public virtual tFinal SetConfig(in Dictionary<string, object?> config, in bool reset = false, in bool recursive = false) Parameters Type Name Description Dictionary<string, object> config Configuration bool reset Reset first? bool recursive Reset recursive? Returns Type Description tFinal This | Edit this page View Source UnsetAll(in bool) Unset all option values Declaration public virtual tFinal UnsetAll(in bool recursive = false) Parameters Type Name Description bool recursive Recursive? Returns Type Description tFinal This | Edit this page View Source UnsetAllOverrides() Unset all option overrides (recursive!) Declaration public virtual tFinal UnsetAllOverrides() Returns Type Description tFinal This Events | Edit this page View Source OnChange Raised when an option was changed (bubbles to the master configuration) Declaration public event IOverridableConfig.Config_Delegate? OnChange Event Type Type Description IOverridableConfig.Config_Delegate Implements INotifyPropertyChanged IObservable<T> IOverridableConfig IChangeToken Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.PackageInfo.RepositoryInfo.html": {
    "href": "api/wan24.Core.PackageInfo.RepositoryInfo.html",
    "title": "Class PackageInfo.RepositoryInfo | wan24-Core",
    "keywords": "Class PackageInfo.RepositoryInfo Repository info Inheritance object PackageInfo.RepositoryInfo Implements IEquatable<PackageInfo.RepositoryInfo> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed record PackageInfo.RepositoryInfo : IEquatable<PackageInfo.RepositoryInfo> Constructors | Edit this page View Source RepositoryInfo() Constructor Declaration public RepositoryInfo() Properties | Edit this page View Source Commit Commit Declaration public required string Commit { get; init; } Property Value Type Description string | Edit this page View Source Type Type Declaration public required string Type { get; init; } Property Value Type Description string | Edit this page View Source Uri URI Declaration public required Uri Uri { get; init; } Property Value Type Description Uri Implements IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.PackageInfo.html": {
    "href": "api/wan24.Core.PackageInfo.html",
    "title": "Class PackageInfo | wan24-Core",
    "keywords": "Class PackageInfo Package informations (3rd party package licenses helper (consumes the JSON output of dotnet-project-licenses -i . -j -t -o licenses.json (https://github.com/tomchavakis/nuget-license)) Inheritance object PackageInfo Implements IEquatable<PackageInfo> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed record PackageInfo : IEquatable<PackageInfo> Constructors | Edit this page View Source PackageInfo() Constructor Declaration public PackageInfo() Properties | Edit this page View Source Authors Author names Declaration public required string[] Authors { get; init; } Property Value Type Description string[] | Edit this page View Source Copyright Copyright Declaration public required string Copyright { get; init; } Property Value Type Description string | Edit this page View Source Description Description Declaration public required string Description { get; init; } Property Value Type Description string | Edit this page View Source LicenseType License type Declaration public required string LicenseType { get; init; } Property Value Type Description string | Edit this page View Source LicenseUrl License URI Declaration public required Uri LicenseUrl { get; init; } Property Value Type Description Uri | Edit this page View Source PackageName Package name Declaration public required string PackageName { get; init; } Property Value Type Description string | Edit this page View Source PackageUri Package URI Declaration public required Uri PackageUri { get; init; } Property Value Type Description Uri | Edit this page View Source PackageVersion Package version Declaration public required Version PackageVersion { get; init; } Property Value Type Description Version | Edit this page View Source Repository Repository informations Declaration public required PackageInfo.RepositoryInfo Repository { get; init; } Property Value Type Description PackageInfo.RepositoryInfo Implements IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ParallelAsync.html": {
    "href": "api/wan24.Core.ParallelAsync.html",
    "title": "Class ParallelAsync | wan24-Core",
    "keywords": "Class ParallelAsync Asynchronous parallel execution Inheritance object ParallelAsync Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ParallelAsync Methods | Edit this page View Source FilterAsync<tInput, tOutput>(IAsyncEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) Enumerate parallel filtered items (in an unspecified order) Declaration public static IAsyncEnumerable<tOutput> FilterAsync<tInput, tOutput>(this IAsyncEnumerable<tInput> items, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>> itemFilter, int queueCapacity = 2147483647, int? threads = null, CancellationToken cancellationToken = default) Parameters Type Name Description IAsyncEnumerable<tInput> items Items Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>> itemFilter Filter function (returns false and a default to skip output, or true to yield the output) int queueCapacity Queue capacity int? threads Number of threads to use (null to use the number of available CPU cores) CancellationToken cancellationToken Cancellation token Returns Type Description IAsyncEnumerable<tOutput> Filtered items Type Parameters Name Description tInput Input type tOutput Output type | Edit this page View Source FilterAsync<tInput, tOutput>(IAsyncEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) Enumerate parallel filtered items (in an unspecified order) Declaration public static IAsyncEnumerable<tOutput> FilterAsync<tInput, tOutput>(this IAsyncEnumerable<tInput> items, Func<tInput, CancellationToken, (bool Yield, tOutput Output)> itemFilter, int queueCapacity = 2147483647, int? threads = null, CancellationToken cancellationToken = default) Parameters Type Name Description IAsyncEnumerable<tInput> items Items Func<tInput, CancellationToken, (bool Yield, tOutput Output)> itemFilter Filter function (returns false and a default to skip output, or true to yield the output) int queueCapacity Queue capacity int? threads Number of threads to use (null to use the number of available CPU cores) CancellationToken cancellationToken Cancellation token Returns Type Description IAsyncEnumerable<tOutput> Filtered items Type Parameters Name Description tInput Input type tOutput Output type | Edit this page View Source FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) Enumerate parallel filtered items (in an unspecified order) Declaration public static IAsyncEnumerable<tOutput> FilterAsync<tInput, tOutput>(this IEnumerable<tInput> items, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>> itemFilter, int queueCapacity = 2147483647, int? threads = null, CancellationToken cancellationToken = default) Parameters Type Name Description IEnumerable<tInput> items Items Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>> itemFilter Filter function (returns false and a default to skip output, or true to yield the output) int queueCapacity Queue capacity int? threads Number of threads to use (null to use the number of available CPU cores) CancellationToken cancellationToken Cancellation token Returns Type Description IAsyncEnumerable<tOutput> Filtered items Type Parameters Name Description tInput Input type tOutput Output type | Edit this page View Source FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) Enumerate parallel filtered items (in an unspecified order) Declaration public static IAsyncEnumerable<tOutput> FilterAsync<tInput, tOutput>(this IEnumerable<tInput> items, Func<tInput, CancellationToken, (bool Yield, tOutput Output)> itemFilter, int queueCapacity = 2147483647, int? threads = null, CancellationToken cancellationToken = default) Parameters Type Name Description IEnumerable<tInput> items Items Func<tInput, CancellationToken, (bool Yield, tOutput Output)> itemFilter Filter function (returns false and a default to skip output, or true to yield the output) int queueCapacity Queue capacity int? threads Number of threads to use (null to use the number of available CPU cores) CancellationToken cancellationToken Cancellation token Returns Type Description IAsyncEnumerable<tOutput> Filtered items Type Parameters Name Description tInput Input type tOutput Output type | Edit this page View Source Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) Enumerate parallel filtered items (in an unspecified order) Declaration public static IEnumerable<tOutput> Filter<tInput, tOutput>(this IEnumerable<tInput> items, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)> itemFilter, ParallelOptions? options = null, CancellationToken cancellationToken = default) Parameters Type Name Description IEnumerable<tInput> items Items Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)> itemFilter Filter function (returns false and a default to skip output, or true to yield the output) ParallelOptions options Parallel options CancellationToken cancellationToken Cancellation token Returns Type Description IEnumerable<tOutput> Filtered items Type Parameters Name Description tInput Input type tOutput Output type | Edit this page View Source ForEachAsync<T>(IAsyncEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) For each Declaration public static Task<int> ForEachAsync<T>(this IAsyncEnumerable<T> items, Func<T, CancellationToken, Task> itemHandler, int queueCapacity = 2147483647, int? threads = null, CancellationToken cancellationToken = default) Parameters Type Name Description IAsyncEnumerable<T> items Items Func<T, CancellationToken, Task> itemHandler Item handler int queueCapacity Queue capacity int? threads Number of threads to use (null to use the number of available CPU cores) CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Number of processed items Type Parameters Name Description T Item type | Edit this page View Source ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) For each Declaration public static Task<int> ForEachAsync<T>(this IEnumerable<T> items, Func<T, CancellationToken, Task> itemHandler, int queueCapacity = 2147483647, int? threads = null, CancellationToken cancellationToken = default) Parameters Type Name Description IEnumerable<T> items Items Func<T, CancellationToken, Task> itemHandler Item handler int queueCapacity Queue capacity int? threads Number of threads to use (null to use the number of available CPU cores) CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Number of processed items Type Parameters Name Description T Item type"
  },
  "api/wan24.Core.ParallelItemQueueWorkerBase-1.html": {
    "href": "api/wan24.Core.ParallelItemQueueWorkerBase-1.html",
    "title": "Class ParallelItemQueueWorkerBase<T> | wan24-Core",
    "keywords": "Class ParallelItemQueueWorkerBase<T> Base class for a parallel item queue worker Inheritance object DisposableBase HostedServiceBase QueueWorker ParallelQueueWorker ParallelItemQueueWorkerBase<T> Implements IWillDispose IParallelQueueWorker IItemQueueWorker<T> IQueueWorker IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members ParallelQueueWorker.Busy ParallelQueueWorker.Processing ParallelQueueWorker.WorkerSync ParallelQueueWorker.ProcessCount ParallelQueueWorker.Threads ParallelQueueWorker.State ParallelQueueWorker.WaitBoring(TimeSpan) ParallelQueueWorker.WaitBoringAsync(TimeSpan) ParallelQueueWorker.WaitBoring(CancellationToken) ParallelQueueWorker.WaitBoringAsync(CancellationToken) ParallelQueueWorker.AfterStopAsync(CancellationToken) ParallelQueueWorker.WorkerAsync() ParallelQueueWorker.Process(QueueWorker.Task_Delegate, CancellationToken) ParallelQueueWorker.Dispose(bool) ParallelQueueWorker.DisposeCore() QueueWorker.Queue QueueWorker.GUID QueueWorker.Queued QueueWorker.EnqueueAsync(QueueWorker.Task_Delegate, CancellationToken) QueueWorker.TryEnqueue(QueueWorker.Task_Delegate, CancellationToken) QueueWorker.EnqueueRangeAsync(IEnumerable<QueueWorker.Task_Delegate>, CancellationToken) QueueWorker.EnqueueRangeAsync(IAsyncEnumerable<QueueWorker.Task_Delegate>, CancellationToken) HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.AfterStartAsync(CancellationToken) HostedServiceBase.BeforeStopAsync(CancellationToken) HostedServiceBase.StoppingAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.AfterPauseAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.AfterResumeAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.OnException HostedServiceBase.RaiseOnException() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class ParallelItemQueueWorkerBase<T> : ParallelQueueWorker, IWillDispose, IParallelQueueWorker, IItemQueueWorker<T>, IQueueWorker, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Type Parameters Name Description T Item type Constructors | Edit this page View Source ParallelItemQueueWorkerBase(in int, in int) Constructor Declaration protected ParallelItemQueueWorkerBase(in int capacity, in int threads) Parameters Type Name Description int capacity Capacity int threads Number of threads Methods | Edit this page View Source EnqueueAsync(T, CancellationToken) Enqueue an item to process Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public ValueTask EnqueueAsync(T item, CancellationToken cancellationToken = default) Parameters Type Name Description T item Item CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask | Edit this page View Source EnqueueRangeAsync(IAsyncEnumerable<T>, CancellationToken) Enqueue many items for processing Declaration public virtual ValueTask<int> EnqueueRangeAsync(IAsyncEnumerable<T> items, CancellationToken cancellationToken = default) Parameters Type Name Description IAsyncEnumerable<T> items Items CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<int> Number of enqueued items | Edit this page View Source EnqueueRangeAsync(IEnumerable<T>, CancellationToken) Enqueue many items for processing Declaration public virtual ValueTask<int> EnqueueRangeAsync(IEnumerable<T> items, CancellationToken cancellationToken = default) Parameters Type Name Description IEnumerable<T> items Items CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<int> Number of enqueued items | Edit this page View Source ProcessItem(T, CancellationToken) Process one item Declaration protected abstract Task ProcessItem(T item, CancellationToken cancellationToken) Parameters Type Name Description T item Item to process CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source TryEnqueue(T) Try enqueueing an item to process Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public bool TryEnqueue(T item) Parameters Type Name Description T item Item Returns Type Description bool Enqueued? Implements IWillDispose IParallelQueueWorker IItemQueueWorker<T> IQueueWorker IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ParallelQueueWorker.html": {
    "href": "api/wan24.Core.ParallelQueueWorker.html",
    "title": "Class ParallelQueueWorker | wan24-Core",
    "keywords": "Class ParallelQueueWorker Parallel queue worker Inheritance object DisposableBase HostedServiceBase QueueWorker ParallelQueueWorker ParallelItemQueueWorkerBase<T> Implements IWillDispose IParallelQueueWorker IQueueWorker IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members QueueWorker.Queue QueueWorker.GUID QueueWorker.Queued QueueWorker.EnqueueAsync(QueueWorker.Task_Delegate, CancellationToken) QueueWorker.TryEnqueue(QueueWorker.Task_Delegate, CancellationToken) QueueWorker.EnqueueRangeAsync(IEnumerable<QueueWorker.Task_Delegate>, CancellationToken) QueueWorker.EnqueueRangeAsync(IAsyncEnumerable<QueueWorker.Task_Delegate>, CancellationToken) HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.AfterStartAsync(CancellationToken) HostedServiceBase.BeforeStopAsync(CancellationToken) HostedServiceBase.StoppingAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.AfterPauseAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.AfterResumeAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.OnException HostedServiceBase.RaiseOnException() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ParallelQueueWorker : QueueWorker, IWillDispose, IParallelQueueWorker, IQueueWorker, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source ParallelQueueWorker(in int, in int) Constructor Declaration public ParallelQueueWorker(in int capacity, in int threads) Parameters Type Name Description int capacity Capacity int threads Number of threads Fields | Edit this page View Source Busy Busy event (raised when not busy) Declaration protected readonly ResetEvent Busy Field Value Type Description ResetEvent | Edit this page View Source ProcessCount Processing workers Declaration protected int ProcessCount Field Value Type Description int | Edit this page View Source Processing Processing event (raised when there's space for more processes) Declaration protected readonly ResetEvent Processing Field Value Type Description ResetEvent | Edit this page View Source WorkerSync Thread synchronization Declaration protected readonly SemaphoreSync WorkerSync Field Value Type Description SemaphoreSync Properties | Edit this page View Source State Status information Declaration public override IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Overrides QueueWorker.State | Edit this page View Source Threads Number of threads Declaration public int Threads { get; } Property Value Type Description int Methods | Edit this page View Source AfterStopAsync(CancellationToken) After stopped Declaration protected override Task AfterStopAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.AfterStopAsync(CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides HostedServiceBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides HostedServiceBase.DisposeCore() | Edit this page View Source Process(Task_Delegate, CancellationToken) Process a task Declaration protected Task Process(QueueWorker.Task_Delegate task, CancellationToken cancellationToken) Parameters Type Name Description QueueWorker.Task_Delegate task Task CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source WaitBoring(CancellationToken) Wait until all queued work was done Declaration public bool WaitBoring(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description bool All done? | Edit this page View Source WaitBoring(TimeSpan) Wait until all queued work was done Declaration public bool WaitBoring(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Timeout Returns Type Description bool All done? | Edit this page View Source WaitBoringAsync(CancellationToken) Wait until all queued work was done Declaration public Task<bool> WaitBoringAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> All done? | Edit this page View Source WaitBoringAsync(TimeSpan) Wait until all queued work was done Declaration public Task<bool> WaitBoringAsync(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Timeout Returns Type Description Task<bool> All done? | Edit this page View Source WorkerAsync() Service worker Declaration protected override Task WorkerAsync() Returns Type Description Task Overrides QueueWorker.WorkerAsync() Implements IWillDispose IParallelQueueWorker IQueueWorker IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ParallelTransaction.Action_Delegate.html": {
    "href": "api/wan24.Core.ParallelTransaction.Action_Delegate.html",
    "title": "Delegate ParallelTransaction.Action_Delegate | wan24-Core",
    "keywords": "Delegate ParallelTransaction.Action_Delegate Delegate for an action Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task ParallelTransaction.Action_Delegate(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Delegate for an action Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ParallelTransaction.Done_Delegate.html": {
    "href": "api/wan24.Core.ParallelTransaction.Done_Delegate.html",
    "title": "Delegate ParallelTransaction.Done_Delegate | wan24-Core",
    "keywords": "Delegate ParallelTransaction.Done_Delegate Delegate for an OnDone handler Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void ParallelTransaction.Done_Delegate(ParallelTransaction transaction, EventArgs e) Parameters Type Name Description ParallelTransaction transaction Transaction EventArgs e Arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ParallelTransaction.ErrorEventArgs.html": {
    "href": "api/wan24.Core.ParallelTransaction.ErrorEventArgs.html",
    "title": "Class ParallelTransaction.ErrorEventArgs | wan24-Core",
    "keywords": "Class ParallelTransaction.ErrorEventArgs Error event arguments Inheritance object EventArgs ParallelTransaction.ErrorEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class ParallelTransaction.ErrorEventArgs : EventArgs Remarks Constructor Constructors | Edit this page View Source ErrorEventArgs(in int, in Exception) Error event arguments Declaration public ErrorEventArgs(in int action, in Exception ex) Parameters Type Name Description int action Action index Exception ex Exception Remarks Constructor Properties | Edit this page View Source Action Action index Declaration public int Action { get; } Property Value Type Description int | Edit this page View Source Exception Exception Declaration public Exception Exception { get; } Property Value Type Description Exception Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ParallelTransaction.Error_Delegate.html": {
    "href": "api/wan24.Core.ParallelTransaction.Error_Delegate.html",
    "title": "Delegate ParallelTransaction.Error_Delegate | wan24-Core",
    "keywords": "Delegate ParallelTransaction.Error_Delegate Delegate for an OnError handler Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void ParallelTransaction.Error_Delegate(ParallelTransaction transaction, ParallelTransaction.ErrorEventArgs e) Parameters Type Name Description ParallelTransaction transaction Transaction ParallelTransaction.ErrorEventArgs e Arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ParallelTransaction.ReturningAction_Delegate.html": {
    "href": "api/wan24.Core.ParallelTransaction.ReturningAction_Delegate.html",
    "title": "Delegate ParallelTransaction.ReturningAction_Delegate | wan24-Core",
    "keywords": "Delegate ParallelTransaction.ReturningAction_Delegate Delegate for an action which returns a value Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task<object?> ParallelTransaction.ReturningAction_Delegate(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Return value Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ParallelTransaction.Rollback_Delegate.html": {
    "href": "api/wan24.Core.ParallelTransaction.Rollback_Delegate.html",
    "title": "Delegate ParallelTransaction.Rollback_Delegate | wan24-Core",
    "keywords": "Delegate ParallelTransaction.Rollback_Delegate Delegate for a rollback action Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task ParallelTransaction.Rollback_Delegate(ParallelTransaction transaction, object? returnValue, CancellationToken cancellationToken) Parameters Type Name Description ParallelTransaction transaction Transaction object returnValue Action return value CancellationToken cancellationToken Cancellation token Returns Type Description Task Delegate for a rollback action Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ParallelTransaction.RunningActionResult.html": {
    "href": "api/wan24.Core.ParallelTransaction.RunningActionResult.html",
    "title": "Class ParallelTransaction.RunningActionResult | wan24-Core",
    "keywords": "Class ParallelTransaction.RunningActionResult Running action result Inheritance object ParallelTransaction.RunningActionResult Implements IEquatable<ParallelTransaction.RunningActionResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed record ParallelTransaction.RunningActionResult : IEquatable<ParallelTransaction.RunningActionResult> Constructors | Edit this page View Source RunningActionResult(in int) Constructor Declaration public RunningActionResult(in int index) Parameters Type Name Description int index Action index Properties | Edit this page View Source Exception Exception Declaration public Exception? Exception { get; } Property Value Type Description Exception | Edit this page View Source Index Action index Declaration public int Index { get; } Property Value Type Description int | Edit this page View Source ReturnValue Return value Declaration public object? ReturnValue { get; } Property Value Type Description object | Edit this page View Source Task Action task Declaration public Task<object?> Task { get; } Property Value Type Description Task<object> Implements IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ParallelTransaction.html": {
    "href": "api/wan24.Core.ParallelTransaction.html",
    "title": "Class ParallelTransaction | wan24-Core",
    "keywords": "Class ParallelTransaction Parallel transaction Inheritance object DisposableBase ParallelTransaction Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class ParallelTransaction : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source ParallelTransaction() Constructor Declaration public ParallelTransaction() Properties | Edit this page View Source ActionCount Number of executed actions since the last commit Declaration public int ActionCount { get; } Property Value Type Description int | Edit this page View Source CancelOnError Cancel running actions on error? Declaration public bool CancelOnError { get; set; } Property Value Type Description bool | Edit this page View Source CancelToken Cancellation token (canceled on error) Declaration public CancellationToken CancelToken { get; } Property Value Type Description CancellationToken | Edit this page View Source Exceptions Exceptions Declaration public IReadOnlyDictionary<int, Exception?> Exceptions { get; } Property Value Type Description IReadOnlyDictionary<int, Exception> | Edit this page View Source IsCommitted Is committed? Declaration public bool IsCommitted { get; } Property Value Type Description bool | Edit this page View Source IsExceptional Is exceptional? Declaration public bool IsExceptional { get; } Property Value Type Description bool | Edit this page View Source this[int] Get an action task Declaration public Task<object?> this[int index] { get; } Parameters Type Name Description int index Action index Property Value Type Description Task<object> Task | Edit this page View Source Name Name Declaration public string? Name { get; set; } Property Value Type Description string | Edit this page View Source ReturnValues Return values Declaration public IReadOnlyDictionary<int, object?> ReturnValues { get; } Property Value Type Description IReadOnlyDictionary<int, object> | Edit this page View Source RunningActions Number of running actions Declaration public int RunningActions { get; } Property Value Type Description int | Edit this page View Source Tag Any tagged object Declaration public object? Tag { get; set; } Property Value Type Description object | Edit this page View Source Tasks Running action tasks Declaration public IReadOnlyDictionary<int, Task<object?>> Tasks { get; } Property Value Type Description IReadOnlyDictionary<int, Task<object>> Methods | Edit this page View Source Append(ParallelTransaction, in CancellationToken) Append a transaction Declaration public ParallelTransaction.RunningActionResult Append(ParallelTransaction transaction, in CancellationToken cancellationToken = default) Parameters Type Name Description ParallelTransaction transaction Transaction (won't be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description ParallelTransaction.RunningActionResult Running action result | Edit this page View Source Append(Transaction, in CancellationToken) Append a transaction Declaration public ParallelTransaction.RunningActionResult Append(Transaction transaction, in CancellationToken cancellationToken = default) Parameters Type Name Description Transaction transaction Transaction (won't be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description ParallelTransaction.RunningActionResult Running action result | Edit this page View Source AppendAsync(ParallelTransaction, CancellationToken) Append a transaction Declaration public Task<ParallelTransaction.RunningActionResult> AppendAsync(ParallelTransaction transaction, CancellationToken cancellationToken = default) Parameters Type Name Description ParallelTransaction transaction Transaction (won't be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<ParallelTransaction.RunningActionResult> Running action result | Edit this page View Source AppendAsync(Transaction, CancellationToken) Append a transaction Declaration public Task<ParallelTransaction.RunningActionResult> AppendAsync(Transaction transaction, CancellationToken cancellationToken = default) Parameters Type Name Description Transaction transaction Transaction (won't be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task<ParallelTransaction.RunningActionResult> Running action result | Edit this page View Source CancelAsync(CancellationToken) Cancel all running actions Declaration public Task CancelAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source Commit(in CancellationToken) Commit all actions since the last commit Declaration public void Commit(in CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Exceptions Type Condition InvalidOperationException Actions are running, or have been canceled, or had exceptions | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source Execute(in Action_Delegate, in Rollback_Delegate, in CancellationToken) Execute an action Declaration public ParallelTransaction.RunningActionResult Execute(in ParallelTransaction.Action_Delegate action, in ParallelTransaction.Rollback_Delegate rollback, in CancellationToken cancellationToken = default) Parameters Type Name Description ParallelTransaction.Action_Delegate action Action ParallelTransaction.Rollback_Delegate rollback Rollback CancellationToken cancellationToken Cancellation token Returns Type Description ParallelTransaction.RunningActionResult Running action result Exceptions Type Condition InvalidOperationException Previous actions had exceptions | Edit this page View Source Execute(in ReturningAction_Delegate, in Rollback_Delegate, in CancellationToken) Execute an action Declaration public ParallelTransaction.RunningActionResult Execute(in ParallelTransaction.ReturningAction_Delegate action, in ParallelTransaction.Rollback_Delegate rollback, in CancellationToken cancellationToken = default) Parameters Type Name Description ParallelTransaction.ReturningAction_Delegate action Action ParallelTransaction.Rollback_Delegate rollback Rollback CancellationToken cancellationToken Cancellation token Returns Type Description ParallelTransaction.RunningActionResult Running action result Exceptions Type Condition InvalidOperationException Previous actions had exceptions | Edit this page View Source ExecuteAsync(Action_Delegate, Rollback_Delegate, CancellationToken) Execute an action Declaration public Task<ParallelTransaction.RunningActionResult> ExecuteAsync(ParallelTransaction.Action_Delegate action, ParallelTransaction.Rollback_Delegate rollback, CancellationToken cancellationToken = default) Parameters Type Name Description ParallelTransaction.Action_Delegate action Action ParallelTransaction.Rollback_Delegate rollback Rollback CancellationToken cancellationToken Cancellation token Returns Type Description Task<ParallelTransaction.RunningActionResult> Running action result Exceptions Type Condition InvalidOperationException Previous actions had exceptions | Edit this page View Source ExecuteAsync(ReturningAction_Delegate, Rollback_Delegate, CancellationToken) Execute an action Declaration public Task<ParallelTransaction.RunningActionResult> ExecuteAsync(ParallelTransaction.ReturningAction_Delegate action, ParallelTransaction.Rollback_Delegate rollback, CancellationToken cancellationToken = default) Parameters Type Name Description ParallelTransaction.ReturningAction_Delegate action Action ParallelTransaction.Rollback_Delegate rollback Rollback CancellationToken cancellationToken Cancellation token Returns Type Description Task<ParallelTransaction.RunningActionResult> Running action result Exceptions Type Condition InvalidOperationException Previous actions had exceptions | Edit this page View Source RollbackAsync(CancellationToken) Cancel all running actions and perform a rollback Declaration public Task RollbackAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string? ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() | Edit this page View Source WaitDoneAsync(bool, CancellationToken) Wait all running actions to be done Declaration public Task WaitDoneAsync(bool throwOnError = true, CancellationToken cancellationToken = default) Parameters Type Name Description bool throwOnError Throw an exception on error? CancellationToken cancellationToken Cancellation token Returns Type Description Task Events | Edit this page View Source OnDone Raised when done Declaration public event ParallelTransaction.Done_Delegate? OnDone Event Type Type Description ParallelTransaction.Done_Delegate | Edit this page View Source OnError Raised on error Declaration public event ParallelTransaction.Error_Delegate? OnError Event Type Type Description ParallelTransaction.Error_Delegate Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.PartialStream-1.html": {
    "href": "api/wan24.Core.PartialStream-1.html",
    "title": "Class PartialStream<T> | wan24-Core",
    "keywords": "Class PartialStream<T> Partial stream Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> PartialStream<T> PartialStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.LeaveOpen WrapperStream<T>.State WrapperStream<T>.CanTimeout WrapperStream<T>.ReadTimeout WrapperStream<T>.WriteTimeout WrapperStream<T>.Flush() WrapperStream<T>.FlushAsync(CancellationToken) WrapperStream<T>.CopyTo(Stream, int) WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndRead(IAsyncResult) WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndWrite(IAsyncResult) WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.Close() WrapperStream<T>.Dispose(bool) WrapperStream<T>.DisposeCore() WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class PartialStream<T> : WrapperStream<T>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Wrapped stream type Constructors | Edit this page View Source PartialStream(in T, in long, in bool) Constructor Declaration public PartialStream(in T baseStream, in long length, in bool leaveOpen = false) Parameters Type Name Description T baseStream Base stream long length Length in bytes bool leaveOpen Leave the base stream open when disposing? Fields | Edit this page View Source Offset Base stream byte offset Declaration protected readonly long Offset Field Value Type Description long | Edit this page View Source _Length Length in bytes Declaration protected readonly long _Length Field Value Type Description long Properties | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override sealed bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides WrapperStream<T>.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override sealed bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides WrapperStream<T>.CanSeek | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override sealed bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides WrapperStream<T>.CanWrite | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides WrapperStream<T>.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides WrapperStream<T>.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Methods | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides WrapperStream<T>.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides WrapperStream<T>.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides WrapperStream<T>.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides WrapperStream<T>.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override sealed void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides WrapperStream<T>.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override sealed void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides WrapperStream<T>.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override sealed void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides WrapperStream<T>.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override sealed Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override sealed ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override sealed void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides WrapperStream<T>.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.PartialStream.html": {
    "href": "api/wan24.Core.PartialStream.html",
    "title": "Class PartialStream | wan24-Core",
    "keywords": "Class PartialStream Partial stream Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> PartialStream<Stream> PartialStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members PartialStream<Stream>._Length PartialStream<Stream>.Offset PartialStream<Stream>.CanRead PartialStream<Stream>.CanSeek PartialStream<Stream>.CanWrite PartialStream<Stream>.Length PartialStream<Stream>.Position PartialStream<Stream>.Read(byte[], int, int) PartialStream<Stream>.Read(Span<byte>) PartialStream<Stream>.ReadByte() PartialStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) PartialStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) PartialStream<Stream>.Seek(long, SeekOrigin) PartialStream<Stream>.SetLength(long) PartialStream<Stream>.Write(byte[], int, int) PartialStream<Stream>.Write(ReadOnlySpan<byte>) PartialStream<Stream>.WriteByte(byte) PartialStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) PartialStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.State WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.Flush() WrapperStream<Stream>.FlushAsync(CancellationToken) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.Dispose(bool) WrapperStream<Stream>.DisposeCore() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class PartialStream : PartialStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source PartialStream(in Stream, in long, in bool) Partial stream Declaration public PartialStream(in Stream baseStream, in long length, in bool leaveOpen = false) Parameters Type Name Description Stream baseStream Base stream long length Length in bytes bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.PathMatching.html": {
    "href": "api/wan24.Core.PathMatching.html",
    "title": "Class PathMatching | wan24-Core",
    "keywords": "Class PathMatching Path matching helper (path separator will be normalized to /) Inheritance object PathMatching Implements IEqualityComparer<string> IEquatable<PathMatching> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public record PathMatching : IEqualityComparer<string>, IEquatable<PathMatching> Constructors | Edit this page View Source PathMatching(in string[]) Constructor Declaration public PathMatching(in string[] patterns) Parameters Type Name Description string[] patterns Patterns (absolute or partial path or file-/foldername only (\"*\" (any or none) and \"+\" (one or many) may be used as wildcard); case insensitive) Fields | Edit this page View Source AnyMatchings If there are any matchings Declaration protected readonly bool AnyMatchings Field Value Type Description bool | Edit this page View Source Expression Regular expression Declaration protected readonly Regex? Expression Field Value Type Description Regex | Edit this page View Source Names Names Declaration protected readonly FrozenSet<string>? Names Field Value Type Description FrozenSet<string> | Edit this page View Source Partials Partials Declaration protected readonly FrozenSet<string>? Partials Field Value Type Description FrozenSet<string> | Edit this page View Source Paths Paths Declaration protected readonly FrozenSet<string>? Paths Field Value Type Description FrozenSet<string> | Edit this page View Source RxOneOrMany Regular expression to match a one or many wildcard ($1 is the prefix, $2 the postfix) Declaration protected static readonly Regex RxOneOrMany Field Value Type Description Regex Properties | Edit this page View Source AllowWildcards Allow wildcards usage? Declaration public bool AllowWildcards { get; set; } Property Value Type Description bool | Edit this page View Source MatchFileName Match a filename in any folder? Declaration public bool MatchFileName { get; set; } Property Value Type Description bool | Edit this page View Source MatchPartialPaths Match partial paths? Declaration public bool MatchPartialPaths { get; set; } Property Value Type Description bool Methods | Edit this page View Source Equals(string?, string?) Compare two strings Declaration protected virtual bool Equals(string? x, string? y) Parameters Type Name Description string x X string y Y Returns Type Description bool If the strings are equal (ignoring the case) | Edit this page View Source GetHashCode(string) Get the hash code for a string (case ignoring) Declaration protected virtual int GetHashCode(string obj) Parameters Type Name Description string obj String Returns Type Description int Hash code | Edit this page View Source IsMatch(string) Determine if a path is matched Declaration public virtual bool IsMatch(string path) Parameters Type Name Description string path Path Returns Type Description bool If matched Implements IEqualityComparer<T> IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.PausableStream-1.html": {
    "href": "api/wan24.Core.PausableStream-1.html",
    "title": "Class PausableStream<T> | wan24-Core",
    "keywords": "Class PausableStream<T> Pausable stream wrapper (will pause reading/writing) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> PausableStream<T> PausableStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.LeaveOpen WrapperStream<T>.CanRead WrapperStream<T>.CanSeek WrapperStream<T>.CanWrite WrapperStream<T>.CanTimeout WrapperStream<T>.Length WrapperStream<T>.Position WrapperStream<T>.ReadTimeout WrapperStream<T>.WriteTimeout WrapperStream<T>.Flush() WrapperStream<T>.FlushAsync(CancellationToken) WrapperStream<T>.Seek(long, SeekOrigin) WrapperStream<T>.SetLength(long) WrapperStream<T>.CopyTo(Stream, int) WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndRead(IAsyncResult) WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndWrite(IAsyncResult) WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.Close() WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class PausableStream<T> : WrapperStream<T>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Wrapped stream type Remarks Constructor Constructors | Edit this page View Source PausableStream(in T, in bool) Pausable stream wrapper (will pause reading/writing) Declaration public PausableStream(in T baseStream, in bool leaveOpen = false) Parameters Type Name Description T baseStream Base stream bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Fields | Edit this page View Source _Pause Pause event (raised when not paused) Declaration protected readonly ResetEvent _Pause Field Value Type Description ResetEvent Properties | Edit this page View Source Pause Pause Declaration public bool Pause { get; set; } Property Value Type Description bool | Edit this page View Source State Status information Declaration public override IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Overrides WrapperStream<T>.State Methods | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides WrapperStream<T>.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override Task DisposeCore() Returns Type Description Task Overrides WrapperStream<T>.DisposeCore() | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides WrapperStream<T>.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides WrapperStream<T>.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides WrapperStream<T>.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides WrapperStream<T>.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides WrapperStream<T>.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides WrapperStream<T>.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.PausableStream.html": {
    "href": "api/wan24.Core.PausableStream.html",
    "title": "Class PausableStream | wan24-Core",
    "keywords": "Class PausableStream Pausable stream wrapper (will pause reading/writing) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> PausableStream<Stream> PausableStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members PausableStream<Stream>._Pause PausableStream<Stream>.Pause PausableStream<Stream>.State PausableStream<Stream>.Read(byte[], int, int) PausableStream<Stream>.Read(Span<byte>) PausableStream<Stream>.ReadByte() PausableStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) PausableStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) PausableStream<Stream>.Write(byte[], int, int) PausableStream<Stream>.Write(ReadOnlySpan<byte>) PausableStream<Stream>.WriteByte(byte) PausableStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) PausableStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) PausableStream<Stream>.Dispose(bool) PausableStream<Stream>.DisposeCore() WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.CanRead WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.Position WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.Flush() WrapperStream<Stream>.FlushAsync(CancellationToken) WrapperStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>.SetLength(long) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class PausableStream : PausableStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source PausableStream(in Stream, in bool) Pausable stream wrapper (will pause reading/writing) Declaration public PausableStream(in Stream baseStream, in bool leaveOpen = false) Parameters Type Name Description Stream baseStream Base stream bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.PinnedArray-1.html": {
    "href": "api/wan24.Core.PinnedArray-1.html",
    "title": "Struct PinnedArray<T> | wan24-Core",
    "keywords": "Struct PinnedArray<T> Pinned array Implements IDisposable IList<T> ICollection<T> IEnumerable<T> IEnumerable Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public readonly struct PinnedArray<T> : IDisposable, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable where T : struct Type Parameters Name Description T Pointer type Constructors | Edit this page View Source PinnedArray(in T[]) Constructor Declaration public PinnedArray(in T[] array) Parameters Type Name Description T[] array Array Fields | Edit this page View Source Array Array Declaration public readonly T[] Array Field Value Type Description T[] | Edit this page View Source ArrayPtr Array pointer Declaration public readonly T* ArrayPtr Field Value Type Description T* Properties | Edit this page View Source Count Gets the number of elements contained in the ICollection<T>. Declaration public int Count { get; } Property Value Type Description int The number of elements contained in the ICollection<T>. | Edit this page View Source IsDisposed Is disposed? Declaration public bool IsDisposed { get; } Property Value Type Description bool | Edit this page View Source IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool true if the ICollection<T> is read-only; otherwise, false. | Edit this page View Source this[int] Get/set an array element Declaration public T this[int offset] { get; set; } Parameters Type Name Description int offset Offset Property Value Type Description T Element | Edit this page View Source Pointer Array pointer Declaration public nint Pointer { get; } Property Value Type Description nint Methods | Edit this page View Source Add(T) Adds an item to the ICollection<T>. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public void Add(T item) Parameters Type Name Description T item The object to add to the ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Clear() Removes all items from the ICollection<T>. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public void Clear() Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Contains(T) Determines whether the ICollection<T> contains a specific value. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public bool Contains(T item) Parameters Type Name Description T item The object to locate in the ICollection<T>. Returns Type Description bool true if item is found in the ICollection<T>; otherwise, false. | Edit this page View Source CopyTo(T[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source IndexOf(T) Determines the index of a specific item in the IList<T>. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public int IndexOf(T item) Parameters Type Name Description T item The object to locate in the IList<T>. Returns Type Description int The index of item if found in the list; otherwise, -1. | Edit this page View Source Insert(int, T) Inserts an item to the IList<T> at the specified index. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public void Insert(int index, T item) Parameters Type Name Description int index The zero-based index at which item should be inserted. T item The object to insert into the IList<T>. Exceptions Type Condition ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. | Edit this page View Source Remove(T) Removes the first occurrence of a specific object from the ICollection<T>. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public bool Remove(T item) Parameters Type Name Description T item The object to remove from the ICollection<T>. Returns Type Description bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source RemoveAt(int) Removes the IList<T> item at the specified index. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public void RemoveAt(int index) Parameters Type Name Description int index The zero-based index of the item to remove. Exceptions Type Condition ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. Operators | Edit this page View Source operator ==(in PinnedArray<T>, in PinnedArray<T>) Equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in PinnedArray<T> a, in PinnedArray<T> b) Parameters Type Name Description PinnedArray<T> a A PinnedArray<T> b B Returns Type Description bool Are equal? | Edit this page View Source implicit operator int(in PinnedArray<T>) Cast as length Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in PinnedArray<T> pin) Parameters Type Name Description PinnedArray<T> pin Pin Returns Type Description int | Edit this page View Source implicit operator long(in PinnedArray<T>) Cast as length Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator long(in PinnedArray<T> pin) Parameters Type Name Description PinnedArray<T> pin Pin Returns Type Description long | Edit this page View Source implicit operator nint(in PinnedArray<T>) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator nint(in PinnedArray<T> pin) Parameters Type Name Description PinnedArray<T> pin Pin Returns Type Description nint | Edit this page View Source implicit operator T*(in PinnedArray<T>) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T*(in PinnedArray<T> pin) Parameters Type Name Description PinnedArray<T> pin Pin Returns Type Description T* | Edit this page View Source implicit operator T[](in PinnedArray<T>) Cast as array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T[](in PinnedArray<T> pin) Parameters Type Name Description PinnedArray<T> pin Pin Returns Type Description T[] | Edit this page View Source operator !=(in PinnedArray<T>, in PinnedArray<T>) Not equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in PinnedArray<T> a, in PinnedArray<T> b) Parameters Type Name Description PinnedArray<T> a A PinnedArray<T> b B Returns Type Description bool Are not equal? Implements IDisposable IList<T> ICollection<T> IEnumerable<T> IEnumerable Extension Methods CollectionExtensions.AddRangeAsync<T>(ICollection<T>, IAsyncEnumerable<T>, CancellationToken) CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.AddRange<T>(ICollection<T>, params T[]) ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.PinnedArrayRef-1.html": {
    "href": "api/wan24.Core.PinnedArrayRef-1.html",
    "title": "Struct PinnedArrayRef<T> | wan24-Core",
    "keywords": "Struct PinnedArrayRef<T> Pinned array (not thread-safe) Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public readonly ref struct PinnedArrayRef<T> where T : struct Type Parameters Name Description T Pointer type Constructors | Edit this page View Source PinnedArrayRef(in T[]) Constructor Declaration public PinnedArrayRef(in T[] array) Parameters Type Name Description T[] array Array Fields | Edit this page View Source Array Array Declaration public readonly T[] Array Field Value Type Description T[] | Edit this page View Source ArrayPtr Array pointer Declaration public readonly T* ArrayPtr Field Value Type Description T* Properties | Edit this page View Source IsDisposed Is disposed? Declaration public bool IsDisposed { get; } Property Value Type Description bool | Edit this page View Source this[int] Get/set an array element Declaration public T this[int offset] { get; set; } Parameters Type Name Description int offset Offset Property Value Type Description T Element | Edit this page View Source Pointer Array pointer Declaration public nint Pointer { get; } Property Value Type Description nint Methods | Edit this page View Source Dispose() Dispose Declaration public void Dispose() | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Edit this page View Source operator ==(in PinnedArrayRef<T>, in PinnedArrayRef<T>) Equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in PinnedArrayRef<T> a, in PinnedArrayRef<T> b) Parameters Type Name Description PinnedArrayRef<T> a A PinnedArrayRef<T> b B Returns Type Description bool Are equal? | Edit this page View Source implicit operator int(in PinnedArrayRef<T>) Cast as length Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in PinnedArrayRef<T> pin) Parameters Type Name Description PinnedArrayRef<T> pin Pin Returns Type Description int | Edit this page View Source implicit operator long(in PinnedArrayRef<T>) Cast as length Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator long(in PinnedArrayRef<T> pin) Parameters Type Name Description PinnedArrayRef<T> pin Pin Returns Type Description long | Edit this page View Source implicit operator nint(in PinnedArrayRef<T>) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator nint(in PinnedArrayRef<T> pin) Parameters Type Name Description PinnedArrayRef<T> pin Pin Returns Type Description nint | Edit this page View Source implicit operator T*(in PinnedArrayRef<T>) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T*(in PinnedArrayRef<T> pin) Parameters Type Name Description PinnedArrayRef<T> pin Pin Returns Type Description T* | Edit this page View Source implicit operator T[](in PinnedArrayRef<T>) Cast as array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T[](in PinnedArrayRef<T> pin) Parameters Type Name Description PinnedArrayRef<T> pin Pin Returns Type Description T[] | Edit this page View Source operator !=(in PinnedArrayRef<T>, in PinnedArrayRef<T>) Not equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in PinnedArrayRef<T> a, in PinnedArrayRef<T> b) Parameters Type Name Description PinnedArrayRef<T> a A PinnedArrayRef<T> b B Returns Type Description bool Are not equal?"
  },
  "api/wan24.Core.PluralTranslationTerms.html": {
    "href": "api/wan24.Core.PluralTranslationTerms.html",
    "title": "Class PluralTranslationTerms | wan24-Core",
    "keywords": "Class PluralTranslationTerms Simple dictionary based translation with plural support Inheritance object PluralTranslationTerms Implements ITranslationTerms IReadOnlyDictionary<string, string> IReadOnlyCollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IStringLocalizer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class PluralTranslationTerms : ITranslationTerms, IReadOnlyDictionary<string, string>, IReadOnlyCollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IStringLocalizer Remarks Constructor Constructors | Edit this page View Source PluralTranslationTerms(IReadOnlyDictionary<string, string[]>) Simple dictionary based translation with plural support Declaration public PluralTranslationTerms(IReadOnlyDictionary<string, string[]> terms) Parameters Type Name Description IReadOnlyDictionary<string, string[]> terms Terms Remarks Constructor Properties | Edit this page View Source Count Gets the number of elements in the collection. Declaration public virtual int Count { get; } Property Value Type Description int The number of elements in the collection. | Edit this page View Source this[string, int, string[]] Get a term Declaration public virtual string this[in string key, in int count, params string[] values] { get; } Parameters Type Name Description string key Term key int count Count (for plural translation) string[] values Parser values Property Value Type Description string Term Exceptions Type Condition NotSupportedException Plural terms are not supported | Edit this page View Source this[string, string[]] Get a term Declaration public virtual string this[in string key, params string[] values] { get; } Parameters Type Name Description string key Term key string[] values Parser values Property Value Type Description string Term | Edit this page View Source Keys Gets an enumerable collection that contains the keys in the read-only dictionary. Declaration public virtual IEnumerable<string> Keys { get; } Property Value Type Description IEnumerable<string> An enumerable collection that contains the keys in the read-only dictionary. | Edit this page View Source PluralSupport Does support plural? Declaration public virtual bool PluralSupport { get; } Property Value Type Description bool | Edit this page View Source Terms Terms Declaration public virtual FrozenDictionary<string, string[]> Terms { get; } Property Value Type Description FrozenDictionary<string, string[]> | Edit this page View Source Values Gets an enumerable collection that contains the values in the read-only dictionary. Declaration public virtual IEnumerable<string> Values { get; } Property Value Type Description IEnumerable<string> An enumerable collection that contains the values in the read-only dictionary. Methods | Edit this page View Source ContainsKey(string) Determines whether the read-only dictionary contains an element that has the specified key. Declaration public virtual bool ContainsKey(string key) Parameters Type Name Description string key The key to locate. Returns Type Description bool true if the read-only dictionary contains an element that has the specified key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<KeyValuePair<string, string>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<string, string>> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetTerm(in string, in int, params string[]) Get a term Declaration public virtual string GetTerm(in string key, in int count, params string[] values) Parameters Type Name Description string key Term key int count Count (for plural translation) string[] values Parser values Returns Type Description string Term | Edit this page View Source GetTerm(in string, params string[]) Get a term Declaration public virtual string GetTerm(in string key, params string[] values) Parameters Type Name Description string key Term key string[] values Parser values Returns Type Description string Term | Edit this page View Source StringLocalizer(string, object[]) String localizer used for the IStringLocalizer implementation Declaration protected virtual LocalizedString StringLocalizer(string name, object[] arguments) Parameters Type Name Description string name Name object[] arguments Arguments Returns Type Description LocalizedString Localized string | Edit this page View Source TryGetValue(string, out string) Gets the value that is associated with the specified key. Declaration public virtual bool TryGetValue(string key, out string value) Parameters Type Name Description string key The key to locate. string value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description bool true if the object that implements the IReadOnlyDictionary<TKey, TValue> interface contains an element that has the specified key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. Implements ITranslationTerms IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IStringLocalizer Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.PoolTable.html": {
    "href": "api/wan24.Core.PoolTable.html",
    "title": "Class PoolTable | wan24-Core",
    "keywords": "Class PoolTable Pool table Inheritance object PoolTable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class PoolTable Fields | Edit this page View Source Pools Pool table (key is a GUID) Declaration public static readonly ConcurrentChangeTokenDictionary<string, IPool> Pools Field Value Type Description ConcurrentChangeTokenDictionary<string, IPool>"
  },
  "api/wan24.Core.PooledMemoryStream.html": {
    "href": "api/wan24.Core.PooledMemoryStream.html",
    "title": "Class PooledMemoryStream | wan24-Core",
    "keywords": "Class PooledMemoryStream Pooled memory stream Inheritance object MarshalByRefObject Stream StreamBase MemoryPoolStream PooledMemoryStream Implements IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider IObjectPoolItem Inherited Members MemoryPoolStream.DefaultBufferSize MemoryPoolStream.BufferSize MemoryPoolStream.BufferLength MemoryPoolStream.BufferCount MemoryPoolStream.CleanReturned MemoryPoolStream.SaveOnClose MemoryPoolStream.SavedData MemoryPoolStream.State MemoryPoolStream.CanRead MemoryPoolStream.CanSeek MemoryPoolStream.CanWrite MemoryPoolStream.Length MemoryPoolStream.Position MemoryPoolStream.ToArray() MemoryPoolStream.Flush() MemoryPoolStream.FlushAsync(CancellationToken) MemoryPoolStream.Read(byte[], int, int) MemoryPoolStream.Read(Span<byte>) MemoryPoolStream.ReadByte() MemoryPoolStream.ReadAsync(byte[], int, int, CancellationToken) MemoryPoolStream.ReadAsync(Memory<byte>, CancellationToken) MemoryPoolStream.Seek(long, SeekOrigin) MemoryPoolStream.SetLength(long) MemoryPoolStream.Write(byte[], int, int) MemoryPoolStream.Write(ReadOnlySpan<byte>) MemoryPoolStream.WriteByte(byte) MemoryPoolStream.WriteAsync(byte[], int, int, CancellationToken) MemoryPoolStream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) MemoryPoolStream.Close() StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.WriteAsync(byte[], int, int) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class PooledMemoryStream : MemoryPoolStream, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider, IObjectPoolItem Constructors | Edit this page View Source PooledMemoryStream() Constructor Declaration public PooledMemoryStream() Methods | Edit this page View Source Reset() Reset the item for re-use Declaration [TargetedPatchingOptOut(\"Tiny method\")] public void Reset() Implements IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider IObjectPoolItem Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.PooledTempFileStream.html": {
    "href": "api/wan24.Core.PooledTempFileStream.html",
    "title": "Class PooledTempFileStream | wan24-Core",
    "keywords": "Class PooledTempFileStream Pooled temporary file stream Inheritance object MarshalByRefObject Stream FileStream PooledTempFileStream Implements IAsyncDisposable IDisposable IObjectPoolItem Inherited Members FileStream.BeginRead(byte[], int, int, AsyncCallback, object) FileStream.BeginWrite(byte[], int, int, AsyncCallback, object) FileStream.CopyToAsync(Stream, int, CancellationToken) FileStream.DisposeAsync() FileStream.EndRead(IAsyncResult) FileStream.EndWrite(IAsyncResult) FileStream.Flush() FileStream.Flush(bool) FileStream.FlushAsync(CancellationToken) FileStream.Lock(long, long) FileStream.Read(byte[], int, int) FileStream.Read(Span<byte>) FileStream.ReadAsync(byte[], int, int, CancellationToken) FileStream.ReadAsync(Memory<byte>, CancellationToken) FileStream.ReadByte() FileStream.Seek(long, SeekOrigin) FileStream.SetLength(long) FileStream.Unlock(long, long) FileStream.Write(byte[], int, int) FileStream.Write(ReadOnlySpan<byte>) FileStream.WriteAsync(byte[], int, int, CancellationToken) FileStream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) FileStream.WriteByte(byte) FileStream.CanRead FileStream.CanSeek FileStream.CanWrite FileStream.Handle FileStream.IsAsync FileStream.Length FileStream.Name FileStream.Position FileStream.SafeFileHandle Stream.Null Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.Dispose() Stream.FlushAsync() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.WriteAsync(byte[], int, int) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class PooledTempFileStream : FileStream, IAsyncDisposable, IDisposable, IObjectPoolItem Remarks Constructor Constructors | Edit this page View Source PooledTempFileStream() Constructor Declaration public PooledTempFileStream() | Edit this page View Source PooledTempFileStream(in UnixFileMode?) Constructor Declaration public PooledTempFileStream(in UnixFileMode? mode) Parameters Type Name Description UnixFileMode? mode Unix create file mode | Edit this page View Source PooledTempFileStream(in string?, in UnixFileMode?) Pooled temporary file stream Declaration public PooledTempFileStream(in string? folder, in UnixFileMode? mode = null) Parameters Type Name Description string folder Temporary folder UnixFileMode? mode Unix create file mode Remarks Constructor Fields | Edit this page View Source DEFAULT_BUFFER_SIZE Default buffer size in bytes Declaration public const int DEFAULT_BUFFER_SIZE = 4096 Field Value Type Description int Properties | Edit this page View Source BufferSize Buffer size in bytes Declaration public static int BufferSize { get; set; } Property Value Type Description int Methods | Edit this page View Source Reset() Reset the item for re-use Declaration [TargetedPatchingOptOut(\"Tiny method\")] public void Reset() Implements IAsyncDisposable IDisposable IObjectPoolItem Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.PooledTempStream.html": {
    "href": "api/wan24.Core.PooledTempStream.html",
    "title": "Class PooledTempStream | wan24-Core",
    "keywords": "Class PooledTempStream Pooled temporary stream (hosts written data in memory first, then switches to a temporary file when exceeding the memory limit) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> WrapperStream PooledTempStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<Stream>.BaseStream WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.Position WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.Flush() WrapperStream<Stream>.FlushAsync(CancellationToken) WrapperStream<Stream>.Read(byte[], int, int) WrapperStream<Stream>.Read(Span<byte>) WrapperStream<Stream>.ReadByte() WrapperStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) WrapperStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) WrapperStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.Dispose() Stream.FlushAsync() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class PooledTempStream : WrapperStream, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source PooledTempStream(in long, in StreamPool<PooledMemoryStream>?, in StreamPool<PooledTempFileStream>?) Constructor Declaration public PooledTempStream(in long estimatedLength = 0, in StreamPool<PooledMemoryStream>? memoryStreamPool = null, in StreamPool<PooledTempFileStream>? fileStreamPool = null) Parameters Type Name Description long estimatedLength Estimated length in bytes StreamPool<PooledMemoryStream> memoryStreamPool Memory stream pool to use StreamPool<PooledTempFileStream> fileStreamPool File stream pool to use Properties | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides WrapperStream<Stream>.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides WrapperStream<Stream>.CanSeek | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides WrapperStream<Stream>.CanWrite | Edit this page View Source FileStream PooledTempFileStream (do not dispose!) Declaration public PooledTempFileStream? FileStream { get; } Property Value Type Description PooledTempFileStream | Edit this page View Source FileStreamCapacity File stream pool capacity Declaration public static int FileStreamCapacity { get; set; } Property Value Type Description int | Edit this page View Source FileStreamPool File stream pool Declaration public static StreamPool<PooledTempFileStream> FileStreamPool { get; } Property Value Type Description StreamPool<PooledTempFileStream> | Edit this page View Source IsInMemory Is the data stored in a PooledMemoryStream Declaration public bool IsInMemory { get; } Property Value Type Description bool | Edit this page View Source LeaveOpen Leave the base stream open when disposing? Declaration public override bool LeaveOpen { get; set; } Property Value Type Description bool Overrides WrapperStream<Stream>.LeaveOpen | Edit this page View Source MaxLengthInMemory Maximum number of bytes to store in a MemoryStream Declaration public static int MaxLengthInMemory { get; set; } Property Value Type Description int | Edit this page View Source MemoryPoolCapacity Memory stream pool capacity Declaration public static int MemoryPoolCapacity { get; set; } Property Value Type Description int | Edit this page View Source MemoryStream PooledMemoryStream (do not dispose!) Declaration public PooledMemoryStream? MemoryStream { get; } Property Value Type Description PooledMemoryStream | Edit this page View Source MemoryStreamPool Memory stream pool Declaration public static StreamPool<PooledMemoryStream> MemoryStreamPool { get; } Property Value Type Description StreamPool<PooledMemoryStream> | Edit this page View Source State Status information Declaration public override IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Overrides WrapperStream<Stream>.State Methods | Edit this page View Source Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. Declaration public override void Close() Overrides WrapperStream<Stream>.Close() | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides WrapperStream<Stream>.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override Task DisposeCore() Returns Type Description Task Overrides WrapperStream<Stream>.DisposeCore() | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides WrapperStream<Stream>.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides WrapperStream<Stream>.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides WrapperStream<Stream>.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides WrapperStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides WrapperStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides WrapperStream<Stream>.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.PortKnocking.ClientWebSocketFactory_Delegate.html": {
    "href": "api/wan24.Core.PortKnocking.ClientWebSocketFactory_Delegate.html",
    "title": "Delegate PortKnocking.ClientWebSocketFactory_Delegate | wan24-Core",
    "keywords": "Delegate PortKnocking.ClientWebSocketFactory_Delegate Delegate for a WebSocket client factory Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate ClientWebSocket PortKnocking.ClientWebSocketFactory_Delegate(Uri uri) Parameters Type Name Description Uri uri Current URI Returns Type Description ClientWebSocket WebSocket client (will be disposed!) Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.PortKnocking.RequestMessageFactory_Delegate.html": {
    "href": "api/wan24.Core.PortKnocking.RequestMessageFactory_Delegate.html",
    "title": "Delegate PortKnocking.RequestMessageFactory_Delegate | wan24-Core",
    "keywords": "Delegate PortKnocking.RequestMessageFactory_Delegate Delegate for a http request message factory Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate HttpRequestMessage PortKnocking.RequestMessageFactory_Delegate(Uri uri) Parameters Type Name Description Uri uri Current URI Returns Type Description HttpRequestMessage http request message (will be disposed!) Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.PortKnocking.html": {
    "href": "api/wan24.Core.PortKnocking.html",
    "title": "Class PortKnocking | wan24-Core",
    "keywords": "Class PortKnocking Port knocking helper Inheritance object PortKnocking Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class PortKnocking Methods | Edit this page View Source CallHttpSequenceAsync(HttpClient?, RequestMessageFactory_Delegate?, TimeSpan, ProcessingProgress?, IAsyncServiceProvider?, CancellationToken, params Uri[]) Call a http(s) URI sequence Declaration public static Task CallHttpSequenceAsync(HttpClient? client = null, PortKnocking.RequestMessageFactory_Delegate? requestFactory = null, TimeSpan delay = default, ProcessingProgress? progress = null, IAsyncServiceProvider? serviceProvider = null, CancellationToken cancellationToken = default, params Uri[] uris) Parameters Type Name Description HttpClient client http client to use (won't be disposed) PortKnocking.RequestMessageFactory_Delegate requestFactory http request message factory TimeSpan delay Delay between connecion attempts ProcessingProgress progress Progress (updated after each http(s) URI was contacted) IAsyncServiceProvider serviceProvider Service provider to use for getting the HttpClient instance CancellationToken cancellationToken Cancellation token Uri[] uris http(s) URI sequence Returns Type Description Task | Edit this page View Source CallTcpSynSequenceAsync(IPAddress, TimeSpan, ProcessingProgress?, IAsyncServiceProvider?, CancellationToken, params int[]) Call a TCP port sequence by sending SYN packets Declaration public static Task CallTcpSynSequenceAsync(IPAddress target, TimeSpan delay = default, ProcessingProgress? progress = null, IAsyncServiceProvider? serviceProvider = null, CancellationToken cancellationToken = default, params int[] ports) Parameters Type Name Description IPAddress target Target IP address TimeSpan delay Delay between packets ProcessingProgress progress Progress (updated after each port was contacted) IAsyncServiceProvider serviceProvider Service provider to use for getting the TcpClient instance CancellationToken cancellationToken Cancellation token int[] ports TCP port sequence Returns Type Description Task | Edit this page View Source CallUdpSequenceAsync(IPAddress, UdpClient?, TimeSpan, ReadOnlyMemory<byte>?, ProcessingProgress?, IAsyncServiceProvider?, CancellationToken, params int[]) Call an UDP port sequence by sending empty packets Declaration public static Task CallUdpSequenceAsync(IPAddress target, UdpClient? client = null, TimeSpan delay = default, ReadOnlyMemory<byte>? payload = null, ProcessingProgress? progress = null, IAsyncServiceProvider? serviceProvider = null, CancellationToken cancellationToken = default, params int[] ports) Parameters Type Name Description IPAddress target Target IP address UdpClient client UDP client to use (won't be disposed) TimeSpan delay Delay between packets ReadOnlyMemory<byte>? payload Payload to send with an UDP packet (empty per default) ProcessingProgress progress Progress (updated after each port was contacted) IAsyncServiceProvider serviceProvider Service provider to use for getting the UdpClient instance CancellationToken cancellationToken Cancellation token int[] ports UDP port sequence Returns Type Description Task | Edit this page View Source CallWebSocketSequenceAsync(TimeSpan, ClientWebSocketFactory_Delegate?, ProcessingProgress?, IAsyncServiceProvider?, CancellationToken, params Uri[]) Call a WebSocket URI sequence Declaration public static Task CallWebSocketSequenceAsync(TimeSpan delay = default, PortKnocking.ClientWebSocketFactory_Delegate? clientFactory = null, ProcessingProgress? progress = null, IAsyncServiceProvider? serviceProvider = null, CancellationToken cancellationToken = default, params Uri[] uris) Parameters Type Name Description TimeSpan delay Delay between connecion attempts PortKnocking.ClientWebSocketFactory_Delegate clientFactory WebSocket client factory ProcessingProgress progress Progress (updated after each WebSocket URI was contacted) IAsyncServiceProvider serviceProvider Service provider to use for getting the ClientWebSocket instance CancellationToken cancellationToken Cancellation token Uri[] uris WebSocket URI sequence Returns Type Description Task"
  },
  "api/wan24.Core.ProcessExtensions.html": {
    "href": "api/wan24.Core.ProcessExtensions.html",
    "title": "Class ProcessExtensions | wan24-Core",
    "keywords": "Class ProcessExtensions Process extensions Inheritance object ProcessExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ProcessExtensions Methods | Edit this page View Source NeedUserInput(Process) Does the process wait for user input? Declaration public static bool NeedUserInput(this Process p) Parameters Type Name Description Process p Process Returns Type Description bool If waiting for user input"
  },
  "api/wan24.Core.ProcessHelper.html": {
    "href": "api/wan24.Core.ProcessHelper.html",
    "title": "Class ProcessHelper | wan24-Core",
    "keywords": "Class ProcessHelper Process helper Inheritance object ProcessHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ProcessHelper Methods | Edit this page View Source GetExitCodeAsync(string, bool, CancellationToken, params string[]) Run a command and wait for exit to get the exit code Declaration public static Task<int> GetExitCodeAsync(string cmd, bool killOnError = true, CancellationToken cancellationToken = default, params string[] args) Parameters Type Name Description string cmd Command bool killOnError Kill the process on error, if it didn't exit yet? CancellationToken cancellationToken Cancellation token string[] args Arguments Returns Type Description Task<int> Exit code | Edit this page View Source Run(in string, params string[]) Run a command and don't wait for exit (just fire and forget) Declaration public static int Run(in string cmd, params string[] args) Parameters Type Name Description string cmd Command string[] args Arguments Returns Type Description int The process ID, if a new process was started, or -1, if not | Edit this page View Source RunAsync(string, bool, bool, CancellationToken, params string[]) Run a command and wait for exit (and optional get the STDOUT) Declaration public static Task<byte[]> RunAsync(string cmd, bool returnStdOut = false, bool killOnError = true, CancellationToken cancellationToken = default, params string[] args) Parameters Type Name Description string cmd Command bool returnStdOut Return the STDOUT contents? bool killOnError Kill the process on error, if it didn't exit yet? CancellationToken cancellationToken Cancellation token string[] args Arguments Returns Type Description Task<byte[]> STDOUT contents"
  },
  "api/wan24.Core.ProcessStream.html": {
    "href": "api/wan24.Core.ProcessStream.html",
    "title": "Class ProcessStream | wan24-Core",
    "keywords": "Class ProcessStream Process stream (uses STDIN/OUT) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> WrapperStream ProcessStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.State WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.Position WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.Flush() WrapperStream<Stream>.FlushAsync(CancellationToken) WrapperStream<Stream>.Read(byte[], int, int) WrapperStream<Stream>.Read(Span<byte>) WrapperStream<Stream>.ReadByte() WrapperStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) WrapperStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) WrapperStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>.SetLength(long) WrapperStream<Stream>.Write(byte[], int, int) WrapperStream<Stream>.Write(ReadOnlySpan<byte>) WrapperStream<Stream>.WriteByte(byte) WrapperStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) WrapperStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ProcessStream : WrapperStream, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source ProcessStream(in StreamReader?, in StreamWriter?, in StreamReader?, in Process?, in bool) Constructor Declaration public ProcessStream(in StreamReader? stdOut, in StreamWriter? stdin = null, in StreamReader? stdErr = null, in Process? process = null, in bool leaveOpen = false) Parameters Type Name Description StreamReader stdOut STDOUT (used for reading) StreamWriter stdin STDIN (used for writing) StreamReader stdErr STDERR Process process Process bool leaveOpen Leave the streams open when disposing? Fields | Edit this page View Source _CanRead Can read? Declaration protected readonly bool _CanRead Field Value Type Description bool | Edit this page View Source _CanWrite Can write? Declaration protected readonly bool _CanWrite Field Value Type Description bool Properties | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides WrapperStream<Stream>.CanRead | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides WrapperStream<Stream>.CanWrite | Edit this page View Source ExitCode Process exit code Declaration public int? ExitCode { get; protected set; } Property Value Type Description int? | Edit this page View Source KillOnDispose Kill the process when disposing? Declaration public bool KillOnDispose { get; set; } Property Value Type Description bool | Edit this page View Source LeaveOpen Leave the base stream open when disposing? Declaration public override bool LeaveOpen { get; set; } Property Value Type Description bool Overrides WrapperStream<Stream>.LeaveOpen | Edit this page View Source Process Process (will be disposed) Declaration public Process? Process { get; set; } Property Value Type Description Process | Edit this page View Source StdErr STDERR Declaration public StreamReader? StdErr { get; } Property Value Type Description StreamReader | Edit this page View Source StdIn STDIN Declaration public StreamWriter? StdIn { get; } Property Value Type Description StreamWriter | Edit this page View Source StdOut STDOUT Declaration public StreamReader? StdOut { get; } Property Value Type Description StreamReader Methods | Edit this page View Source Create(in string, in bool, in bool, in bool, in bool, params string[]) Create a process stream Declaration public static ProcessStream Create(in string cmd, in bool useStdOut = true, in bool useStdIn = false, in bool useStdErr = true, in bool killOnDispose = true, params string[] args) Parameters Type Name Description string cmd Command bool useStdOut Use STDOUT for reading? bool useStdIn Use STDIN for writing? bool useStdErr Use STDERR? bool killOnDispose Kill the process when disposing? string[] args Arguments Returns Type Description ProcessStream Process stream | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides WrapperStream<Stream>.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override Task DisposeCore() Returns Type Description Task Overrides WrapperStream<Stream>.DisposeCore() Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ProcessTable.html": {
    "href": "api/wan24.Core.ProcessTable.html",
    "title": "Class ProcessTable | wan24-Core",
    "keywords": "Class ProcessTable Process table Inheritance object ProcessTable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ProcessTable Fields | Edit this page View Source Processing Processes (key is a GUID) Declaration public static readonly ConcurrentChangeTokenDictionary<string, IProcessingInfo> Processing Field Value Type Description ConcurrentChangeTokenDictionary<string, IProcessingInfo>"
  },
  "api/wan24.Core.ProcessThrottle.ProcessThrottleEvent_Delegate.html": {
    "href": "api/wan24.Core.ProcessThrottle.ProcessThrottleEvent_Delegate.html",
    "title": "Delegate ProcessThrottle.ProcessThrottleEvent_Delegate | wan24-Core",
    "keywords": "Delegate ProcessThrottle.ProcessThrottleEvent_Delegate Delegate for a process throttle event Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void ProcessThrottle.ProcessThrottleEvent_Delegate(ProcessThrottle throttle, EventArgs e) Parameters Type Name Description ProcessThrottle throttle Throttle EventArgs e Event arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ProcessThrottle.Processor_Delegate.html": {
    "href": "api/wan24.Core.ProcessThrottle.Processor_Delegate.html",
    "title": "Delegate ProcessThrottle.Processor_Delegate | wan24-Core",
    "keywords": "Delegate ProcessThrottle.Processor_Delegate Delegate for a processor Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task ProcessThrottle.Processor_Delegate(int count) Parameters Type Name Description int count Count Returns Type Description Task Delegate for a processor Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ProcessThrottle.html": {
    "href": "api/wan24.Core.ProcessThrottle.html",
    "title": "Class ProcessThrottle | wan24-Core",
    "keywords": "Class ProcessThrottle Process throttle Inheritance object DisposableBase ProcessThrottle Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class ProcessThrottle : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source ProcessThrottle(in int, in double) Constructor Declaration protected ProcessThrottle(in int limit, in double timeout) Parameters Type Name Description int limit Processing count limit double timeout Processing count limit timeout in ms Fields | Edit this page View Source Processing Processing event (raised when not processing) Declaration protected readonly ResetEvent Processing Field Value Type Description ResetEvent | Edit this page View Source Sync Thread synchronization Declaration protected readonly SemaphoreSync Sync Field Value Type Description SemaphoreSync | Edit this page View Source Throttle Throttle (raised when not throttling) Declaration protected readonly ResetEvent Throttle Field Value Type Description ResetEvent | Edit this page View Source Timer Throttle timer Declaration protected readonly Timer Timer Field Value Type Description Timer Properties | Edit this page View Source CurrentCount Current count Declaration public int CurrentCount { get; protected set; } Property Value Type Description int | Edit this page View Source IsThrottling Is throttling? Declaration public bool IsThrottling { get; } Property Value Type Description bool | Edit this page View Source Limit Processing count limit Declaration public int Limit { get; protected set; } Property Value Type Description int | Edit this page View Source ThrottleStart Throttle start time Declaration public DateTime ThrottleStart { get; protected set; } Property Value Type Description DateTime | Edit this page View Source Timeout Processing count limit timeout in ms Declaration public double Timeout { get; protected set; } Property Value Type Description double Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source GetProcessChunkSize(in int) Get a chunk size to process now Declaration public int GetProcessChunkSize(in int count) Parameters Type Name Description int count Count Returns Type Description int Number that can be processed now | Edit this page View Source GetProcessChunkSize(in int, in bool) Get a chunk size to process now Declaration protected int GetProcessChunkSize(in int count, in bool process) Parameters Type Name Description int count Count bool process Process the chunk size? Returns Type Description int Number to process now | Edit this page View Source GetProcessChunkSizeAsync(int, bool) Get a chunk size to process now Declaration protected Task<int> GetProcessChunkSizeAsync(int count, bool process) Parameters Type Name Description int count Count bool process Process the chunk size? Returns Type Description Task<int> Number to process now | Edit this page View Source GetProcessChunkSizeAsync(in int) Get a chunk size to process now Declaration public Task<int> GetProcessChunkSizeAsync(in int count) Parameters Type Name Description int count Count Returns Type Description Task<int> Number that can be processed now | Edit this page View Source GetProcessChunkSizeLocked(in int, in bool) Get a chunk size to process now Declaration protected (int Process, bool Throttling) GetProcessChunkSizeLocked(in int count, in bool process) Parameters Type Name Description int count Count bool process Process the chunk size? Returns Type Description (int Process, bool Throttling) Number to process now, and if throttling | Edit this page View Source ProcessAsync(int, Processor_Delegate, CancellationToken) Process Declaration protected Task<int> ProcessAsync(int count, ProcessThrottle.Processor_Delegate processor, CancellationToken cancellationToken) Parameters Type Name Description int count Count ProcessThrottle.Processor_Delegate processor Processor CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Processed count | Edit this page View Source ProcessAsync(int, Processor_Delegate, TimeSpan) Process Declaration protected Task<int> ProcessAsync(int count, ProcessThrottle.Processor_Delegate processor, TimeSpan timeout) Parameters Type Name Description int count Count ProcessThrottle.Processor_Delegate processor Processor TimeSpan timeout Timeout Returns Type Description Task<int> Processed count | Edit this page View Source SetLimit(in int, in double) Set a new limit Declaration public void SetLimit(in int limit, in double timeout) Parameters Type Name Description int limit Processing count limit double timeout Processing count limit timeout in ms Events | Edit this page View Source OnThrottleEnd Raised when stopped throttling Declaration public event ProcessThrottle.ProcessThrottleEvent_Delegate? OnThrottleEnd Event Type Type Description ProcessThrottle.ProcessThrottleEvent_Delegate | Edit this page View Source OnThrottleStart Raised when starting to throttle Declaration public event ProcessThrottle.ProcessThrottleEvent_Delegate? OnThrottleStart Event Type Type Description ProcessThrottle.ProcessThrottleEvent_Delegate Operators | Edit this page View Source implicit operator bool(in ProcessThrottle) Cast as throttling-flag Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in ProcessThrottle throttle) Parameters Type Name Description ProcessThrottle throttle Throttle Returns Type Description bool Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ProcessingInfo.html": {
    "href": "api/wan24.Core.ProcessingInfo.html",
    "title": "Class ProcessingInfo | wan24-Core",
    "keywords": "Class ProcessingInfo Processing information (don't forget to dispose!) Inheritance object DisposableBase ProcessingInfo Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IProcessingInfo Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ProcessingInfo : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IProcessingInfo Constructors | Edit this page View Source ProcessingInfo(in string, in object?) Constructor Declaration public ProcessingInfo(in string description, in object? tag = null) Parameters Type Name Description string description Description object tag Any tagged object | Edit this page View Source ProcessingInfo(in string, in object?, in bool) Constructor Declaration protected ProcessingInfo(in string description, in object? tag, in bool asyncDisposing) Parameters Type Name Description string description Description object tag Any tagged object bool asyncDisposing Asynchronous disposing? Properties | Edit this page View Source Description Description Declaration public virtual string Description { get; } Property Value Type Description string | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source Started Processing start time Declaration public DateTime Started { get; } Property Value Type Description DateTime | Edit this page View Source Tag Any tagged object Declaration public virtual object? Tag { get; } Property Value Type Description object Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source RemoveFromProcessTable() Remove this instance from the process table (called during disposing) Declaration protected void RemoveFromProcessTable() Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IProcessingInfo Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ProcessingProgress.Progress_Delegate.html": {
    "href": "api/wan24.Core.ProcessingProgress.Progress_Delegate.html",
    "title": "Delegate ProcessingProgress.Progress_Delegate | wan24-Core",
    "keywords": "Delegate ProcessingProgress.Progress_Delegate Delegate for progress events Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void ProcessingProgress.Progress_Delegate(ProcessingProgress progress, EventArgs e) Parameters Type Name Description ProcessingProgress progress Progress EventArgs e Arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ProcessingProgress.html": {
    "href": "api/wan24.Core.ProcessingProgress.html",
    "title": "Class ProcessingProgress | wan24-Core",
    "keywords": "Class ProcessingProgress Processing progress Inheritance object DisposableBase ProcessingProgress Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class ProcessingProgress : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source ProcessingProgress() Constructor Declaration public ProcessingProgress() Properties | Edit this page View Source AllCountingProgress All counting (=without sub-progresses) progresses in the tree Declaration public List<ProcessingProgress> AllCountingProgress { get; } Property Value Type Description List<ProcessingProgress> | Edit this page View Source AllDone Are all done (incl. canceled)? Declaration public bool AllDone { get; } Property Value Type Description bool | Edit this page View Source AllProgress Overall progress (%) Declaration public float AllProgress { get; } Property Value Type Description float | Edit this page View Source AllProgressCount Number of all counting (=without sub-progresses) progresses in the tree Declaration public int AllProgressCount { get; } Property Value Type Description int | Edit this page View Source CancellationToken Cancellation token Declaration public CancellationToken CancellationToken { get; } Property Value Type Description CancellationToken | Edit this page View Source Current Current Declaration public long Current { get; } Property Value Type Description long | Edit this page View Source Info Processing information instance (will be disposed) Declaration public ProcessingInfo? Info { get; set; } Property Value Type Description ProcessingInfo | Edit this page View Source IsCanceled Is canceled? Declaration public bool IsCanceled { get; } Property Value Type Description bool | Edit this page View Source IsDone Is done? Declaration public bool IsDone { get; } Property Value Type Description bool | Edit this page View Source Name Name Declaration public string? Name { get; set; } Property Value Type Description string | Edit this page View Source Progress Progress (%) Declaration public float Progress { get; } Property Value Type Description float | Edit this page View Source Status Status Declaration public string? Status { get; set; } Property Value Type Description string | Edit this page View Source SubProgress Sub-progresses Declaration public ReadOnlyCollection<ProcessingProgress> SubProgress { get; } Property Value Type Description ReadOnlyCollection<ProcessingProgress> | Edit this page View Source SubProgressCount Sub-progresses count Declaration public int SubProgressCount { get; } Property Value Type Description int | Edit this page View Source Total Total Declaration public long Total { get; set; } Property Value Type Description long Methods | Edit this page View Source AddSubProgress(ProcessingProgress) Add a sub-progress Declaration public void AddSubProgress(ProcessingProgress progress) Parameters Type Name Description ProcessingProgress progress Progress | Edit this page View Source Cancel() Cancel (will cancel all sub-progresses, too) Declaration public void Cancel() | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source GetCancellationToken(CancellationToken) Get the cancellation token to use Declaration public CancellationToken GetCancellationToken(CancellationToken token) Parameters Type Name Description CancellationToken token Token Returns Type Description CancellationToken Token to use (is the given token, if it's not the default) | Edit this page View Source RemoveSubProgress(ProcessingProgress) Remove a sub-progress Declaration public void RemoveSubProgress(ProcessingProgress progress) Parameters Type Name Description ProcessingProgress progress Progress | Edit this page View Source SetDone() Set done Declaration public void SetDone() | Edit this page View Source SetStatus(string?) Set a new status Declaration public void SetStatus(string? status) Parameters Type Name Description string status New status | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string? ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() | Edit this page View Source Update(int, string?) Update the progress Declaration public void Update(int addCurrent = 1, string? status = null) Parameters Type Name Description int addCurrent Number to add to current string status New status (null will be ignored) Events | Edit this page View Source OnAllProgress Raised if any progress changed Declaration public event ProcessingProgress.Progress_Delegate? OnAllProgress Event Type Type Description ProcessingProgress.Progress_Delegate | Edit this page View Source OnDone Raised if done Declaration public event ProcessingProgress.Progress_Delegate? OnDone Event Type Type Description ProcessingProgress.Progress_Delegate | Edit this page View Source OnProgress Raised on progress Declaration public event ProcessingProgress.Progress_Delegate? OnProgress Event Type Type Description ProcessingProgress.Progress_Delegate | Edit this page View Source OnStatus Raised on a status update Declaration public event ProcessingProgress.Progress_Delegate? OnStatus Event Type Type Description ProcessingProgress.Progress_Delegate Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.PropertyInfoExt.html": {
    "href": "api/wan24.Core.PropertyInfoExt.html",
    "title": "Class PropertyInfoExt | wan24-Core",
    "keywords": "Class PropertyInfoExt Property information Inheritance object PropertyInfoExt Implements ICustomAttributeProvider IEquatable<PropertyInfoExt> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed record PropertyInfoExt : ICustomAttributeProvider, IEquatable<PropertyInfoExt> Remarks Constructor Constructors | Edit this page View Source PropertyInfoExt(in PropertyInfo, in Func<object?, object?>?, in Action<object?, object?>?) Property information Declaration public PropertyInfoExt(in PropertyInfo Property, in Func<object?, object?>? Getter, in Action<object?, object?>? Setter) Parameters Type Name Description PropertyInfo Property Property Func<dynamic, object> Getter Getter Action<object, object> Setter Setter Remarks Constructor Properties | Edit this page View Source CanRead Can read? Declaration public bool CanRead { get; } Property Value Type Description bool | Edit this page View Source CanWrite Can write? Declaration public bool CanWrite { get; } Property Value Type Description bool | Edit this page View Source DeclaringType Property declaring type Declaration public Type? DeclaringType { get; } Property Value Type Description Type | Edit this page View Source Getter Getter Declaration public Func<object?, object?>? Getter { get; } Property Value Type Description Func<dynamic, object> | Edit this page View Source Name Property name Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source Property Property Declaration public PropertyInfo Property { get; } Property Value Type Description PropertyInfo | Edit this page View Source PropertyType Property type Declaration public Type PropertyType { get; } Property Value Type Description Type | Edit this page View Source Setter Setter Declaration public Action<object?, object?>? Setter { get; } Property Value Type Description Action<object, object> Methods | Edit this page View Source GetCustomAttributes(bool) Returns an array of all of the custom attributes defined on this member, excluding named attributes, or an empty array if there are no custom attributes. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public object[] GetCustomAttributes(bool inherit) Parameters Type Name Description bool inherit When true, look up the hierarchy chain for the inherited custom attribute. Returns Type Description object[] An array of Objects representing custom attributes, or an empty array. Exceptions Type Condition TypeLoadException The custom attribute type cannot be loaded. AmbiguousMatchException There is more than one attribute of type attributeType defined on this member. | Edit this page View Source GetCustomAttributes(Type, bool) Returns an array of custom attributes defined on this member, identified by type, or an empty array if there are no custom attributes of that type. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public object[] GetCustomAttributes(Type attributeType, bool inherit) Parameters Type Name Description Type attributeType The type of the custom attributes. bool inherit When true, look up the hierarchy chain for the inherited custom attribute. Returns Type Description object[] An array of Objects representing custom attributes, or an empty array. Exceptions Type Condition TypeLoadException The custom attribute type cannot be loaded. ArgumentNullException attributeType is null. | Edit this page View Source IsDefined(Type, bool) Indicates whether one or more instance of attributeType is defined on this member. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public bool IsDefined(Type attributeType, bool inherit) Parameters Type Name Description Type attributeType The type of the custom attributes. bool inherit When true, look up the hierarchy chain for the inherited custom attribute. Returns Type Description bool true if the attributeType is defined on this member; false otherwise. Operators | Edit this page View Source implicit operator PropertyInfo(in PropertyInfoExt) Cast as PropertyInfo Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator PropertyInfo(in PropertyInfoExt pi) Parameters Type Name Description PropertyInfoExt pi PropertyInfoExt Returns Type Description PropertyInfo Implements ICustomAttributeProvider IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) ReflectionExtensions.GetCustomAttributeCached<T>(ICustomAttributeProvider) ReflectionExtensions.GetCustomAttributesCached<T>(ICustomAttributeProvider) ReflectionExtensions.IsNullable(ICustomAttributeProvider) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int) ReflectionExtensions.GetValueFast(PropertyInfoExt, in object?) ReflectionExtensions.IsInitOnly(PropertyInfoExt) ReflectionExtensions.SetValueFast(PropertyInfoExt, in object?, in object?)"
  },
  "api/wan24.Core.QueueEntry-1.QueueEntry_Delegate.html": {
    "href": "api/wan24.Core.QueueEntry-1.QueueEntry_Delegate.html",
    "title": "Delegate QueueEntry<T>.QueueEntry_Delegate | wan24-Core",
    "keywords": "Delegate QueueEntry<T>.QueueEntry_Delegate Delegate for an event Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void QueueEntry<T>.QueueEntry_Delegate(QueueEntry<T> entry, EventArgs e) Parameters Type Name Description QueueEntry<T> entry Entry EventArgs e Arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.QueueEntry-1.html": {
    "href": "api/wan24.Core.QueueEntry-1.html",
    "title": "Class QueueEntry<T> | wan24-Core",
    "keywords": "Class QueueEntry<T> Queue entry Inheritance object QueueEntry<T> Implements IQueueEntry IStatusProvider IEquatable<QueueEntry<T>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public record QueueEntry<T> : IQueueEntry, IStatusProvider, IEquatable<QueueEntry<T>> Type Parameters Name Description T Item type Constructors | Edit this page View Source QueueEntry(T) Constructor Declaration public QueueEntry(T item) Parameters Type Name Description T item Item Fields | Edit this page View Source _Changes Changes Declaration protected readonly List<QueueEntryStateChange> _Changes Field Value Type Description List<QueueEntryStateChange> | Edit this page View Source _LastException Last exception Declaration protected Exception? _LastException Field Value Type Description Exception | Edit this page View Source _QueueState Queue state Declaration protected QueueEntryStates _QueueState Field Value Type Description QueueEntryStates Properties | Edit this page View Source Changes Queue state changes Declaration public ReadOnlyCollection<QueueEntryStateChange> Changes { get; } Property Value Type Description ReadOnlyCollection<QueueEntryStateChange> | Edit this page View Source Created Created time Declaration public DateTime Created { get; } Property Value Type Description DateTime | Edit this page View Source Done Processing done time Declaration public DateTime Done { get; protected set; } Property Value Type Description DateTime | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source Item Declaration public T Item { get; } Property Value Type Description T | Edit this page View Source LastException Last exception Declaration public virtual Exception? LastException { get; set; } Property Value Type Description Exception | Edit this page View Source LastProcessed Last processing time Declaration public DateTime LastProcessed { get; protected set; } Property Value Type Description DateTime | Edit this page View Source LastProcessingTime Last processing time Declaration public TimeSpan LastProcessingTime { get; } Property Value Type Description TimeSpan | Edit this page View Source Name Name Declaration public string? Name { get; set; } Property Value Type Description string | Edit this page View Source QueueState Queue state Declaration public virtual QueueEntryStates QueueState { get; set; } Property Value Type Description QueueEntryStates | Edit this page View Source State Status information Declaration public IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> | Edit this page View Source TotalProcessingTime Total processing time (until done) Declaration public TimeSpan TotalProcessingTime { get; } Property Value Type Description TimeSpan | Edit this page View Source WaitingProcessingTime Waiting processing time Declaration public TimeSpan WaitingProcessingTime { get; } Property Value Type Description TimeSpan Methods | Edit this page View Source RaiseOnError() Raise the OnError event Declaration protected virtual void RaiseOnError() | Edit this page View Source RaiseOnStateChanged() Raise the OnStateChanged event Declaration protected virtual void RaiseOnStateChanged() Events | Edit this page View Source OnError Raised on processing error Declaration public event QueueEntry<T>.QueueEntry_Delegate? OnError Event Type Type Description QueueEntry<T>.QueueEntry_Delegate | Edit this page View Source OnStateChanged Raised on state change Declaration public event QueueEntry<T>.QueueEntry_Delegate? OnStateChanged Event Type Type Description QueueEntry<T>.QueueEntry_Delegate Implements IQueueEntry IStatusProvider IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.QueueEntryStateChange.html": {
    "href": "api/wan24.Core.QueueEntryStateChange.html",
    "title": "Struct QueueEntryStateChange | wan24-Core",
    "keywords": "Struct QueueEntryStateChange State change Implements IEquatable<QueueEntryStateChange> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public readonly record struct QueueEntryStateChange : IEquatable<QueueEntryStateChange> Constructors | Edit this page View Source QueueEntryStateChange(QueueEntryStates, Exception?) Constructor Declaration public QueueEntryStateChange(QueueEntryStates state, Exception? ex = null) Parameters Type Name Description QueueEntryStates state State Exception ex Exception Fields | Edit this page View Source Exception Exception Declaration public readonly Exception? Exception Field Value Type Description Exception | Edit this page View Source State State Declaration public readonly QueueEntryStates State Field Value Type Description QueueEntryStates | Edit this page View Source Time Time Declaration public readonly DateTime Time Field Value Type Description DateTime Implements IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.QueueEntryStates.html": {
    "href": "api/wan24.Core.QueueEntryStates.html",
    "title": "Enum QueueEntryStates | wan24-Core",
    "keywords": "Enum QueueEntryStates Queue entry states Namespace: wan24.Core Assembly: wan24Core.dll Syntax public enum QueueEntryStates : byte Fields Name Description Done Processing done Enqueued Enqueued Error Processing error Paused Processing paused Processing Processing Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object[]) AsyncHelper.TryDisposeAsync<QueueEntryStates>(QueueEntryStates) AsyncHelper.TryDispose<QueueEntryStates>(QueueEntryStates) EnumExtensions.ContainsAllFlags<QueueEntryStates>(QueueEntryStates, in QueueEntryStates) EnumExtensions.ContainsAnyFlag<QueueEntryStates>(QueueEntryStates, params QueueEntryStates[]) EnumExtensions.GetContainedFlags<QueueEntryStates>(QueueEntryStates, params QueueEntryStates[]) EnumExtensions.GetInfo<QueueEntryStates>(QueueEntryStates) EnumExtensions.IsFlag<QueueEntryStates>(QueueEntryStates) EnumExtensions.IsValidEnumerationValue<QueueEntryStates>(QueueEntryStates) EnumExtensions.IsValid<QueueEntryStates>(QueueEntryStates) EnumExtensions.IsValue<QueueEntryStates>(QueueEntryStates) EnumExtensions.OnlyFlags<QueueEntryStates>(QueueEntryStates) EnumExtensions.RemoveFlags<QueueEntryStates>(QueueEntryStates) ObjectExtensions.Do<QueueEntryStates, tReturn>(QueueEntryStates, in Func<QueueEntryStates, tReturn>) ObjectExtensions.EnsureValidState<QueueEntryStates>(QueueEntryStates, in bool, in string) ObjectExtensions.GetDisplayText<QueueEntryStates>(QueueEntryStates) ObjectExtensions.In<QueueEntryStates>(QueueEntryStates, in IEnumerable<QueueEntryStates>) ObjectExtensions.ToDictionary<QueueEntryStates>(QueueEntryStates, in int) ObjectExtensions.ToOrderedDictionary<QueueEntryStates>(QueueEntryStates, in int)"
  },
  "api/wan24.Core.QueueWorker.Task_Delegate.html": {
    "href": "api/wan24.Core.QueueWorker.Task_Delegate.html",
    "title": "Delegate QueueWorker.Task_Delegate | wan24-Core",
    "keywords": "Delegate QueueWorker.Task_Delegate Delegate for a task Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate ValueTask QueueWorker.Task_Delegate(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask Delegate for a task Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.QueueWorker.html": {
    "href": "api/wan24.Core.QueueWorker.html",
    "title": "Class QueueWorker | wan24-Core",
    "keywords": "Class QueueWorker Queue worker Inheritance object DisposableBase HostedServiceBase QueueWorker ItemQueueWorkerBase<T> ParallelQueueWorker Implements IWillDispose IQueueWorker IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.AfterStartAsync(CancellationToken) HostedServiceBase.BeforeStopAsync(CancellationToken) HostedServiceBase.StoppingAsync(CancellationToken) HostedServiceBase.AfterStopAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.AfterPauseAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.AfterResumeAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.Dispose(bool) HostedServiceBase.DisposeCore() HostedServiceBase.OnException HostedServiceBase.RaiseOnException() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class QueueWorker : HostedServiceBase, IWillDispose, IQueueWorker, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source QueueWorker(in int) Constructor Declaration public QueueWorker(in int capacity) Parameters Type Name Description int capacity Fields | Edit this page View Source Queue Queue Declaration protected readonly Channel<QueueWorker.Task_Delegate> Queue Field Value Type Description Channel<QueueWorker.Task_Delegate> Properties | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source Queued Number of queued items Declaration public int Queued { get; } Property Value Type Description int | Edit this page View Source State Status information Declaration public virtual IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Methods | Edit this page View Source EnqueueAsync(Task_Delegate, CancellationToken) Enqueue Declaration public ValueTask EnqueueAsync(QueueWorker.Task_Delegate task, CancellationToken cancellationToken = default) Parameters Type Name Description QueueWorker.Task_Delegate task Task CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask | Edit this page View Source EnqueueRangeAsync(IAsyncEnumerable<Task_Delegate>, CancellationToken) Enqueue many tasks for processing Declaration [TargetedPatchingOptOut(\"Tiny method\")] public ValueTask<int> EnqueueRangeAsync(IAsyncEnumerable<QueueWorker.Task_Delegate> tasks, CancellationToken cancellationToken = default) Parameters Type Name Description IAsyncEnumerable<QueueWorker.Task_Delegate> tasks Tasks CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<int> Number of enqueued tasks | Edit this page View Source EnqueueRangeAsync(IEnumerable<Task_Delegate>, CancellationToken) Enqueue many tasks for processing Declaration [TargetedPatchingOptOut(\"Tiny method\")] public ValueTask<int> EnqueueRangeAsync(IEnumerable<QueueWorker.Task_Delegate> tasks, CancellationToken cancellationToken = default) Parameters Type Name Description IEnumerable<QueueWorker.Task_Delegate> tasks Tasks CancellationToken cancellationToken Cancellation token Returns Type Description ValueTask<int> Number of enqueued tasks | Edit this page View Source TryEnqueue(Task_Delegate, CancellationToken) Try enqueue Declaration public bool TryEnqueue(QueueWorker.Task_Delegate task, CancellationToken cancellationToken = default) Parameters Type Name Description QueueWorker.Task_Delegate task Task CancellationToken cancellationToken Cancellation token Returns Type Description bool Enqueued? | Edit this page View Source WorkerAsync() Service worker Declaration protected override Task WorkerAsync() Returns Type Description Task Overrides HostedServiceBase.WorkerAsync() Operators | Edit this page View Source implicit operator int(in QueueWorker) Cast as queued item count Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in QueueWorker worker) Parameters Type Name Description QueueWorker worker Worker Returns Type Description int Implements IWillDispose IQueueWorker IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.RandomStream.html": {
    "href": "api/wan24.Core.RandomStream.html",
    "title": "Class RandomStream | wan24-Core",
    "keywords": "Class RandomStream Random stream (uses RandomNumberGenerator for reading random bytes into the given buffers) Inheritance object MarshalByRefObject Stream StreamBase RandomStream Implements IStream IDisposableObject IDisposable IAsyncDisposable Inherited Members StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.Close() StreamBase.DisposeAsync() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class RandomStream : StreamBase, IStream, IDisposableObject, IDisposable, IAsyncDisposable Properties | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides Stream.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides Stream.CanSeek | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides Stream.CanWrite | Edit this page View Source Instance Singleton instance Declaration public static RandomStream Instance { get; } Property Value Type Description RandomStream | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides Stream.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides Stream.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Methods | Edit this page View Source CopyTo(Stream, int) Reads the bytes from the current stream and writes them to another stream, using a specified buffer size. Both streams positions are advanced by the number of bytes copied. Declaration public override void CopyTo(Stream destination, int bufferSize) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size of the buffer. This value must be greater than zero. The default size is 81920. Overrides Stream.CopyTo(Stream, int) Exceptions Type Condition ArgumentNullException destination is null. ArgumentOutOfRangeException bufferSize is negative or zero. NotSupportedException The current stream does not support reading. -or- destination does not support writing. ObjectDisposedException Either the current stream or destination were closed before the CopyTo(Stream) method was called. IOException An I/O error occurred. | Edit this page View Source CopyToAsync(Stream, int, CancellationToken) Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token. Both streams positions are advanced by the number of bytes copied. Declaration public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous copy operation. Overrides Stream.CopyToAsync(Stream, int, CancellationToken) Exceptions Type Condition ArgumentNullException destination is null. ArgumentOutOfRangeException buffersize is negative or zero. ObjectDisposedException Either the current stream or the destination stream is disposed. NotSupportedException The current stream does not support reading, or the destination stream does not support writing. | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides Stream.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides Stream.Read(Span<byte>) | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides Stream.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides Stream.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides Stream.Write(ReadOnlySpan<byte>) Implements IStream IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ReflectionExtensions.html": {
    "href": "api/wan24.Core.ReflectionExtensions.html",
    "title": "Class ReflectionExtensions | wan24-Core",
    "keywords": "Class ReflectionExtensions Reflection extensions Inheritance object ReflectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ReflectionExtensions Methods | Edit this page View Source CanConstruct(Type) Determine if a type can be constructed (instanced) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool CanConstruct(this Type type) Parameters Type Name Description Type type Type Returns Type Description bool If constructable | Edit this page View Source ConstructAuto(Type, in bool, params object?[]) Invoke a possible constructor and complete parameters with default values Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static object ConstructAuto(this Type type, in bool usePrivate = false, params object?[] param) Parameters Type Name Description Type type Type bool usePrivate Use private constructors, too? object[] param Parameters Returns Type Description object Instance | Edit this page View Source ConstructAuto(Type, in IServiceProvider, in bool, params object?[]) Invoke a possible constructor and complete parameters with default values Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static object ConstructAuto(this Type type, in IServiceProvider serviceProvider, in bool usePrivate = false, params object?[] param) Parameters Type Name Description Type type Type IServiceProvider serviceProvider Service provider bool usePrivate Use private constructors, too? object[] param Parameters Returns Type Description object Instance | Edit this page View Source ConstructAuto(Type, in IServiceProvider, out ConstructorInfo?, in bool, params object?[]) Invoke a possible constructor and complete parameters with default values Declaration public static object ConstructAuto(this Type type, in IServiceProvider serviceProvider, out ConstructorInfo? usedConstructor, in bool usePrivate = false, params object?[] param) Parameters Type Name Description Type type Type IServiceProvider serviceProvider Service provider ConstructorInfo usedConstructor Used constructor bool usePrivate Use private constructors, too? object[] param Parameters Returns Type Description object Instance | Edit this page View Source ConstructAuto(Type, out ConstructorInfo?, in bool, params object?[]) Invoke a possible constructor and complete parameters with default values Declaration public static object ConstructAuto(this Type type, out ConstructorInfo? usedConstructor, in bool usePrivate = false, params object?[] param) Parameters Type Name Description Type type Type ConstructorInfo usedConstructor Used constructor bool usePrivate Use private constructors, too? object[] param Parameters Returns Type Description object Instance | Edit this page View Source ConstructAutoAsync(Type, IAsyncServiceProvider, bool, params object?[]) Invoke a possible constructor and complete parameters with default values Declaration public static Task<(object Object, ConstructorInfo Constructor)> ConstructAutoAsync(this Type type, IAsyncServiceProvider serviceProvider, bool usePrivate = false, params object?[] param) Parameters Type Name Description Type type Type IAsyncServiceProvider serviceProvider Service provider bool usePrivate Use private constructors, too? object[] param Parameters Returns Type Description Task<(object Object, ConstructorInfo Constructor)> Instance and the used constructor (or null) | Edit this page View Source ConstructInstanceAutoAsync(Type, IAsyncServiceProvider, bool, params object?[]) Invoke a possible constructor and complete parameters with default values Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<object> ConstructInstanceAutoAsync(this Type type, IAsyncServiceProvider serviceProvider, bool usePrivate = false, params object?[] param) Parameters Type Name Description Type type Type IAsyncServiceProvider serviceProvider Service provider bool usePrivate Use private constructors, too? object[] param Parameters Returns Type Description Task<object> Instance | Edit this page View Source EnsureGenericTypeDefinition(Type, in bool) Ensure working with the generic type definition(, if possible) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Type EnsureGenericTypeDefinition(this Type type, in bool throwOnError = false) Parameters Type Name Description Type type Type bool throwOnError Throw an exception, if the type isn't generic? Returns Type Description Type Given type or its generic type definition Exceptions Type Condition ArgumentException Not generic | Edit this page View Source GetBaseTypes(Type) Get the base types of a type (excluding object) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static IEnumerable<Type> GetBaseTypes(this Type type) Parameters Type Name Description Type type Type Returns Type Description IEnumerable<Type> Base types | Edit this page View Source GetCastedGetterDelegate<T>(PropertyInfo) Get a getter delegate Declaration public static Func<object?, T?> GetCastedGetterDelegate<T>(this PropertyInfo pi) Parameters Type Name Description PropertyInfo pi Property Returns Type Description Func<object, T> Getter delegate Type Parameters Name Description T Return type (casted) | Edit this page View Source GetClosestType(IEnumerable<Type>, Type) Get the closest type of a type Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Type? GetClosestType(this IEnumerable<Type> types, Type type) Parameters Type Name Description IEnumerable<Type> types Types Type type Type Returns Type Description Type Closest type from types | Edit this page View Source GetConstructor(Type, in BindingFlags, in Func<ConstructorInfo, bool>?, in bool, params Type?[]?) Get a constructor which matches the given filter parameters Declaration public static ConstructorInfo? GetConstructor(this Type type, in BindingFlags bindingFlags = BindingFlags.Public | BindingFlags.NonPublic, in Func<ConstructorInfo, bool>? filter = null, in bool exactTypes = true, params Type?[]? parameterTypes) Parameters Type Name Description Type type Type BindingFlags bindingFlags Binding flags (used to select methods of the type) Func<ConstructorInfo, bool> filter Additional filter function (needs to return true to accept the given method as return value) bool exactTypes Require exact types? Type[] parameterTypes Parameter types (or null to skip parameter type checks; a single null parameter type would allow any parameter type) Returns Type Description ConstructorInfo Matching constructor | Edit this page View Source GetConstructorsCached(Type, BindingFlags) Get constructors from the cache Declaration public static ConstructorInfo[] GetConstructorsCached(this Type type, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public) Parameters Type Name Description Type type Type BindingFlags bindingFlags Binding flags Returns Type Description ConstructorInfo[] Constructors | Edit this page View Source GetCustomAttributeCached<T>(ICustomAttributeProvider) Get an attribute (inherited) Declaration public static T? GetCustomAttributeCached<T>(this ICustomAttributeProvider obj) where T : Attribute Parameters Type Name Description ICustomAttributeProvider obj Reflection object Returns Type Description T Attribute Type Parameters Name Description T Attribute type | Edit this page View Source GetCustomAttributesCached<T>(ICustomAttributeProvider) Get attributes (inherited) Declaration public static T[] GetCustomAttributesCached<T>(this ICustomAttributeProvider obj) where T : Attribute Parameters Type Name Description ICustomAttributeProvider obj Reflection object Returns Type Description T[] Attributes Type Parameters Name Description T Attribute type | Edit this page View Source GetFieldCached(Type, string, BindingFlags) Get a field from the cache Declaration public static FieldInfo? GetFieldCached(this Type type, string name, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public) Parameters Type Name Description Type type Type string name Name BindingFlags bindingFlags Binding flags Returns Type Description FieldInfo Field | Edit this page View Source GetFieldsCached(Type, BindingFlags) Get fields from the cache Declaration public static FieldInfo[] GetFieldsCached(this Type type, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public) Parameters Type Name Description Type type Type BindingFlags bindingFlags Binding flags Returns Type Description FieldInfo[] Fields | Edit this page View Source GetFinalElementType(Type) Get the final array element type of a multi-dimensional array type Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Type GetFinalElementType(this Type type) Parameters Type Name Description Type type Array type Returns Type Description Type Final array element type | Edit this page View Source GetGenericArgumentsCached(Type) Get generic type arguments from the cache Declaration public static Type[] GetGenericArgumentsCached(this Type type) Parameters Type Name Description Type type Type Returns Type Description Type[] Generic arguments | Edit this page View Source GetGetterDelegate(PropertyInfo) Get a getter delegate Declaration public static Func<object?, object?> GetGetterDelegate(this PropertyInfo pi) Parameters Type Name Description PropertyInfo pi Property Returns Type Description Func<dynamic, object> Getter delegate | Edit this page View Source GetGetterDelegate<T>(PropertyInfo) Get a getter delegate Declaration public static Func<object?, T?> GetGetterDelegate<T>(this PropertyInfo pi) Parameters Type Name Description PropertyInfo pi Property Returns Type Description Func<object, T> Getter delegate Type Parameters Name Description T Return type | Edit this page View Source GetGetterDelegate<tObject, tReturn>(PropertyInfo) Get a getter delegate Declaration public static Func<tObject, tReturn?> GetGetterDelegate<tObject, tReturn>(this PropertyInfo pi) Parameters Type Name Description PropertyInfo pi Property Returns Type Description Func<tObject, tReturn> Getter delegate Type Parameters Name Description tObject Object type tReturn Return type | Edit this page View Source GetGroupName(PropertyInfo) Get the group name (see GroupAttribute) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static string? GetGroupName(this PropertyInfo pi) Parameters Type Name Description PropertyInfo pi Property Returns Type Description string Group name | Edit this page View Source GetMethod(Type, in string?, in BindingFlags, in Func<MethodInfo, bool>?, in int?, in bool, in Type?, params Type?[]?) Get a method which matches the given filter parameters Declaration public static MethodInfo? GetMethod(this Type type, in string? name = null, in BindingFlags bindingFlags = BindingFlags.Public | BindingFlags.NonPublic, in Func<MethodInfo, bool>? filter = null, in int? genericArgumentCount = null, in bool exactTypes = true, in Type? returnType = null, params Type?[]? parameterTypes) Parameters Type Name Description Type type Type string name Method name (null to skip method name check) BindingFlags bindingFlags Binding flags (used to select methods of the type) Func<MethodInfo, bool> filter Additional filter function (needs to return true to accept the given method as return value) int? genericArgumentCount Number of generic arguments bool exactTypes Require exact types? Type returnType Return type (null to skip the return value type check) Type[] parameterTypes Parameter types (or null to skip parameter type checks; a single null parameter type would allow any parameter type) Returns Type Description MethodInfo Matching method | Edit this page View Source GetMethodCached(Type, string, BindingFlags) Get a method from the cache Declaration public static MethodInfo? GetMethodCached(this Type type, string name, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public) Parameters Type Name Description Type type Type string name Name BindingFlags bindingFlags Binding flags Returns Type Description MethodInfo Method | Edit this page View Source GetMethodsCached(Type, BindingFlags) Get methods from the cache Declaration public static MethodInfo[] GetMethodsCached(this Type type, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public) Parameters Type Name Description Type type Type BindingFlags bindingFlags Binding flags Returns Type Description MethodInfo[] Methods | Edit this page View Source GetParametersCached(ConstructorInfo) Get constructor parameters from the cache Declaration public static ParameterInfo[] GetParametersCached(this ConstructorInfo ci) Parameters Type Name Description ConstructorInfo ci Constructor Returns Type Description ParameterInfo[] Constructor parameters | Edit this page View Source GetParametersCached(MethodInfo) Get method parameters from the cache Declaration public static ParameterInfo[] GetParametersCached(this MethodInfo mi) Parameters Type Name Description MethodInfo mi Method Returns Type Description ParameterInfo[] Method parameters | Edit this page View Source GetPropertiesCached(Type, BindingFlags) Get properties from the cache Declaration public static PropertyInfoExt[] GetPropertiesCached(this Type type, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public) Parameters Type Name Description Type type Type BindingFlags bindingFlags Binding flags Returns Type Description PropertyInfoExt[] Properties | Edit this page View Source GetPropertyCached(Type, string, BindingFlags) Get a property from the cache Declaration public static PropertyInfoExt? GetPropertyCached(this Type type, string name, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public) Parameters Type Name Description Type type Type string name Name BindingFlags bindingFlags Binding flags Returns Type Description PropertyInfoExt Property | Edit this page View Source GetSetterDelegate(PropertyInfo) Get a setter delegate Declaration public static Action<object?, object?> GetSetterDelegate(this PropertyInfo pi) Parameters Type Name Description PropertyInfo pi Property Returns Type Description Action<object, object> Setter delegate | Edit this page View Source GetSetterDelegate<tObject, tValue>(PropertyInfo) Get a setter delegate Declaration public static Action<tObject, tValue?> GetSetterDelegate<tObject, tValue>(this PropertyInfo pi) Parameters Type Name Description PropertyInfo pi Property Returns Type Description Action<tObject, tValue> Setter delegate Type Parameters Name Description tObject Object type tValue Value type | Edit this page View Source GetValueFast(PropertyInfo, in object?) Faster GetValue(object) Declaration public static object? GetValueFast(this PropertyInfo pi, in object? obj) Parameters Type Name Description PropertyInfo pi Property object obj Object Returns Type Description object Value | Edit this page View Source GetValueFast(PropertyInfoExt, in object?) Faster GetValue(object) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static object? GetValueFast(this PropertyInfoExt pi, in object? obj) Parameters Type Name Description PropertyInfoExt pi Property object obj Object Returns Type Description object Value | Edit this page View Source HasBaseType(Type, in Type) Determine if a type implements a base type Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool HasBaseType(this Type type, in Type baseType) Parameters Type Name Description Type type Type (may be a generic type definition) Type baseType Base type (may be a generic type definition, can't be object) Returns Type Description bool If the base type is implemented | Edit this page View Source InvokeAuto(ConstructorInfo, IServiceProvider, params object?[]) Invoke a constructor and complete parameters with default values Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static object InvokeAuto(this ConstructorInfo ci, IServiceProvider serviceProvider, params object?[] param) Parameters Type Name Description ConstructorInfo ci Constructor IServiceProvider serviceProvider Service provider object[] param Parameters Returns Type Description object Instance | Edit this page View Source InvokeAuto(ConstructorInfo, params object?[]) Invoke a constructor and complete parameters with default values Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static object InvokeAuto(this ConstructorInfo ci, params object?[] param) Parameters Type Name Description ConstructorInfo ci Constructor object[] param Parameters Returns Type Description object Instance | Edit this page View Source InvokeAuto(MethodInfo, in object?, in IServiceProvider, params object?[]) Invoke a method and complete parameters with default values Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static object? InvokeAuto(this MethodInfo mi, in object? obj, in IServiceProvider serviceProvider, params object?[] param) Parameters Type Name Description MethodInfo mi Method object obj Object IServiceProvider serviceProvider Service provider object[] param Parameters Returns Type Description object Return value | Edit this page View Source InvokeAuto(MethodInfo, in object?, params object?[]) Invoke a method and complete parameters with default values Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static object? InvokeAuto(this MethodInfo mi, in object? obj, params object?[] param) Parameters Type Name Description MethodInfo mi Method object obj Object object[] param Parameters Returns Type Description object Return value | Edit this page View Source InvokeAutoAsync(ConstructorInfo, IAsyncServiceProvider, params object?[]) Invoke a constructor and complete parameters with default values Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<object> InvokeAutoAsync(this ConstructorInfo ci, IAsyncServiceProvider serviceProvider, params object?[] param) Parameters Type Name Description ConstructorInfo ci Constructor IAsyncServiceProvider serviceProvider Service provider object[] param Parameters Returns Type Description Task<object> Instance | Edit this page View Source InvokeAutoAsync(MethodInfo, object?, IServiceProvider, params object?[]) Invoke a method and complete parameters with default values Declaration public static Task<object?> InvokeAutoAsync(this MethodInfo mi, object? obj, IServiceProvider serviceProvider, params object?[] param) Parameters Type Name Description MethodInfo mi Method object obj Object IServiceProvider serviceProvider Service provider object[] param Parameters Returns Type Description Task<object> Return value | Edit this page View Source InvokeAutoAsync(MethodInfo, object?, params object?[]) Invoke a method and complete parameters with default values Declaration public static Task<object?> InvokeAutoAsync(this MethodInfo mi, object? obj, params object?[] param) Parameters Type Name Description MethodInfo mi Method object obj Object object[] param Parameters Returns Type Description Task<object> Return value | Edit this page View Source InvokeAutoAsync(MethodInfo, object?, IAsyncServiceProvider, params object?[]) Invoke a method and complete parameters with default values Declaration public static Task<object?> InvokeAutoAsync(this MethodInfo mi, object? obj, IAsyncServiceProvider serviceProvider, params object?[] param) Parameters Type Name Description MethodInfo mi Method object obj Object IAsyncServiceProvider serviceProvider Service provider object[] param Parameters Returns Type Description Task<object> Return value | Edit this page View Source InvokeAutoAsync<T>(ConstructorInfo, IAsyncServiceProvider, params object?[]) Invoke a constructor and complete parameters with default values Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<T> InvokeAutoAsync<T>(this ConstructorInfo ci, IAsyncServiceProvider serviceProvider, params object?[] param) Parameters Type Name Description ConstructorInfo ci Constructor IAsyncServiceProvider serviceProvider Service provider object[] param Parameters Returns Type Description Task<T> Instance Type Parameters Name Description T Return type | Edit this page View Source InvokeAutoAsync<T>(MethodInfo, object?, IServiceProvider, params object?[]) Invoke a method and complete parameters with default values Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<T?> InvokeAutoAsync<T>(this MethodInfo mi, object? obj, IServiceProvider serviceProvider, params object?[] param) Parameters Type Name Description MethodInfo mi Method object obj Object IServiceProvider serviceProvider Service provider object[] param Parameters Returns Type Description Task<T> Return value Type Parameters Name Description T Return type | Edit this page View Source InvokeAutoAsync<T>(MethodInfo, object?, params object?[]) Invoke a method and complete parameters with default values Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<T?> InvokeAutoAsync<T>(this MethodInfo mi, object? obj, params object?[] param) Parameters Type Name Description MethodInfo mi Method object obj Object object[] param Parameters Returns Type Description Task<T> Return value Type Parameters Name Description T Return type | Edit this page View Source InvokeAutoAsync<T>(MethodInfo, object?, IAsyncServiceProvider, params object?[]) Invoke a method and complete parameters with default values Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<T?> InvokeAutoAsync<T>(this MethodInfo mi, object? obj, IAsyncServiceProvider serviceProvider, params object?[] param) Parameters Type Name Description MethodInfo mi Method object obj Object IAsyncServiceProvider serviceProvider Service provider object[] param Parameters Returns Type Description Task<T> Return value Type Parameters Name Description T Return type | Edit this page View Source InvokeAuto<T>(ConstructorInfo, IServiceProvider, params object?[]) Invoke a constructor and complete parameters with default values Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static T InvokeAuto<T>(this ConstructorInfo ci, IServiceProvider serviceProvider, params object?[] param) Parameters Type Name Description ConstructorInfo ci Constructor IServiceProvider serviceProvider Service provider object[] param Parameters Returns Type Description T Instance Type Parameters Name Description T Return type | Edit this page View Source InvokeAuto<T>(ConstructorInfo, params object?[]) Invoke a constructor and complete parameters with default values Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static T InvokeAuto<T>(this ConstructorInfo ci, params object?[] param) Parameters Type Name Description ConstructorInfo ci Constructor object[] param Parameters Returns Type Description T Instance Type Parameters Name Description T Return type | Edit this page View Source InvokeAuto<T>(MethodInfo, in object?, in IServiceProvider, params object?[]) Invoke a method and complete parameters with default values Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static T? InvokeAuto<T>(this MethodInfo mi, in object? obj, in IServiceProvider serviceProvider, params object?[] param) Parameters Type Name Description MethodInfo mi Method object obj Object IServiceProvider serviceProvider Service provider object[] param Parameters Returns Type Description T Return value Type Parameters Name Description T Return type | Edit this page View Source InvokeAuto<T>(MethodInfo, in object?, params object?[]) Invoke a method and complete parameters with default values Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static T? InvokeAuto<T>(this MethodInfo mi, in object? obj, params object?[] param) Parameters Type Name Description MethodInfo mi Method object obj Object object[] param Parameters Returns Type Description T Return value Type Parameters Name Description T Return type | Edit this page View Source IsAssignableFromExt(Type, in Type) Determine if a type can be assigned from another type (matches the generic type definition, too) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsAssignableFromExt(this Type type, in Type other) Parameters Type Name Description Type type Type Type other Other type Returns Type Description bool If assignable | Edit this page View Source IsInitOnly(PropertyInfo) Determine if a property is init-only Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsInitOnly(this PropertyInfo pi) Parameters Type Name Description PropertyInfo pi Property Returns Type Description bool Is init-only? | Edit this page View Source IsInitOnly(PropertyInfoExt) Determine if a property is init-only Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsInitOnly(this PropertyInfoExt pi) Parameters Type Name Description PropertyInfoExt pi Property Returns Type Description bool Is init-only? | Edit this page View Source IsNullable(FieldInfo, in NullabilityInfoContext?) Determine if a field is nullable Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsNullable(this FieldInfo fi, in NullabilityInfoContext? nic = null) Parameters Type Name Description FieldInfo fi Field NullabilityInfoContext nic Nullability info context Returns Type Description bool Is nullable? | Edit this page View Source IsNullable(ICustomAttributeProvider) Determine if nullable Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsNullable(this ICustomAttributeProvider cap) Parameters Type Name Description ICustomAttributeProvider cap Custom attribute provider Returns Type Description bool Is nullable? | Edit this page View Source IsNullable(MethodInfo, in NullabilityInfoContext?) Determine if a method return value is nullable Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsNullable(this MethodInfo mi, in NullabilityInfoContext? nic = null) Parameters Type Name Description MethodInfo mi Method NullabilityInfoContext nic Nullability info context Returns Type Description bool Is nullable? | Edit this page View Source IsNullable(NullabilityInfo) Determine if nullable Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsNullable(this NullabilityInfo ni) Parameters Type Name Description NullabilityInfo ni Nullability info Returns Type Description bool Is nullable? | Edit this page View Source IsNullable(ParameterInfo, in NullabilityInfoContext?) Determine if a parameter is nullable Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsNullable(this ParameterInfo pi, in NullabilityInfoContext? nic = null) Parameters Type Name Description ParameterInfo pi Parameter NullabilityInfoContext nic Nullability info context Returns Type Description bool Is nullable? | Edit this page View Source IsNullable(PropertyInfo, in NullabilityInfoContext?) Determine if a property is nullable Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsNullable(this PropertyInfo pi, in NullabilityInfoContext? nic = null) Parameters Type Name Description PropertyInfo pi Property NullabilityInfoContext nic Nullability info context Returns Type Description bool Is nullable? | Edit this page View Source IsNullable(Type) Determine if a type is nullable Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsNullable(this Type type) Parameters Type Name Description Type type Type Returns Type Description bool Is nullable? | Edit this page View Source SetValueFast(PropertyInfo, in object?, in object?) Faster SetValue(object, object) Declaration public static void SetValueFast(this PropertyInfo pi, in object? obj, in object? value) Parameters Type Name Description PropertyInfo pi Property object obj Object object value Value | Edit this page View Source SetValueFast(PropertyInfoExt, in object?, in object?) Faster SetValue(object, object) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static void SetValueFast(this PropertyInfoExt pi, in object? obj, in object? value) Parameters Type Name Description PropertyInfoExt pi Property object obj Object object value Value | Edit this page View Source UnwrapFinalTaskResultType(Type) Unwrap the final result type of a task type recursive Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Type? UnwrapFinalTaskResultType(this Type task) Parameters Type Name Description Type task Task type Returns Type Description Type Final result type"
  },
  "api/wan24.Core.RegularExpressions.html": {
    "href": "api/wan24.Core.RegularExpressions.html",
    "title": "Class RegularExpressions | wan24-Core",
    "keywords": "Class RegularExpressions Regular expressions Inheritance object RegularExpressions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class RegularExpressions Fields | Edit this page View Source GUID GUID Declaration public const string GUID = \"^[0-9|a-f]{8}-([0-9|a-f]{4}-){3}[0-9|a-f]{12}$\" Field Value Type Description string | Edit this page View Source HEX_STRING Regular expression to match a hex string Declaration public const string HEX_STRING = \"^[a-f|0-9]+$\" Field Value Type Description string | Edit this page View Source JSON Regular expression to match a possible JSON value Declaration public const string JSON = \"^\\\\s*(null|true|false|\\\\d+(\\\\.\\\\d+)?|\\\\\\\"(\\\\\\\\.|[^\\\\\\\\\\\\\\\"])*[^\\\\\\\\]\\\\\\\"|\\\\[.*\\\\]|\\\\{.*\\\\})\\\\s*$\" Field Value Type Description string | Edit this page View Source LINUX_PATH Regular expression to match a possible Linux path (won't validate!) Declaration public const string LINUX_PATH = \"^\\\\/?[^\\\\/]+(\\\\/[^\\\\/]+){1,}\\\\/?$\" Field Value Type Description string | Edit this page View Source LOCALE Locale using a dash or underscore ($1 contains the first part, $2 the second part) Declaration public const string LOCALE = \"^([a-z]{2})[-_]([A-Z]{2})$\" Field Value Type Description string | Edit this page View Source LOCALE_WITH_DASH Locale using a dash ($1 contains the first part, $2 the second part) Declaration public const string LOCALE_WITH_DASH = \"^([a-z]{2})-([A-Z]{2})$\" Field Value Type Description string | Edit this page View Source LOCALE_WITH_UNDERSCORE Locale using an underscore ($1 contains the first part, $2 the second part) Declaration public const string LOCALE_WITH_UNDERSCORE = \"^([a-z]{2})_([A-Z]{2})$\" Field Value Type Description string | Edit this page View Source MIME_TYPE MIME type ($1 contains the part before the slash, $2 the part after the slash) Declaration public const string MIME_TYPE = \"^(\\\\w+)\\\\/([-.\\\\w]+(?:\\\\+[-.\\\\w]+)?)$\" Field Value Type Description string | Edit this page View Source NEW_LINE New line ($1 contains the new line control characters) Declaration public const string NEW_LINE = \"(\\\\r?\\\\n)\" Field Value Type Description string | Edit this page View Source NO_NEW_LINE No new line Declaration public const string NO_NEW_LINE = \"[^\\\\r\\\\n]\" Field Value Type Description string | Edit this page View Source PARSER_VAR Regular expression to match a string which may contain a string parser variable Declaration public const string PARSER_VAR = \"\\\\%\\\\{[^\\\\r\\\\n]+\\\\}\" Field Value Type Description string | Edit this page View Source RX_GUID GUID Declaration public static readonly Regex RX_GUID Field Value Type Description Regex | Edit this page View Source RX_HEX_STRING Regular expression to match a hex string Declaration public static readonly Regex RX_HEX_STRING Field Value Type Description Regex | Edit this page View Source RX_JSON Regular expression to match a possible JSON value Declaration public static readonly Regex RX_JSON Field Value Type Description Regex | Edit this page View Source RX_LINUX_PATH Regular expression to match a possible Linux path (won't validate!) Declaration public static readonly Regex RX_LINUX_PATH Field Value Type Description Regex | Edit this page View Source RX_LOCALE Locale using a dash or underscore ($1 contains the first part, $2 the second part) Declaration public static readonly Regex RX_LOCALE Field Value Type Description Regex | Edit this page View Source RX_LOCALE_WITH_DASH Locale using a dash ($1 contains the first part, $2 the second part) Declaration public static readonly Regex RX_LOCALE_WITH_DASH Field Value Type Description Regex | Edit this page View Source RX_LOCALE_WITH_UNDERSCORE Locale using an underscore ($1 contains the first part, $2 the second part) Declaration public static readonly Regex RX_LOCALE_WITH_UNDERSCORE Field Value Type Description Regex | Edit this page View Source RX_MIME_TYPE MIME type ($1 contains the part before the slash, $2 the part after the slash) Declaration public static readonly Regex RX_MIME_TYPE Field Value Type Description Regex | Edit this page View Source RX_NEW_LINE New line ($1 contains the new line control characters) Declaration public static readonly Regex RX_NEW_LINE Field Value Type Description Regex | Edit this page View Source RX_NO_NEW_LINE No new line Declaration public static readonly Regex RX_NO_NEW_LINE Field Value Type Description Regex | Edit this page View Source RX_PARSER_VAR Regular expression to match a string which may contain a string parser variable Declaration public static readonly Regex RX_PARSER_VAR Field Value Type Description Regex | Edit this page View Source RX_STRING_LITERAL Regular expression to match a string literal Declaration public static readonly Regex RX_STRING_LITERAL Field Value Type Description Regex | Edit this page View Source RX_WINDOWS_PATH Regular expression to match a possible Windows path (won't validate!) Declaration public static readonly Regex RX_WINDOWS_PATH Field Value Type Description Regex | Edit this page View Source STRING_LITERAL Regular expression to match a string literal Declaration public const string STRING_LITERAL = \"^\\\\\\\"(\\\\\\\\.|[^\\\\\\\\\\\\\\\"])*[^\\\\\\\\]\\\\\\\"$\" Field Value Type Description string | Edit this page View Source WINDOWS_PATH Regular expression to match a possible Windows path (won't validate!) Declaration public const string WINDOWS_PATH = \"^([a-z][\\\\/\\\\\\\\]\\\\:?|[\\\\/\\\\\\\\]?[a-z][\\\\/\\\\\\\\])[\\\\/\\\\\\\\]\" Field Value Type Description string Properties | Edit this page View Source NamedExpressionCount Number of named expressions Declaration public static int NamedExpressionCount { get; } Property Value Type Description int | Edit this page View Source NamedExpressionNames Named expression names Declaration public static string[] NamedExpressionNames { get; } Property Value Type Description string[] | Edit this page View Source NamedExpressions Named expressions as dictionary Declaration public static Dictionary<string, string> NamedExpressions { get; } Property Value Type Description Dictionary<string, string> | Edit this page View Source NamedRegex Named Regex as dictionary Declaration public static Dictionary<string, Regex> NamedRegex { get; } Property Value Type Description Dictionary<string, Regex> Methods | Edit this page View Source Add(string, string, RegexOptions) Add an expression Declaration public static Regex Add(string name, string expression, RegexOptions options = RegexOptions.Compiled) Parameters Type Name Description string name Name string expression Expression RegexOptions options Options Returns Type Description Regex Regex | Edit this page View Source Contains(string) Determine if a named expression exists Declaration public static bool Contains(string name) Parameters Type Name Description string name Name Returns Type Description bool If the expression exists | Edit this page View Source GetPattern(string) Get an expression pattern Declaration public static string? GetPattern(string name) Parameters Type Name Description string name Name Returns Type Description string Pattern | Edit this page View Source GetRegex(string) Get a regular expression Declaration public static Regex? GetRegex(string name) Parameters Type Name Description string name Name Returns Type Description Regex Regex | Edit this page View Source Remove(string) Remove an expression Declaration public static void Remove(string name) Parameters Type Name Description string name Name"
  },
  "api/wan24.Core.RentedArray-1.html": {
    "href": "api/wan24.Core.RentedArray-1.html",
    "title": "Class RentedArray<T> | wan24-Core",
    "keywords": "Class RentedArray<T> Pool rented array (returns the array to the pool, when disposed) Inheritance object DisposableBase RentedArray<T> Implements IWillDispose IDisposableObject IAsyncDisposable IRentedArray<T> IArray<T> IEnumerable<T> IEnumerable IEquatable<Memory<T>> IDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class RentedArray<T> : DisposableBase, IWillDispose, IDisposableObject, IAsyncDisposable, IRentedArray<T>, IArray<T>, IEnumerable<T>, IEnumerable, IEquatable<Memory<T>>, IDisposable Type Parameters Name Description T Item type Constructors | Edit this page View Source RentedArray(in ArrayPool<T>, in T[], int?, in bool) Constructor Declaration public RentedArray(in ArrayPool<T> pool, in T[] arr, int? len = null, in bool clean = false) Parameters Type Name Description ArrayPool<T> pool Pool T[] arr Rented array int? len Length bool clean Clean the rented array? | Edit this page View Source RentedArray(in int, in ArrayPool<T>?, in bool) Constructor Declaration public RentedArray(in int len, in ArrayPool<T>? pool = null, in bool clean = true) Parameters Type Name Description int len Length ArrayPool<T> pool Pool bool clean Clean the rented array? Properties | Edit this page View Source Array Array Declaration public T[] Array { get; } Property Value Type Description T[] | Edit this page View Source Clear Clear the array when returning? Declaration public bool Clear { get; set; } Property Value Type Description bool | Edit this page View Source this[Index, Index] Get a range Declaration public Memory<T> this[Index start, Index end] { get; } Parameters Type Name Description Index start Start Index end End Property Value Type Description Memory<T> Range memory | Edit this page View Source this[int] Get/set an element Declaration public T this[int offset] { get; set; } Parameters Type Name Description int offset Index Property Value Type Description T Element | Edit this page View Source this[Range] Get a range Declaration public Memory<T> this[Range range] { get; } Parameters Type Name Description Range range Range Property Value Type Description Memory<T> Range memory | Edit this page View Source Length Length Declaration public int Length { get; } Property Value Type Description int | Edit this page View Source LongLength Length Declaration public long LongLength { get; } Property Value Type Description long | Edit this page View Source Memory Memory Declaration public Memory<T> Memory { get; } Property Value Type Description Memory<T> | Edit this page View Source Pool Pool Declaration public ArrayPool<T> Pool { get; } Property Value Type Description ArrayPool<T> | Edit this page View Source Span Span Declaration public Span<T> Span { get; } Property Value Type Description Span<T> Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source Equals(Memory<T>) Indicates whether the current object is equal to another object of the same type. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public bool Equals(Memory<T> other) Parameters Type Name Description Memory<T> other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetCopy() Create a non-rented copy of the array Declaration public T[] GetCopy() Returns Type Description T[] Copy | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() Operators | Edit this page View Source implicit operator int(in RentedArray<T>) Cast as Int32 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in RentedArray<T> arr) Parameters Type Name Description RentedArray<T> arr Array Returns Type Description int | Edit this page View Source implicit operator Memory<T>(in RentedArray<T>) Cast as memory Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Memory<T>(in RentedArray<T> arr) Parameters Type Name Description RentedArray<T> arr Array Returns Type Description Memory<T> | Edit this page View Source implicit operator Span<T>(in RentedArray<T>) Cast as span Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Span<T>(in RentedArray<T> arr) Parameters Type Name Description RentedArray<T> arr Array Returns Type Description Span<T> | Edit this page View Source implicit operator T[](in RentedArray<T>) Cast as array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T[](in RentedArray<T> arr) Parameters Type Name Description RentedArray<T> arr Array (may be longer than Length!) Returns Type Description T[] Implements IWillDispose IDisposableObject IAsyncDisposable IRentedArray<T> IArray<T> IEnumerable<T> IEnumerable IEquatable<T> IDisposable Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.RentedArrayRefStruct-1.html": {
    "href": "api/wan24.Core.RentedArrayRefStruct-1.html",
    "title": "Struct RentedArrayRefStruct<T> | wan24-Core",
    "keywords": "Struct RentedArrayRefStruct<T> Pool rented array (returns the array to the pool, when disposed) Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public ref struct RentedArrayRefStruct<T> Type Parameters Name Description T Item type Constructors | Edit this page View Source RentedArrayRefStruct(in ArrayPool<T>, in T[], int?, in bool) Constructor Declaration public RentedArrayRefStruct(in ArrayPool<T> pool, in T[] arr, int? len = null, in bool clean = false) Parameters Type Name Description ArrayPool<T> pool Pool T[] arr Rented array int? len Length bool clean Clean the rented array? | Edit this page View Source RentedArrayRefStruct(in int, in ArrayPool<T>?, in bool) Constructor Declaration public RentedArrayRefStruct(in int len, in ArrayPool<T>? pool = null, in bool clean = true) Parameters Type Name Description int len Length ArrayPool<T> pool Pool bool clean Clean the rented array? Fields | Edit this page View Source Array Rented array Declaration public readonly T[] Array Field Value Type Description T[] | Edit this page View Source Clear Clear the rented array before returning? Declaration public bool Clear Field Value Type Description bool | Edit this page View Source Length Length Declaration public readonly int Length Field Value Type Description int | Edit this page View Source Pool Array pool Declaration public readonly ArrayPool<T> Pool Field Value Type Description ArrayPool<T> | Edit this page View Source Span Span Declaration public readonly Span<T> Span Field Value Type Description Span<T> Properties | Edit this page View Source this[Index, Index] Get as span Declaration public readonly Span<T> this[in Index start, in Index end] { get; } Parameters Type Name Description Index start Start Index end End Property Value Type Description Span<T> Span | Edit this page View Source this[int] Get/set an item Declaration public readonly T this[in int offset] { get; set; } Parameters Type Name Description int offset Offset Property Value Type Description T Item | Edit this page View Source this[Range] Get as span Declaration public readonly Span<T> this[in Range range] { get; } Parameters Type Name Description Range range Range Property Value Type Description Span<T> Span Methods | Edit this page View Source Dispose() Dispose Declaration public readonly void Dispose() | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetCopy() Get a copy of the array Declaration public readonly T[] GetCopy() Returns Type Description T[] | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode()"
  },
  "api/wan24.Core.RentedArrayStruct-1.html": {
    "href": "api/wan24.Core.RentedArrayStruct-1.html",
    "title": "Struct RentedArrayStruct<T> | wan24-Core",
    "keywords": "Struct RentedArrayStruct<T> Pool rented array (returns the array to the pool, when disposed) Implements IRentedArray<T> IArray<T> IEnumerable<T> IEnumerable IEquatable<Memory<T>> IDisposable Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public struct RentedArrayStruct<T> : IRentedArray<T>, IArray<T>, IEnumerable<T>, IEnumerable, IEquatable<Memory<T>>, IDisposable Type Parameters Name Description T Item type Constructors | Edit this page View Source RentedArrayStruct(in ArrayPool<T>, in T[], int?, in bool) Constructor Declaration public RentedArrayStruct(in ArrayPool<T> pool, in T[] arr, int? len = null, in bool clean = false) Parameters Type Name Description ArrayPool<T> pool Pool T[] arr Rented array int? len Length bool clean Clean the rented array? | Edit this page View Source RentedArrayStruct(in int, in ArrayPool<T>?, in bool) Constructor Declaration public RentedArrayStruct(in int len, in ArrayPool<T>? pool = null, in bool clean = true) Parameters Type Name Description int len Length ArrayPool<T> pool Pool bool clean Clean the rented array? Properties | Edit this page View Source Array Array Declaration public readonly T[] Array { get; } Property Value Type Description T[] | Edit this page View Source Clear Clear the array when returning? Declaration public bool Clear { readonly get; set; } Property Value Type Description bool | Edit this page View Source this[Index, Index] Get a range Declaration public readonly Memory<T> this[Index start, Index end] { get; } Parameters Type Name Description Index start Start Index end End Property Value Type Description Memory<T> Range memory | Edit this page View Source this[int] Get/set an element Declaration public readonly T this[int offset] { get; set; } Parameters Type Name Description int offset Index Property Value Type Description T Element | Edit this page View Source this[Range] Get a range Declaration public readonly Memory<T> this[Range range] { get; } Parameters Type Name Description Range range Range Property Value Type Description Memory<T> Range memory | Edit this page View Source Length Length Declaration public readonly int Length { get; } Property Value Type Description int | Edit this page View Source LongLength Length Declaration public readonly long LongLength { get; } Property Value Type Description long | Edit this page View Source Memory Memory Declaration public readonly Memory<T> Memory { get; } Property Value Type Description Memory<T> | Edit this page View Source Pool Pool Declaration public readonly ArrayPool<T> Pool { get; } Property Value Type Description ArrayPool<T> | Edit this page View Source Span Span Declaration public readonly Span<T> Span { get; } Property Value Type Description Span<T> Methods | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source Equals(Memory<T>) Indicates whether the current object is equal to another object of the same type. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly bool Equals(Memory<T> other) Parameters Type Name Description Memory<T> other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetCopy() Create a non-rented copy of the array Declaration public readonly T[] GetCopy() Returns Type Description T[] Copy | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Edit this page View Source operator ==(in RentedArrayStruct<T>, in RentedArrayStruct<T>) Equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in RentedArrayStruct<T> left, in RentedArrayStruct<T> right) Parameters Type Name Description RentedArrayStruct<T> left Left RentedArrayStruct<T> right Right Returns Type Description bool Equals? | Edit this page View Source implicit operator int(in RentedArrayStruct<T>) Cast as Int32 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in RentedArrayStruct<T> arr) Parameters Type Name Description RentedArrayStruct<T> arr Array Returns Type Description int | Edit this page View Source implicit operator Memory<T>(in RentedArrayStruct<T>) Cast as memory Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Memory<T>(in RentedArrayStruct<T> arr) Parameters Type Name Description RentedArrayStruct<T> arr Array Returns Type Description Memory<T> | Edit this page View Source implicit operator Span<T>(in RentedArrayStruct<T>) Cast as span Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Span<T>(in RentedArrayStruct<T> arr) Parameters Type Name Description RentedArrayStruct<T> arr Array Returns Type Description Span<T> | Edit this page View Source implicit operator T[](in RentedArrayStruct<T>) Cast as array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T[](in RentedArrayStruct<T> arr) Parameters Type Name Description RentedArrayStruct<T> arr Array (may be longer than Length!) Returns Type Description T[] | Edit this page View Source operator !=(in RentedArrayStruct<T>, in RentedArrayStruct<T>) Not equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in RentedArrayStruct<T> left, in RentedArrayStruct<T> right) Parameters Type Name Description RentedArrayStruct<T> left Left RentedArrayStruct<T> right Right Returns Type Description bool Not equal? Implements IRentedArray<T> IArray<T> IEnumerable<T> IEnumerable IEquatable<T> IDisposable Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.RentedArrayStructSimple-1.html": {
    "href": "api/wan24.Core.RentedArrayStructSimple-1.html",
    "title": "Struct RentedArrayStructSimple<T> | wan24-Core",
    "keywords": "Struct RentedArrayStructSimple<T> Pool rented array (returns the array to the pool, when disposed; not thread-safe) Implements IRentedArray<T> IArray<T> IEnumerable<T> IEnumerable IEquatable<Memory<T>> IDisposable Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public struct RentedArrayStructSimple<T> : IRentedArray<T>, IArray<T>, IEnumerable<T>, IEnumerable, IEquatable<Memory<T>>, IDisposable Type Parameters Name Description T Item type Constructors | Edit this page View Source RentedArrayStructSimple(in ArrayPool<T>, in T[], int?, in bool) Constructor Declaration public RentedArrayStructSimple(in ArrayPool<T> pool, in T[] arr, int? len = null, in bool clean = false) Parameters Type Name Description ArrayPool<T> pool Pool T[] arr Rented array int? len Length bool clean Clean the rented array? | Edit this page View Source RentedArrayStructSimple(in int, in ArrayPool<T>?, in bool) Constructor Declaration public RentedArrayStructSimple(in int len, in ArrayPool<T>? pool = null, in bool clean = true) Parameters Type Name Description int len Length ArrayPool<T> pool Pool bool clean Clean the rented array? Properties | Edit this page View Source Array Array Declaration public readonly T[] Array { get; } Property Value Type Description T[] | Edit this page View Source Clear Clear the array when returning? Declaration public bool Clear { readonly get; set; } Property Value Type Description bool | Edit this page View Source this[Index, Index] Get a range Declaration public readonly Memory<T> this[Index start, Index end] { get; } Parameters Type Name Description Index start Start Index end End Property Value Type Description Memory<T> Range memory | Edit this page View Source this[int] Get/set an element Declaration public readonly T this[int offset] { get; set; } Parameters Type Name Description int offset Index Property Value Type Description T Element | Edit this page View Source this[Range] Get a range Declaration public readonly Memory<T> this[Range range] { get; } Parameters Type Name Description Range range Range Property Value Type Description Memory<T> Range memory | Edit this page View Source Length Length Declaration public readonly int Length { get; } Property Value Type Description int | Edit this page View Source LongLength Length Declaration public readonly long LongLength { get; } Property Value Type Description long | Edit this page View Source Memory Memory Declaration public readonly Memory<T> Memory { get; } Property Value Type Description Memory<T> | Edit this page View Source Pool Pool Declaration public readonly ArrayPool<T> Pool { get; } Property Value Type Description ArrayPool<T> | Edit this page View Source Span Span Declaration public readonly Span<T> Span { get; } Property Value Type Description Span<T> Methods | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source Equals(Memory<T>) Indicates whether the current object is equal to another object of the same type. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly bool Equals(Memory<T> other) Parameters Type Name Description Memory<T> other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetCopy() Create a non-rented copy of the array Declaration public readonly T[] GetCopy() Returns Type Description T[] Copy | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Edit this page View Source operator ==(in RentedArrayStructSimple<T>, in RentedArrayStructSimple<T>) Equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in RentedArrayStructSimple<T> left, in RentedArrayStructSimple<T> right) Parameters Type Name Description RentedArrayStructSimple<T> left Left RentedArrayStructSimple<T> right Right Returns Type Description bool Equals? | Edit this page View Source implicit operator int(in RentedArrayStructSimple<T>) Cast as Int32 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in RentedArrayStructSimple<T> arr) Parameters Type Name Description RentedArrayStructSimple<T> arr Array Returns Type Description int | Edit this page View Source implicit operator Memory<T>(in RentedArrayStructSimple<T>) Cast as memory Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Memory<T>(in RentedArrayStructSimple<T> arr) Parameters Type Name Description RentedArrayStructSimple<T> arr Array Returns Type Description Memory<T> | Edit this page View Source implicit operator Span<T>(in RentedArrayStructSimple<T>) Cast as span Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Span<T>(in RentedArrayStructSimple<T> arr) Parameters Type Name Description RentedArrayStructSimple<T> arr Array Returns Type Description Span<T> | Edit this page View Source implicit operator T[](in RentedArrayStructSimple<T>) Cast as array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T[](in RentedArrayStructSimple<T> arr) Parameters Type Name Description RentedArrayStructSimple<T> arr Array (may be longer than Length!) Returns Type Description T[] | Edit this page View Source operator !=(in RentedArrayStructSimple<T>, in RentedArrayStructSimple<T>) Not equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in RentedArrayStructSimple<T> left, in RentedArrayStructSimple<T> right) Parameters Type Name Description RentedArrayStructSimple<T> left Left RentedArrayStructSimple<T> right Right Returns Type Description bool Not equal? Implements IRentedArray<T> IArray<T> IEnumerable<T> IEnumerable IEquatable<T> IDisposable Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.RentedObject-1.html": {
    "href": "api/wan24.Core.RentedObject-1.html",
    "title": "Class RentedObject<T> | wan24-Core",
    "keywords": "Class RentedObject<T> Rented object (returns the rented object to the pool when disposing) Inheritance object DisposableBase RentedObject<T> Implements IWillDispose IDisposableObject IAsyncDisposable IRentedObject<T> IDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class RentedObject<T> : DisposableBase, IWillDispose, IDisposableObject, IAsyncDisposable, IRentedObject<T>, IDisposable Type Parameters Name Description T Rented object type Constructors | Edit this page View Source RentedObject(in IObjectPool<T>) Constructor Declaration public RentedObject(in IObjectPool<T> pool) Parameters Type Name Description IObjectPool<T> pool Pool | Edit this page View Source RentedObject(in IObjectPool<T>, in T) Constructor Declaration public RentedObject(in IObjectPool<T> pool, in T obj) Parameters Type Name Description IObjectPool<T> pool Pool T obj Rented object Properties | Edit this page View Source Object Rented object Declaration public T Object { get; } Property Value Type Description T | Edit this page View Source Pool Object pool Declaration public IObjectPool<T> Pool { get; } Property Value Type Description IObjectPool<T> | Edit this page View Source Reset Reset the IObjectPoolItem object when returning? Declaration public bool Reset { get; set; } Property Value Type Description bool Methods | Edit this page View Source CreateAsync(IAsyncObjectPool<T>) Create an instance asynchronous Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<RentedObject<T>> CreateAsync(IAsyncObjectPool<T> pool) Parameters Type Name Description IAsyncObjectPool<T> pool Object pool Returns Type Description Task<RentedObject<T>> Rented object | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() Operators | Edit this page View Source implicit operator T(in RentedObject<T>) Cast as rented object Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T(in RentedObject<T> rented) Parameters Type Name Description RentedObject<T> rented Rented object Returns Type Description T Implements IWillDispose IDisposableObject IAsyncDisposable IRentedObject<T> IDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.RentedObjectRefStruct-1.html": {
    "href": "api/wan24.Core.RentedObjectRefStruct-1.html",
    "title": "Struct RentedObjectRefStruct<T> | wan24-Core",
    "keywords": "Struct RentedObjectRefStruct<T> Rented object (returns the rented object to the pool when disposing) Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public ref struct RentedObjectRefStruct<T> where T : struct Type Parameters Name Description T Rented object type Constructors | Edit this page View Source RentedObjectRefStruct(in IObjectPool<T>) Constructor Declaration public RentedObjectRefStruct(in IObjectPool<T> pool) Parameters Type Name Description IObjectPool<T> pool Pool | Edit this page View Source RentedObjectRefStruct(in IObjectPool<T>, in T) Constructor Declaration public RentedObjectRefStruct(in IObjectPool<T> pool, in T obj) Parameters Type Name Description IObjectPool<T> pool Pool T obj Rented object Fields | Edit this page View Source Object Rented object Declaration public readonly T Object Field Value Type Description T | Edit this page View Source Pool Object pool Declaration public readonly IObjectPool<T> Pool Field Value Type Description IObjectPool<T> Properties | Edit this page View Source Reset Reset the IObjectPoolItem object when returning? Declaration public bool Reset { readonly get; set; } Property Value Type Description bool Methods | Edit this page View Source Dispose() Dispose Declaration public readonly void Dispose() | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Edit this page View Source implicit operator T(in RentedObjectRefStruct<T>) Cast as rented object Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T(in RentedObjectRefStruct<T> rented) Parameters Type Name Description RentedObjectRefStruct<T> rented Rented object Returns Type Description T"
  },
  "api/wan24.Core.RentedObjectStruct-1.html": {
    "href": "api/wan24.Core.RentedObjectStruct-1.html",
    "title": "Struct RentedObjectStruct<T> | wan24-Core",
    "keywords": "Struct RentedObjectStruct<T> Rented object (returns the rented object to the pool when disposing) Implements IRentedObject<T> IDisposable IEquatable<RentedObjectStruct<T>> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public record struct RentedObjectStruct<T> : IRentedObject<T>, IDisposable, IEquatable<RentedObjectStruct<T>> where T : struct Type Parameters Name Description T Rented object type Constructors | Edit this page View Source RentedObjectStruct(in IObjectPool<T>) Constructor Declaration public RentedObjectStruct(in IObjectPool<T> pool) Parameters Type Name Description IObjectPool<T> pool Pool | Edit this page View Source RentedObjectStruct(in IObjectPool<T>, in T) Constructor Declaration public RentedObjectStruct(in IObjectPool<T> pool, in T obj) Parameters Type Name Description IObjectPool<T> pool Pool T obj Rented object Properties | Edit this page View Source Object Rented object Declaration public readonly T Object { get; } Property Value Type Description T | Edit this page View Source Pool Object pool Declaration public readonly IObjectPool<T> Pool { get; } Property Value Type Description IObjectPool<T> | Edit this page View Source Reset Reset the IObjectPoolItem object when returning? Declaration public bool Reset { readonly get; set; } Property Value Type Description bool Methods | Edit this page View Source CreateAsync(IAsyncObjectPool<T>) Create an instance asynchronous Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<RentedObjectStruct<T>> CreateAsync(IAsyncObjectPool<T> pool) Parameters Type Name Description IAsyncObjectPool<T> pool Object pool Returns Type Description Task<RentedObjectStruct<T>> Rented object | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Operators | Edit this page View Source implicit operator T(in RentedObjectStruct<T>) Cast as rented object Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T(in RentedObjectStruct<T> rented) Parameters Type Name Description RentedObjectStruct<T> rented Rented object Returns Type Description T Implements IRentedObject<T> IDisposable IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.RentedObjectStructSimple-1.html": {
    "href": "api/wan24.Core.RentedObjectStructSimple-1.html",
    "title": "Struct RentedObjectStructSimple<T> | wan24-Core",
    "keywords": "Struct RentedObjectStructSimple<T> Rented object (returns the rented object to the pool when disposing; not thread-safe) Implements IRentedObject<T> IDisposable IEquatable<RentedObjectStructSimple<T>> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public record struct RentedObjectStructSimple<T> : IRentedObject<T>, IDisposable, IEquatable<RentedObjectStructSimple<T>> where T : struct Type Parameters Name Description T Rented object type Constructors | Edit this page View Source RentedObjectStructSimple(in IObjectPool<T>) Constructor Declaration public RentedObjectStructSimple(in IObjectPool<T> pool) Parameters Type Name Description IObjectPool<T> pool Pool | Edit this page View Source RentedObjectStructSimple(in IObjectPool<T>, in T) Constructor Declaration public RentedObjectStructSimple(in IObjectPool<T> pool, in T obj) Parameters Type Name Description IObjectPool<T> pool Pool T obj Rented object Properties | Edit this page View Source Object Rented object Declaration public readonly T Object { get; } Property Value Type Description T | Edit this page View Source Pool Object pool Declaration public readonly IObjectPool<T> Pool { get; } Property Value Type Description IObjectPool<T> | Edit this page View Source Reset Reset the IObjectPoolItem object when returning? Declaration public bool Reset { readonly get; set; } Property Value Type Description bool Methods | Edit this page View Source CreateAsync(IAsyncObjectPool<T>) Create an instance asynchronous Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<RentedObjectStructSimple<T>> CreateAsync(IAsyncObjectPool<T> pool) Parameters Type Name Description IAsyncObjectPool<T> pool Object pool Returns Type Description Task<RentedObjectStructSimple<T>> Rented object | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public readonly void Dispose() Operators | Edit this page View Source implicit operator T(in RentedObjectStructSimple<T>) Cast as rented object Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T(in RentedObjectStructSimple<T> rented) Parameters Type Name Description RentedObjectStructSimple<T> rented Rented object Returns Type Description T Implements IRentedObject<T> IDisposable IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ResetEvent.html": {
    "href": "api/wan24.Core.ResetEvent.html",
    "title": "Class ResetEvent | wan24-Core",
    "keywords": "Class ResetEvent Reset event Inheritance object DisposableBase ResetEvent Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class ResetEvent : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source ResetEvent(in bool, in bool) Constructor Declaration public ResetEvent(in bool initialState = false, in bool enableSyncWaiting = true) Parameters Type Name Description bool initialState Initial state bool enableSyncWaiting Enable synchronous waiting? Properties | Edit this page View Source IsSet Is set? Declaration public bool IsSet { get; } Property Value Type Description bool | Edit this page View Source SynchronousWaiting Is synchronous waiting enabled? Declaration public bool SynchronousWaiting { get; } Property Value Type Description bool Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source Reset(in CancellationToken) Reset the state Declaration public bool Reset(in CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description bool Did reset? | Edit this page View Source ResetAsync(CancellationToken) Reset the state Declaration public Task<bool> ResetAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> Did reset? | Edit this page View Source Set(in CancellationToken) Set the state Declaration public bool Set(in CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description bool Did set? | Edit this page View Source SetAsync(CancellationToken) Set the state Declaration public Task<bool> SetAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> Did set? | Edit this page View Source Wait(in CancellationToken) Wait for the state to be set Declaration public void Wait(in CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Exceptions Type Condition OperationCanceledException Canceled | Edit this page View Source Wait(in TimeSpan) Wait for the state to be set Declaration public void Wait(in TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Timeout Exceptions Type Condition TimeoutException Timeout | Edit this page View Source WaitAndReset(in CancellationToken) Wait for set and reset Declaration public void WaitAndReset(in CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token | Edit this page View Source WaitAndReset(TimeSpan) Wait for set and reset Declaration public void WaitAndReset(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Timeout | Edit this page View Source WaitAndResetAsync(CancellationToken) Wait for set and reset Declaration public Task WaitAndResetAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source WaitAndResetAsync(TimeSpan) Wait for set and reset Declaration public Task WaitAndResetAsync(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Timeout Returns Type Description Task | Edit this page View Source WaitAsync(CancellationToken) Wait for the state to be set Declaration public Task WaitAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Exceptions Type Condition OperationCanceledException Canceled | Edit this page View Source WaitAsync(TimeSpan) Wait for the state to be set Declaration public Task WaitAsync(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Timeout Returns Type Description Task Exceptions Type Condition TimeoutException Timeout Operators | Edit this page View Source implicit operator bool(in ResetEvent) Cast as set-flag Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in ResetEvent e) Parameters Type Name Description ResetEvent e Event Returns Type Description bool Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.RetryHelper.RetryOnError_Delegate.html": {
    "href": "api/wan24.Core.RetryHelper.RetryOnError_Delegate.html",
    "title": "Delegate RetryHelper.RetryOnError_Delegate | wan24-Core",
    "keywords": "Delegate RetryHelper.RetryOnError_Delegate Delegate to decide if to continue with the next try after an error (is being called before the delay) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate bool RetryHelper.RetryOnError_Delegate(Exception exception, TimeSpan? givenDelay, ref TimeSpan? delayToUse) Parameters Type Name Description Exception exception Exception TimeSpan? givenDelay Given delay TimeSpan? delayToUse Delay to use Returns Type Description bool Continue with the next try? Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.RetryHelper.TryAsync_Delegate-1.html": {
    "href": "api/wan24.Core.RetryHelper.TryAsync_Delegate-1.html",
    "title": "Delegate RetryHelper.TryAsync_Delegate<T> | wan24-Core",
    "keywords": "Delegate RetryHelper.TryAsync_Delegate<T> Delegate for a try action Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task<T> RetryHelper.TryAsync_Delegate<T>(int currentTry, CancellationToken cancellationToken) Parameters Type Name Description int currentTry Current try number CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Result Type Parameters Name Description T Result type Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.RetryHelper.TryAsync_Delegate.html": {
    "href": "api/wan24.Core.RetryHelper.TryAsync_Delegate.html",
    "title": "Delegate RetryHelper.TryAsync_Delegate | wan24-Core",
    "keywords": "Delegate RetryHelper.TryAsync_Delegate Delegate for a try action Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task RetryHelper.TryAsync_Delegate(int currentTry, CancellationToken cancellationToken) Parameters Type Name Description int currentTry Current try number CancellationToken cancellationToken Cancellation token Returns Type Description Task Delegate for a try action Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.RetryHelper.Try_Delegate-1.html": {
    "href": "api/wan24.Core.RetryHelper.Try_Delegate-1.html",
    "title": "Delegate RetryHelper.Try_Delegate<T> | wan24-Core",
    "keywords": "Delegate RetryHelper.Try_Delegate<T> Delegate for a try action Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate T RetryHelper.Try_Delegate<T>(int currentTry, CancellationToken cancellationToken) Parameters Type Name Description int currentTry Current try number CancellationToken cancellationToken Cancellation token Returns Type Description T Result Type Parameters Name Description T Result type Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.RetryHelper.Try_Delegate.html": {
    "href": "api/wan24.Core.RetryHelper.Try_Delegate.html",
    "title": "Delegate RetryHelper.Try_Delegate | wan24-Core",
    "keywords": "Delegate RetryHelper.Try_Delegate Delegate for a try action Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void RetryHelper.Try_Delegate(int currentTry, CancellationToken cancellationToken) Parameters Type Name Description int currentTry Current try number CancellationToken cancellationToken Cancellation token Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.RetryHelper.html": {
    "href": "api/wan24.Core.RetryHelper.html",
    "title": "Class RetryHelper | wan24-Core",
    "keywords": "Class RetryHelper Retry helper Inheritance object RetryHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class RetryHelper Methods | Edit this page View Source TryAction(in Try_Delegate, in int, in TimeSpan?, in TimeSpan?, in RetryOnError_Delegate?, in CancellationToken) Try to execute an action Declaration public static RetryInfo<object> TryAction(in RetryHelper.Try_Delegate action, in int maxNumberOfTries, in TimeSpan? timeout = null, in TimeSpan? delay = null, in RetryHelper.RetryOnError_Delegate? retryOnError = null, in CancellationToken cancellationToken = default) Parameters Type Name Description RetryHelper.Try_Delegate action Action to execute int maxNumberOfTries Max. number of retries TimeSpan? timeout Total timeout TimeSpan? delay Delay between retries RetryHelper.RetryOnError_Delegate retryOnError Delegate to determine if to retry after an error CancellationToken cancellationToken Cancellation token Returns Type Description RetryInfo<object> Retry information, which include the result | Edit this page View Source TryActionAsync(TryAsync_Delegate, int, TimeSpan?, TimeSpan?, RetryOnError_Delegate?, CancellationToken) Try to execute an action Declaration public static Task<RetryInfo<object>> TryActionAsync(RetryHelper.TryAsync_Delegate action, int maxNumberOfTries, TimeSpan? timeout = null, TimeSpan? delay = null, RetryHelper.RetryOnError_Delegate? retryOnError = null, CancellationToken cancellationToken = default) Parameters Type Name Description RetryHelper.TryAsync_Delegate action Action to execute int maxNumberOfTries Max. number of retries TimeSpan? timeout Total timeout TimeSpan? delay Delay between retries RetryHelper.RetryOnError_Delegate retryOnError Delegate to determine if to retry after an error CancellationToken cancellationToken Cancellation token Returns Type Description Task<RetryInfo<object>> Retry information, which include the result | Edit this page View Source TryActionAsync<T>(TryAsync_Delegate<T>, int, TimeSpan?, TimeSpan?, RetryOnError_Delegate?, CancellationToken) Try to execute an action Declaration public static Task<RetryInfo<T>> TryActionAsync<T>(RetryHelper.TryAsync_Delegate<T> action, int maxNumberOfTries, TimeSpan? timeout = null, TimeSpan? delay = null, RetryHelper.RetryOnError_Delegate? retryOnError = null, CancellationToken cancellationToken = default) Parameters Type Name Description RetryHelper.TryAsync_Delegate<T> action Action to execute int maxNumberOfTries Max. number of tries TimeSpan? timeout Total timeout TimeSpan? delay Delay between retries RetryHelper.RetryOnError_Delegate retryOnError Delegate to determine if to retry after an error CancellationToken cancellationToken Cancellation token Returns Type Description Task<RetryInfo<T>> Retry information, which include the result Type Parameters Name Description T Result type | Edit this page View Source TryAction<T>(in Try_Delegate<T>, in int, in TimeSpan?, in TimeSpan?, in RetryOnError_Delegate?, in CancellationToken) Try to execute an action Declaration public static RetryInfo<T> TryAction<T>(in RetryHelper.Try_Delegate<T> action, in int maxNumberOfTries, in TimeSpan? timeout = null, in TimeSpan? delay = null, in RetryHelper.RetryOnError_Delegate? retryOnError = null, in CancellationToken cancellationToken = default) Parameters Type Name Description RetryHelper.Try_Delegate<T> action Action to execute int maxNumberOfTries Max. number of tries TimeSpan? timeout Total timeout TimeSpan? delay Delay between retries RetryHelper.RetryOnError_Delegate retryOnError Delegate to determine if to retry after an error CancellationToken cancellationToken Cancellation token Returns Type Description RetryInfo<T> Retry information, which include the result Type Parameters Name Description T Result type"
  },
  "api/wan24.Core.RetryInfo-1.html": {
    "href": "api/wan24.Core.RetryInfo-1.html",
    "title": "Class RetryInfo<T> | wan24-Core",
    "keywords": "Class RetryInfo<T> Retry information Inheritance object RetryInfo<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class RetryInfo<T> Type Parameters Name Description T Result type Constructors | Edit this page View Source RetryInfo() Constructor Declaration public RetryInfo() Properties | Edit this page View Source Done Done time Declaration public DateTime Done { get; set; } Property Value Type Description DateTime | Edit this page View Source Exceptions Exceptions Declaration public List<Exception> Exceptions { get; } Property Value Type Description List<Exception> | Edit this page View Source NumberOfTries Number of tries Declaration public int NumberOfTries { get; set; } Property Value Type Description int | Edit this page View Source Result Result Declaration public T? Result { get; set; } Property Value Type Description T | Edit this page View Source Runtime Runtime Declaration public TimeSpan Runtime { get; } Property Value Type Description TimeSpan | Edit this page View Source Started Start time Declaration public DateTime Started { get; } Property Value Type Description DateTime | Edit this page View Source Succeed Succeed? Declaration public bool Succeed { get; set; } Property Value Type Description bool | Edit this page View Source WasCanceled Was canceled? Declaration public bool WasCanceled { get; } Property Value Type Description bool | Edit this page View Source WasTimeout Was timeout? Declaration public bool WasTimeout { get; } Property Value Type Description bool Methods | Edit this page View Source ThrowIfFailed() Throw an exception, if failed Declaration public T? ThrowIfFailed() Returns Type Description T Result Exceptions Type Condition AggregateException If failed Operators | Edit this page View Source implicit operator bool(in RetryInfo<T>) Cast as Succeed Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in RetryInfo<T> info) Parameters Type Name Description RetryInfo<T> info RetryInfo<T> Returns Type Description bool | Edit this page View Source implicit operator int(in RetryInfo<T>) Cast as NumberOfTries Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in RetryInfo<T> info) Parameters Type Name Description RetryInfo<T> info RetryInfo<T> Returns Type Description int | Edit this page View Source implicit operator T?(in RetryInfo<T>) Cast as Result Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T?(in RetryInfo<T> info) Parameters Type Name Description RetryInfo<T> info RetryInfo<T> Returns Type Description T Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Rgb.html": {
    "href": "api/wan24.Core.Rgb.html",
    "title": "Struct Rgb | wan24-Core",
    "keywords": "Struct Rgb RGB color value Implements IEquatable<Rgb> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public readonly record struct Rgb : IEquatable<Rgb> Constructors | Edit this page View Source Rgb() Constructor Declaration public Rgb() | Edit this page View Source Rgb(in int) Constructor Declaration public Rgb(in int rgb) Parameters Type Name Description int rgb RGB 24 bit unsigned integer value | Edit this page View Source Rgb(in int, in int, in int) Constructor Declaration public Rgb(in int r, in int g, in int b) Parameters Type Name Description int r Red 8 bit unsigned integer value int g Green 8 bit unsigned integer value int b Blue 8 bit unsigned integer value | Edit this page View Source Rgb(in ReadOnlySpan<byte>) Constructor Declaration public Rgb(in ReadOnlySpan<byte> rgb) Parameters Type Name Description ReadOnlySpan<byte> rgb RGB bytes Fields | Edit this page View Source B Blue 8 bit unsigned integer value Declaration public readonly int B Field Value Type Description int | Edit this page View Source BINARY_SIZE Binary structure size in bytes (returned from GetBytes()) Declaration public const int BINARY_SIZE = 3 Field Value Type Description int | Edit this page View Source B_FIELD_OFFSET Blue value byte offset Declaration public const int B_FIELD_OFFSET = 8 Field Value Type Description int | Edit this page View Source Black Black (min. value) Declaration public static readonly Rgb Black Field Value Type Description Rgb | Edit this page View Source G Green 8 bit unsigned integer value Declaration public readonly int G Field Value Type Description int | Edit this page View Source G_FIELD_OFFSET Green value byte offset Declaration public const int G_FIELD_OFFSET = 4 Field Value Type Description int | Edit this page View Source MAX_24BIT_RGB Max. unsigned 24 bit integer RGB value Declaration public const int MAX_24BIT_RGB = 16777215 Field Value Type Description int | Edit this page View Source R Red 8 bit unsigned integer value Declaration public readonly int R Field Value Type Description int | Edit this page View Source RX_CSS Regular expression to match a CSS RGB string (single line) Declaration public static readonly Regex RX_CSS Field Value Type Description Regex | Edit this page View Source R_FIELD_OFFSET Red value byte offset Declaration public const int R_FIELD_OFFSET = 0 Field Value Type Description int | Edit this page View Source STUCTURE_SIZE Structure size in bytes Declaration public const int STUCTURE_SIZE = 12 Field Value Type Description int | Edit this page View Source White White (max. value) Declaration public static readonly Rgb White Field Value Type Description Rgb Methods | Edit this page View Source GetBytes() Get the bytes of this RGB value Declaration public byte[] GetBytes() Returns Type Description byte[] RGB bytes | Edit this page View Source GetBytes(in Span<byte>) Get the bytes of this RGB value Declaration public Span<byte> GetBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Returns Type Description Span<byte> RGB bytes | Edit this page View Source Invert() Invert the color Declaration public Rgb Invert() Returns Type Description Rgb Inverted color | Edit this page View Source IsValidRgbUInt24(in int) Determine if a 24 bit RGB unsigned integer value is valid Declaration public static bool IsValidRgbUInt24(in int value) Parameters Type Name Description int value Value Returns Type Description bool If valid | Edit this page View Source Mix(in Rgb) Mix with another color Declaration public Rgb Mix(in Rgb other) Parameters Type Name Description Rgb other Other color Returns Type Description Rgb Mixed color | Edit this page View Source Parse(in string) Parse from a string Declaration public static Rgb Parse(in string str) Parameters Type Name Description string str String Returns Type Description Rgb Rgb | Edit this page View Source ParseCss(in string) Parse a CSS RGB color string (rgb or rgba) Declaration public static Rgb ParseCss(in string css) Parameters Type Name Description string css CSS RGB color string Returns Type Description Rgb Rgb | Edit this page View Source ParseHtml(string) Parse a HTML hex color string (with or without hash) Declaration public static Rgb ParseHtml(string html) Parameters Type Name Description string html HTML hex color string Returns Type Description Rgb Rgb | Edit this page View Source Sanitize(in int) Sanitize a RGB 24 bit unsigned integer value Declaration public static int Sanitize(in int rgb) Parameters Type Name Description int rgb RGB 24 bit unsigned integer value Returns Type Description int sanitized RGB 24 bit unsigned integer value | Edit this page View Source Shade(float) Shade the color Declaration public Rgb Shade(float factor) Parameters Type Name Description float factor Factor in percent (negative value darkens) Returns Type Description Rgb Shaded color | Edit this page View Source Tint(float) Tint the color Declaration public Rgb Tint(float factor) Parameters Type Name Description float factor Factor in percent (negative value darkens) Returns Type Description Rgb Tinted color | Edit this page View Source ToCssString() To CSS RGB color value Declaration public string ToCssString() Returns Type Description string CSS RGB color value | Edit this page View Source ToCssString(in float) To CSS RGB color value with alpha Declaration public string ToCssString(in float alpha) Parameters Type Name Description float alpha Alpha value (%) Returns Type Description string CSS RGB color value with alpha | Edit this page View Source ToHexString() To hex string Declaration public string ToHexString() Returns Type Description string Hex string (upper case) | Edit this page View Source ToHtmlString() To HTML hex string Declaration public string ToHtmlString() Returns Type Description string HTML hex string (lower case) | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source ToUInt24() To integer Declaration public int ToUInt24() Returns Type Description int RGB 24 bit unsigned integer value | Edit this page View Source TryParse(in string, out Rgb) Try parsing from a string Declaration public static bool TryParse(in string str, out Rgb result) Parameters Type Name Description string str String Rgb result Rgb Returns Type Description bool If succeed | Edit this page View Source TryParseCss(in string, out Rgb) Parse a CSS RGB color string (rgb or rgba) Declaration public static bool TryParseCss(in string css, out Rgb result) Parameters Type Name Description string css CSS RGB color string Rgb result Result Returns Type Description bool If succeed | Edit this page View Source TryParseHtml(string, out Rgb) Parse a HTML hex color string (with or without hash) Declaration public static bool TryParseHtml(string html, out Rgb result) Parameters Type Name Description string html HTML hex color string Rgb result Result Returns Type Description bool If succeed Operators | Edit this page View Source implicit operator Rgb(in byte[]) Cast from bytes Declaration public static implicit operator Rgb(in byte[] rgb) Parameters Type Name Description byte[] rgb RGB bytes Returns Type Description Rgb | Edit this page View Source implicit operator Rgb(in int) Cast from int 24 bit unsigned integer value Declaration public static implicit operator Rgb(in int rgb) Parameters Type Name Description int rgb 24 bit RGB unsigned integer value Returns Type Description Rgb | Edit this page View Source implicit operator Rgb(in Memory<byte>) Cast from memory Declaration public static implicit operator Rgb(in Memory<byte> rgb) Parameters Type Name Description Memory<byte> rgb RGB bytes Returns Type Description Rgb | Edit this page View Source implicit operator Rgb(in ReadOnlyMemory<byte>) Cast from memory Declaration public static implicit operator Rgb(in ReadOnlyMemory<byte> rgb) Parameters Type Name Description ReadOnlyMemory<byte> rgb RGB bytes Returns Type Description Rgb | Edit this page View Source implicit operator Rgb(in ReadOnlySpan<byte>) Cast from span Declaration public static implicit operator Rgb(in ReadOnlySpan<byte> rgb) Parameters Type Name Description ReadOnlySpan<byte> rgb RGB bytes Returns Type Description Rgb | Edit this page View Source implicit operator Rgb(in Span<byte>) Cast from span Declaration public static implicit operator Rgb(in Span<byte> rgb) Parameters Type Name Description Span<byte> rgb RGB bytes Returns Type Description Rgb | Edit this page View Source implicit operator Rgb(in string) Cast from string Declaration public static implicit operator Rgb(in string rgb) Parameters Type Name Description string rgb string Returns Type Description Rgb | Edit this page View Source implicit operator byte[](in Rgb) Cast as byte array Declaration public static implicit operator byte[](in Rgb rgb) Parameters Type Name Description Rgb rgb Rgb Returns Type Description byte[] | Edit this page View Source implicit operator int(in Rgb) Cast as int (24 bit unsigned integer value) Declaration public static implicit operator int(in Rgb rgb) Parameters Type Name Description Rgb rgb Rgb Returns Type Description int | Edit this page View Source implicit operator string(in Rgb) Cast as string Declaration public static implicit operator string(in Rgb rgb) Parameters Type Name Description Rgb rgb Rgb Returns Type Description string Implements IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.RgbA.html": {
    "href": "api/wan24.Core.RgbA.html",
    "title": "Struct RgbA | wan24-Core",
    "keywords": "Struct RgbA RGB with alpha Implements IEquatable<RgbA> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public readonly record struct RgbA : IEquatable<RgbA> Constructors | Edit this page View Source RgbA() Constructor Declaration public RgbA() | Edit this page View Source RgbA(in ReadOnlySpan<byte>) Constructor Declaration public RgbA(in ReadOnlySpan<byte> rgb) Parameters Type Name Description ReadOnlySpan<byte> rgb RGBA bytes | Edit this page View Source RgbA(in Rgb, in float) Constructor Declaration public RgbA(in Rgb rgb, in float alpha = 1) Parameters Type Name Description Rgb rgb RGB float alpha Alpha (%) Fields | Edit this page View Source ALPHA_FIELD_OFFSET Alpha field byte offset Declaration public const int ALPHA_FIELD_OFFSET = 12 Field Value Type Description int | Edit this page View Source Alpha Alpha (%) Declaration public readonly float Alpha Field Value Type Description float | Edit this page View Source BINARY_SIZE Binary structure size in bytes (returned from GetBytes()) Declaration public const int BINARY_SIZE = 7 Field Value Type Description int | Edit this page View Source Black Black Declaration public static readonly RgbA Black Field Value Type Description RgbA | Edit this page View Source RGB RGB Declaration public readonly Rgb RGB Field Value Type Description Rgb | Edit this page View Source RGB_FIELD_OFFSET RGB field byte offset Declaration public const int RGB_FIELD_OFFSET = 0 Field Value Type Description int | Edit this page View Source RX_CSS Regular expression to match a CSS RGBA string (single line) Declaration public static readonly Regex RX_CSS Field Value Type Description Regex | Edit this page View Source STRUCTURE_SIZE Structure size in bytes Declaration public const int STRUCTURE_SIZE = 16 Field Value Type Description int | Edit this page View Source White Black Declaration public static readonly RgbA White Field Value Type Description RgbA Methods | Edit this page View Source GetBytes() Get the bytes of this RGB value Declaration public byte[] GetBytes() Returns Type Description byte[] RGB bytes | Edit this page View Source GetBytes(in Span<byte>) Get the bytes of this RGB value Declaration public Span<byte> GetBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Returns Type Description Span<byte> RGB bytes | Edit this page View Source Mix(in Rgb) Mix with another color Declaration public RgbA Mix(in Rgb other) Parameters Type Name Description Rgb other Other color Returns Type Description RgbA Mixed color | Edit this page View Source Mix(in RgbA) Mix with another color Declaration public RgbA Mix(in RgbA other) Parameters Type Name Description RgbA other Other color Returns Type Description RgbA Mixed color | Edit this page View Source Parse(in string) Parse from a string Declaration public static RgbA Parse(in string str) Parameters Type Name Description string str String Returns Type Description RgbA RgbA | Edit this page View Source ParseCss(in string) Parse a CSS RGBA color string (rgba) Declaration public static RgbA ParseCss(in string css) Parameters Type Name Description string css CSS RGBA color string Returns Type Description RgbA RgbA | Edit this page View Source ToCssString() To CSS RGBA color value Declaration public string ToCssString() Returns Type Description string CSS RGBA color value | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source TryParse(in string, out RgbA) Try parsing from a string Declaration public static bool TryParse(in string str, out RgbA result) Parameters Type Name Description string str String RgbA result RgbA Returns Type Description bool If succeed | Edit this page View Source TryParseCss(in string, out RgbA) Parse a CSS RGBA color string (rgba) Declaration public static bool TryParseCss(in string css, out RgbA result) Parameters Type Name Description string css CSS RGBA color string RgbA result Result Returns Type Description bool If succeed Operators | Edit this page View Source implicit operator RgbA(in byte[]) Cast from bytes Declaration public static implicit operator RgbA(in byte[] rgb) Parameters Type Name Description byte[] rgb RGB bytes Returns Type Description RgbA | Edit this page View Source implicit operator RgbA(in Memory<byte>) Cast from memory Declaration public static implicit operator RgbA(in Memory<byte> rgb) Parameters Type Name Description Memory<byte> rgb RGB bytes Returns Type Description RgbA | Edit this page View Source implicit operator RgbA(in ReadOnlyMemory<byte>) Cast from memory Declaration public static implicit operator RgbA(in ReadOnlyMemory<byte> rgb) Parameters Type Name Description ReadOnlyMemory<byte> rgb RGB bytes Returns Type Description RgbA | Edit this page View Source implicit operator RgbA(in ReadOnlySpan<byte>) Cast from span Declaration public static implicit operator RgbA(in ReadOnlySpan<byte> rgb) Parameters Type Name Description ReadOnlySpan<byte> rgb RGB bytes Returns Type Description RgbA | Edit this page View Source implicit operator RgbA(in Span<byte>) Cast from span Declaration public static implicit operator RgbA(in Span<byte> rgb) Parameters Type Name Description Span<byte> rgb RGB bytes Returns Type Description RgbA | Edit this page View Source implicit operator RgbA(in string) Cast from string Declaration public static implicit operator RgbA(in string rgb) Parameters Type Name Description string rgb string Returns Type Description RgbA | Edit this page View Source implicit operator byte[](in RgbA) Cast as byte array Declaration public static implicit operator byte[](in RgbA rgb) Parameters Type Name Description RgbA rgb RgbA Returns Type Description byte[] | Edit this page View Source implicit operator string(in RgbA) Cast as string Declaration public static implicit operator string(in RgbA rgb) Parameters Type Name Description RgbA rgb RgbA Returns Type Description string | Edit this page View Source implicit operator Rgb(in RgbA) Cast as Rgb Declaration public static implicit operator Rgb(in RgbA rgb) Parameters Type Name Description RgbA rgb Rgb Returns Type Description Rgb Implements IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.RgbAttribute.html": {
    "href": "api/wan24.Core.RgbAttribute.html",
    "title": "Class RgbAttribute | wan24-Core",
    "keywords": "Class RgbAttribute RGB 24 bit unsigned integer validation attribute Inheritance object Attribute ValidationAttribute ValidationAttributeBase RgbAttribute Inherited Members ValidationAttributeBase.GetErrorMessage(in ValidationContext, in string) ValidationAttributeBase.ErrorMessageFormatter ValidationAttribute.FormatErrorMessage(string) ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24CoreValidation.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field|AttributeTargets.Parameter|AttributeTargets.ReturnValue, AllowMultiple = false)] public class RgbAttribute : ValidationAttributeBase Constructors | Edit this page View Source RgbAttribute() Constructor Declaration public RgbAttribute() Properties | Edit this page View Source Instance Singleton instance Declaration public static RgbAttribute Instance { get; } Property Value Type Description RgbAttribute | Edit this page View Source Sanitize Sanitize? Declaration public bool Sanitize { get; set; } Property Value Type Description bool Methods | Edit this page View Source IsValid(object?, ValidationContext) Validates the specified value with respect to the current validation attribute. Declaration protected override ValidationResult? IsValid(object? value, ValidationContext validationContext) Parameters Type Name Description object value The value to validate. ValidationContext validationContext The context information about the validation operation. Returns Type Description ValidationResult An instance of the ValidationResult class. Overrides ValidationAttribute.IsValid(object, ValidationContext) Exceptions Type Condition InvalidOperationException The current attribute is malformed. NotImplementedException IsValid(object, ValidationContext) has not been implemented by a derived class. Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.RuntimeCountLimitAttribute.html": {
    "href": "api/wan24.Core.RuntimeCountLimitAttribute.html",
    "title": "Class RuntimeCountLimitAttribute | wan24-Core",
    "keywords": "Class RuntimeCountLimitAttribute Runtime count limitation attribute Inheritance object Attribute ValidationAttribute ValidationAttributeBase RuntimeCountLimitAttribute Inherited Members ValidationAttributeBase.GetErrorMessage(in ValidationContext, in string) ValidationAttributeBase.ErrorMessageFormatter ValidationAttribute.FormatErrorMessage(string) ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24CoreValidation.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class RuntimeCountLimitAttribute : ValidationAttributeBase Constructors | Edit this page View Source RuntimeCountLimitAttribute(string, long) Constructor Declaration public RuntimeCountLimitAttribute(string maxGetter, long min) Parameters Type Name Description string maxGetter Maximum getter static property long min Minimum | Edit this page View Source RuntimeCountLimitAttribute(string, string?) Constructor Declaration public RuntimeCountLimitAttribute(string maxGetter, string? minGetter = null) Parameters Type Name Description string maxGetter Maximum getter static property string minGetter Minimum getter static property | Edit this page View Source RuntimeCountLimitAttribute(in string, in string?, in long?) Constructor Declaration protected RuntimeCountLimitAttribute(in string maxGetter, in string? minGetter, in long? min) Parameters Type Name Description string maxGetter Maximum getter static property string minGetter Minimum getter static property long? min Minimum Fields | Edit this page View Source _MaxGetter Maximum getter Declaration protected readonly PropertyInfoExt _MaxGetter Field Value Type Description PropertyInfoExt | Edit this page View Source _Min Minimum Declaration protected readonly long? _Min Field Value Type Description long? | Edit this page View Source _MinGetter Minimum getter Declaration protected readonly PropertyInfoExt? _MinGetter Field Value Type Description PropertyInfoExt Properties | Edit this page View Source Max Maximum Declaration public long Max { get; } Property Value Type Description long | Edit this page View Source MaxGetter Maximum getter static property Declaration public string MaxGetter { get; } Property Value Type Description string | Edit this page View Source Min Minimum Declaration public long? Min { get; } Property Value Type Description long? | Edit this page View Source MinGetter Minimum getter static property Declaration public string? MinGetter { get; } Property Value Type Description string Methods | Edit this page View Source GetErrorMessage(long?, string?) Get the error message Declaration public string? GetErrorMessage(long? count, string? member) Parameters Type Name Description long? count Count string member Member Returns Type Description string Error message | Edit this page View Source IsValid(object?, ValidationContext) Validates the specified value with respect to the current validation attribute. Declaration protected override ValidationResult? IsValid(object? value, ValidationContext validationContext) Parameters Type Name Description object value The value to validate. ValidationContext validationContext The context information about the validation operation. Returns Type Description ValidationResult An instance of the ValidationResult class. Overrides ValidationAttribute.IsValid(object, ValidationContext) Exceptions Type Condition InvalidOperationException The current attribute is malformed. NotImplementedException IsValid(object, ValidationContext) has not been implemented by a derived class. Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ScopedDiHelper.html": {
    "href": "api/wan24.Core.ScopedDiHelper.html",
    "title": "Class ScopedDiHelper | wan24-Core",
    "keywords": "Class ScopedDiHelper Scoped DI helper (will dispose created objects, if possible; don't forget to dispose!) Inheritance object DiHelper ScopedDiHelper Implements IAsyncKeyedServiceProvider IAsyncServiceProvider IKeyedServiceProvider IServiceProvider IServiceProviderIsKeyedService IServiceProviderIsService IDisposableObject IDisposable IAsyncDisposable Inherited Members DiHelper.GetKeyedService(Type, object) DiHelper.GetKeyedServiceAsync(Type, object, CancellationToken) DiHelper.GetRequiredKeyedService(Type, object) DiHelper.GetRequiredKeyedServiceAsync(Type, object, CancellationToken) DiHelper.NotCachedTypes DiHelper.StaticSync DiHelper.Objects DiHelper.KeyedObjects DiHelper.ObjectFactories DiHelper.AsyncObjectFactories DiHelper.KeyedObjectFactories DiHelper.KeyedAsyncObjectFactories DiHelper.Instance object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ScopedDiHelper : DiHelper, IAsyncKeyedServiceProvider, IAsyncServiceProvider, IKeyedServiceProvider, IServiceProvider, IServiceProviderIsKeyedService, IServiceProviderIsService, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source ScopedDiHelper() Constructor Declaration public ScopedDiHelper() | Edit this page View Source ScopedDiHelper(IServiceProvider) Constructor Declaration public ScopedDiHelper(IServiceProvider serviceProvider) Parameters Type Name Description IServiceProvider serviceProvider Service provider (will be disposed, if possible!) Fields | Edit this page View Source DisposableAdapter Disposable adapter Declaration protected readonly DisposableAdapter DisposableAdapter Field Value Type Description DisposableAdapter | Edit this page View Source KeyedScopeAsyncObjectFactories Keyed asynchronous DI object factories Declaration public readonly ConcurrentDictionary<object, ConcurrentDictionary<Type, DiHelper.DiAsync_Delegate>> KeyedScopeAsyncObjectFactories Field Value Type Description ConcurrentDictionary<object, ConcurrentDictionary<Type, DiHelper.DiAsync_Delegate>> | Edit this page View Source KeyedScopeObjectFactories Keyed DI object factories Declaration public readonly ConcurrentDictionary<object, ConcurrentDictionary<Type, DiHelper.Di_Delegate>> KeyedScopeObjectFactories Field Value Type Description ConcurrentDictionary<object, ConcurrentDictionary<Type, DiHelper.Di_Delegate>> | Edit this page View Source KeyedScopeObjects Keyed objects Declaration protected readonly ConcurrentDictionary<object, ConcurrentDictionary<Type, object>> KeyedScopeObjects Field Value Type Description ConcurrentDictionary<object, ConcurrentDictionary<Type, object>> | Edit this page View Source ScopeAsyncObjectFactories Asynchronous DI object factories Declaration public readonly ConcurrentDictionary<Type, DiHelper.DiAsync_Delegate> ScopeAsyncObjectFactories Field Value Type Description ConcurrentDictionary<Type, DiHelper.DiAsync_Delegate> | Edit this page View Source ScopeObjectFactories DI object factories Declaration public readonly ConcurrentDictionary<Type, DiHelper.Di_Delegate> ScopeObjectFactories Field Value Type Description ConcurrentDictionary<Type, DiHelper.Di_Delegate> | Edit this page View Source ScopeObjects Objects Declaration protected readonly ConcurrentDictionary<Type, object> ScopeObjects Field Value Type Description ConcurrentDictionary<Type, object> | Edit this page View Source Sync Thread synchronization Declaration protected readonly SemaphoreSync Sync Field Value Type Description SemaphoreSync | Edit this page View Source _ScopeNotCachedTypes Not cached types Declaration protected readonly HashSet<Type> _ScopeNotCachedTypes Field Value Type Description HashSet<Type> Properties | Edit this page View Source IsDisposed Is disposed? (final object disposing state) Declaration public bool IsDisposed { get; } Property Value Type Description bool | Edit this page View Source IsDisposing Is disposing? (is true when disposed already, too!) Declaration public bool IsDisposing { get; } Property Value Type Description bool | Edit this page View Source ScopeNotCachedTypes Not cached types Declaration public ReadOnlyCollection<Type> ScopeNotCachedTypes { get; } Property Value Type Description ReadOnlyCollection<Type> | Edit this page View Source ServiceProvider DI service provider (will be disposed!) Declaration public IServiceProvider? ServiceProvider { get; set; } Property Value Type Description IServiceProvider Methods | Edit this page View Source AddDiObject(object, Type) Add a DI object to the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public object AddDiObject(object obj, Type type) Parameters Type Name Description object obj Object Type type DI type Returns Type Description object Object | Edit this page View Source AddDiObjectAsync(object, Type, CancellationToken) Add a DI object to the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task<object> AddDiObjectAsync(object obj, Type type, CancellationToken cancellationToken = default) Parameters Type Name Description object obj Object Type type DI type CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Object | Edit this page View Source AddDiObjectAsync<T>(T, CancellationToken) Add a DI object to the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task<T> AddDiObjectAsync<T>(T obj, CancellationToken cancellationToken = default) Parameters Type Name Description T obj Object CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Object Type Parameters Name Description T DI type | Edit this page View Source AddDiObject<T>(T) Add a DI object to the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public T AddDiObject<T>(T obj) Parameters Type Name Description T obj Object Returns Type Description T Object Type Parameters Name Description T DI type | Edit this page View Source AddKeyedDiObject(object, object, Type) Add a keyed DI object to the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public object AddKeyedDiObject(object key, object obj, Type type) Parameters Type Name Description object key Key object obj Object Type type DI type Returns Type Description object Object | Edit this page View Source AddKeyedDiObjectAsync(object, object, Type, CancellationToken) Add a keyed DI object to the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task<object> AddKeyedDiObjectAsync(object key, object obj, Type type, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key object obj Object Type type DI type CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Object | Edit this page View Source AddKeyedDiObjectAsync<T>(object, T, CancellationToken) Add a keyed DI object to the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task<T> AddKeyedDiObjectAsync<T>(object key, T obj, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key T obj Object CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Object Type Parameters Name Description T DI type | Edit this page View Source AddKeyedDiObject<T>(object, T) Add a keyed DI object to the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public T AddKeyedDiObject<T>(object key, T obj) Parameters Type Name Description object key Key T obj Object Returns Type Description T Object Type Parameters Name Description T DI type | Edit this page View Source AddNotCachedTypes(params Type[]) Add not cached types Declaration public void AddNotCachedTypes(params Type[] types) Parameters Type Name Description Type[] types Types | Edit this page View Source AddNotCachedTypesAsync(CancellationToken, params Type[]) Add not cached types Declaration public Task AddNotCachedTypesAsync(CancellationToken cancellationToken = default, params Type[] types) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Type[] types Types Returns Type Description Task | Edit this page View Source ClearKeyedObjectCache(object) Clear the keyed object cache (will dispose cached objects, if possible) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public void ClearKeyedObjectCache(object key) Parameters Type Name Description object key Key | Edit this page View Source ClearKeyedObjectCacheAsync(object, CancellationToken) Clear the object cache (will dispose cached objects, if possible) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task ClearKeyedObjectCacheAsync(object key, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source ClearObjectCache() Clear the object cache (will dispose cached objects, if possible) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public void ClearObjectCache() | Edit this page View Source ClearObjectCacheAsync(CancellationToken) Clear the object cache (will dispose cached objects, if possible) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task ClearObjectCacheAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask A task that represents the asynchronous dispose operation. | Edit this page View Source ~ScopedDiHelper() Destructor Declaration protected ~ScopedDiHelper() | Edit this page View Source GetAsyncFactory(Type) Get an object factory Declaration [TargetedPatchingOptOut(\"Tiny method\")] public DiHelper.DiAsync_Delegate? GetAsyncFactory(Type type) Parameters Type Name Description Type type Type Returns Type Description DiHelper.DiAsync_Delegate Factory | Edit this page View Source GetDiObject(in Type, out object?, in IServiceProvider?) Get a DI object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public bool GetDiObject(in Type type, out object? obj, in IServiceProvider? serviceProvider = null) Parameters Type Name Description Type type Type object obj Result IServiceProvider serviceProvider Service provider Returns Type Description bool Use the result? | Edit this page View Source GetDiObjectAsync(Type, IServiceProvider?, CancellationToken) Get a DI object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task<ITryAsyncResult> GetDiObjectAsync(Type type, IServiceProvider? serviceProvider = null, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Type IServiceProvider serviceProvider Service provider CancellationToken cancellationToken Cancellation token Returns Type Description Task<ITryAsyncResult> Result | Edit this page View Source GetDiObjectAsync<T>(IServiceProvider?, CancellationToken) Get a DI object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task<TryAsyncResult<T>> GetDiObjectAsync<T>(IServiceProvider? serviceProvider = null, CancellationToken cancellationToken = default) Parameters Type Name Description IServiceProvider serviceProvider Service provider CancellationToken cancellationToken Cancellation token Returns Type Description Task<TryAsyncResult<T>> Result Type Parameters Name Description T Type | Edit this page View Source GetDiObject<T>(out T?, in IServiceProvider?) Get a DI object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public bool GetDiObject<T>(out T? obj, in IServiceProvider? serviceProvider = null) Parameters Type Name Description T obj Result IServiceProvider serviceProvider Service provider Returns Type Description bool Use the result? Type Parameters Name Description T Type | Edit this page View Source GetFactory(Type) Get an object factory Declaration [TargetedPatchingOptOut(\"Tiny method\")] public DiHelper.Di_Delegate? GetFactory(Type type) Parameters Type Name Description Type type Type Returns Type Description DiHelper.Di_Delegate Factory | Edit this page View Source GetKeyedAsyncFactory(object, Type) Get an object factory Declaration [TargetedPatchingOptOut(\"Tiny method\")] public DiHelper.DiAsync_Delegate? GetKeyedAsyncFactory(object key, Type type) Parameters Type Name Description object key Key Type type Type Returns Type Description DiHelper.DiAsync_Delegate Factory | Edit this page View Source GetKeyedDiObject(in object, in Type, out object?, in IServiceProvider?, in bool) Get a DI object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public bool GetKeyedDiObject(in object key, in Type type, out object? obj, in IServiceProvider? serviceProvider = null, in bool tryAll = true) Parameters Type Name Description object key Key Type type Type object obj Result IServiceProvider serviceProvider Service provider bool tryAll Try all sources (also unkeyed)? Returns Type Description bool Use the result? | Edit this page View Source GetKeyedDiObjectAsync(object, Type, IServiceProvider?, bool, CancellationToken) Get a DI object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task<ITryAsyncResult> GetKeyedDiObjectAsync(object key, Type type, IServiceProvider? serviceProvider = null, bool tryAll = true, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key Type type Type IServiceProvider serviceProvider Service provider bool tryAll Try all sources (also unkeyed)? CancellationToken cancellationToken Cancellation token Returns Type Description Task<ITryAsyncResult> Result | Edit this page View Source GetKeyedDiObjectAsync<T>(object, IServiceProvider?, bool, CancellationToken) Get a DI object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task<TryAsyncResult<T>> GetKeyedDiObjectAsync<T>(object key, IServiceProvider? serviceProvider = null, bool tryAll = true, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key IServiceProvider serviceProvider Service provider bool tryAll Try all sources (also unkeyed)? CancellationToken cancellationToken Cancellation token Returns Type Description Task<TryAsyncResult<T>> Result Type Parameters Name Description T Type | Edit this page View Source GetKeyedDiObject<T>(in object, out T?, in IServiceProvider?, in bool) Get a DI object Declaration [TargetedPatchingOptOut(\"Tiny method\")] public bool GetKeyedDiObject<T>(in object key, out T? obj, in IServiceProvider? serviceProvider = null, in bool tryAll = true) Parameters Type Name Description object key Key T obj Result IServiceProvider serviceProvider Service provider bool tryAll Try all sources (also unkeyed)? Returns Type Description bool Use the result? Type Parameters Name Description T Type | Edit this page View Source GetKeyedFactory(object, Type) Get an object factory Declaration [TargetedPatchingOptOut(\"Tiny method\")] public DiHelper.Di_Delegate? GetKeyedFactory(object key, Type type) Parameters Type Name Description object key Key Type type Type Returns Type Description DiHelper.Di_Delegate Factory | Edit this page View Source GetKeyedObject(in object, in Type) Get a keyed object Declaration public object? GetKeyedObject(in object key, in Type type) Parameters Type Name Description object key Key Type type Type Returns Type Description object Object | Edit this page View Source GetObject(in Type) Get an object Declaration public object? GetObject(in Type type) Parameters Type Name Description Type type Type Returns Type Description object Object | Edit this page View Source GetService(Type) Gets the service object of the specified type. Declaration public override object? GetService(Type serviceType) Parameters Type Name Description Type serviceType An object that specifies the type of service object to get. Returns Type Description object A service object of type serviceType. -or- null if there is no service object of type serviceType. Overrides DiHelper.GetService(Type) | Edit this page View Source GetServiceAsync(Type, CancellationToken) Get a service Declaration public override Task<object?> GetServiceAsync(Type serviceType, CancellationToken cancellationToken = default) Parameters Type Name Description Type serviceType Service type CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Service Overrides DiHelper.GetServiceAsync(Type, CancellationToken) | Edit this page View Source IsKeyedService(Type, object?) Determines if the specified service type with the specified service key is available from the IServiceProvider. Declaration public override bool IsKeyedService(Type serviceType, object? serviceKey) Parameters Type Name Description Type serviceType An object that specifies the type of service object to test. object serviceKey The ServiceKey of the service. Returns Type Description bool true if the specified service is a available, false if it is not. Overrides DiHelper.IsKeyedService(Type, object?) | Edit this page View Source IsService(Type) Determines if the specified service type is available from the IServiceProvider. Declaration public override bool IsService(Type serviceType) Parameters Type Name Description Type serviceType An object that specifies the type of service object to test. Returns Type Description bool true if the specified service is a available, false if it is not. Overrides DiHelper.IsService(Type) | Edit this page View Source IsTypeCached(Type) Determine if an object of the given type will be cached Declaration public bool IsTypeCached(Type type) Parameters Type Name Description Type type Type Returns Type Description bool Will be cached? | Edit this page View Source IsTypeCachedAsync(Type, CancellationToken) Determine if an object of the given type will be cached Declaration public Task<bool> IsTypeCachedAsync(Type type, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Type CancellationToken cancellationToken Cancellation token Returns Type Description Task<bool> Will be cached? | Edit this page View Source RemoveDiObject(Type) Remove a DI object from the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public object? RemoveDiObject(Type type) Parameters Type Name Description Type type Type Returns Type Description object Object (needs to be disposed, if applicable!) | Edit this page View Source RemoveDiObjectAsync(Type, CancellationToken) Remove a DI object from the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task<object?> RemoveDiObjectAsync(Type type, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Type CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Object (needs to be disposed, if applicable!) | Edit this page View Source RemoveDiObjectAsync<T>(CancellationToken) Remove a DI object from the cache Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public Task<T?> RemoveDiObjectAsync<T>(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Object (needs to be disposed, if applicable!) Type Parameters Name Description T Object type | Edit this page View Source RemoveDiObject<T>() Remove a DI object from the cache Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public T? RemoveDiObject<T>() Returns Type Description T Object (needs to be disposed, if applicable!) Type Parameters Name Description T DI type | Edit this page View Source RemoveDiObjects(Type) Remove all DI objects from the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public object[] RemoveDiObjects(Type type) Parameters Type Name Description Type type Type Returns Type Description object[] Objects (needs to be disposed, if applicable!) | Edit this page View Source RemoveDiObjectsAsync(Type, CancellationToken) Remove all DI objects from the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task<object[]> RemoveDiObjectsAsync(Type type, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Type CancellationToken cancellationToken Cancellation token Returns Type Description Task<object[]> Object (needs to be disposed, if applicable!) | Edit this page View Source RemoveDiObjectsAsync<T>(CancellationToken) Remove all DI objects from the cache Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public Task<T[]> RemoveDiObjectsAsync<T>(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<T[]> Objects (needs to be disposed, if applicable!) Type Parameters Name Description T Object type | Edit this page View Source RemoveDiObjects<T>() Remove a DI object from the cache Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public T[] RemoveDiObjects<T>() Returns Type Description T[] Object (needs to be disposed, if applicable!) Type Parameters Name Description T DI type | Edit this page View Source RemoveKeyedDiObject(object, Type) Remove a DI object from the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public object? RemoveKeyedDiObject(object key, Type type) Parameters Type Name Description object key Key Type type Type Returns Type Description object Object (needs to be disposed, if applicable!) | Edit this page View Source RemoveKeyedDiObjectAsync(object, Type, CancellationToken) Remove a DI object from the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task<object?> RemoveKeyedDiObjectAsync(object key, Type type, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key Type type Type CancellationToken cancellationToken Cancellation token Returns Type Description Task<object> Object (needs to be disposed, if applicable!) | Edit this page View Source RemoveKeyedDiObjectAsync<T>(object, CancellationToken) Remove a DI object from the cache Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public Task<T?> RemoveKeyedDiObjectAsync<T>(object key, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Object (needs to be disposed, if applicable!) Type Parameters Name Description T DI type | Edit this page View Source RemoveKeyedDiObject<T>(object) Remove a keyed DI object from the cache Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public T? RemoveKeyedDiObject<T>(object key) Parameters Type Name Description object key Key Returns Type Description T Object (needs to be disposed, if applicable!) Type Parameters Name Description T DI type | Edit this page View Source RemoveKeyedDiObjects(object, Type) Remove all DI objects from the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public object[] RemoveKeyedDiObjects(object key, Type type) Parameters Type Name Description object key Key Type type Type Returns Type Description object[] Objects (needs to be disposed, if applicable!) | Edit this page View Source RemoveKeyedDiObjectsAsync(object, Type, CancellationToken) Remove all DI objects from the cache Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task<object[]> RemoveKeyedDiObjectsAsync(object key, Type type, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key Type type Type CancellationToken cancellationToken Cancellation token Returns Type Description Task<object[]> Object (needs to be disposed, if applicable!) | Edit this page View Source RemoveKeyedDiObjectsAsync<T>(object, CancellationToken) Remove all DI objects from the cache Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public Task<T[]> RemoveKeyedDiObjectsAsync<T>(object key, CancellationToken cancellationToken = default) Parameters Type Name Description object key Key CancellationToken cancellationToken Cancellation token Returns Type Description Task<T[]> Objects (needs to be disposed, if applicable!) Type Parameters Name Description T DI type | Edit this page View Source RemoveKeyedDiObjects<T>(object) Remove a keyed DI object from the cache Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public T[] RemoveKeyedDiObjects<T>(object key) Parameters Type Name Description object key Key Returns Type Description T[] Object (needs to be disposed, if applicable!) Type Parameters Name Description T DI type | Edit this page View Source RemoveNotCachedType(Type) Remove a not cached type Declaration public void RemoveNotCachedType(Type type) Parameters Type Name Description Type type Type | Edit this page View Source RemoveNotCachedTypeAsync(Type, CancellationToken) Remove a not cached type Declaration public Task RemoveNotCachedTypeAsync(Type type, CancellationToken cancellationToken = default) Parameters Type Name Description Type type Type CancellationToken cancellationToken Cancellation token Returns Type Description Task Events | Edit this page View Source OnDisposed Raised when disposed Declaration public event IDisposableObject.Dispose_Delegate? OnDisposed Event Type Type Description IDisposableObject.Dispose_Delegate | Edit this page View Source OnDisposing Raised when disposing Declaration public event IDisposableObject.Dispose_Delegate? OnDisposing Event Type Type Description IDisposableObject.Dispose_Delegate Implements IAsyncKeyedServiceProvider IAsyncServiceProvider IKeyedServiceProvider IServiceProvider IServiceProviderIsKeyedService IServiceProviderIsService IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.SecureArrayBase-1.html": {
    "href": "api/wan24.Core.SecureArrayBase-1.html",
    "title": "Class SecureArrayBase<T> | wan24-Core",
    "keywords": "Class SecureArrayBase<T> Base class for a secure array Inheritance object DisposableBase SecureArrayBase<T> SecureByteArray SecureCharArray Implements IWillDispose IDisposableObject IAsyncDisposable ISecureArray<T> IArray<T> IEnumerable<T> IEnumerable IEquatable<Memory<T>> IDisposable Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.Dispose(bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class SecureArrayBase<T> : DisposableBase, IWillDispose, IDisposableObject, IAsyncDisposable, ISecureArray<T>, IArray<T>, IEnumerable<T>, IEnumerable, IEquatable<Memory<T>>, IDisposable where T : struct Type Parameters Name Description T Element type Constructors | Edit this page View Source SecureArrayBase(in long) Constructor Declaration protected SecureArrayBase(in long len) Parameters Type Name Description long len Length in bytes | Edit this page View Source SecureArrayBase(in T[]) Constructor Declaration protected SecureArrayBase(in T[] array) Parameters Type Name Description T[] array Array Fields | Edit this page View Source Detached Is detached? Declaration protected bool Detached Field Value Type Description bool | Edit this page View Source Handle Handle Declaration protected readonly GCHandle Handle Field Value Type Description GCHandle | Edit this page View Source _Array Array Declaration protected readonly T[] _Array Field Value Type Description T[] | Edit this page View Source _Ptr Pointer Declaration protected readonly T* _Ptr Field Value Type Description T* Properties | Edit this page View Source Array Array Declaration [SensitiveData] public T[] Array { get; } Property Value Type Description T[] | Edit this page View Source IntPtr Pointer Declaration public nint IntPtr { get; } Property Value Type Description nint | Edit this page View Source this[Index, Index] Get a range Declaration public Memory<T> this[Index start, Index end] { get; } Parameters Type Name Description Index start Start Index end End Property Value Type Description Memory<T> Range memory | Edit this page View Source this[int] Get/set an element Declaration public T this[int offset] { get; set; } Parameters Type Name Description int offset Index Property Value Type Description T Element | Edit this page View Source this[Range] Get a range Declaration public Memory<T> this[Range range] { get; } Parameters Type Name Description Range range Range Property Value Type Description Memory<T> Range memory | Edit this page View Source Length Length Declaration public int Length { get; } Property Value Type Description int | Edit this page View Source LongLength Length Declaration public long LongLength { get; } Property Value Type Description long | Edit this page View Source Memory Memory Declaration [SensitiveData] public Memory<T> Memory { get; } Property Value Type Description Memory<T> | Edit this page View Source Ptr Pointer Declaration public T* Ptr { get; } Property Value Type Description T* | Edit this page View Source Span Span Declaration [SensitiveData] public Span<T> Span { get; } Property Value Type Description Span<T> Methods | Edit this page View Source DetachAndDispose() Detach the secured byte array and dispose this instance Declaration public T[] DetachAndDispose() Returns Type Description T[] Unsecure byte array | Edit this page View Source Equals(Memory<T>) Indicates whether the current object is equal to another object of the same type. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public bool Equals(Memory<T> other) Parameters Type Name Description Memory<T> other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() Implements IWillDispose IDisposableObject IAsyncDisposable ISecureArray<T> IArray<T> IEnumerable<T> IEnumerable IEquatable<T> IDisposable Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.SecureByteArray.html": {
    "href": "api/wan24.Core.SecureByteArray.html",
    "title": "Class SecureByteArray | wan24-Core",
    "keywords": "Class SecureByteArray Secure byte array (will delete its contents when disposing) Inheritance object DisposableBase SecureArrayBase<byte> SecureByteArray Implements IWillDispose IDisposableObject IAsyncDisposable ISecureArray<byte> IArray<byte> IEnumerable<byte> IEnumerable IEquatable<Memory<byte>> IDisposable Inherited Members SecureArrayBase<byte>.this[int] SecureArrayBase<byte>.this[Range] SecureArrayBase<byte>.this[Index, Index] SecureArrayBase<byte>.Length SecureArrayBase<byte>.LongLength SecureArrayBase<byte>.Array SecureArrayBase<byte>.Span SecureArrayBase<byte>.Memory SecureArrayBase<byte>.Ptr SecureArrayBase<byte>.IntPtr SecureArrayBase<byte>.DetachAndDispose() SecureArrayBase<byte>.GetEnumerator() SecureArrayBase<byte>.Equals(object) SecureArrayBase<byte>.Equals(Memory<byte>) SecureArrayBase<byte>.GetHashCode() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class SecureByteArray : SecureArrayBase<byte>, IWillDispose, IDisposableObject, IAsyncDisposable, ISecureArray<byte>, IArray<byte>, IEnumerable<byte>, IEnumerable, IEquatable<Memory<byte>>, IDisposable Remarks Constructor Constructors | Edit this page View Source SecureByteArray(in byte[]) Secure byte array (will delete its contents when disposing) Declaration public SecureByteArray(in byte[] array) Parameters Type Name Description byte[] array Array Remarks Constructor | Edit this page View Source SecureByteArray(in long) Constructor Declaration public SecureByteArray(in long len) Parameters Type Name Description long len Length in bytes Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) Operators | Edit this page View Source explicit operator SecureByteArray(in byte[]) Cast a byte array as secure byte array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator SecureByteArray(in byte[] arr) Parameters Type Name Description byte[] arr Byte array Returns Type Description SecureByteArray | Edit this page View Source implicit operator byte*(in SecureByteArray) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator byte*(in SecureByteArray arr) Parameters Type Name Description SecureByteArray arr Array Returns Type Description byte* | Edit this page View Source implicit operator byte[](in SecureByteArray) Cast as byte array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator byte[](in SecureByteArray arr) Parameters Type Name Description SecureByteArray arr Array Returns Type Description byte[] | Edit this page View Source implicit operator int(in SecureByteArray) Cast as Int32 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in SecureByteArray arr) Parameters Type Name Description SecureByteArray arr Array Returns Type Description int | Edit this page View Source implicit operator long(in SecureByteArray) Cast as Int64 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator long(in SecureByteArray arr) Parameters Type Name Description SecureByteArray arr Array Returns Type Description long | Edit this page View Source implicit operator nint(in SecureByteArray) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator nint(in SecureByteArray arr) Parameters Type Name Description SecureByteArray arr Array Returns Type Description nint | Edit this page View Source implicit operator Memory<byte>(in SecureByteArray) Cast as memory Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Memory<byte>(in SecureByteArray arr) Parameters Type Name Description SecureByteArray arr Array Returns Type Description Memory<byte> | Edit this page View Source implicit operator Span<byte>(in SecureByteArray) Cast as span Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Span<byte>(in SecureByteArray arr) Parameters Type Name Description SecureByteArray arr Array Returns Type Description Span<byte> | Edit this page View Source implicit operator SecureCharArray(in SecureByteArray) Cast as SecureCharArray (using UTF-8 encoding) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator SecureCharArray(in SecureByteArray arr) Parameters Type Name Description SecureByteArray arr Array Returns Type Description SecureCharArray | Edit this page View Source implicit operator SecureCharArrayStruct(in SecureByteArray) Cast as SecureCharArray (using UTF-8 encoding) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator SecureCharArrayStruct(in SecureByteArray arr) Parameters Type Name Description SecureByteArray arr Array Returns Type Description SecureCharArrayStruct Implements IWillDispose IDisposableObject IAsyncDisposable ISecureArray<T> IArray<T> IEnumerable<T> IEnumerable IEquatable<T> IDisposable Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.SecureByteArrayRefStruct.html": {
    "href": "api/wan24.Core.SecureByteArrayRefStruct.html",
    "title": "Struct SecureByteArrayRefStruct | wan24-Core",
    "keywords": "Struct SecureByteArrayRefStruct Secure byte array (will delete its contents when disposing; not thread-safe) Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public ref struct SecureByteArrayRefStruct Constructors | Edit this page View Source SecureByteArrayRefStruct(in byte[]) Constructor Declaration public SecureByteArrayRefStruct(in byte[] array) Parameters Type Name Description byte[] array Array | Edit this page View Source SecureByteArrayRefStruct(in long) Constructor Declaration public SecureByteArrayRefStruct(in long len) Parameters Type Name Description long len Length in bytes Fields | Edit this page View Source Ptr Pointer Declaration public readonly byte* Ptr Field Value Type Description byte* Properties | Edit this page View Source Array Array Declaration public readonly byte[] Array { get; } Property Value Type Description byte[] | Edit this page View Source IntPtr Pointer Declaration public readonly nint IntPtr { get; } Property Value Type Description nint | Edit this page View Source this[Index, Index] Get a range Declaration public readonly Memory<byte> this[Index start, Index end] { get; } Parameters Type Name Description Index start Start Index end End Property Value Type Description Memory<byte> Range memory | Edit this page View Source this[int] Get/set an element Declaration public readonly byte this[int offset] { get; set; } Parameters Type Name Description int offset Index Property Value Type Description byte Element | Edit this page View Source this[Range] Get a range Declaration public readonly Memory<byte> this[Range range] { get; } Parameters Type Name Description Range range Range Property Value Type Description Memory<byte> Range memory | Edit this page View Source Length Length Declaration public readonly int Length { get; } Property Value Type Description int | Edit this page View Source LongLength Length Declaration public readonly long LongLength { get; } Property Value Type Description long | Edit this page View Source Memory Memory Declaration public readonly Memory<byte> Memory { get; } Property Value Type Description Memory<byte> | Edit this page View Source Span Span Declaration public readonly Span<byte> Span { get; } Property Value Type Description Span<byte> Methods | Edit this page View Source DetachAndDispose() Detach the secured byte array and dispose this instance Declaration public byte[] DetachAndDispose() Returns Type Description byte[] Unsecure byte array | Edit this page View Source Dispose() Dispose Declaration public void Dispose() | Edit this page View Source Equals(Memory<byte>) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly bool Equals(Memory<byte> other) Parameters Type Name Description Memory<byte> other Returns Type Description bool | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Edit this page View Source operator ==(in SecureByteArrayRefStruct, in SecureByteArrayRefStruct) Equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in SecureByteArrayRefStruct left, in SecureByteArrayRefStruct right) Parameters Type Name Description SecureByteArrayRefStruct left Left SecureByteArrayRefStruct right Right Returns Type Description bool Equals? | Edit this page View Source explicit operator SecureByteArrayRefStruct(in byte[]) Cast a byte array as secure byte array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator SecureByteArrayRefStruct(in byte[] arr) Parameters Type Name Description byte[] arr Byte array Returns Type Description SecureByteArrayRefStruct | Edit this page View Source implicit operator byte*(in SecureByteArrayRefStruct) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator byte*(in SecureByteArrayRefStruct arr) Parameters Type Name Description SecureByteArrayRefStruct arr Array Returns Type Description byte* | Edit this page View Source implicit operator byte[](in SecureByteArrayRefStruct) Cast as byte array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator byte[](in SecureByteArrayRefStruct arr) Parameters Type Name Description SecureByteArrayRefStruct arr Array Returns Type Description byte[] | Edit this page View Source implicit operator int(in SecureByteArrayRefStruct) Cast as Int32 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in SecureByteArrayRefStruct arr) Parameters Type Name Description SecureByteArrayRefStruct arr Array Returns Type Description int | Edit this page View Source implicit operator long(in SecureByteArrayRefStruct) Cast as Int64 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator long(in SecureByteArrayRefStruct arr) Parameters Type Name Description SecureByteArrayRefStruct arr Array Returns Type Description long | Edit this page View Source implicit operator nint(in SecureByteArrayRefStruct) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator nint(in SecureByteArrayRefStruct arr) Parameters Type Name Description SecureByteArrayRefStruct arr Array Returns Type Description nint | Edit this page View Source implicit operator Memory<byte>(in SecureByteArrayRefStruct) Cast as memory Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Memory<byte>(in SecureByteArrayRefStruct arr) Parameters Type Name Description SecureByteArrayRefStruct arr Array Returns Type Description Memory<byte> | Edit this page View Source implicit operator Span<byte>(in SecureByteArrayRefStruct) Cast as span Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Span<byte>(in SecureByteArrayRefStruct arr) Parameters Type Name Description SecureByteArrayRefStruct arr Array Returns Type Description Span<byte> | Edit this page View Source implicit operator SecureCharArray(in SecureByteArrayRefStruct) Cast as SecureCharArray (using UTF-8 encoding) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator SecureCharArray(in SecureByteArrayRefStruct arr) Parameters Type Name Description SecureByteArrayRefStruct arr Array Returns Type Description SecureCharArray | Edit this page View Source implicit operator SecureCharArrayStruct(in SecureByteArrayRefStruct) Cast as SecureCharArrayStruct (using UTF-8 encoding) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator SecureCharArrayStruct(in SecureByteArrayRefStruct arr) Parameters Type Name Description SecureByteArrayRefStruct arr Array Returns Type Description SecureCharArrayStruct | Edit this page View Source operator !=(in SecureByteArrayRefStruct, in SecureByteArrayRefStruct) Not equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in SecureByteArrayRefStruct left, in SecureByteArrayRefStruct right) Parameters Type Name Description SecureByteArrayRefStruct left Left SecureByteArrayRefStruct right Right Returns Type Description bool Not equal?"
  },
  "api/wan24.Core.SecureByteArrayStruct.html": {
    "href": "api/wan24.Core.SecureByteArrayStruct.html",
    "title": "Struct SecureByteArrayStruct | wan24-Core",
    "keywords": "Struct SecureByteArrayStruct Secure byte array (will delete its contents when disposing) Implements ISecureArray<byte> IArray<byte> IEnumerable<byte> IEnumerable IEquatable<Memory<byte>> IDisposable Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public struct SecureByteArrayStruct : ISecureArray<byte>, IArray<byte>, IEnumerable<byte>, IEnumerable, IEquatable<Memory<byte>>, IDisposable Constructors | Edit this page View Source SecureByteArrayStruct(in byte[]) Constructor Declaration public SecureByteArrayStruct(in byte[] array) Parameters Type Name Description byte[] array Array | Edit this page View Source SecureByteArrayStruct(in long) Constructor Declaration public SecureByteArrayStruct(in long len) Parameters Type Name Description long len Length in bytes Properties | Edit this page View Source Array Array Declaration public readonly byte[] Array { get; } Property Value Type Description byte[] | Edit this page View Source IntPtr Pointer Declaration public readonly nint IntPtr { get; } Property Value Type Description nint | Edit this page View Source this[Index, Index] Get a range Declaration public readonly Memory<byte> this[Index start, Index end] { get; } Parameters Type Name Description Index start Start Index end End Property Value Type Description Memory<byte> Range memory | Edit this page View Source this[int] Get/set an element Declaration public readonly byte this[int offset] { get; set; } Parameters Type Name Description int offset Index Property Value Type Description byte Element | Edit this page View Source this[Range] Get a range Declaration public readonly Memory<byte> this[Range range] { get; } Parameters Type Name Description Range range Range Property Value Type Description Memory<byte> Range memory | Edit this page View Source Length Length Declaration public readonly int Length { get; } Property Value Type Description int | Edit this page View Source LongLength Length Declaration public readonly long LongLength { get; } Property Value Type Description long | Edit this page View Source Memory Memory Declaration public readonly Memory<byte> Memory { get; } Property Value Type Description Memory<byte> | Edit this page View Source Ptr Pointer Declaration public readonly byte* Ptr { get; } Property Value Type Description byte* | Edit this page View Source Span Span Declaration public readonly Span<byte> Span { get; } Property Value Type Description Span<byte> Methods | Edit this page View Source DetachAndDispose() Detach the secured byte array and dispose this instance Declaration public byte[] DetachAndDispose() Returns Type Description byte[] Unsecure byte array | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source Equals(Memory<byte>) Indicates whether the current object is equal to another object of the same type. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly bool Equals(Memory<byte> other) Parameters Type Name Description Memory<byte> other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly IEnumerator<byte> GetEnumerator() Returns Type Description IEnumerator<byte> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Edit this page View Source operator ==(in SecureByteArrayStruct, in SecureByteArrayStruct) Equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in SecureByteArrayStruct left, in SecureByteArrayStruct right) Parameters Type Name Description SecureByteArrayStruct left Left SecureByteArrayStruct right Right Returns Type Description bool Equals? | Edit this page View Source explicit operator SecureByteArrayStruct(in byte[]) Cast a byte array as secure byte array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator SecureByteArrayStruct(in byte[] arr) Parameters Type Name Description byte[] arr Byte array Returns Type Description SecureByteArrayStruct | Edit this page View Source implicit operator byte*(in SecureByteArrayStruct) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator byte*(in SecureByteArrayStruct arr) Parameters Type Name Description SecureByteArrayStruct arr Array Returns Type Description byte* | Edit this page View Source implicit operator byte[](in SecureByteArrayStruct) Cast as byte array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator byte[](in SecureByteArrayStruct arr) Parameters Type Name Description SecureByteArrayStruct arr Array Returns Type Description byte[] | Edit this page View Source implicit operator int(in SecureByteArrayStruct) Cast as Int32 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in SecureByteArrayStruct arr) Parameters Type Name Description SecureByteArrayStruct arr Array Returns Type Description int | Edit this page View Source implicit operator long(in SecureByteArrayStruct) Cast as Int64 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator long(in SecureByteArrayStruct arr) Parameters Type Name Description SecureByteArrayStruct arr Array Returns Type Description long | Edit this page View Source implicit operator nint(in SecureByteArrayStruct) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator nint(in SecureByteArrayStruct arr) Parameters Type Name Description SecureByteArrayStruct arr Array Returns Type Description nint | Edit this page View Source implicit operator Memory<byte>(in SecureByteArrayStruct) Cast as memory Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Memory<byte>(in SecureByteArrayStruct arr) Parameters Type Name Description SecureByteArrayStruct arr Array Returns Type Description Memory<byte> | Edit this page View Source implicit operator Span<byte>(in SecureByteArrayStruct) Cast as span Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Span<byte>(in SecureByteArrayStruct arr) Parameters Type Name Description SecureByteArrayStruct arr Array Returns Type Description Span<byte> | Edit this page View Source implicit operator SecureCharArray(in SecureByteArrayStruct) Cast as SecureCharArray (using UTF-8 encoding) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator SecureCharArray(in SecureByteArrayStruct arr) Parameters Type Name Description SecureByteArrayStruct arr Array Returns Type Description SecureCharArray | Edit this page View Source implicit operator SecureCharArrayStruct(in SecureByteArrayStruct) Cast as SecureCharArrayStruct (using UTF-8 encoding) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator SecureCharArrayStruct(in SecureByteArrayStruct arr) Parameters Type Name Description SecureByteArrayStruct arr Array Returns Type Description SecureCharArrayStruct | Edit this page View Source operator !=(in SecureByteArrayStruct, in SecureByteArrayStruct) Not equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in SecureByteArrayStruct left, in SecureByteArrayStruct right) Parameters Type Name Description SecureByteArrayStruct left Left SecureByteArrayStruct right Right Returns Type Description bool Not equal? Implements ISecureArray<T> IArray<T> IEnumerable<T> IEnumerable IEquatable<T> IDisposable Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.SecureByteArrayStructSimple.html": {
    "href": "api/wan24.Core.SecureByteArrayStructSimple.html",
    "title": "Struct SecureByteArrayStructSimple | wan24-Core",
    "keywords": "Struct SecureByteArrayStructSimple Secure byte array (will delete its contents when disposing; not thread-safe) Implements ISecureArray<byte> IArray<byte> IEnumerable<byte> IEnumerable IEquatable<Memory<byte>> IDisposable Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public struct SecureByteArrayStructSimple : ISecureArray<byte>, IArray<byte>, IEnumerable<byte>, IEnumerable, IEquatable<Memory<byte>>, IDisposable Constructors | Edit this page View Source SecureByteArrayStructSimple(in byte[]) Constructor Declaration public SecureByteArrayStructSimple(in byte[] array) Parameters Type Name Description byte[] array Array | Edit this page View Source SecureByteArrayStructSimple(in long) Constructor Declaration public SecureByteArrayStructSimple(in long len) Parameters Type Name Description long len Length in bytes Properties | Edit this page View Source Array Array Declaration public readonly byte[] Array { get; } Property Value Type Description byte[] | Edit this page View Source IntPtr Pointer Declaration public readonly nint IntPtr { get; } Property Value Type Description nint | Edit this page View Source this[Index, Index] Get a range Declaration public readonly Memory<byte> this[Index start, Index end] { get; } Parameters Type Name Description Index start Start Index end End Property Value Type Description Memory<byte> Range memory | Edit this page View Source this[int] Get/set an element Declaration public readonly byte this[int offset] { get; set; } Parameters Type Name Description int offset Index Property Value Type Description byte Element | Edit this page View Source this[Range] Get a range Declaration public readonly Memory<byte> this[Range range] { get; } Parameters Type Name Description Range range Range Property Value Type Description Memory<byte> Range memory | Edit this page View Source Length Length Declaration public readonly int Length { get; } Property Value Type Description int | Edit this page View Source LongLength Length Declaration public readonly long LongLength { get; } Property Value Type Description long | Edit this page View Source Memory Memory Declaration public readonly Memory<byte> Memory { get; } Property Value Type Description Memory<byte> | Edit this page View Source Ptr Pointer Declaration public readonly byte* Ptr { get; } Property Value Type Description byte* | Edit this page View Source Span Span Declaration public readonly Span<byte> Span { get; } Property Value Type Description Span<byte> Methods | Edit this page View Source DetachAndDispose() Detach the secured byte array and dispose this instance Declaration public byte[] DetachAndDispose() Returns Type Description byte[] Unsecure byte array | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source Equals(Memory<byte>) Indicates whether the current object is equal to another object of the same type. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly bool Equals(Memory<byte> other) Parameters Type Name Description Memory<byte> other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly IEnumerator<byte> GetEnumerator() Returns Type Description IEnumerator<byte> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Edit this page View Source operator ==(in SecureByteArrayStructSimple, in SecureByteArrayStructSimple) Equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in SecureByteArrayStructSimple left, in SecureByteArrayStructSimple right) Parameters Type Name Description SecureByteArrayStructSimple left Left SecureByteArrayStructSimple right Right Returns Type Description bool Equals? | Edit this page View Source explicit operator SecureByteArrayStructSimple(in byte[]) Cast a byte array as secure byte array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator SecureByteArrayStructSimple(in byte[] arr) Parameters Type Name Description byte[] arr Byte array Returns Type Description SecureByteArrayStructSimple | Edit this page View Source implicit operator byte*(in SecureByteArrayStructSimple) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator byte*(in SecureByteArrayStructSimple arr) Parameters Type Name Description SecureByteArrayStructSimple arr Array Returns Type Description byte* | Edit this page View Source implicit operator byte[](in SecureByteArrayStructSimple) Cast as byte array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator byte[](in SecureByteArrayStructSimple arr) Parameters Type Name Description SecureByteArrayStructSimple arr Array Returns Type Description byte[] | Edit this page View Source implicit operator int(in SecureByteArrayStructSimple) Cast as Int32 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in SecureByteArrayStructSimple arr) Parameters Type Name Description SecureByteArrayStructSimple arr Array Returns Type Description int | Edit this page View Source implicit operator long(in SecureByteArrayStructSimple) Cast as Int64 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator long(in SecureByteArrayStructSimple arr) Parameters Type Name Description SecureByteArrayStructSimple arr Array Returns Type Description long | Edit this page View Source implicit operator nint(in SecureByteArrayStructSimple) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator nint(in SecureByteArrayStructSimple arr) Parameters Type Name Description SecureByteArrayStructSimple arr Array Returns Type Description nint | Edit this page View Source implicit operator Memory<byte>(in SecureByteArrayStructSimple) Cast as memory Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Memory<byte>(in SecureByteArrayStructSimple arr) Parameters Type Name Description SecureByteArrayStructSimple arr Array Returns Type Description Memory<byte> | Edit this page View Source implicit operator Span<byte>(in SecureByteArrayStructSimple) Cast as span Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Span<byte>(in SecureByteArrayStructSimple arr) Parameters Type Name Description SecureByteArrayStructSimple arr Array Returns Type Description Span<byte> | Edit this page View Source implicit operator SecureCharArray(in SecureByteArrayStructSimple) Cast as SecureCharArray (using UTF-8 encoding) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator SecureCharArray(in SecureByteArrayStructSimple arr) Parameters Type Name Description SecureByteArrayStructSimple arr Array Returns Type Description SecureCharArray | Edit this page View Source implicit operator SecureCharArrayStruct(in SecureByteArrayStructSimple) Cast as SecureCharArrayStruct (using UTF-8 encoding) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator SecureCharArrayStruct(in SecureByteArrayStructSimple arr) Parameters Type Name Description SecureByteArrayStructSimple arr Array Returns Type Description SecureCharArrayStruct | Edit this page View Source operator !=(in SecureByteArrayStructSimple, in SecureByteArrayStructSimple) Not equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in SecureByteArrayStructSimple left, in SecureByteArrayStructSimple right) Parameters Type Name Description SecureByteArrayStructSimple left Left SecureByteArrayStructSimple right Right Returns Type Description bool Not equal? Implements ISecureArray<T> IArray<T> IEnumerable<T> IEnumerable IEquatable<T> IDisposable Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.SecureCharArray.html": {
    "href": "api/wan24.Core.SecureCharArray.html",
    "title": "Class SecureCharArray | wan24-Core",
    "keywords": "Class SecureCharArray Secure char array (will delete its contents when disposing) Inheritance object DisposableBase SecureArrayBase<char> SecureCharArray Implements IWillDispose IDisposableObject IAsyncDisposable ISecureArray<char> IArray<char> IEnumerable<char> IEnumerable IEquatable<Memory<char>> IDisposable Inherited Members SecureArrayBase<char>.this[int] SecureArrayBase<char>.this[Range] SecureArrayBase<char>.this[Index, Index] SecureArrayBase<char>.Length SecureArrayBase<char>.LongLength SecureArrayBase<char>.Array SecureArrayBase<char>.Span SecureArrayBase<char>.Memory SecureArrayBase<char>.Ptr SecureArrayBase<char>.IntPtr SecureArrayBase<char>.DetachAndDispose() SecureArrayBase<char>.GetEnumerator() SecureArrayBase<char>.Equals(object) SecureArrayBase<char>.Equals(Memory<char>) SecureArrayBase<char>.GetHashCode() DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class SecureCharArray : SecureArrayBase<char>, IWillDispose, IDisposableObject, IAsyncDisposable, ISecureArray<char>, IArray<char>, IEnumerable<char>, IEnumerable, IEquatable<Memory<char>>, IDisposable Remarks Constructor Constructors | Edit this page View Source SecureCharArray(in char[]) Secure char array (will delete its contents when disposing) Declaration public SecureCharArray(in char[] array) Parameters Type Name Description char[] array Array Remarks Constructor | Edit this page View Source SecureCharArray(in long) Constructor Declaration public SecureCharArray(in long len) Parameters Type Name Description long len Length in chars Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) Operators | Edit this page View Source explicit operator SecureCharArray(in char[]) Cast a char array as secure char array Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static explicit operator SecureCharArray(in char[] arr) Parameters Type Name Description char[] arr Char array Returns Type Description SecureCharArray | Edit this page View Source implicit operator char*(in SecureCharArray) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator char*(in SecureCharArray arr) Parameters Type Name Description SecureCharArray arr Array Returns Type Description char* | Edit this page View Source implicit operator char[](in SecureCharArray) Cast as char array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator char[](in SecureCharArray arr) Parameters Type Name Description SecureCharArray arr Array Returns Type Description char[] | Edit this page View Source implicit operator int(in SecureCharArray) Cast as Int32 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in SecureCharArray arr) Parameters Type Name Description SecureCharArray arr Array Returns Type Description int | Edit this page View Source implicit operator long(in SecureCharArray) Cast as Int64 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator long(in SecureCharArray arr) Parameters Type Name Description SecureCharArray arr Array Returns Type Description long | Edit this page View Source implicit operator nint(in SecureCharArray) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator nint(in SecureCharArray arr) Parameters Type Name Description SecureCharArray arr Array Returns Type Description nint | Edit this page View Source implicit operator Memory<char>(in SecureCharArray) Cast as memory Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Memory<char>(in SecureCharArray arr) Parameters Type Name Description SecureCharArray arr Array Returns Type Description Memory<char> | Edit this page View Source implicit operator Span<char>(in SecureCharArray) Cast as span Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Span<char>(in SecureCharArray arr) Parameters Type Name Description SecureCharArray arr Array Returns Type Description Span<char> | Edit this page View Source implicit operator SecureByteArray(in SecureCharArray) Cast as SecureByteArray (using UTF-8 encoding) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator SecureByteArray(in SecureCharArray arr) Parameters Type Name Description SecureCharArray arr Array Returns Type Description SecureByteArray | Edit this page View Source implicit operator SecureByteArrayStruct(in SecureCharArray) Cast as SecureByteArray (using UTF-8 encoding) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator SecureByteArrayStruct(in SecureCharArray arr) Parameters Type Name Description SecureCharArray arr Array Returns Type Description SecureByteArrayStruct Implements IWillDispose IDisposableObject IAsyncDisposable ISecureArray<T> IArray<T> IEnumerable<T> IEnumerable IEquatable<T> IDisposable Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.SecureCharArrayRefStruct.html": {
    "href": "api/wan24.Core.SecureCharArrayRefStruct.html",
    "title": "Struct SecureCharArrayRefStruct | wan24-Core",
    "keywords": "Struct SecureCharArrayRefStruct Secure char array (will delete its contents when disposing; not thread-safe) Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public ref struct SecureCharArrayRefStruct Constructors | Edit this page View Source SecureCharArrayRefStruct(in char[]) Constructor Declaration public SecureCharArrayRefStruct(in char[] array) Parameters Type Name Description char[] array Array | Edit this page View Source SecureCharArrayRefStruct(in long) Constructor Declaration public SecureCharArrayRefStruct(in long len) Parameters Type Name Description long len Length in chars Properties | Edit this page View Source Array Array Declaration public readonly char[] Array { get; } Property Value Type Description char[] | Edit this page View Source IntPtr Pointer Declaration public readonly nint IntPtr { get; } Property Value Type Description nint | Edit this page View Source this[Index, Index] Get a range Declaration public readonly Memory<char> this[Index start, Index end] { get; } Parameters Type Name Description Index start Start Index end End Property Value Type Description Memory<char> Range memory | Edit this page View Source this[int] Get/set an element Declaration public readonly char this[int offset] { get; set; } Parameters Type Name Description int offset Index Property Value Type Description char Element | Edit this page View Source this[Range] Get a range Declaration public readonly Memory<char> this[Range range] { get; } Parameters Type Name Description Range range Range Property Value Type Description Memory<char> Range memory | Edit this page View Source Length Length Declaration public readonly int Length { get; } Property Value Type Description int | Edit this page View Source LongLength Length Declaration public readonly long LongLength { get; } Property Value Type Description long | Edit this page View Source Memory Memory Declaration public readonly Memory<char> Memory { get; } Property Value Type Description Memory<char> | Edit this page View Source Ptr Pointer Declaration public readonly char* Ptr { get; } Property Value Type Description char* | Edit this page View Source Span Span Declaration public readonly Span<char> Span { get; } Property Value Type Description Span<char> Methods | Edit this page View Source DetachAndDispose() Detach the secured byte array and dispose this instance Declaration public char[] DetachAndDispose() Returns Type Description char[] Unsecure byte array | Edit this page View Source Dispose() Dispose Declaration public void Dispose() | Edit this page View Source Equals(Memory<char>) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly bool Equals(Memory<char> other) Parameters Type Name Description Memory<char> other Returns Type Description bool | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Edit this page View Source operator ==(in SecureCharArrayRefStruct, in SecureCharArrayRefStruct) Equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in SecureCharArrayRefStruct left, in SecureCharArrayRefStruct right) Parameters Type Name Description SecureCharArrayRefStruct left Left SecureCharArrayRefStruct right Right Returns Type Description bool Equals? | Edit this page View Source explicit operator SecureCharArrayRefStruct(in char[]) Cast a char array as secure char array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator SecureCharArrayRefStruct(in char[] arr) Parameters Type Name Description char[] arr Char array Returns Type Description SecureCharArrayRefStruct | Edit this page View Source implicit operator char*(in SecureCharArrayRefStruct) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator char*(in SecureCharArrayRefStruct arr) Parameters Type Name Description SecureCharArrayRefStruct arr Array Returns Type Description char* | Edit this page View Source implicit operator char[](in SecureCharArrayRefStruct) Cast as char array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator char[](in SecureCharArrayRefStruct arr) Parameters Type Name Description SecureCharArrayRefStruct arr Array Returns Type Description char[] | Edit this page View Source implicit operator int(in SecureCharArrayRefStruct) Cast as Int32 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in SecureCharArrayRefStruct arr) Parameters Type Name Description SecureCharArrayRefStruct arr Array Returns Type Description int | Edit this page View Source implicit operator long(in SecureCharArrayRefStruct) Cast as Int64 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator long(in SecureCharArrayRefStruct arr) Parameters Type Name Description SecureCharArrayRefStruct arr Array Returns Type Description long | Edit this page View Source implicit operator nint(in SecureCharArrayRefStruct) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator nint(in SecureCharArrayRefStruct arr) Parameters Type Name Description SecureCharArrayRefStruct arr Array Returns Type Description nint | Edit this page View Source implicit operator Memory<char>(in SecureCharArrayRefStruct) Cast as memory Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Memory<char>(in SecureCharArrayRefStruct arr) Parameters Type Name Description SecureCharArrayRefStruct arr Array Returns Type Description Memory<char> | Edit this page View Source implicit operator Span<char>(in SecureCharArrayRefStruct) Cast as span Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Span<char>(in SecureCharArrayRefStruct arr) Parameters Type Name Description SecureCharArrayRefStruct arr Array Returns Type Description Span<char> | Edit this page View Source implicit operator SecureByteArray(in SecureCharArrayRefStruct) Cast as SecureByteArray (using UTF-8 encoding) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator SecureByteArray(in SecureCharArrayRefStruct arr) Parameters Type Name Description SecureCharArrayRefStruct arr Array Returns Type Description SecureByteArray | Edit this page View Source implicit operator SecureByteArrayStructSimple(in SecureCharArrayRefStruct) Cast as SecureByteArray (using UTF-8 encoding) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator SecureByteArrayStructSimple(in SecureCharArrayRefStruct arr) Parameters Type Name Description SecureCharArrayRefStruct arr Array Returns Type Description SecureByteArrayStructSimple | Edit this page View Source operator !=(in SecureCharArrayRefStruct, in SecureCharArrayRefStruct) Not equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in SecureCharArrayRefStruct left, in SecureCharArrayRefStruct right) Parameters Type Name Description SecureCharArrayRefStruct left Left SecureCharArrayRefStruct right Right Returns Type Description bool Not equal?"
  },
  "api/wan24.Core.SecureCharArrayStruct.html": {
    "href": "api/wan24.Core.SecureCharArrayStruct.html",
    "title": "Struct SecureCharArrayStruct | wan24-Core",
    "keywords": "Struct SecureCharArrayStruct Secure char array (will delete its contents when disposing) Implements ISecureArray<char> IArray<char> IEnumerable<char> IEnumerable IEquatable<Memory<char>> IDisposable Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public struct SecureCharArrayStruct : ISecureArray<char>, IArray<char>, IEnumerable<char>, IEnumerable, IEquatable<Memory<char>>, IDisposable Constructors | Edit this page View Source SecureCharArrayStruct(in char[]) Constructor Declaration public SecureCharArrayStruct(in char[] array) Parameters Type Name Description char[] array Array | Edit this page View Source SecureCharArrayStruct(in long) Constructor Declaration public SecureCharArrayStruct(in long len) Parameters Type Name Description long len Length in chars Properties | Edit this page View Source Array Array Declaration public readonly char[] Array { get; } Property Value Type Description char[] | Edit this page View Source IntPtr Pointer Declaration public readonly nint IntPtr { get; } Property Value Type Description nint | Edit this page View Source this[Index, Index] Get a range Declaration public readonly Memory<char> this[Index start, Index end] { get; } Parameters Type Name Description Index start Start Index end End Property Value Type Description Memory<char> Range memory | Edit this page View Source this[int] Get/set an element Declaration public readonly char this[int offset] { get; set; } Parameters Type Name Description int offset Index Property Value Type Description char Element | Edit this page View Source this[Range] Get a range Declaration public readonly Memory<char> this[Range range] { get; } Parameters Type Name Description Range range Range Property Value Type Description Memory<char> Range memory | Edit this page View Source Length Length Declaration public readonly int Length { get; } Property Value Type Description int | Edit this page View Source LongLength Length Declaration public readonly long LongLength { get; } Property Value Type Description long | Edit this page View Source Memory Memory Declaration public readonly Memory<char> Memory { get; } Property Value Type Description Memory<char> | Edit this page View Source Ptr Pointer Declaration public readonly char* Ptr { get; } Property Value Type Description char* | Edit this page View Source Span Span Declaration public readonly Span<char> Span { get; } Property Value Type Description Span<char> Methods | Edit this page View Source DetachAndDispose() Detach the secured byte array and dispose this instance Declaration public char[] DetachAndDispose() Returns Type Description char[] Unsecure byte array | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source Equals(Memory<char>) Indicates whether the current object is equal to another object of the same type. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly bool Equals(Memory<char> other) Parameters Type Name Description Memory<char> other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly IEnumerator<char> GetEnumerator() Returns Type Description IEnumerator<char> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Edit this page View Source operator ==(in SecureCharArrayStruct, in SecureCharArrayStruct) Equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in SecureCharArrayStruct left, in SecureCharArrayStruct right) Parameters Type Name Description SecureCharArrayStruct left Left SecureCharArrayStruct right Right Returns Type Description bool Equals? | Edit this page View Source explicit operator SecureCharArrayStruct(in char[]) Cast a char array as secure char array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator SecureCharArrayStruct(in char[] arr) Parameters Type Name Description char[] arr Char array Returns Type Description SecureCharArrayStruct | Edit this page View Source implicit operator char*(in SecureCharArrayStruct) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator char*(in SecureCharArrayStruct arr) Parameters Type Name Description SecureCharArrayStruct arr Array Returns Type Description char* | Edit this page View Source implicit operator char[](in SecureCharArrayStruct) Cast as char array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator char[](in SecureCharArrayStruct arr) Parameters Type Name Description SecureCharArrayStruct arr Array Returns Type Description char[] | Edit this page View Source implicit operator int(in SecureCharArrayStruct) Cast as Int32 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in SecureCharArrayStruct arr) Parameters Type Name Description SecureCharArrayStruct arr Array Returns Type Description int | Edit this page View Source implicit operator long(in SecureCharArrayStruct) Cast as Int64 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator long(in SecureCharArrayStruct arr) Parameters Type Name Description SecureCharArrayStruct arr Array Returns Type Description long | Edit this page View Source implicit operator nint(in SecureCharArrayStruct) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator nint(in SecureCharArrayStruct arr) Parameters Type Name Description SecureCharArrayStruct arr Array Returns Type Description nint | Edit this page View Source implicit operator Memory<char>(in SecureCharArrayStruct) Cast as memory Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Memory<char>(in SecureCharArrayStruct arr) Parameters Type Name Description SecureCharArrayStruct arr Array Returns Type Description Memory<char> | Edit this page View Source implicit operator Span<char>(in SecureCharArrayStruct) Cast as span Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Span<char>(in SecureCharArrayStruct arr) Parameters Type Name Description SecureCharArrayStruct arr Array Returns Type Description Span<char> | Edit this page View Source implicit operator SecureByteArray(in SecureCharArrayStruct) Cast as SecureByteArray (using UTF-8 encoding) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator SecureByteArray(in SecureCharArrayStruct arr) Parameters Type Name Description SecureCharArrayStruct arr Array Returns Type Description SecureByteArray | Edit this page View Source implicit operator SecureByteArrayStruct(in SecureCharArrayStruct) Cast as SecureByteArray (using UTF-8 encoding) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator SecureByteArrayStruct(in SecureCharArrayStruct arr) Parameters Type Name Description SecureCharArrayStruct arr Array Returns Type Description SecureByteArrayStruct | Edit this page View Source operator !=(in SecureCharArrayStruct, in SecureCharArrayStruct) Not equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in SecureCharArrayStruct left, in SecureCharArrayStruct right) Parameters Type Name Description SecureCharArrayStruct left Left SecureCharArrayStruct right Right Returns Type Description bool Not equal? Implements ISecureArray<T> IArray<T> IEnumerable<T> IEnumerable IEquatable<T> IDisposable Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.SecureCharArrayStructSimple.html": {
    "href": "api/wan24.Core.SecureCharArrayStructSimple.html",
    "title": "Struct SecureCharArrayStructSimple | wan24-Core",
    "keywords": "Struct SecureCharArrayStructSimple Secure char array (will delete its contents when disposing; not thread-safe) Implements ISecureArray<char> IArray<char> IEnumerable<char> IEnumerable IEquatable<Memory<char>> IDisposable Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public struct SecureCharArrayStructSimple : ISecureArray<char>, IArray<char>, IEnumerable<char>, IEnumerable, IEquatable<Memory<char>>, IDisposable Constructors | Edit this page View Source SecureCharArrayStructSimple(in char[]) Constructor Declaration public SecureCharArrayStructSimple(in char[] array) Parameters Type Name Description char[] array Array | Edit this page View Source SecureCharArrayStructSimple(in long) Constructor Declaration public SecureCharArrayStructSimple(in long len) Parameters Type Name Description long len Length in chars Properties | Edit this page View Source Array Array Declaration public readonly char[] Array { get; } Property Value Type Description char[] | Edit this page View Source IntPtr Pointer Declaration public readonly nint IntPtr { get; } Property Value Type Description nint | Edit this page View Source this[Index, Index] Get a range Declaration public readonly Memory<char> this[Index start, Index end] { get; } Parameters Type Name Description Index start Start Index end End Property Value Type Description Memory<char> Range memory | Edit this page View Source this[int] Get/set an element Declaration public readonly char this[int offset] { get; set; } Parameters Type Name Description int offset Index Property Value Type Description char Element | Edit this page View Source this[Range] Get a range Declaration public readonly Memory<char> this[Range range] { get; } Parameters Type Name Description Range range Range Property Value Type Description Memory<char> Range memory | Edit this page View Source Length Length Declaration public readonly int Length { get; } Property Value Type Description int | Edit this page View Source LongLength Length Declaration public readonly long LongLength { get; } Property Value Type Description long | Edit this page View Source Memory Memory Declaration public readonly Memory<char> Memory { get; } Property Value Type Description Memory<char> | Edit this page View Source Ptr Pointer Declaration public readonly char* Ptr { get; } Property Value Type Description char* | Edit this page View Source Span Span Declaration public readonly Span<char> Span { get; } Property Value Type Description Span<char> Methods | Edit this page View Source DetachAndDispose() Detach the secured byte array and dispose this instance Declaration public char[] DetachAndDispose() Returns Type Description char[] Unsecure byte array | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source Equals(Memory<char>) Indicates whether the current object is equal to another object of the same type. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly bool Equals(Memory<char> other) Parameters Type Name Description Memory<char> other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly IEnumerator<char> GetEnumerator() Returns Type Description IEnumerator<char> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Edit this page View Source operator ==(in SecureCharArrayStructSimple, in SecureCharArrayStructSimple) Equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in SecureCharArrayStructSimple left, in SecureCharArrayStructSimple right) Parameters Type Name Description SecureCharArrayStructSimple left Left SecureCharArrayStructSimple right Right Returns Type Description bool Equals? | Edit this page View Source explicit operator SecureCharArrayStructSimple(in char[]) Cast a char array as secure char array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator SecureCharArrayStructSimple(in char[] arr) Parameters Type Name Description char[] arr Char array Returns Type Description SecureCharArrayStructSimple | Edit this page View Source implicit operator char*(in SecureCharArrayStructSimple) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator char*(in SecureCharArrayStructSimple arr) Parameters Type Name Description SecureCharArrayStructSimple arr Array Returns Type Description char* | Edit this page View Source implicit operator char[](in SecureCharArrayStructSimple) Cast as char array Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator char[](in SecureCharArrayStructSimple arr) Parameters Type Name Description SecureCharArrayStructSimple arr Array Returns Type Description char[] | Edit this page View Source implicit operator int(in SecureCharArrayStructSimple) Cast as Int32 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in SecureCharArrayStructSimple arr) Parameters Type Name Description SecureCharArrayStructSimple arr Array Returns Type Description int | Edit this page View Source implicit operator long(in SecureCharArrayStructSimple) Cast as Int64 (length value) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator long(in SecureCharArrayStructSimple arr) Parameters Type Name Description SecureCharArrayStructSimple arr Array Returns Type Description long | Edit this page View Source implicit operator nint(in SecureCharArrayStructSimple) Cast as pointer Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator nint(in SecureCharArrayStructSimple arr) Parameters Type Name Description SecureCharArrayStructSimple arr Array Returns Type Description nint | Edit this page View Source implicit operator Memory<char>(in SecureCharArrayStructSimple) Cast as memory Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Memory<char>(in SecureCharArrayStructSimple arr) Parameters Type Name Description SecureCharArrayStructSimple arr Array Returns Type Description Memory<char> | Edit this page View Source implicit operator Span<char>(in SecureCharArrayStructSimple) Cast as span Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Span<char>(in SecureCharArrayStructSimple arr) Parameters Type Name Description SecureCharArrayStructSimple arr Array Returns Type Description Span<char> | Edit this page View Source implicit operator SecureByteArray(in SecureCharArrayStructSimple) Cast as SecureByteArray (using UTF-8 encoding) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator SecureByteArray(in SecureCharArrayStructSimple arr) Parameters Type Name Description SecureCharArrayStructSimple arr Array Returns Type Description SecureByteArray | Edit this page View Source implicit operator SecureByteArrayStructSimple(in SecureCharArrayStructSimple) Cast as SecureByteArray (using UTF-8 encoding) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator SecureByteArrayStructSimple(in SecureCharArrayStructSimple arr) Parameters Type Name Description SecureCharArrayStructSimple arr Array Returns Type Description SecureByteArrayStructSimple | Edit this page View Source operator !=(in SecureCharArrayStructSimple, in SecureCharArrayStructSimple) Not equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in SecureCharArrayStructSimple left, in SecureCharArrayStructSimple right) Parameters Type Name Description SecureCharArrayStructSimple left Left SecureCharArrayStructSimple right Right Returns Type Description bool Not equal? Implements ISecureArray<T> IArray<T> IEnumerable<T> IEnumerable IEquatable<T> IDisposable Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.SemaphoreSync.html": {
    "href": "api/wan24.Core.SemaphoreSync.html",
    "title": "Class SemaphoreSync | wan24-Core",
    "keywords": "Class SemaphoreSync Semaphore synchronization Inheritance object DisposableBase SemaphoreSync Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class SemaphoreSync : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source SemaphoreSync() Constructor Declaration public SemaphoreSync() | Edit this page View Source SemaphoreSync(in object) Constructor Declaration public SemaphoreSync(in object obj) Parameters Type Name Description object obj Synchronized object Properties | Edit this page View Source IsSynchronized Is synchronized? Declaration public bool IsSynchronized { get; } Property Value Type Description bool | Edit this page View Source Semaphore Semaphore Declaration public SemaphoreSlim Semaphore { get; } Property Value Type Description SemaphoreSlim | Edit this page View Source SynchronizedObjectCount Number of managed object synchronizing instances Declaration public static int SynchronizedObjectCount { get; } Property Value Type Description int Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source Execute(in Action, in CancellationToken) Execute an action while synchronized Declaration [TargetedPatchingOptOut(\"Tiny method\")] public void Execute(in Action action, in CancellationToken cancellationToken = default) Parameters Type Name Description Action action Action CancellationToken cancellationToken Cancellation token | Edit this page View Source Execute(in Action, in TimeSpan, in CancellationToken) Execute an action while synchronized Declaration [TargetedPatchingOptOut(\"Tiny method\")] public void Execute(in Action action, in TimeSpan timeout, in CancellationToken cancellationToken = default) Parameters Type Name Description Action action Action TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token | Edit this page View Source ExecuteAsync(Func<Task>, CancellationToken) Execute an action while synchronized Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task ExecuteAsync(Func<Task> action, CancellationToken cancellationToken = default) Parameters Type Name Description Func<Task> action Action CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source ExecuteAsync(Func<Task>, TimeSpan, CancellationToken) Execute an action while synchronized Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task ExecuteAsync(Func<Task> action, TimeSpan timeout, CancellationToken cancellationToken = default) Parameters Type Name Description Func<Task> action Action TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source ExecuteAsync<T>(Func<Task<T>>, CancellationToken) Execute an action while synchronized Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task<T> ExecuteAsync<T>(Func<Task<T>> action, CancellationToken cancellationToken = default) Parameters Type Name Description Func<Task<T>> action Action CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Action return value Type Parameters Name Description T Action return type | Edit this page View Source ExecuteAsync<T>(Func<Task<T>>, TimeSpan, CancellationToken) Execute an action while synchronized Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task<T> ExecuteAsync<T>(Func<Task<T>> action, TimeSpan timeout, CancellationToken cancellationToken = default) Parameters Type Name Description Func<Task<T>> action Action TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Action return value Type Parameters Name Description T Action return type | Edit this page View Source Execute<T>(in Func<T>, in CancellationToken) Execute an action while synchronized Declaration [TargetedPatchingOptOut(\"Tiny method\")] public T Execute<T>(in Func<T> action, in CancellationToken cancellationToken = default) Parameters Type Name Description Func<T> action Action CancellationToken cancellationToken Cancellation token Returns Type Description T Action return value Type Parameters Name Description T Action return type | Edit this page View Source Execute<T>(in Func<T>, in TimeSpan, in CancellationToken) Execute an action while synchronized Declaration [TargetedPatchingOptOut(\"Tiny method\")] public T Execute<T>(in Func<T> action, in TimeSpan timeout, in CancellationToken cancellationToken = default) Parameters Type Name Description Func<T> action Action TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description T Action return value Type Parameters Name Description T Action return type | Edit this page View Source GetSynchronizationInstanceCount(in object) Get the number of object synchronizing instances Declaration public static int GetSynchronizationInstanceCount(in object obj) Parameters Type Name Description object obj Object Returns Type Description int Number of object synchronizing instances | Edit this page View Source Release() Release the synchronization lock Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public void Release() | Edit this page View Source Sync(CancellationToken) Synchronize Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public void Sync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token | Edit this page View Source Sync(TimeSpan, CancellationToken) Synchronize Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public void Sync(TimeSpan timeout, CancellationToken cancellationToken = default) Parameters Type Name Description TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token | Edit this page View Source SyncAsync(CancellationToken) Synchronize Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public Task SyncAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source SyncAsync(TimeSpan, CancellationToken) Synchronize Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public Task SyncAsync(TimeSpan timeout, CancellationToken cancellationToken = default) Parameters Type Name Description TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source SyncContext(in CancellationToken) Synchronize Declaration [TargetedPatchingOptOut(\"Tiny method\")] public SemaphoreSyncContext SyncContext(in CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description SemaphoreSyncContext Context (don't forget to dispose!) | Edit this page View Source SyncContext(in TimeSpan, in CancellationToken) Synchronize Declaration [TargetedPatchingOptOut(\"Tiny method\")] public SemaphoreSyncContext SyncContext(in TimeSpan timeout, in CancellationToken cancellationToken = default) Parameters Type Name Description TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description SemaphoreSyncContext Context (don't forget to dispose!) | Edit this page View Source SyncContextAsync(CancellationToken) Synchronize Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task<SemaphoreSyncContext> SyncContextAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<SemaphoreSyncContext> Context (don't forget to dispose!) | Edit this page View Source SyncContextAsync(TimeSpan, CancellationToken) Synchronize Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Task<SemaphoreSyncContext> SyncContextAsync(TimeSpan timeout, CancellationToken cancellationToken = default) Parameters Type Name Description TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description Task<SemaphoreSyncContext> Context (don't forget to dispose!) Operators | Edit this page View Source implicit operator SemaphoreSyncContext(in SemaphoreSync) Cast as synchronization context Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator SemaphoreSyncContext(in SemaphoreSync sync) Parameters Type Name Description SemaphoreSync sync Synchronization Returns Type Description SemaphoreSyncContext Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.SemaphoreSyncContext.html": {
    "href": "api/wan24.Core.SemaphoreSyncContext.html",
    "title": "Struct SemaphoreSyncContext | wan24-Core",
    "keywords": "Struct SemaphoreSyncContext Semaphore synchronization context (should be consumed within a method, not giving the structure away as a parameter, nor returning it to somewhere!) Implements IDisposable IEquatable<SemaphoreSyncContext> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public record struct SemaphoreSyncContext : IDisposable, IEquatable<SemaphoreSyncContext> Fields | Edit this page View Source Semaphore Semaphore Declaration public readonly SemaphoreSlim Semaphore Field Value Type Description SemaphoreSlim Properties | Edit this page View Source IsDisposed Is disposed? Declaration public readonly bool IsDisposed { get; } Property Value Type Description bool | Edit this page View Source IsSynchronized Is synchronized? Declaration public readonly bool IsSynchronized { get; } Property Value Type Description bool Methods | Edit this page View Source Create(in SemaphoreSlim, in TimeSpan?, in CancellationToken) Create Declaration public static SemaphoreSyncContext Create(in SemaphoreSlim semaphore, in TimeSpan? timeout = null, in CancellationToken cancellationToken = default) Parameters Type Name Description SemaphoreSlim semaphore Semaphore TimeSpan? timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description SemaphoreSyncContext Synchronization context | Edit this page View Source Create(in SemaphoreSlim, in CancellationToken) Create Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static SemaphoreSyncContext Create(in SemaphoreSlim semaphore, in CancellationToken cancellationToken) Parameters Type Name Description SemaphoreSlim semaphore Semaphore CancellationToken cancellationToken Cancellation token Returns Type Description SemaphoreSyncContext Synchronization context | Edit this page View Source CreateAsync(SemaphoreSlim, TimeSpan?, CancellationToken) Create Declaration public static Task<SemaphoreSyncContext> CreateAsync(SemaphoreSlim semaphore, TimeSpan? timeout = null, CancellationToken cancellationToken = default) Parameters Type Name Description SemaphoreSlim semaphore Semaphore TimeSpan? timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description Task<SemaphoreSyncContext> Synchronization context | Edit this page View Source CreateAsync(in SemaphoreSlim, in CancellationToken) Create Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<SemaphoreSyncContext> CreateAsync(in SemaphoreSlim semaphore, in CancellationToken cancellationToken) Parameters Type Name Description SemaphoreSlim semaphore Semaphore CancellationToken cancellationToken Cancellation token Returns Type Description Task<SemaphoreSyncContext> Synchronization context | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source Release() Release the synchronization lock Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly void Release() | Edit this page View Source Sync(in CancellationToken) Synchronize Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly void Sync(in CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token | Edit this page View Source Sync(in TimeSpan, in CancellationToken) Synchronize Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly void Sync(in TimeSpan timeout, in CancellationToken cancellationToken = default) Parameters Type Name Description TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token | Edit this page View Source SyncAsync(CancellationToken) Synchronize Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly Task SyncAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source SyncAsync(TimeSpan, CancellationToken) Synchronize Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public readonly Task SyncAsync(TimeSpan timeout, CancellationToken cancellationToken = default) Parameters Type Name Description TimeSpan timeout Timeout CancellationToken cancellationToken Cancellation token Returns Type Description Task Implements IDisposable IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.SensitiveDataAttribute.html": {
    "href": "api/wan24.Core.SensitiveDataAttribute.html",
    "title": "Class SensitiveDataAttribute | wan24-Core",
    "keywords": "Class SensitiveDataAttribute Attribute for sensitive data Inheritance object Attribute SensitiveDataAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class SensitiveDataAttribute : Attribute Constructors | Edit this page View Source SensitiveDataAttribute() Constructor Declaration public SensitiveDataAttribute() Properties | Edit this page View Source CanSanitizeValue Can this attribute sanitize a sensitive value? Declaration public virtual bool CanSanitizeValue { get; } Property Value Type Description bool Methods | Edit this page View Source CreateSanitizedValue(object, string, object?) Sanitize a sensitive value Declaration public virtual object? CreateSanitizedValue(object obj, string property, object? value) Parameters Type Name Description object obj Object string property Property name object value Value Returns Type Description object Sanitized value Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ServiceWorkerTable.html": {
    "href": "api/wan24.Core.ServiceWorkerTable.html",
    "title": "Class ServiceWorkerTable | wan24-Core",
    "keywords": "Class ServiceWorkerTable Service worker table Inheritance object ServiceWorkerTable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class ServiceWorkerTable Fields | Edit this page View Source ServiceWorkers Service workers (key is a GUID) Declaration public static readonly ConcurrentChangeTokenDictionary<string, IServiceWorker> ServiceWorkers Field Value Type Description ConcurrentChangeTokenDictionary<string, IServiceWorker>"
  },
  "api/wan24.Core.Settings.html": {
    "href": "api/wan24.Core.Settings.html",
    "title": "Class Settings | wan24-Core",
    "keywords": "Class Settings Settings Inheritance object Settings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class Settings Fields | Edit this page View Source DEFAULT_BROWSER_APP_ID Default browser app ID Declaration public const string DEFAULT_BROWSER_APP_ID = \"browserApp\" Field Value Type Description string | Edit this page View Source DEFAULT_BUFFER_SIZE Default buffer size in bytes Declaration public const int DEFAULT_BUFFER_SIZE = 81920 Field Value Type Description int | Edit this page View Source DEFAULT_PROCESS_ID Default process ID Declaration public const string DEFAULT_PROCESS_ID = \"main\" Field Value Type Description string | Edit this page View Source DEFAULT_STACK_ALLOC_BORDER Default stack allocation border Declaration public const int DEFAULT_STACK_ALLOC_BORDER = 1024 Field Value Type Description int Properties | Edit this page View Source AppId An unique app ID (\"myapp\" f.e.; will be used in filenames!) Declaration public static string AppId { get; set; } Property Value Type Description string | Edit this page View Source BufferSize Buffer size in bytes Declaration [CliConfig] [Range(1, 2147483647)] public static int BufferSize { get; set; } Property Value Type Description int | Edit this page View Source CreateFileMode Default file create mode Declaration [CliConfig] public static UnixFileMode CreateFileMode { get; set; } Property Value Type Description UnixFileMode | Edit this page View Source CreateFolderMode Default folder create mode Declaration [CliConfig] public static UnixFileMode CreateFolderMode { get; set; } Property Value Type Description UnixFileMode | Edit this page View Source CustomTempFolder Custom temporary folder Declaration [CliConfig] public static string? CustomTempFolder { get; set; } Property Value Type Description string | Edit this page View Source LogLevel Default log level Declaration [CliConfig] public static LogLevel LogLevel { get; set; } Property Value Type Description LogLevel | Edit this page View Source ProcessId An unique process ID (\"service\" f.e.; only one process with this ID should run at once and have a specific order; will be used in filenames!) Declaration [CliConfig] [Required] public static string ProcessId { get; set; } Property Value Type Description string | Edit this page View Source StackAllocBorder Stack allocation border in bytes Declaration public static int StackAllocBorder { get; set; } Property Value Type Description int | Edit this page View Source TempFolder Temporary folder (may be the customized value or the system users temporary folder) Declaration public static string TempFolder { get; } Property Value Type Description string Exceptions Type Condition PlatformNotSupportedException Not supported in a browser app"
  },
  "api/wan24.Core.Shutdown.ShutdownEventArgs.html": {
    "href": "api/wan24.Core.Shutdown.ShutdownEventArgs.html",
    "title": "Class Shutdown.ShutdownEventArgs | wan24-Core",
    "keywords": "Class Shutdown.ShutdownEventArgs OnShutdown event arguments Inheritance object EventArgs Shutdown.ShutdownEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class Shutdown.ShutdownEventArgs : EventArgs Constructors | Edit this page View Source ShutdownEventArgs() Constructor Declaration public ShutdownEventArgs() Methods | Edit this page View Source AddFinalizerTask(in Task) Add a finalizer task to wait for Declaration public void AddFinalizerTask(in Task task) Parameters Type Name Description Task task Finalizer task Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Shutdown.Shutdown_Delegate.html": {
    "href": "api/wan24.Core.Shutdown.Shutdown_Delegate.html",
    "title": "Delegate Shutdown.Shutdown_Delegate | wan24-Core",
    "keywords": "Delegate Shutdown.Shutdown_Delegate Delegate for an OnShutdown event handler Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void Shutdown.Shutdown_Delegate(Shutdown.ShutdownEventArgs e) Parameters Type Name Description Shutdown.ShutdownEventArgs e Arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Shutdown.html": {
    "href": "api/wan24.Core.Shutdown.html",
    "title": "Class Shutdown | wan24-Core",
    "keywords": "Class Shutdown App shutdown Inheritance object Shutdown Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class Shutdown Properties | Edit this page View Source DidShutdown Did shutdown? Declaration public static bool DidShutdown { get; } Property Value Type Description bool | Edit this page View Source IsShuttingDown Is shutting down? Declaration public static bool IsShuttingDown { get; } Property Value Type Description bool | Edit this page View Source OnShutdownAsync Asynchronous shutdown handlers (executed in parallel before raising OnShutdown) Declaration public static AsyncEvent<object, EventArgs> OnShutdownAsync { get; } Property Value Type Description AsyncEvent<object, EventArgs> Methods | Edit this page View Source Async() Shutdown Declaration public static Task Async() Returns Type Description Task Events | Edit this page View Source OnShutdown Raised on shutdown Declaration public static event Shutdown.Shutdown_Delegate? OnShutdown Event Type Type Description Shutdown.Shutdown_Delegate"
  },
  "api/wan24.Core.SocketExtensions.html": {
    "href": "api/wan24.Core.SocketExtensions.html",
    "title": "Class SocketExtensions | wan24-Core",
    "keywords": "Class SocketExtensions Socket extensions Inheritance object SocketExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class SocketExtensions Methods | Edit this page View Source IsConnected(Socket) Determine if a socket is connected (may return false, if even if connected - not 100% safe...) Declaration public static bool IsConnected(this Socket socket) Parameters Type Name Description Socket socket Socket Returns Type Description bool Is connected?"
  },
  "api/wan24.Core.StackInfo-1.html": {
    "href": "api/wan24.Core.StackInfo-1.html",
    "title": "Class StackInfo<T> | wan24-Core",
    "keywords": "Class StackInfo<T> Current stack information Inheritance object StackInfo<T> Implements IStackInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class StackInfo<T> : IStackInfo Type Parameters Name Description T Object type Constructors | Edit this page View Source StackInfo(T) Constructor Declaration public StackInfo(T obj) Parameters Type Name Description T obj Object Properties | Edit this page View Source Created Created time Declaration public DateTime Created { get; } Property Value Type Description DateTime | Edit this page View Source Object Object Declaration public T Object { get; } Property Value Type Description T | Edit this page View Source Stack Stack Declaration public string Stack { get; } Property Value Type Description string Implements IStackInfo Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.StackInfoException.html": {
    "href": "api/wan24.Core.StackInfoException.html",
    "title": "Class StackInfoException | wan24-Core",
    "keywords": "Class StackInfoException Thrown for providing stack information Inheritance object Exception StackInfoException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax [Serializable] public sealed class StackInfoException : Exception, ISerializable Constructors | Edit this page View Source StackInfoException(in IStackInfo) Constructor Declaration public StackInfoException(in IStackInfo info) Parameters Type Name Description IStackInfo info Stack information | Edit this page View Source StackInfoException(in IStackInfo, in string?) Constructor Declaration public StackInfoException(in IStackInfo info, in string? message) Parameters Type Name Description IStackInfo info Stack information string message Message | Edit this page View Source StackInfoException(in IStackInfo, in string?, in Exception?) Constructor Declaration public StackInfoException(in IStackInfo info, in string? message, in Exception? inner) Parameters Type Name Description IStackInfo info Stack information string message Message Exception inner Inner exception Properties | Edit this page View Source StackInfo Stack information Declaration public IStackInfo StackInfo { get; } Property Value Type Description IStackInfo Implements ISerializable Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Statistics.Value_Delegate.html": {
    "href": "api/wan24.Core.Statistics.Value_Delegate.html",
    "title": "Delegate Statistics.Value_Delegate | wan24-Core",
    "keywords": "Delegate Statistics.Value_Delegate Delegate for a value generator Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task<double> Statistics.Value_Delegate(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task<double> Value Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Statistics.html": {
    "href": "api/wan24.Core.Statistics.html",
    "title": "Class Statistics | wan24-Core",
    "keywords": "Class Statistics Statistics (provides the moving average) Inheritance object Statistics Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class Statistics Constructors | Edit this page View Source Statistics(in string, in int, in Value_Delegate, in StatisticsValueModes) Constructor Declaration public Statistics(in string name, in int capacity, in Statistics.Value_Delegate valueGenerator, in StatisticsValueModes valueMode = StatisticsValueModes.PeriodCounter) Parameters Type Name Description string name Display name int capacity Capacity Statistics.Value_Delegate valueGenerator Value generator StatisticsValueModes valueMode Value mode Properties | Edit this page View Source Average Average value Declaration public double Average { get; } Property Value Type Description double | Edit this page View Source Description Description Declaration public string? Description { get; set; } Property Value Type Description string | Edit this page View Source Group Value group Declaration public string? Group { get; set; } Property Value Type Description string | Edit this page View Source LastUpdate Last update Declaration public DateTime LastUpdate { get; } Property Value Type Description DateTime | Edit this page View Source LastValue Last value Declaration public double LastValue { get; } Property Value Type Description double | Edit this page View Source MovingAverage Moving average value over all stored values Declaration public double MovingAverage { get; } Property Value Type Description double | Edit this page View Source Name Display name Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source State The current moving average as a service worker state Declaration public Status State { get; } Property Value Type Description Status | Edit this page View Source ValueMode Value mode Declaration public StatisticsValueModes ValueMode { get; } Property Value Type Description StatisticsValueModes Methods | Edit this page View Source GenerateValue(CancellationToken) Generate a value Declaration public Task GenerateValue(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.StatisticsService.html": {
    "href": "api/wan24.Core.StatisticsService.html",
    "title": "Class StatisticsService | wan24-Core",
    "keywords": "Class StatisticsService Statistics service Inheritance object DisposableBase HostedServiceBase TimedHostedServiceBase StatisticsService Implements IWillDispose ITimer IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members TimedHostedServiceBase.GUID TimedHostedServiceBase.CanPause TimedHostedServiceBase.Interval TimedHostedServiceBase.TimerType TimedHostedServiceBase.LastRun TimedHostedServiceBase.LastDuration TimedHostedServiceBase.NextRun TimedHostedServiceBase.RunOnce TimedHostedServiceBase.SetTimerAsync(double, HostedServiceTimers?, DateTime?, CancellationToken) TimedHostedServiceBase.StartAsync(CancellationToken) TimedHostedServiceBase.StopAsync(CancellationToken) TimedHostedServiceBase.OnRan HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.OnException DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class StatisticsService : TimedHostedServiceBase, IWillDispose, ITimer, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source StatisticsService(in double, in HostedServiceTimers, in DateTime?) Constructor Declaration public StatisticsService(in double interval, in HostedServiceTimers timer = HostedServiceTimers.ExactCatchingUp, in DateTime? nextRun = null) Parameters Type Name Description double interval Interval in ms HostedServiceTimers timer Timer type DateTime? nextRun Fixed next run time Properties | Edit this page View Source State Status information Declaration public override IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Overrides TimedHostedServiceBase.State | Edit this page View Source Statistics Statistical values Declaration public ConcurrentDictionary<string, Statistics> Statistics { get; } Property Value Type Description ConcurrentDictionary<string, Statistics> Methods | Edit this page View Source TimedWorkerAsync() Timed service worker Declaration protected override Task TimedWorkerAsync() Returns Type Description Task Overrides TimedHostedServiceBase.TimedWorkerAsync() Implements IWillDispose ITimer IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.StatisticsValueModes.html": {
    "href": "api/wan24.Core.StatisticsValueModes.html",
    "title": "Enum StatisticsValueModes | wan24-Core",
    "keywords": "Enum StatisticsValueModes Statistics value modes Namespace: wan24.Core Assembly: wan24Core.dll Syntax public enum StatisticsValueModes Fields Name Description PeriodCounter Period counter (reset after each period) TotalCounter Total counter (never reset) Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object[]) AsyncHelper.TryDisposeAsync<StatisticsValueModes>(StatisticsValueModes) AsyncHelper.TryDispose<StatisticsValueModes>(StatisticsValueModes) EnumExtensions.ContainsAllFlags<StatisticsValueModes>(StatisticsValueModes, in StatisticsValueModes) EnumExtensions.ContainsAnyFlag<StatisticsValueModes>(StatisticsValueModes, params StatisticsValueModes[]) EnumExtensions.GetContainedFlags<StatisticsValueModes>(StatisticsValueModes, params StatisticsValueModes[]) EnumExtensions.GetInfo<StatisticsValueModes>(StatisticsValueModes) EnumExtensions.IsFlag<StatisticsValueModes>(StatisticsValueModes) EnumExtensions.IsValidEnumerationValue<StatisticsValueModes>(StatisticsValueModes) EnumExtensions.IsValid<StatisticsValueModes>(StatisticsValueModes) EnumExtensions.IsValue<StatisticsValueModes>(StatisticsValueModes) EnumExtensions.OnlyFlags<StatisticsValueModes>(StatisticsValueModes) EnumExtensions.RemoveFlags<StatisticsValueModes>(StatisticsValueModes) ObjectExtensions.Do<StatisticsValueModes, tReturn>(StatisticsValueModes, in Func<StatisticsValueModes, tReturn>) ObjectExtensions.EnsureValidState<StatisticsValueModes>(StatisticsValueModes, in bool, in string) ObjectExtensions.GetDisplayText<StatisticsValueModes>(StatisticsValueModes) ObjectExtensions.In<StatisticsValueModes>(StatisticsValueModes, in IEnumerable<StatisticsValueModes>) ObjectExtensions.ToDictionary<StatisticsValueModes>(StatisticsValueModes, in int) ObjectExtensions.ToOrderedDictionary<StatisticsValueModes>(StatisticsValueModes, in int)"
  },
  "api/wan24.Core.Status.html": {
    "href": "api/wan24.Core.Status.html",
    "title": "Class Status | wan24-Core",
    "keywords": "Class Status Status Inheritance object Status Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class Status Remarks Constructor Constructors | Edit this page View Source Status(in string, in object?, in string?, in string?) Status Declaration public Status(in string name, in object? state, in string? description = null, in string? group = null) Parameters Type Name Description string name Name object state State string description Description string group Group name (use a backslash to define sub-groups) Remarks Constructor Properties | Edit this page View Source Description Description Declaration public string? Description { get; } Property Value Type Description string | Edit this page View Source Group Group (a backslash defines sub-groups) Declaration public string? Group { get; } Property Value Type Description string | Edit this page View Source Name Name Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source State State Declaration public object? State { get; } Property Value Type Description object Methods | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.StatusProviderTable.html": {
    "href": "api/wan24.Core.StatusProviderTable.html",
    "title": "Class StatusProviderTable | wan24-Core",
    "keywords": "Class StatusProviderTable IStatusProvider table Inheritance object StatusProviderTable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class StatusProviderTable Fields | Edit this page View Source Providers Status providers (key is the status group name (use a backslash to define sub-groups), value is the state enumeration) Declaration public static readonly ConcurrentChangeTokenDictionary<string, IEnumerable<Status>> Providers Field Value Type Description ConcurrentChangeTokenDictionary<string, IEnumerable<Status>> Properties | Edit this page View Source State App state Declaration public static IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> Methods | Edit this page View Source CombineStatusGroupNames(string, params string?[]) Combine status group names Declaration public static string CombineStatusGroupNames(this string name, params string?[] names) Parameters Type Name Description string name Status group name (should be normalized!) string[] names Additional status group names (should be normalized!) Returns Type Description string Combined name | Edit this page View Source NormalizeStatusGroupName(string) Normalize a status group name Declaration public static string NormalizeStatusGroupName(this string name) Parameters Type Name Description string name Status group name Returns Type Description string Normalized name"
  },
  "api/wan24.Core.StoredObject-2.html": {
    "href": "api/wan24.Core.StoredObject-2.html",
    "title": "Class StoredObject<tKey, tObj> | wan24-Core",
    "keywords": "Class StoredObject<tKey, tObj> Stored object Inheritance object DisposableBase StoredObject<tKey, tObj> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class StoredObject<tKey, tObj> : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable where tKey : notnull where tObj : class, IStoredObject<tKey> Type Parameters Name Description tKey tObj Remarks Constructor Constructors | Edit this page View Source StoredObject(in IObjectStorage<tKey, tObj>, in tObj) Stored object Declaration public StoredObject(in IObjectStorage<tKey, tObj> storage, in tObj obj) Parameters Type Name Description IObjectStorage<tKey, tObj> storage Storage tObj obj Object Remarks Constructor Properties | Edit this page View Source Object Object Declaration public tObj Object { get; } Property Value Type Description tObj | Edit this page View Source Storage Storage Declaration public IObjectStorage<tKey, tObj> Storage { get; } Property Value Type Description IObjectStorage<tKey, tObj> Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) Operators | Edit this page View Source implicit operator tObj(StoredObject<tKey, tObj>) Cast as object Declaration public static implicit operator tObj(StoredObject<tKey, tObj> so) Parameters Type Name Description StoredObject<tKey, tObj> so StoredObject<tKey, tObj> Returns Type Description tObj Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.StreamBase.html": {
    "href": "api/wan24.Core.StreamBase.html",
    "title": "Class StreamBase | wan24-Core",
    "keywords": "Class StreamBase Base class for streams Inheritance object MarshalByRefObject Stream StreamBase BiDirectionalStream<tReadable, tWritable> BlockingBufferStream ChunkedStream CombinedStream EnumerableStream HubStream MemoryPoolStream RandomStream WrapperStream<T> ZeroStream Implements IStream IDisposableObject IDisposable IAsyncDisposable Inherited Members Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.Flush() Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(byte[], int, int) Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Seek(long, SeekOrigin) Stream.SetLength(long) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(byte[], int, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanRead Stream.CanSeek Stream.CanTimeout Stream.CanWrite Stream.Length Stream.Position Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class StreamBase : Stream, IStream, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source StreamBase() Constructor Declaration public StreamBase() Fields | Edit this page View Source SyncObject An object for thread synchronization Declaration protected readonly object SyncObject Field Value Type Description object Properties | Edit this page View Source IsClosed Is closed? Declaration public bool IsClosed { get; protected set; } Property Value Type Description bool | Edit this page View Source IsDisposed Is disposed? (final object disposing state) Declaration public bool IsDisposed { get; protected set; } Property Value Type Description bool | Edit this page View Source IsDisposing Is disposing? (is true when disposed already, too!) Declaration public bool IsDisposing { get; } Property Value Type Description bool | Edit this page View Source Name Display name Declaration public string? Name { get; set; } Property Value Type Description string Methods | Edit this page View Source Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. Declaration public override void Close() Overrides Stream.Close() | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Stream.Dispose(bool) | Edit this page View Source DisposeAsync() Asynchronously releases the unmanaged resources used by the Stream. Declaration public override ValueTask DisposeAsync() Returns Type Description ValueTask A task that represents the asynchronous dispose operation. Overrides Stream.DisposeAsync() | Edit this page View Source DisposeCore() Declaration protected virtual Task DisposeCore() Returns Type Description Task | Edit this page View Source DoClose() Determine if to close (and signal closed) Declaration protected bool DoClose() Returns Type Description bool Do close? | Edit this page View Source EnsureReadable() Ensure readability Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected void EnsureReadable() Exceptions Type Condition NotSupportedException Not readable | Edit this page View Source EnsureSeekable() Ensure seek ability Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected void EnsureSeekable() Exceptions Type Condition NotSupportedException Not seekable | Edit this page View Source EnsureUndisposed(in bool, in bool) Ensure an undisposed object state Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected bool EnsureUndisposed(in bool allowDisposing = false, in bool throwException = true) Parameters Type Name Description bool allowDisposing Allow disposing state? bool throwException Throw an exception if disposing/disposed? Returns Type Description bool Is not disposing? | Edit this page View Source EnsureWritable() Ensure writability Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected void EnsureWritable() Exceptions Type Condition NotSupportedException Not writable | Edit this page View Source IfUndisposed(in Action, in bool) Execute an action if undisposed Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected void IfUndisposed(in Action action, in bool allowDisposing = false) Parameters Type Name Description Action action Action bool allowDisposing Allow disposing state? | Edit this page View Source IfUndisposedNullable<T>(in Func<T?>, in bool) Execute an action if undisposed Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected T? IfUndisposedNullable<T>(in Func<T?> action, in bool allowDisposing = false) Parameters Type Name Description Func<T> action Action bool allowDisposing Allow disposing state? Returns Type Description T Return value Type Parameters Name Description T Return type | Edit this page View Source IfUndisposed<T>(in Func<T>, in bool) Execute an action if undisposed Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected T IfUndisposed<T>(in Func<T> action, in bool allowDisposing = false) Parameters Type Name Description Func<T> action Action bool allowDisposing Allow disposing state? Returns Type Description T Return value Type Parameters Name Description T Return type | Edit this page View Source IfUndisposed<T>(in T, in bool) Return a value if not disposing/disposed Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected T IfUndisposed<T>(in T value, in bool allowDisposing = false) Parameters Type Name Description T value Value bool allowDisposing Allow disposing state? Returns Type Description T Value Type Parameters Name Description T Value type Events | Edit this page View Source OnDisposed Raised when disposed Declaration public event IDisposableObject.Dispose_Delegate? OnDisposed Event Type Type Description IDisposableObject.Dispose_Delegate | Edit this page View Source OnDisposing Raised when disposing Declaration public event IDisposableObject.Dispose_Delegate? OnDisposing Event Type Type Description IDisposableObject.Dispose_Delegate Implements IStream IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.StreamExtensions.html": {
    "href": "api/wan24.Core.StreamExtensions.html",
    "title": "Class StreamExtensions | wan24-Core",
    "keywords": "Class StreamExtensions Stream extensions Inheritance object StreamExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class StreamExtensions Methods | Edit this page View Source Chunk(Stream, in long) Create stream chunks Declaration public static IEnumerable<StreamBase> Chunk(this Stream stream, in long chunkSize) Parameters Type Name Description Stream stream Stream (will be chunked from position 0) long chunkSize Chunk size in bytes Returns Type Description IEnumerable<StreamBase> Chunks (should be used directly, and the yielded partial chunk streams, too (their position will change as soon as a new stream was yielded)!) | Edit this page View Source CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) Copy partial to another stream Declaration public static void CopyExactlyPartialTo(this Stream stream, in Stream target, long count, int? bufferSize = null, ProcessingProgress? progress = null) Parameters Type Name Description Stream stream Stream Stream target Target stream long count Number of bytes to copy int? bufferSize Buffer size in bytes ProcessingProgress progress Progress | Edit this page View Source CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) Copy partial to another stream Declaration public static Task CopyExactlyPartialToAsync(this Stream stream, Stream target, long count, int? bufferSize = null, ProcessingProgress? progress = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream Stream target Target stream long count Number of bytes to copy int? bufferSize Buffer size in bytes ProcessingProgress progress Progress CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) Copy partial to another stream Declaration public static long CopyPartialTo(this Stream stream, in Stream target, long count, int? bufferSize = null, ProcessingProgress? progress = null) Parameters Type Name Description Stream stream Stream Stream target Target stream long count Number of bytes to copy int? bufferSize Buffer size in bytes ProcessingProgress progress Progress Returns Type Description long Number of left bytes ('cause the source stream didn't deliver enough data) | Edit this page View Source CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) Copy partial to another stream Declaration public static Task<long> CopyPartialToAsync(this Stream stream, Stream target, long count, int? bufferSize = null, ProcessingProgress? progress = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream Stream target Target stream long count Number of bytes to copy int? bufferSize Buffer size in bytes ProcessingProgress progress Progress CancellationToken cancellationToken Cancellation token Returns Type Description Task<long> Number of left bytes ('cause the source stream didn't deliver enough data) | Edit this page View Source GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) Generic copy to another stream Declaration public static void GenericCopyTo(this Stream stream, in Stream destination, in int bufferSize = 81920, ProcessingProgress? progress = null) Parameters Type Name Description Stream stream Stream Stream destination Target int bufferSize Buffer size in bytes ProcessingProgress progress Progress | Edit this page View Source GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) Generic copy to another stream Declaration public static Task GenericCopyToAsync(this Stream stream, Stream destination, int bufferSize = 81920, ProcessingProgress? progress = null, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream Stream destination Target int bufferSize Buffer size in bytes ProcessingProgress progress Progress CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source GenericReadByte(Stream) Generic read byte Declaration public static int GenericReadByte(this Stream stream) Parameters Type Name Description Stream stream Stream Returns Type Description int Byte or -1, if read failed | Edit this page View Source GenericSeek(Stream, in long, in SeekOrigin) Seek Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long GenericSeek(this Stream stream, in long offset, in SeekOrigin origin) Parameters Type Name Description Stream stream Stream long offset Offset SeekOrigin origin Origin Returns Type Description long Position | Edit this page View Source GenericWriteByte(Stream, in byte) Generic write byte Declaration public static void GenericWriteByte(this Stream stream, in byte value) Parameters Type Name Description Stream stream Stream byte value Value | Edit this page View Source GetRemainingBytes(Stream) Get the number of remaining bytes until the streams end Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static long GetRemainingBytes(this Stream stream) Parameters Type Name Description Stream stream Stream Returns Type Description long Remaining number of bytes | Edit this page View Source WriteRandom(Stream, in long) Write random bytes Declaration public static void WriteRandom(this Stream stream, in long count) Parameters Type Name Description Stream stream Stream long count Number of bytes | Edit this page View Source WriteRandomAsync(Stream, long, CancellationToken) Write random bytes Declaration public static Task WriteRandomAsync(this Stream stream, long count, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream long count Number of bytes CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source WriteZero(Stream, in long) Write zero Declaration public static void WriteZero(this Stream stream, in long count) Parameters Type Name Description Stream stream Stream long count Number of bytes | Edit this page View Source WriteZeroAsync(Stream, long, CancellationToken) Write zero Declaration public static Task WriteZeroAsync(this Stream stream, long count, CancellationToken cancellationToken = default) Parameters Type Name Description Stream stream Stream long count Number of bytes CancellationToken cancellationToken Cancellation token Returns Type Description Task"
  },
  "api/wan24.Core.StreamPool-1.html": {
    "href": "api/wan24.Core.StreamPool-1.html",
    "title": "Class StreamPool<T> | wan24-Core",
    "keywords": "Class StreamPool<T> Stream pool Inheritance object DisposableBase DisposableObjectPool<T> StreamPool<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IObjectPool<T> IObjectPool IPool Inherited Members DisposableObjectPool<T>.Pool DisposableObjectPool<T>.Factory DisposableObjectPool<T>.GUID DisposableObjectPool<T>.Name DisposableObjectPool<T>.ItemType DisposableObjectPool<T>.Capacity DisposableObjectPool<T>.Available DisposableObjectPool<T>.ResetOnRent DisposableObjectPool<T>.ForceResetOnReturn DisposableObjectPool<T>.Rent() DisposableObjectPool<T>.Dispose(bool) DisposableObjectPool<T>.DisposeCore() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class StreamPool<T> : DisposableObjectPool<T>, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable, IObjectPool<T>, IObjectPool, IPool where T : Stream, IObjectPoolItem, new() Type Parameters Name Description T Stream type Constructors | Edit this page View Source StreamPool(in int) Constructor Declaration public StreamPool(in int capacity) Parameters Type Name Description int capacity Capacity | Edit this page View Source StreamPool(in int, in Func<T>) Constructor Declaration public StreamPool(in int capacity, in Func<T> factory) Parameters Type Name Description int capacity Capacity Func<T> factory Stream factory Fields | Edit this page View Source IsStreamBase Is a StreamBase stream? Declaration protected static readonly bool IsStreamBase Field Value Type Description bool Methods | Edit this page View Source Return(in T, in bool) Return an item Declaration public override void Return(in T item, in bool reset = false) Parameters Type Name Description T item Item bool reset Reset the IObjectPoolItem object? Overrides DisposableObjectPool<T>.Return(in T, in bool) Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable IObjectPool<T> IObjectPool IPool Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.StreamProxy.Error_Delegate.html": {
    "href": "api/wan24.Core.StreamProxy.Error_Delegate.html",
    "title": "Delegate StreamProxy.Error_Delegate | wan24-Core",
    "keywords": "Delegate StreamProxy.Error_Delegate Delegate for an OnError handler Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void StreamProxy.Error_Delegate(StreamProxy proyx, EventArgs e) Parameters Type Name Description StreamProxy proyx Proxy EventArgs e Arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.StreamProxy.html": {
    "href": "api/wan24.Core.StreamProxy.html",
    "title": "Class StreamProxy | wan24-Core",
    "keywords": "Class StreamProxy Stream proxy (will copy data bi-directional between two streams; if one channel is done, the other channel will be canceled) Inheritance object DisposableBase StreamProxy Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class StreamProxy : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Remarks Constructor Constructors | Edit this page View Source StreamProxy(in Stream, in Stream, in bool) Constructor Declaration public StreamProxy(in Stream a, in Stream b, in bool run = true) Parameters Type Name Description Stream a A (should be non-blocking; will be disposed per default) Stream b B (should be non-blocking; will be disposed per default) bool run Run now? Fields | Edit this page View Source A2B A2B task Declaration protected Task? A2B Field Value Type Description Task | Edit this page View Source B2A B2A task Declaration protected Task? B2A Field Value Type Description Task | Edit this page View Source Cancellation Cancellation Declaration protected readonly CancellationTokenSource Cancellation Field Value Type Description CancellationTokenSource | Edit this page View Source Observer Observer task Declaration protected Task? Observer Field Value Type Description Task | Edit this page View Source Sync Thread synchronization Declaration protected readonly SemaphoreSync Sync Field Value Type Description SemaphoreSync Properties | Edit this page View Source A A (will be disposed per default) Declaration public Stream A { get; } Property Value Type Description Stream | Edit this page View Source A2BException A2B exception Declaration public AggregateException? A2BException { get; protected set; } Property Value Type Description AggregateException | Edit this page View Source B B (will be disposed per default) Declaration public Stream B { get; } Property Value Type Description Stream | Edit this page View Source B2AException B2A exception Declaration public AggregateException? B2AException { get; protected set; } Property Value Type Description AggregateException | Edit this page View Source BufferSize Buffer size per channel Declaration public int BufferSize { get; set; } Property Value Type Description int | Edit this page View Source DataDelay Delay to wait for data, if the source stream didn't read anything Declaration public TimeSpan DataDelay { get; set; } Property Value Type Description TimeSpan | Edit this page View Source IsExceptional Is exceptional? Declaration public bool IsExceptional { get; } Property Value Type Description bool | Edit this page View Source IsRunning Is running? Declaration public bool IsRunning { get; } Property Value Type Description bool | Edit this page View Source LeaveOpen Leave the streams open when disposing? Declaration public bool LeaveOpen { get; set; } Property Value Type Description bool | Edit this page View Source Started Started time Declaration public DateTime Started { get; protected set; } Property Value Type Description DateTime | Edit this page View Source Stopped Stopped time Declaration public DateTime Stopped { get; protected set; } Property Value Type Description DateTime Methods | Edit this page View Source Cancel(in CancellationToken) Cancel Declaration public virtual void Cancel(in CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token | Edit this page View Source CancelAsync(CancellationToken) Cancel Declaration public virtual Task CancelAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source PermanentCopyNonBlockingAsync(Stream, Stream) Copy a non-blocking source stream to a target stream until interrupted Declaration protected Task PermanentCopyNonBlockingAsync(Stream source, Stream target) Parameters Type Name Description Stream source Source Stream target Target Returns Type Description Task | Edit this page View Source RaiseOnError() Raise the OnError event Declaration protected virtual void RaiseOnError() | Edit this page View Source Run(in CancellationToken) Run (can't run twice!) Declaration public virtual void Run(in CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token | Edit this page View Source RunAsync(CancellationToken) Run (can't run twice!) Declaration public virtual Task RunAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source RunCommunication() Run the communication Declaration protected virtual void RunCommunication() | Edit this page View Source RunObserverAsync() Run the observer Declaration protected virtual Task RunObserverAsync() Returns Type Description Task | Edit this page View Source ThrowIfExceptional() Throw an exception, if exceptional Declaration [TargetedPatchingOptOut(\"Tiny method\")] public void ThrowIfExceptional() Exceptions Type Condition AggregateException Processing exceptions | Edit this page View Source WaitAsync(CancellationToken) Wait Declaration public Task WaitAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Events | Edit this page View Source OnError Raised on error Declaration public event StreamProxy.Error_Delegate? OnError Event Type Type Description StreamProxy.Error_Delegate Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.StringExtensions.Parser_Delegate.html": {
    "href": "api/wan24.Core.StringExtensions.Parser_Delegate.html",
    "title": "Delegate StringExtensions.Parser_Delegate | wan24-Core",
    "keywords": "Delegate StringExtensions.Parser_Delegate Delegate for a string parser function handler Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate string StringExtensions.Parser_Delegate(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Function return value (will be the final value or the value for the next function call) Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.StringExtensions.html": {
    "href": "api/wan24.Core.StringExtensions.html",
    "title": "Class StringExtensions | wan24-Core",
    "keywords": "Class StringExtensions String extensions Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class StringExtensions Fields | Edit this page View Source ParserEnvironment String parser environment variables Declaration public static readonly ConcurrentDictionary<string, string> ParserEnvironment Field Value Type Description ConcurrentDictionary<string, string> | Edit this page View Source ParserFunctionHandlers String parser function handlers (key is the lower case function name) Declaration public static readonly ConcurrentDictionary<string, StringExtensions.Parser_Delegate> ParserFunctionHandlers Field Value Type Description ConcurrentDictionary<string, StringExtensions.Parser_Delegate> Properties | Edit this page View Source ParserMaxRounds Default parsing rounds limit Declaration public static int ParserMaxRounds { get; set; } Property Value Type Description int | Edit this page View Source RxParser Regular expression to parse a string ($1 is the whole placeholder, $2 the inner variable declaration) Declaration public static Regex RxParser { get; set; } Property Value Type Description Regex | Edit this page View Source RxParserGroup Regular expression content group (2 per default) Declaration public static int RxParserGroup { get; set; } Property Value Type Description int Methods | Edit this page View Source FindComma(string, in char) Find the used comma character for separating decimals used in a numeric string representation (which may contain a thousands separator, also) Declaration public static char FindComma(this string str, in char defaultReturn = '.') Parameters Type Name Description string str String char defaultReturn Default return vaue (if no dot or comma was found) Returns Type Description char Comma character | Edit this page View Source FindPathSeparator(string, in char) Find the used path separator Declaration public static char FindPathSeparator(this string str, in char defaultSeparator = '/') Parameters Type Name Description string str String char defaultSeparator Default return value (if no (back)slash was found) Returns Type Description char Path separator | Edit this page View Source GetBase64Bytes(ReadOnlySpan<char>) Get bytes from a base64 string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte[] GetBase64Bytes(this ReadOnlySpan<char> str) Parameters Type Name Description ReadOnlySpan<char> str String Returns Type Description byte[] Bytes | Edit this page View Source GetBase64Bytes(ReadOnlySpan<char>, in Span<byte>) Get bytes from a base64 string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static int GetBase64Bytes(this ReadOnlySpan<char> str, in Span<byte> buffer) Parameters Type Name Description ReadOnlySpan<char> str String Span<byte> buffer Output buffer Returns Type Description int Number of bytes written to buffer | Edit this page View Source GetByteFromBits(ReadOnlySpan<char>) Get a byte from bits Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static byte GetByteFromBits(this ReadOnlySpan<char> str) Parameters Type Name Description ReadOnlySpan<char> str String Returns Type Description byte Byte | Edit this page View Source GetByteFromBits(string) Get a byte from bits Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte GetByteFromBits(this string str) Parameters Type Name Description string str String Returns Type Description byte Byte | Edit this page View Source GetBytes(char[]) Get UTF-8 bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] GetBytes(this char[] str) Parameters Type Name Description char[] str String Returns Type Description byte[] Bytes | Edit this page View Source GetBytes(char[], in byte[]) Get UTF-8 bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int GetBytes(this char[] str, in byte[] buffer) Parameters Type Name Description char[] str String byte[] buffer Buffer Returns Type Description int Used buffer length in bytes | Edit this page View Source GetBytes(char[], in Span<byte>) Get UTF-8 bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int GetBytes(this char[] str, in Span<byte> buffer) Parameters Type Name Description char[] str String Span<byte> buffer Buffer Returns Type Description int Used buffer length in bytes | Edit this page View Source GetBytes(string) Get UTF-8 bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] GetBytes(this string str) Parameters Type Name Description string str String Returns Type Description byte[] Bytes | Edit this page View Source GetBytes(string, in byte[]) Get UTF-8 bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int GetBytes(this string str, in byte[] buffer) Parameters Type Name Description string str String byte[] buffer Buffer Returns Type Description int Used buffer length in bytes | Edit this page View Source GetBytes(string, in Span<byte>) Get UTF-8 bytes Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int GetBytes(this string str, in Span<byte> buffer) Parameters Type Name Description string str String Span<byte> buffer Buffer Returns Type Description int Used buffer length in bytes | Edit this page View Source GetBytes16(char[]) Get UTF-16 bytes (little endian) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] GetBytes16(this char[] str) Parameters Type Name Description char[] str String Returns Type Description byte[] Bytes | Edit this page View Source GetBytes16(char[], in byte[]) Get UTF-16 bytes (little endian) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int GetBytes16(this char[] str, in byte[] buffer) Parameters Type Name Description char[] str String byte[] buffer Buffer Returns Type Description int Used buffer length in bytes | Edit this page View Source GetBytes16(char[], in Span<byte>) Get UTF-16 bytes (little endian) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int GetBytes16(this char[] str, in Span<byte> buffer) Parameters Type Name Description char[] str String Span<byte> buffer Buffer Returns Type Description int Used buffer length in bytes | Edit this page View Source GetBytes16(string) Get UTF-16 bytes (little endian) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] GetBytes16(this string str) Parameters Type Name Description string str String Returns Type Description byte[] Bytes | Edit this page View Source GetBytes16(string, in byte[]) Get UTF-16 bytes (little endian) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int GetBytes16(this string str, in byte[] buffer) Parameters Type Name Description string str String byte[] buffer Buffer Returns Type Description int Used buffer length in bytes | Edit this page View Source GetBytes16(string, in Span<byte>) Get UTF-16 bytes (little endian) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int GetBytes16(this string str, in Span<byte> buffer) Parameters Type Name Description string str String Span<byte> buffer Buffer Returns Type Description int Used buffer length in bytes | Edit this page View Source GetBytes32(char[]) Get UTF-32 bytes (little endian) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] GetBytes32(this char[] str) Parameters Type Name Description char[] str String Returns Type Description byte[] Bytes | Edit this page View Source GetBytes32(char[], in byte[]) Get UTF-32 bytes (little endian) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int GetBytes32(this char[] str, in byte[] buffer) Parameters Type Name Description char[] str String byte[] buffer Buffer Returns Type Description int Used buffer length in bytes | Edit this page View Source GetBytes32(char[], in Span<byte>) Get UTF-32 bytes (little endian) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int GetBytes32(this char[] str, in Span<byte> buffer) Parameters Type Name Description char[] str String Span<byte> buffer Buffer Returns Type Description int Used buffer length in bytes | Edit this page View Source GetBytes32(string) Get UTF-32 bytes (little endian) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] GetBytes32(this string str) Parameters Type Name Description string str String Returns Type Description byte[] Bytes | Edit this page View Source GetBytes32(string, in byte[]) Get UTF-32 bytes (little endian) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int GetBytes32(this string str, in byte[] buffer) Parameters Type Name Description string str String byte[] buffer Buffer Returns Type Description int Used buffer length in bytes | Edit this page View Source GetBytes32(string, in Span<byte>) Get UTF-32 bytes (little endian) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static int GetBytes32(this string str, in Span<byte> buffer) Parameters Type Name Description string str String Span<byte> buffer Buffer Returns Type Description int Used buffer length in bytes | Edit this page View Source GetBytesFromHex(ReadOnlySpan<char>) Get a byte array from a hex string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] GetBytesFromHex(this ReadOnlySpan<char> str) Parameters Type Name Description ReadOnlySpan<char> str Hex string Returns Type Description byte[] Byte array | Edit this page View Source GetBytesFromHex(string) Get a byte array from a hex string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static byte[] GetBytesFromHex(this string str) Parameters Type Name Description string str Hex string Returns Type Description byte[] Byte array | Edit this page View Source IsAscii(ReadOnlySpan<char>) Determine if a string contains only ASCII characters Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsAscii(this ReadOnlySpan<char> str) Parameters Type Name Description ReadOnlySpan<char> str String Returns Type Description bool If the string contains only ASCII characters | Edit this page View Source IsLike(string, in string) Determine if a string is like another string (equals case insensitive) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool IsLike(this string str, in string other) Parameters Type Name Description string str String string other Other string Returns Type Description bool Is the str like the other? | Edit this page View Source IsMatch(string, in string, in int, in RegexOptions, in TimeSpan) Try to match a string with a regular expression Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsMatch(this string str, in string pattern, in int start, in RegexOptions options = RegexOptions.None, in TimeSpan timeout = default) Parameters Type Name Description string str String string pattern Regular expression pattern int start Start offset RegexOptions options Regular expression options TimeSpan timeout Timeout Returns Type Description bool If the pattern does match the given string | Edit this page View Source IsMatch(string, in string, in RegexOptions, in TimeSpan) Try to match a string with a regular expression Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool IsMatch(this string str, in string pattern, in RegexOptions options = RegexOptions.None, in TimeSpan timeout = default) Parameters Type Name Description string str String string pattern Regular expression pattern RegexOptions options Regular expression options TimeSpan timeout Timeout Returns Type Description bool If the pattern does match the given string | Edit this page View Source MaxLength(string, in int, in string?) Ensure a maximum string length (including ellipsis length) Declaration public static string MaxLength(this string str, in int maxLength, in string? ellipsis = null) Parameters Type Name Description string str String int maxLength Max. length string ellipsis Ellipsis Returns Type Description string String | Edit this page View Source Parse(string, in Dictionary<string, string>, in StringParserOptions?) Parse a string (the current round is available as _round) Declaration public static string Parse(this string str, in Dictionary<string, string> data, in StringParserOptions? options = null) Parameters Type Name Description string str String Dictionary<string, string> data Parser data StringParserOptions options Options Returns Type Description string Parsed string | Edit this page View Source Parse(string, params string[]) Parse a string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static string Parse(this string str, params string[] data) Parameters Type Name Description string str String string[] data Parser data (accessable with the zero based index) Returns Type Description string Parsed string | Edit this page View Source Parser_Append(StringParserContext) Value appending function append (Syntax: %{input:append(string)} (to append string) or %{input:append($name)} (to append variable name)) Declaration public static string Parser_Append(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Parsed value | Edit this page View Source Parser_Concat(StringParserContext) Value concatenation function concat (Syntax: %{:concat(string,$name,...)}) Declaration public static string Parser_Concat(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Parsed value | Edit this page View Source Parser_Count(StringParserContext) Item count function count (Syntax: %{input:count}; items will be splitted by pipe |) Declaration public static string Parser_Count(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Value | Edit this page View Source Parser_Discard(StringParserContext) Discard output function discard (Syntax: %{input:discard}) Declaration public static string Parser_Discard(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Empty string | Edit this page View Source Parser_Dummy(StringParserContext) Dummy function dummy (Syntax: %{:dummy(...)} (does nothing)) Declaration public static string Parser_Dummy(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Value | Edit this page View Source Parser_Escape_Html(StringParserContext) HTML escaping function escape_html (Syntax: %{input:escape_html}) Declaration public static string Parser_Escape_Html(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Parsed value | Edit this page View Source Parser_Escape_Json(StringParserContext) JSON escaping function escape_json (will trim double quotes!) (Syntax: %{input:escape_json}) Declaration public static string Parser_Escape_Json(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Parsed value | Edit this page View Source Parser_Escape_URI(StringParserContext) URI escaping function escape_uri (Syntax: %{input:escape_uri}) Declaration public static string Parser_Escape_URI(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Parsed value | Edit this page View Source Parser_ForEach(StringParserContext) For-each loop function foreach (Syntax: %{input:foreach($name)}; current item will be stored in _item; items will be splitted by pipe |) Declaration public static string Parser_ForEach(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Parsed value | Edit this page View Source Parser_Format(StringParserContext) Numeric value formatter function format (Syntax: %{input:format(format)}; the format may be a variable name; decimal is being used as numeric format; numbers can be written in invariant culture float style (so the result will be written)) Declaration public static string Parser_Format(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Value | Edit this page View Source Parser_If(StringParserContext) Conditional function if (Syntax: %{input:if($name)} (to parse name, if input is 1) or %{input:if($name,$name2)} (to parse name, if input is 1, else parse name2)) Declaration public static string Parser_If(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Parsed value | Edit this page View Source Parser_Insert(StringParserContext) Value inserting function insert (Syntax: %{input:insert(1,string)} (to insert string at index #1) or %{name:input(1,$name)} (to insert variable name at index #1); the offset parameter may be a variable name with a $ prefix) Declaration public static string Parser_Insert(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Parsed value | Edit this page View Source Parser_InsertItem(StringParserContext) Insert item function insert_item (Syntax: %{input:insert_item(1,$items)}; items will be splitted by pipe |) Declaration public static string Parser_InsertItem(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Value | Edit this page View Source Parser_Item(StringParserContext) Parser item selector function item (Syntax: %{input:item(0,item0,item1,...)} (returns item #0) or %{input:item($name,item0,item1,...)} or %{input:item(0,$name)} (to split parser data name by pipe (|) as items)) Declaration public static string Parser_Item(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Value | Edit this page View Source Parser_Join(StringParserContext) Value joining function join (Syntax: %{:join(separator,string,$name,...)}; the separator parameter may be a variable name, too) Declaration public static string Parser_Join(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Parsed value | Edit this page View Source Parser_Left(StringParserContext) Left-sub-string function left (Syntax: %{input:left(3)}; the length parameter may be a variable name with a $ prefix) Declaration public static string Parser_Left(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Parsed value | Edit this page View Source Parser_Len(StringParserContext) String length function len (Syntax: %{input:len}) Declaration public static string Parser_Len(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Value | Edit this page View Source Parser_Math(StringParserContext) Math function math (Syntax: %{:math([operator],value1,\\(name2,...)}</code>; all parameters may be variable names with a <code>\\) prefix; decimal is being used as numeric format; numbers can be written in invariant culture float style (so the result will be written)) - supported operators are: + summarize - substract * multiply / divide % modulo a average i minimum x maximum r round (second value is the number of decimals, other values are ignored) f floor (second values will be ignored) c ceiling (second values will be ignored) p Y power of X (second value is Y, other values are ignored; conversion to double is required) = equality (result is 0 for false or 1 for true) < lower than (result is 0 for false or 1 for true) > greater than (result is 0 for false or 1 for true) s to change the sign (second values will be ignored) Declaration public static string Parser_Math(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Parsed value | Edit this page View Source Parser_Prepend(StringParserContext) Value prepending function prepend (Syntax: %{input:prepend(string)} (to prepend string) or %{input:prepend($name)} (to prepend variable name)) Declaration public static string Parser_Prepend(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Parsed value | Edit this page View Source Parser_Range(StringParserContext) Numeric range function range (Syntax: %{:range(0,10)} (to create a numeric range from 0, having 10 items)) Declaration public static string Parser_Range(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Value | Edit this page View Source Parser_Remove(StringParserContext) Value removing function remove (Syntax: %{input:remove(1)} (to remove the first character) or %{v:remove(1,2)} (remove two characters from index #1); the parameters may be a variable name with a $ prefix) Declaration public static string Parser_Remove(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Parsed value | Edit this page View Source Parser_RemoveItem(StringParserContext) Remove item function remove_item (Syntax: %{input:remove_item(1)}; items will be splitted by pipe |) Declaration public static string Parser_RemoveItem(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Value | Edit this page View Source Parser_Right(StringParserContext) Right-sub-string function right (Syntax: %{input:right(3)}; the length parameter may be a variable name with a $ prefix) Declaration public static string Parser_Right(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Parsed value | Edit this page View Source Parser_Rx(StringParserContext) Parser regular expression setting function rx (Syntax: %{:rx(2,$name)}; the regular expression content group index may be a variable name, too) Declaration public static string Parser_Rx(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Value | Edit this page View Source Parser_Set(StringParserContext) Parser data setter function set (Syntax: %{input:set(targetName)}; the variable name parameter may be a variable name with a $ prefix) Declaration public static string Parser_Set(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Value | Edit this page View Source Parser_Sort(StringParserContext) Sort items function sort (Syntax: %{input:sort} (to sort ascending) or %{name:sort(desc)} (to sort descending); items will be splitted by pipe |) Declaration public static string Parser_Sort(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Value | Edit this page View Source Parser_Split(StringParserContext) Split function split (Syntax: %{input:split(prefix)} (to split the value by pipe (|) and set it as parser data using prefix as key appended with the item index)) Declaration public static string Parser_Split(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Value | Edit this page View Source Parser_StrFormat(StringParserContext) String value formatter function str_format (Syntax: %{input:str_format(value1,value2,...)}; the values may be variable names) Declaration public static string Parser_StrFormat(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Value | Edit this page View Source Parser_SubString(StringParserContext) Sub-string function sub (Syntax: %{input:sub(3)} (like %{input:left(3)}) or %{input:sub(3,2)} (2 characters from start index 3); parameters may be variable names with a $ prefix) Declaration public static string Parser_SubString(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Parsed value | Edit this page View Source Parser_Trim(StringParserContext) Trim value function trim (Syntax: %{input:trim}) Declaration public static string Parser_Trim(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Parsed value | Edit this page View Source Parser_Var(StringParserContext) Parser data getter function var (Syntax: %{:var(name)}; the variable name parameter may be a variable name with a $ prefix) Declaration public static string Parser_Var(StringParserContext context) Parameters Type Name Description StringParserContext context Context Returns Type Description string Value | Edit this page View Source ReplaceCharacters(string, in IReadOnlyDictionary<char, char>) Replace multiple characters Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static string ReplaceCharacters(this string str, in IReadOnlyDictionary<char, char> characters) Parameters Type Name Description string str String IReadOnlyDictionary<char, char> characters Characters to replace Returns Type Description string String | Edit this page View Source ReplaceCharacters(string, in IReadOnlyDictionary<char, string>) Replace multiple characters Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static string ReplaceCharacters(this string str, in IReadOnlyDictionary<char, string> characters) Parameters Type Name Description string str String IReadOnlyDictionary<char, string> characters Characters to replace Returns Type Description string String | Edit this page View Source ToLiteral(string, in bool) Convert to a literal string (escape special characters) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static string ToLiteral(this string str, in bool withinDoubleQuotes = false) Parameters Type Name Description string str String bool withinDoubleQuotes Return within double quotes? Returns Type Description string Literal string | Edit this page View Source ToQuotedLiteral(string) Convert to a double quoted literal string (escape special characters) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static string ToQuotedLiteral(this string str) Parameters Type Name Description string str String Returns Type Description string Literal string | Edit this page View Source TryFindComma(string, out char) Find the used comma character for separating decimals used in a numeric string representation (which may contain a thousands separator, also) Declaration public static bool TryFindComma(this string str, out char result) Parameters Type Name Description string str String char result Comma character Returns Type Description bool If a comma character was found | Edit this page View Source TryFindPathSeparator(string, out char) Find the used path separator Declaration public static bool TryFindPathSeparator(this string str, out char result) Parameters Type Name Description string str String char result Path separator Returns Type Description bool If a comma character was found"
  },
  "api/wan24.Core.StringLocalizerFactory.html": {
    "href": "api/wan24.Core.StringLocalizerFactory.html",
    "title": "Class StringLocalizerFactory | wan24-Core",
    "keywords": "Class StringLocalizerFactory IStringLocalizerFactory (uses Current) Inheritance object StringLocalizerFactory Implements IStringLocalizerFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class StringLocalizerFactory : IStringLocalizerFactory Constructors | Edit this page View Source StringLocalizerFactory() Constructor Declaration public StringLocalizerFactory() | Edit this page View Source StringLocalizerFactory(in IStringLocalizer) Constructor Declaration public StringLocalizerFactory(in IStringLocalizer localizer) Parameters Type Name Description IStringLocalizer localizer String localizer Properties | Edit this page View Source StringLocalizer String localizer Declaration public IStringLocalizer? StringLocalizer { get; } Property Value Type Description IStringLocalizer Methods | Edit this page View Source Create(string, string) Creates an IStringLocalizer. Declaration public virtual IStringLocalizer Create(string baseName, string location) Parameters Type Name Description string baseName The base name of the resource to load strings from. string location The location to load resources from. Returns Type Description IStringLocalizer The IStringLocalizer. | Edit this page View Source Create(Type) Creates an IStringLocalizer using the Assembly and FullName of the specified Type. Declaration public virtual IStringLocalizer Create(Type resourceSource) Parameters Type Name Description Type resourceSource The Type. Returns Type Description IStringLocalizer The IStringLocalizer. Implements IStringLocalizerFactory Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.StringParserContext.html": {
    "href": "api/wan24.Core.StringParserContext.html",
    "title": "Class StringParserContext | wan24-Core",
    "keywords": "Class StringParserContext String parser context information Inheritance object StringParserContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class StringParserContext Properties | Edit this page View Source Data Parser data Declaration public Dictionary<string, string> Data { get; init; } Property Value Type Description Dictionary<string, string> | Edit this page View Source Error Error message Declaration public string? Error { get; set; } Property Value Type Description string | Edit this page View Source Func Current function name Declaration public string Func { get; } Property Value Type Description string | Edit this page View Source Index Current function call match part index (zero based) Declaration public int Index { get; } Property Value Type Description int | Edit this page View Source M Current match Declaration public Match M { get; init; } Property Value Type Description Match | Edit this page View Source Match Current match parts Declaration public string[] Match { get; init; } Property Value Type Description string[] | Edit this page View Source Matches Matches Declaration public MatchCollection Matches { get; init; } Property Value Type Description MatchCollection | Edit this page View Source MaxRounds Maximum number of parser rounds Declaration public int MaxRounds { get; init; } Property Value Type Description int | Edit this page View Source Param Current function call parameters Declaration public string[] Param { get; } Property Value Type Description string[] | Edit this page View Source Parsed Parsed data (key is the placeholder) Declaration public Dictionary<string, string> Parsed { get; init; } Property Value Type Description Dictionary<string, string> | Edit this page View Source Round Current parser round (zero based) Declaration public int Round { get; init; } Property Value Type Description int | Edit this page View Source Rx Regular expression to parse a string ($1 is the whole placeholder, $2 the inner variable declaration) Declaration public Regex Rx { get; set; } Property Value Type Description Regex | Edit this page View Source RxGroup Regular expression content group Declaration public int RxGroup { get; set; } Property Value Type Description int | Edit this page View Source String String Declaration public string String { get; init; } Property Value Type Description string | Edit this page View Source Value Current value Declaration public string Value { get; } Property Value Type Description string Methods | Edit this page View Source EnsureValidParameterCount(params int[]) Ensure a valid parameter count Declaration public bool EnsureValidParameterCount(params int[] count) Parameters Type Name Description int[] count Allowed parameter counts Returns Type Description bool If the parameter count is valid | Edit this page View Source TryGetData(in string, out string?) Try get parser data Declaration public bool TryGetData(in string key, out string? value) Parameters Type Name Description string key Key (including $ prefix!) string value Value Returns Type Description bool Succeed? Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.StringParserOptions.html": {
    "href": "api/wan24.Core.StringParserOptions.html",
    "title": "Class StringParserOptions | wan24-Core",
    "keywords": "Class StringParserOptions String parser options Inheritance object StringParserOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class StringParserOptions Constructors | Edit this page View Source StringParserOptions() Constructor Declaration public StringParserOptions() Properties | Edit this page View Source MaxParserRounds Maximum recursive parser rounds Declaration public int? MaxParserRounds { get; set; } Property Value Type Description int? | Edit this page View Source Regex Placeholder regular expression Declaration public Regex? Regex { get; set; } Property Value Type Description Regex | Edit this page View Source RegexGroup Regular expression group to use Declaration public int? RegexGroup { get; set; } Property Value Type Description int? | Edit this page View Source ThrowOnError Throw an exception on error? Declaration public bool? ThrowOnError { get; set; } Property Value Type Description bool? Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.StringValueConverter.StringConverter_Delegate.html": {
    "href": "api/wan24.Core.StringValueConverter.StringConverter_Delegate.html",
    "title": "Delegate StringValueConverter.StringConverter_Delegate | wan24-Core",
    "keywords": "Delegate StringValueConverter.StringConverter_Delegate Value to display string converter Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate string? StringValueConverter.StringConverter_Delegate(Type type, object? value) Parameters Type Name Description Type type Value type object value Value Returns Type Description string String Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.StringValueConverter.ValueConverter_Delegate.html": {
    "href": "api/wan24.Core.StringValueConverter.ValueConverter_Delegate.html",
    "title": "Delegate StringValueConverter.ValueConverter_Delegate | wan24-Core",
    "keywords": "Delegate StringValueConverter.ValueConverter_Delegate Display string to value converter delegate Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate object? StringValueConverter.ValueConverter_Delegate(Type type, string? str) Parameters Type Name Description Type type Value type string str String Returns Type Description object Value Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.StringValueConverter.html": {
    "href": "api/wan24.Core.StringValueConverter.html",
    "title": "Class StringValueConverter | wan24-Core",
    "keywords": "Class StringValueConverter (Display) String to value conversion Inheritance object StringValueConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class StringValueConverter Fields | Edit this page View Source StringConverter Value to display string converter Declaration public static readonly Dictionary<Type, StringValueConverter.StringConverter_Delegate> StringConverter Field Value Type Description Dictionary<Type, StringValueConverter.StringConverter_Delegate> | Edit this page View Source ValueConverter Display string to value converter Declaration public static readonly Dictionary<Type, StringValueConverter.ValueConverter_Delegate> ValueConverter Field Value Type Description Dictionary<Type, StringValueConverter.ValueConverter_Delegate> Methods | Edit this page View Source Convert(Type, in object?) Convert a value to a display string Declaration public static string? Convert(Type type, in object? value) Parameters Type Name Description Type type Value type (may be abstract) object value Value Returns Type Description string String | Edit this page View Source Convert(Type, in string?) Convert a display string to a value Declaration public static object? Convert(Type type, in string? str) Parameters Type Name Description Type type Value type (may be abstract) string str String Returns Type Description object Value | Edit this page View Source Convert<T>(in T?) Convert a value to a display string Declaration public static string? Convert<T>(in T? value) Parameters Type Name Description T value Value Returns Type Description string String Type Parameters Name Description T Value type (may be abstract)"
  },
  "api/wan24.Core.SynchronizedStream-1.html": {
    "href": "api/wan24.Core.SynchronizedStream-1.html",
    "title": "Class SynchronizedStream<T> | wan24-Core",
    "keywords": "Class SynchronizedStream<T> Synchronized stream (synchronizes reading/writing/seeking operations; the base stream should implement each single asynchronous reading/writing method! Any asynchronous reading/writing method which adopts or calls to another asynchronous reading/writing or any seeking method will cause a dead-lock!) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> SynchronizedStream<T> SynchronizedStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.LeaveOpen WrapperStream<T>.State WrapperStream<T>.CanRead WrapperStream<T>.CanSeek WrapperStream<T>.CanWrite WrapperStream<T>.CanTimeout WrapperStream<T>.Length WrapperStream<T>.ReadTimeout WrapperStream<T>.WriteTimeout WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class SynchronizedStream<T> : WrapperStream<T>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Wrapped stream type Remarks Constructor Constructors | Edit this page View Source SynchronizedStream(in T, in bool) Synchronized stream (synchronizes reading/writing/seeking operations; the base stream should implement each single asynchronous reading/writing method! Any asynchronous reading/writing method which adopts or calls to another asynchronous reading/writing or any seeking method will cause a dead-lock!) Declaration public SynchronizedStream(in T baseStream, in bool leaveOpen = false) Parameters Type Name Description T baseStream Base stream bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Properties | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override sealed long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides WrapperStream<T>.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SyncIO I/O synchronization Declaration public SemaphoreSync SyncIO { get; } Property Value Type Description SemaphoreSync Methods | Edit this page View Source BeginRead(byte[], int, int, AsyncCallback?, object?) Begins an asynchronous read operation. (Consider using ReadAsync(byte[], int, int) instead.) Declaration public override sealed IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback? callback, object? state) Parameters Type Name Description byte[] buffer The buffer to read the data into. int offset The byte offset in buffer at which to begin writing data read from the stream. int count The maximum number of bytes to read. AsyncCallback callback An optional asynchronous callback, to be called when the read is complete. object state A user-provided object that distinguishes this particular asynchronous read request from other requests. Returns Type Description IAsyncResult An IAsyncResult that represents the asynchronous read, which could still be pending. Overrides WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) Exceptions Type Condition IOException Attempted an asynchronous read past the end of the stream, or a disk error occurs. ArgumentException One or more of the arguments is invalid. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException The current Stream implementation does not support the read operation. | Edit this page View Source BeginWrite(byte[], int, int, AsyncCallback?, object?) Begins an asynchronous write operation. (Consider using WriteAsync(byte[], int, int) instead.) Declaration public override sealed IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback? callback, object? state) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The byte offset in buffer from which to begin writing. int count The maximum number of bytes to write. AsyncCallback callback An optional asynchronous callback, to be called when the write is complete. object state A user-provided object that distinguishes this particular asynchronous write request from other requests. Returns Type Description IAsyncResult An IAsyncResult that represents the asynchronous write, which could still be pending. Overrides WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) Exceptions Type Condition IOException Attempted an asynchronous write past the end of the stream, or a disk error occurs. ArgumentException One or more of the arguments is invalid. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException The current Stream implementation does not support the write operation. | Edit this page View Source Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. Declaration public override sealed void Close() Overrides WrapperStream<T>.Close() | Edit this page View Source CopyTo(Stream, int) Reads the bytes from the current stream and writes them to another stream, using a specified buffer size. Both streams positions are advanced by the number of bytes copied. Declaration public override sealed void CopyTo(Stream destination, int bufferSize) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size of the buffer. This value must be greater than zero. The default size is 81920. Overrides WrapperStream<T>.CopyTo(Stream, int) Exceptions Type Condition ArgumentNullException destination is null. ArgumentOutOfRangeException bufferSize is negative or zero. NotSupportedException The current stream does not support reading. -or- destination does not support writing. ObjectDisposedException Either the current stream or destination were closed before the CopyTo(Stream) method was called. IOException An I/O error occurred. | Edit this page View Source CopyToAsync(Stream, int, CancellationToken) Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token. Both streams positions are advanced by the number of bytes copied. Declaration public override sealed Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous copy operation. Overrides WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) Exceptions Type Condition ArgumentNullException destination is null. ArgumentOutOfRangeException buffersize is negative or zero. ObjectDisposedException Either the current stream or the destination stream is disposed. NotSupportedException The current stream does not support reading, or the destination stream does not support writing. | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override sealed void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides WrapperStream<T>.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override sealed Task DisposeCore() Returns Type Description Task Overrides WrapperStream<T>.DisposeCore() | Edit this page View Source EndRead(IAsyncResult) Waits for the pending asynchronous read to complete. (Consider using ReadAsync(byte[], int, int) instead.) Declaration public override sealed int EndRead(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult The reference to the pending asynchronous request to finish. Returns Type Description int The number of bytes read from the stream, between zero (0) and the number of bytes requested. ReadAsync returns zero (0) only if zero bytes were requested or if no more bytes will be available because it's at the end of the stream; otherwise, read operations do not complete until at least one byte is available. If zero bytes are requested, read operations may complete immediately or may not complete until at least one byte is available (but without consuming any data). Overrides WrapperStream<T>.EndRead(IAsyncResult) Exceptions Type Condition ArgumentNullException asyncResult is null. ArgumentException A handle to the pending read operation is not available. -or- The pending operation does not support reading. InvalidOperationException asyncResult did not originate from a BeginRead(byte[], int, int, AsyncCallback, object) method on the current stream. IOException The stream is closed or an internal error has occurred. | Edit this page View Source EndWrite(IAsyncResult) Ends an asynchronous write operation. (Consider using WriteAsync(byte[], int, int) instead.) Declaration public override sealed void EndWrite(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult A reference to the outstanding asynchronous I/O request. Overrides WrapperStream<T>.EndWrite(IAsyncResult) Exceptions Type Condition ArgumentNullException asyncResult is null. ArgumentException A handle to the pending write operation is not available. -or- The pending operation does not support writing. InvalidOperationException asyncResult did not originate from a BeginWrite(byte[], int, int, AsyncCallback, object) method on the current stream. IOException The stream is closed or an internal error has occurred. | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override sealed void Flush() Overrides WrapperStream<T>.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override sealed Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides WrapperStream<T>.FlushAsync(CancellationToken) Exceptions Type Condition ObjectDisposedException The stream has been disposed. | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override sealed int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides WrapperStream<T>.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override sealed int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides WrapperStream<T>.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override sealed Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override sealed ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadAt(in long, in Span<byte>) Read from a byte offset Declaration public int ReadAt(in long offset, in Span<byte> buffer) Parameters Type Name Description long offset Byte offset Span<byte> buffer Buffer Returns Type Description int Number of bytes red | Edit this page View Source ReadAtAsync(long, Memory<byte>, CancellationToken) Read from a byte offset Declaration public Task<int> ReadAtAsync(long offset, Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description long offset Byte offset Memory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Number of bytes red | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override sealed int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides WrapperStream<T>.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source ReadByteAt(in long) Read a byte from a byte offset Declaration public int ReadByteAt(in long offset) Parameters Type Name Description long offset Byte offset Returns Type Description int Byte or -1, if reading failed | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override sealed long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides WrapperStream<T>.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override sealed void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides WrapperStream<T>.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override sealed void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides WrapperStream<T>.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override sealed void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides WrapperStream<T>.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override sealed Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override sealed ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteAt(in long, in ReadOnlySpan<byte>) Write at a byte offset Declaration public void WriteAt(in long offset, in ReadOnlySpan<byte> buffer) Parameters Type Name Description long offset Byte offset ReadOnlySpan<byte> buffer Buffer | Edit this page View Source WriteAtAsync(long, ReadOnlyMemory<byte>, CancellationToken) Write at a byte offset Declaration public Task WriteAtAsync(long offset, ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description long offset Byte offset ReadOnlyMemory<byte> buffer Buffer CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override sealed void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides WrapperStream<T>.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source WriteByteAt(in long, in byte) Write a byte at a byte offset Declaration public void WriteByteAt(in long offset, in byte value) Parameters Type Name Description long offset Byte offset byte value Value Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.SynchronizedStream.html": {
    "href": "api/wan24.Core.SynchronizedStream.html",
    "title": "Class SynchronizedStream | wan24-Core",
    "keywords": "Class SynchronizedStream Synchronized stream (synchronizes reading/writing/seeking operations; the base stream should implement each single asynchronous reading/writing method! Any asynchronous reading/writing method which adopts or calls to another asynchronous reading/writing or any seeking method will cause a dead-lock!) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> SynchronizedStream<Stream> SynchronizedStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members SynchronizedStream<Stream>.SyncIO SynchronizedStream<Stream>.Position SynchronizedStream<Stream>.SetLength(long) SynchronizedStream<Stream>.Seek(long, SeekOrigin) SynchronizedStream<Stream>.Flush() SynchronizedStream<Stream>.FlushAsync(CancellationToken) SynchronizedStream<Stream>.Read(byte[], int, int) SynchronizedStream<Stream>.Read(Span<byte>) SynchronizedStream<Stream>.ReadAt(in long, in Span<byte>) SynchronizedStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) SynchronizedStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) SynchronizedStream<Stream>.ReadAtAsync(long, Memory<byte>, CancellationToken) SynchronizedStream<Stream>.ReadByte() SynchronizedStream<Stream>.ReadByteAt(in long) SynchronizedStream<Stream>.Write(byte[], int, int) SynchronizedStream<Stream>.Write(ReadOnlySpan<byte>) SynchronizedStream<Stream>.WriteAt(in long, in ReadOnlySpan<byte>) SynchronizedStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) SynchronizedStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) SynchronizedStream<Stream>.WriteAtAsync(long, ReadOnlyMemory<byte>, CancellationToken) SynchronizedStream<Stream>.WriteByte(byte) SynchronizedStream<Stream>.WriteByteAt(in long, in byte) SynchronizedStream<Stream>.CopyTo(Stream, int) SynchronizedStream<Stream>.CopyToAsync(Stream, int, CancellationToken) SynchronizedStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) SynchronizedStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) SynchronizedStream<Stream>.EndRead(IAsyncResult) SynchronizedStream<Stream>.EndWrite(IAsyncResult) SynchronizedStream<Stream>.Close() SynchronizedStream<Stream>.Dispose(bool) SynchronizedStream<Stream>.DisposeCore() WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.State WrapperStream<Stream>.CanRead WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class SynchronizedStream : SynchronizedStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source SynchronizedStream(in Stream, in bool) Synchronized stream (synchronizes reading/writing/seeking operations; the base stream should implement each single asynchronous reading/writing method! Any asynchronous reading/writing method which adopts or calls to another asynchronous reading/writing or any seeking method will cause a dead-lock!) Declaration public SynchronizedStream(in Stream baseStream, in bool leaveOpen = false) Parameters Type Name Description Stream baseStream Base stream bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.SystemdServiceFile.html": {
    "href": "api/wan24.Core.SystemdServiceFile.html",
    "title": "Class SystemdServiceFile | wan24-Core",
    "keywords": "Class SystemdServiceFile systemd service file helper Inheritance object SystemdServiceFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class SystemdServiceFile Constructors | Edit this page View Source SystemdServiceFile() Constructor Declaration public SystemdServiceFile() Fields | Edit this page View Source DEFAULT_ENVIRONMENT Default environment Declaration public const string DEFAULT_ENVIRONMENT = \"ASPNETCORE_ENVIRONMENT=Production\" Field Value Type Description string | Edit this page View Source DEFAULT_KILL_SIGNAL Default kill signal Declaration public const string DEFAULT_KILL_SIGNAL = \"SIGINT\" Field Value Type Description string | Edit this page View Source DEFAULT_RESTART Default restart behavior Declaration public const string DEFAULT_RESTART = \"always\" Field Value Type Description string | Edit this page View Source DEFAULT_RESTART_TIMEOUT Default restart timeout in seconds Declaration public const int DEFAULT_RESTART_TIMEOUT = 10 Field Value Type Description int | Edit this page View Source DEFAULT_USER Default user Declaration public const string DEFAULT_USER = \"www-data\" Field Value Type Description string | Edit this page View Source DEFAULT_WANTED_BY Default wanted by Declaration public const string DEFAULT_WANTED_BY = \"multi-user.target\" Field Value Type Description string Properties | Edit this page View Source Description Description Declaration public string Description { get; set; } Property Value Type Description string | Edit this page View Source Environment Environment variables Declaration public string Environment { get; set; } Property Value Type Description string | Edit this page View Source ExecStart App start command Declaration public string ExecStart { get; set; } Property Value Type Description string | Edit this page View Source KillSignal Kill signal Declaration public string KillSignal { get; set; } Property Value Type Description string | Edit this page View Source Restart Restart behavior Declaration public string Restart { get; set; } Property Value Type Description string | Edit this page View Source RestartTimeout Restart service after N seconds if the dotnet service crashes Declaration public int RestartTimeout { get; set; } Property Value Type Description int | Edit this page View Source SyslogIdentifier Syslog identifier Declaration public string SyslogIdentifier { get; set; } Property Value Type Description string | Edit this page View Source User Username to run as Declaration public string User { get; set; } Property Value Type Description string | Edit this page View Source WantedBy Wanted by Declaration public string WantedBy { get; set; } Property Value Type Description string | Edit this page View Source WorkingDirectory Working directory Declaration public string WorkingDirectory { get; set; } Property Value Type Description string Methods | Edit this page View Source GetParserData() Get the parser data for parsing the systemd service file template Declaration protected virtual Dictionary<string, string> GetParserData() Returns Type Description Dictionary<string, string> Parser data | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.TaskExtensions.html": {
    "href": "api/wan24.Core.TaskExtensions.html",
    "title": "Class TaskExtensions | wan24-Core",
    "keywords": "Class TaskExtensions Task extensions Inheritance object TaskExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class TaskExtensions Methods | Edit this page View Source DynamicContext(Task) Return in any thread context Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ConfiguredTaskAwaitable DynamicContext(this Task task) Parameters Type Name Description Task task Task Returns Type Description ConfiguredTaskAwaitable Task | Edit this page View Source DynamicContext(ValueTask) Return in any thread context Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ConfiguredValueTaskAwaitable DynamicContext(this ValueTask task) Parameters Type Name Description ValueTask task Task Returns Type Description ConfiguredValueTaskAwaitable Task | Edit this page View Source DynamicContext<T>(Task<T>) Return in any thread context Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ConfiguredTaskAwaitable<T> DynamicContext<T>(this Task<T> task) Parameters Type Name Description Task<T> task Task Returns Type Description ConfiguredTaskAwaitable<T> Task Type Parameters Name Description T Result type | Edit this page View Source DynamicContext<T>(ValueTask<T>) Return in any thread context Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ConfiguredValueTaskAwaitable<T> DynamicContext<T>(this ValueTask<T> task) Parameters Type Name Description ValueTask<T> task Task Returns Type Description ConfiguredValueTaskAwaitable<T> Task Type Parameters Name Description T Result type | Edit this page View Source FixedContext(Task) Return to the awaiting context Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ConfiguredTaskAwaitable FixedContext(this Task task) Parameters Type Name Description Task task Task Returns Type Description ConfiguredTaskAwaitable Task | Edit this page View Source FixedContext(ValueTask) Return to the awaiting context Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ConfiguredValueTaskAwaitable FixedContext(this ValueTask task) Parameters Type Name Description ValueTask task Task Returns Type Description ConfiguredValueTaskAwaitable Task | Edit this page View Source FixedContext<T>(Task<T>) Return to the awaiting context Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ConfiguredTaskAwaitable<T> FixedContext<T>(this Task<T> task) Parameters Type Name Description Task<T> task Task Returns Type Description ConfiguredTaskAwaitable<T> Task Type Parameters Name Description T Result type | Edit this page View Source FixedContext<T>(ValueTask<T>) Return to the awaiting context Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static ConfiguredValueTaskAwaitable<T> FixedContext<T>(this ValueTask<T> task) Parameters Type Name Description ValueTask<T> task Task Returns Type Description ConfiguredValueTaskAwaitable<T> Task Type Parameters Name Description T Result type | Edit this page View Source GetResult(Task, in Type) Get the result from a task (the task should be completed already!) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static object GetResult(this Task task, in Type type) Parameters Type Name Description Task task Task Type type Result type Returns Type Description object Result | Edit this page View Source GetResult(ValueTask, in Type) Get the result from a task (the task should be completed already!) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static object GetResult(this ValueTask task, in Type type) Parameters Type Name Description ValueTask task Task Type type Result type Returns Type Description object Result | Edit this page View Source GetResultNullable(Task, in Type) Get the result from a task (the task should be completed already!) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static object? GetResultNullable(this Task task, in Type type) Parameters Type Name Description Task task Task Type type Result type Returns Type Description object Result | Edit this page View Source GetResultNullable(ValueTask, in Type) Get the result from a task (the task should be completed already!) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static object? GetResultNullable(this ValueTask task, in Type type) Parameters Type Name Description ValueTask task Task Type type Result type Returns Type Description object Result | Edit this page View Source GetResultNullable<T>(Task) Get the result from a task (the task should be completed already!) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static T? GetResultNullable<T>(this Task task) Parameters Type Name Description Task task Task Returns Type Description T Result Type Parameters Name Description T Result type | Edit this page View Source GetResultNullable<T>(ValueTask) Get the result from a task (the task should be completed already!) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static T? GetResultNullable<T>(this ValueTask task) Parameters Type Name Description ValueTask task Task Returns Type Description T Result Type Parameters Name Description T Result type | Edit this page View Source GetResult<T>(Task) Get the result from a task (the task should be completed already!) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static T GetResult<T>(this Task task) Parameters Type Name Description Task task Task Returns Type Description T Result Type Parameters Name Description T Result type | Edit this page View Source GetResult<T>(ValueTask) Get the result from a task (the task should be completed already!) Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static T GetResult<T>(this ValueTask task) Parameters Type Name Description ValueTask task Task Returns Type Description T Result Type Parameters Name Description T Result type | Edit this page View Source StartFairTask(Func<Task>, in TaskScheduler?, in CancellationToken) Start a task which will use fair task scheduler selection Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task StartFairTask(this Func<Task> action, in TaskScheduler? scheduler = null, in CancellationToken cancellationToken = default) Parameters Type Name Description Func<Task> action Action TaskScheduler scheduler Scheduler CancellationToken cancellationToken Cancellation token Returns Type Description Task Task | Edit this page View Source StartFairTask<T>(Func<Task<T>>, in TaskScheduler?, in CancellationToken) Start a task which will use fair task scheduler selection Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<T> StartFairTask<T>(this Func<Task<T>> action, in TaskScheduler? scheduler = null, in CancellationToken cancellationToken = default) Parameters Type Name Description Func<Task<T>> action Action TaskScheduler scheduler Scheduler CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Task Type Parameters Name Description T Result type | Edit this page View Source StartLongRunningTask(Func<Task>, in TaskScheduler?, in CancellationToken) Start a long running task Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task StartLongRunningTask(this Func<Task> action, in TaskScheduler? scheduler = null, in CancellationToken cancellationToken = default) Parameters Type Name Description Func<Task> action Action TaskScheduler scheduler Scheduler CancellationToken cancellationToken Cancellation token Returns Type Description Task Long running task | Edit this page View Source StartLongRunningTask<T>(Func<Task<T>>, in TaskScheduler?, in CancellationToken) Start a long running task Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Task<T> StartLongRunningTask<T>(this Func<Task<T>> action, in TaskScheduler? scheduler = null, in CancellationToken cancellationToken = default) Parameters Type Name Description Func<Task<T>> action Action TaskScheduler scheduler Scheduler CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Long running task Type Parameters Name Description T Result type | Edit this page View Source UnwrapFinalResultType(Task) Unwrap the final result type of a task recursive Declaration public static Type? UnwrapFinalResultType(this Task task) Parameters Type Name Description Task task Task Returns Type Description Type Final result type | Edit this page View Source WaitAll(IEnumerable<Task>) Wait for all tasks Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task WaitAll(this IEnumerable<Task> tasks) Parameters Type Name Description IEnumerable<Task> tasks Tasks Returns Type Description Task | Edit this page View Source WaitAll(IEnumerable<ValueTask>) Wait for all tasks Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task WaitAll(this IEnumerable<ValueTask> tasks) Parameters Type Name Description IEnumerable<ValueTask> tasks Tasks Returns Type Description Task | Edit this page View Source WaitAll<T>(IEnumerable<Task<T>>) Wait for all task results Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<T[]> WaitAll<T>(this IEnumerable<Task<T>> tasks) Parameters Type Name Description IEnumerable<Task<T>> tasks Tasks Returns Type Description Task<T[]> Results Type Parameters Name Description T Result type | Edit this page View Source WaitAll<T>(IEnumerable<ValueTask<T>>) Wait for all task results Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Task<T[]> WaitAll<T>(this IEnumerable<ValueTask<T>> tasks) Parameters Type Name Description IEnumerable<ValueTask<T>> tasks Tasks Returns Type Description Task<T[]> Results Type Parameters Name Description T Result type"
  },
  "api/wan24.Core.ThreadSafeValue-1.Action_Delegate.html": {
    "href": "api/wan24.Core.ThreadSafeValue-1.Action_Delegate.html",
    "title": "Delegate ThreadSafeValue<T>.Action_Delegate | wan24-Core",
    "keywords": "Delegate ThreadSafeValue<T>.Action_Delegate Delegate for an action Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate T? ThreadSafeValue<T>.Action_Delegate(T? value) Parameters Type Name Description T value Current value Returns Type Description T Value to set Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ThreadSafeValue-1.AsyncAction_Delegate.html": {
    "href": "api/wan24.Core.ThreadSafeValue-1.AsyncAction_Delegate.html",
    "title": "Delegate ThreadSafeValue<T>.AsyncAction_Delegate | wan24-Core",
    "keywords": "Delegate ThreadSafeValue<T>.AsyncAction_Delegate Delegate for an action Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task<T?> ThreadSafeValue<T>.AsyncAction_Delegate(T? value) Parameters Type Name Description T value Current value Returns Type Description Task<T> Value to set Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ThreadSafeValue-1.html": {
    "href": "api/wan24.Core.ThreadSafeValue-1.html",
    "title": "Class ThreadSafeValue<T> | wan24-Core",
    "keywords": "Class ThreadSafeValue<T> Thread-safe value Inheritance object DisposableBase ThreadSafeValue<T> DisposableThreadSafeValue<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ThreadSafeValue<T> : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Type Parameters Name Description T Value type Remarks Constructor Constructors | Edit this page View Source ThreadSafeValue(in T?) Thread-safe value Declaration public ThreadSafeValue(in T? initialValue = default) Parameters Type Name Description T initialValue Initial value Remarks Constructor Fields | Edit this page View Source Sync Thread synchronization Declaration protected readonly SemaphoreSync Sync Field Value Type Description SemaphoreSync | Edit this page View Source _Value Value Declaration protected T? _Value Field Value Type Description T Properties | Edit this page View Source Value Value Declaration public virtual T? Value { get; set; } Property Value Type Description T Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source Execute(in Action_Delegate) Execute an action Declaration public virtual T? Execute(in ThreadSafeValue<T>.Action_Delegate action) Parameters Type Name Description ThreadSafeValue<T>.Action_Delegate action Action Returns Type Description T Current value | Edit this page View Source ExecuteAsync(AsyncAction_Delegate, CancellationToken) Execute an action Declaration public virtual Task<T?> ExecuteAsync(ThreadSafeValue<T>.AsyncAction_Delegate action, CancellationToken cancellationToken = default) Parameters Type Name Description ThreadSafeValue<T>.AsyncAction_Delegate action Action CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Current value | Edit this page View Source SetValueAsync(T?, CancellationToken) Set the value Declaration public virtual Task<T?> SetValueAsync(T? value, CancellationToken cancellationToken = default) Parameters Type Name Description T value Value CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Old value Operators | Edit this page View Source implicit operator ThreadSafeValue<T>(in T?) Cast as new instance Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator ThreadSafeValue<T>(in T? value) Parameters Type Name Description T value Value Returns Type Description ThreadSafeValue<T> | Edit this page View Source implicit operator T?(in ThreadSafeValue<T?>) Cast as value Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T?(in ThreadSafeValue<T?> value) Parameters Type Name Description ThreadSafeValue<T> value Value Returns Type Description T Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ThrottledStream-1.html": {
    "href": "api/wan24.Core.ThrottledStream-1.html",
    "title": "Class ThrottledStream<T> | wan24-Core",
    "keywords": "Class ThrottledStream<T> Throttled stream Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> ThrottledStream<T> ThrottledStream Implements IThrottledStream IStreamWrapper IStream IStatusProvider IStreamThrottle IDisposableObject IDisposable IAsyncDisposable Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.LeaveOpen WrapperStream<T>.State WrapperStream<T>.CanRead WrapperStream<T>.CanSeek WrapperStream<T>.CanWrite WrapperStream<T>.CanTimeout WrapperStream<T>.Length WrapperStream<T>.Position WrapperStream<T>.ReadTimeout WrapperStream<T>.WriteTimeout WrapperStream<T>.Flush() WrapperStream<T>.FlushAsync(CancellationToken) WrapperStream<T>.Seek(long, SeekOrigin) WrapperStream<T>.SetLength(long) WrapperStream<T>.CopyTo(Stream, int) WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndRead(IAsyncResult) WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndWrite(IAsyncResult) WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.Close() WrapperStream<T>.Dispose(bool) WrapperStream<T>.DisposeCore() WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ThrottledStream<T> : WrapperStream<T>, IThrottledStream, IStreamWrapper, IStream, IStatusProvider, IStreamThrottle, IDisposableObject, IDisposable, IAsyncDisposable where T : Stream Type Parameters Name Description T Wrapped stream type Constructors | Edit this page View Source ThrottledStream(in T, in int, in TimeSpan?, in int, in TimeSpan?, in bool) Constructor Declaration public ThrottledStream(in T baseStream, in int readCount = 0, in TimeSpan? readTime = null, in int writeCount = 0, in TimeSpan? writeTime = null, in bool leaveOpen = false) Parameters Type Name Description T baseStream Base stream int readCount Read count (zero to disable read throttling) TimeSpan? readTime Read time int writeCount Write count (zero to disable write throttling) TimeSpan? writeTime Write time bool leaveOpen Leave the base stream open when disposing? Properties | Edit this page View Source LastReadTimeStart Last read time start Declaration public DateTime LastReadTimeStart { get; protected set; } Property Value Type Description DateTime | Edit this page View Source LastWriteTimeStart Last write time start Declaration public DateTime LastWriteTimeStart { get; protected set; } Property Value Type Description DateTime | Edit this page View Source ReadCount Read count (zero to disable read throttling) Declaration public int ReadCount { get; set; } Property Value Type Description int | Edit this page View Source ReadCountQuota Quota value for the read count (used to normalize the stream collection read count) Declaration public int ReadCountQuota { get; set; } Property Value Type Description int | Edit this page View Source ReadTime Read time Declaration public TimeSpan ReadTime { get; set; } Property Value Type Description TimeSpan | Edit this page View Source RedCount Red count since the last read time start Declaration public int RedCount { get; protected set; } Property Value Type Description int | Edit this page View Source WriteCount Write count (zero to disable write throttling) Declaration public int WriteCount { get; set; } Property Value Type Description int | Edit this page View Source WriteCountQuota Quota value for the write count (used to normalize the stream collection write count) Declaration public int WriteCountQuota { get; set; } Property Value Type Description int | Edit this page View Source WriteTime Write time Declaration public TimeSpan WriteTime { get; set; } Property Value Type Description TimeSpan | Edit this page View Source WroteCount Wrote count since last write time start Declaration public int WroteCount { get; protected set; } Property Value Type Description int Methods | Edit this page View Source GetReadCount(in int) Get the number of bytes to read without throttling Declaration protected int GetReadCount(in int count) Parameters Type Name Description int count Count Returns Type Description int Number of bytes to read without throttling | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides WrapperStream<T>.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides WrapperStream<T>.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides WrapperStream<T>.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source ResetReadThrottle() Reset the read throttle Declaration public void ResetReadThrottle() | Edit this page View Source ResetWriteThrottle() Reset the write throttle Declaration public void ResetWriteThrottle() | Edit this page View Source ThrottleReading() Throttle reading Declaration protected void ThrottleReading() | Edit this page View Source ThrottleReadingAsync(CancellationToken) Throttle reading Declaration protected Task ThrottleReadingAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source ThrottleWriting(in int) Throttle writing Declaration protected int ThrottleWriting(in int count) Parameters Type Name Description int count Count Returns Type Description int Write count | Edit this page View Source ThrottleWritingAsync(int, CancellationToken) Throttle writing Declaration protected Task<int> ThrottleWritingAsync(int count, CancellationToken cancellationToken) Parameters Type Name Description int count Count CancellationToken cancellationToken Cancellation token Returns Type Description Task<int> Write count | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides WrapperStream<T>.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides WrapperStream<T>.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides WrapperStream<T>.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Implements IThrottledStream IStreamWrapper IStream IStatusProvider IStreamThrottle IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ThrottledStream.html": {
    "href": "api/wan24.Core.ThrottledStream.html",
    "title": "Class ThrottledStream | wan24-Core",
    "keywords": "Class ThrottledStream Throttled stream Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> ThrottledStream<Stream> ThrottledStream Implements IThrottledStream IStreamWrapper IStream IStatusProvider IStreamThrottle IDisposableObject IDisposable IAsyncDisposable Inherited Members ThrottledStream<Stream>.ReadCountQuota ThrottledStream<Stream>.ReadCount ThrottledStream<Stream>.ReadTime ThrottledStream<Stream>.LastReadTimeStart ThrottledStream<Stream>.RedCount ThrottledStream<Stream>.WriteCountQuota ThrottledStream<Stream>.WriteCount ThrottledStream<Stream>.WriteTime ThrottledStream<Stream>.LastWriteTimeStart ThrottledStream<Stream>.WroteCount ThrottledStream<Stream>.ResetWriteThrottle() ThrottledStream<Stream>.ResetReadThrottle() ThrottledStream<Stream>.ReadByte() ThrottledStream<Stream>.Read(byte[], int, int) ThrottledStream<Stream>.Read(Span<byte>) ThrottledStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) ThrottledStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) ThrottledStream<Stream>.WriteByte(byte) ThrottledStream<Stream>.Write(byte[], int, int) ThrottledStream<Stream>.Write(ReadOnlySpan<byte>) ThrottledStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) ThrottledStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) ThrottledStream<Stream>.ThrottleWriting(in int) ThrottledStream<Stream>.ThrottleWritingAsync(int, CancellationToken) ThrottledStream<Stream>.GetReadCount(in int) ThrottledStream<Stream>.ThrottleReading() ThrottledStream<Stream>.ThrottleReadingAsync(CancellationToken) WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.State WrapperStream<Stream>.CanRead WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.Position WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.Flush() WrapperStream<Stream>.FlushAsync(CancellationToken) WrapperStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>.SetLength(long) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.Dispose(bool) WrapperStream<Stream>.DisposeCore() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ThrottledStream : ThrottledStream<Stream>, IThrottledStream, IStreamWrapper, IStream, IStatusProvider, IStreamThrottle, IDisposableObject, IDisposable, IAsyncDisposable Remarks Constructor Constructors | Edit this page View Source ThrottledStream(in Stream, in int, in TimeSpan?, in int, in TimeSpan?, in bool) Throttled stream Declaration public ThrottledStream(in Stream baseStream, in int readCount = 0, in TimeSpan? readTime = null, in int writeCount = 0, in TimeSpan? writeTime = null, in bool leaveOpen = false) Parameters Type Name Description Stream baseStream Base stream int readCount Read count (zero to disable read throttling) TimeSpan? readTime Read time int writeCount Write count (zero to disable write throttling) TimeSpan? writeTime Write time bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Implements IThrottledStream IStreamWrapper IStream IStatusProvider IStreamThrottle IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.TimeSpanHelper.html": {
    "href": "api/wan24.Core.TimeSpanHelper.html",
    "title": "Class TimeSpanHelper | wan24-Core",
    "keywords": "Class TimeSpanHelper TimeSpan helper Inheritance object TimeSpanHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class TimeSpanHelper Methods | Edit this page View Source UpdateTimeout(ref DateTime, ref TimeSpan) Update a timeout Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool UpdateTimeout(ref DateTime start, ref TimeSpan timeout) Parameters Type Name Description DateTime start Start time (will be set to Now, if not timeout) TimeSpan timeout Timeout (will be decreased, if possible) Returns Type Description bool Can continue (no timeout)?"
  },
  "api/wan24.Core.TimedHostedServiceBase.TimedHostedService_Delegate.html": {
    "href": "api/wan24.Core.TimedHostedServiceBase.TimedHostedService_Delegate.html",
    "title": "Delegate TimedHostedServiceBase.TimedHostedService_Delegate | wan24-Core",
    "keywords": "Delegate TimedHostedServiceBase.TimedHostedService_Delegate Delegate for a hosted service event Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void TimedHostedServiceBase.TimedHostedService_Delegate(TimedHostedServiceBase service, EventArgs e) Parameters Type Name Description TimedHostedServiceBase service Service EventArgs e Event arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.TimedHostedServiceBase.html": {
    "href": "api/wan24.Core.TimedHostedServiceBase.html",
    "title": "Class TimedHostedServiceBase | wan24-Core",
    "keywords": "Class TimedHostedServiceBase Base class for a timed hosted service Inheritance object DisposableBase HostedServiceBase TimedHostedServiceBase DelayService EnvironmentService StatisticsService Implements IWillDispose ITimer IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.BeforeStopAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.AfterPauseAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.AfterResumeAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.OnException HostedServiceBase.RaiseOnException() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class TimedHostedServiceBase : HostedServiceBase, IWillDispose, ITimer, IServiceWorkerStatus, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source TimedHostedServiceBase(in double, in HostedServiceTimers, in DateTime?) Constructor Declaration protected TimedHostedServiceBase(in double interval, in HostedServiceTimers timer = HostedServiceTimers.Default, in DateTime? nextRun = null) Parameters Type Name Description double interval Interval in ms HostedServiceTimers timer Timer type DateTime? nextRun Fixed next run time Fields | Edit this page View Source RunningEvent Run event (raised when should run) Declaration protected readonly ResetEvent RunningEvent Field Value Type Description ResetEvent | Edit this page View Source SyncControl Service control thread synchronization Declaration protected readonly SemaphoreSync SyncControl Field Value Type Description SemaphoreSync | Edit this page View Source Timer Timer Declaration protected readonly Timer Timer Field Value Type Description Timer | Edit this page View Source WorkerSync Thread synchronization Declaration protected readonly SemaphoreSync WorkerSync Field Value Type Description SemaphoreSync | Edit this page View Source _Interval Interval Declaration protected double _Interval Field Value Type Description double Properties | Edit this page View Source CanPause Can be paused Declaration public override sealed bool CanPause { get; protected set; } Property Value Type Description bool Overrides HostedServiceBase.CanPause | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source Interval Interval in ms Declaration public double Interval { get; protected set; } Property Value Type Description double | Edit this page View Source LastDuration Last run duration (or Zero, if never finished a run) Declaration public TimeSpan LastDuration { get; protected set; } Property Value Type Description TimeSpan | Edit this page View Source LastRun Last run time (or MinValue, if never run) Declaration public DateTime LastRun { get; protected set; } Property Value Type Description DateTime | Edit this page View Source NextRun Next run time (or MinValue, if unknown) Declaration public DateTime NextRun { get; protected set; } Property Value Type Description DateTime | Edit this page View Source RunOnce Run once? Declaration public bool RunOnce { get; set; } Property Value Type Description bool | Edit this page View Source State Status information Declaration public virtual IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> | Edit this page View Source TimerType Timer type Declaration public HostedServiceTimers TimerType { get; protected set; } Property Value Type Description HostedServiceTimers Methods | Edit this page View Source AfterStartAsync(CancellationToken) After started Declaration protected override Task AfterStartAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.AfterStartAsync(CancellationToken) | Edit this page View Source AfterStopAsync(CancellationToken) After stopped Declaration protected override Task AfterStopAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.AfterStopAsync(CancellationToken) | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides HostedServiceBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides HostedServiceBase.DisposeCore() | Edit this page View Source EnableTimerAsync() Enable the timer Declaration protected Task<bool> EnableTimerAsync() Returns Type Description Task<bool> Enabled? | Edit this page View Source RaiseOnRan() Raise the OnRan event Declaration protected Task RaiseOnRan() Returns Type Description Task | Edit this page View Source SetTimerAsync(double, HostedServiceTimers?, DateTime?, CancellationToken) Set the timer Declaration public Task SetTimerAsync(double interval, HostedServiceTimers? timer = null, DateTime? nextRun = null, CancellationToken cancellationToken = default) Parameters Type Name Description double interval Interval HostedServiceTimers? timer Timer DateTime? nextRun Fixed next run time (may interrupt a running worker, service will be (re)started!) CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source StartAsync(CancellationToken) Triggered when the application host is ready to start the service. Declaration public override sealed Task StartAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Indicates that the start process has been aborted. Returns Type Description Task A Task that represents the asynchronous Start operation. Overrides HostedServiceBase.StartAsync(CancellationToken) | Edit this page View Source StartTimerAsync(CancellationToken) Start the timer Declaration protected Task StartTimerAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source StopAsync(CancellationToken) Triggered when the application host is performing a graceful shutdown. Declaration public override sealed Task StopAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Indicates that the shutdown process should no longer be graceful. Returns Type Description Task A Task that represents the asynchronous Stop operation. Overrides HostedServiceBase.StopAsync(CancellationToken) | Edit this page View Source StopTimerAsync(CancellationToken) Stop the timer Declaration protected Task StopTimerAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source StoppingAsync(CancellationToken) When stopping Declaration protected override Task StoppingAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.StoppingAsync(CancellationToken) | Edit this page View Source TimedWorkerAsync() Timed service worker Declaration protected abstract Task TimedWorkerAsync() Returns Type Description Task | Edit this page View Source WorkerAsync() Service worker Declaration protected override sealed Task WorkerAsync() Returns Type Description Task Overrides HostedServiceBase.WorkerAsync() Events | Edit this page View Source OnRan Raised after ran once Declaration public event TimedHostedServiceBase.TimedHostedService_Delegate? OnRan Event Type Type Description TimedHostedServiceBase.TimedHostedService_Delegate Operators | Edit this page View Source implicit operator bool(in TimedHostedServiceBase) Cast as running-flag Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in TimedHostedServiceBase service) Parameters Type Name Description TimedHostedServiceBase service Service Returns Type Description bool | Edit this page View Source implicit operator TimeSpan(in TimedHostedServiceBase) Cast as time until next run Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator TimeSpan(in TimedHostedServiceBase service) Parameters Type Name Description TimedHostedServiceBase service Service Returns Type Description TimeSpan Implements IWillDispose ITimer IServiceWorkerStatus IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Timeout.Timeout_Delegate.html": {
    "href": "api/wan24.Core.Timeout.Timeout_Delegate.html",
    "title": "Delegate Timeout.Timeout_Delegate | wan24-Core",
    "keywords": "Delegate Timeout.Timeout_Delegate Delegate for timeout events Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void Timeout.Timeout_Delegate(Timeout timeout, EventArgs e) Parameters Type Name Description Timeout timeout Timeout EventArgs e Event arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Timeout.html": {
    "href": "api/wan24.Core.Timeout.html",
    "title": "Class Timeout | wan24-Core",
    "keywords": "Class Timeout Timeout (when comparing instances, and not the timeout time, you should use the Equals(object?) method!) Inheritance object DisposableBase Timeout Implements IWillDispose ITimer IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeCore() DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class Timeout : DisposableBase, IWillDispose, ITimer, IServiceWorker, IHostedService, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source Timeout(in TimeSpan, in bool, in bool) Constructor Declaration public Timeout(in TimeSpan time, in bool autoReset = false, in bool start = false) Parameters Type Name Description TimeSpan time Timeout time bool autoReset Auto-reset? bool start Start? Fields | Edit this page View Source Timer Timer Declaration protected readonly Timer Timer Field Value Type Description Timer Properties | Edit this page View Source AutoReset Auto-reset? Declaration public bool AutoReset { get; set; } Property Value Type Description bool | Edit this page View Source GUID GUID Declaration public string GUID { get; } Property Value Type Description string | Edit this page View Source IsRunning Is running? Declaration public bool IsRunning { get; } Property Value Type Description bool | Edit this page View Source LastTimeout Last timeout Declaration public DateTime LastTimeout { get; protected set; } Property Value Type Description DateTime | Edit this page View Source Name Display name Declaration public string? Name { get; set; } Property Value Type Description string | Edit this page View Source RemainingTime Remaining time until the next timeout Declaration public TimeSpan RemainingTime { get; } Property Value Type Description TimeSpan | Edit this page View Source Started Last start time Declaration public DateTime Started { get; protected set; } Property Value Type Description DateTime | Edit this page View Source Stopped Last stop time Declaration public DateTime Stopped { get; protected set; } Property Value Type Description DateTime | Edit this page View Source Time Timeout time (setting will reset the timeout) Declaration public TimeSpan Time { get; set; } Property Value Type Description TimeSpan Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source RaiseOnTimeout() Raise the OnTimeout event Declaration protected virtual void RaiseOnTimeout() | Edit this page View Source Reset() Reset Declaration public virtual void Reset() | Edit this page View Source RunAction(in TimeSpan, Action) Run an action Declaration public static Timeout RunAction(in TimeSpan delay, Action action) Parameters Type Name Description TimeSpan delay Delay Action action Action Returns Type Description Timeout Timeout (will be disposed automatic when the action is being executed) | Edit this page View Source RunAction(in TimeSpan, Func<Task>) Run an asynchronous action Declaration public static Timeout RunAction(in TimeSpan delay, Func<Task> action) Parameters Type Name Description TimeSpan delay Delay Func<Task> action Action Returns Type Description Timeout Timeout (will be disposed automatic when the action is being executed) | Edit this page View Source Start() Start Declaration public virtual void Start() | Edit this page View Source Stop() Stop Declaration public virtual void Stop() Events | Edit this page View Source OnTimeout Raised on timeout Declaration public event Timeout.Timeout_Delegate? OnTimeout Event Type Type Description Timeout.Timeout_Delegate Operators | Edit this page View Source operator +(in Timeout, in TimeSpan) Add more time (and restart, if running) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Timeout operator +(in Timeout timeout, in TimeSpan time) Parameters Type Name Description Timeout timeout Timeout TimeSpan time Time to add Returns Type Description Timeout Timeout | Edit this page View Source operator ==(in Timeout, in TimeSpan) Time equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in Timeout a, in TimeSpan b) Parameters Type Name Description Timeout a A TimeSpan b B Returns Type Description bool Is equal? | Edit this page View Source operator ==(in Timeout, in Timeout) Time equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in Timeout a, in Timeout b) Parameters Type Name Description Timeout a A Timeout b B Returns Type Description bool Is equal? | Edit this page View Source explicit operator Timeout(in TimeSpan) Cast a TimeSpan (the timeout) as Timeout Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static explicit operator Timeout(in TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Timeout Returns Type Description Timeout | Edit this page View Source operator >(in Timeout, in TimeSpan) Greater Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator >(in Timeout a, in TimeSpan b) Parameters Type Name Description Timeout a A TimeSpan b B Returns Type Description bool Is greater? | Edit this page View Source operator >(in Timeout, in Timeout) Greater Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator >(in Timeout a, in Timeout b) Parameters Type Name Description Timeout a A Timeout b B Returns Type Description bool Is greater? | Edit this page View Source operator >=(in Timeout, in TimeSpan) Greater or equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator >=(in Timeout a, in TimeSpan b) Parameters Type Name Description Timeout a A TimeSpan b B Returns Type Description bool Is greater or equal? | Edit this page View Source operator >=(in Timeout, in Timeout) Greater or equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator >=(in Timeout a, in Timeout b) Parameters Type Name Description Timeout a A Timeout b B Returns Type Description bool Is greater or equal? | Edit this page View Source implicit operator bool(in Timeout) If running Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in Timeout timeout) Parameters Type Name Description Timeout timeout Timeout Returns Type Description bool | Edit this page View Source implicit operator DateTime(in Timeout) Last timeout Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator DateTime(in Timeout timeout) Parameters Type Name Description Timeout timeout Timeout Returns Type Description DateTime | Edit this page View Source implicit operator TimeSpan(in Timeout) Remaining time until the next timeout Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator TimeSpan(in Timeout timeout) Parameters Type Name Description Timeout timeout Timeout Returns Type Description TimeSpan | Edit this page View Source operator !=(in Timeout, in TimeSpan) Time not equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in Timeout a, in TimeSpan b) Parameters Type Name Description Timeout a A TimeSpan b B Returns Type Description bool Is not equal? | Edit this page View Source operator !=(in Timeout, in Timeout) Time not equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in Timeout a, in Timeout b) Parameters Type Name Description Timeout a A Timeout b B Returns Type Description bool Is not equal? | Edit this page View Source operator <(in Timeout, in TimeSpan) Lower Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator <(in Timeout a, in TimeSpan b) Parameters Type Name Description Timeout a A TimeSpan b B Returns Type Description bool Is lower? | Edit this page View Source operator <(in Timeout, in Timeout) Lower Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator <(in Timeout a, in Timeout b) Parameters Type Name Description Timeout a A Timeout b B Returns Type Description bool Is lower? | Edit this page View Source operator <=(in Timeout, in TimeSpan) Lower or equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator <=(in Timeout a, in TimeSpan b) Parameters Type Name Description Timeout a A TimeSpan b B Returns Type Description bool Is lower or equal? | Edit this page View Source operator <=(in Timeout, in Timeout) Lower or equal Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator <=(in Timeout a, in Timeout b) Parameters Type Name Description Timeout a A Timeout b B Returns Type Description bool Is lower or equal? | Edit this page View Source operator -(in Timeout, in TimeSpan) Remove time (and restart, if running) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static Timeout operator -(in Timeout timeout, in TimeSpan time) Parameters Type Name Description Timeout timeout Timeout TimeSpan time Time to remove Returns Type Description Timeout Timeout Implements IWillDispose ITimer IServiceWorker IHostedService IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.TimeoutStream-1.html": {
    "href": "api/wan24.Core.TimeoutStream-1.html",
    "title": "Class TimeoutStream<T> | wan24-Core",
    "keywords": "Class TimeoutStream<T> Timeout stream (async reading/writing methods can timeout) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> TimeoutStream<T> TimeoutStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<T>._BaseStream WrapperStream<T>._LeaveOpen WrapperStream<T>.UseOriginalByteIO WrapperStream<T>.UseOriginalCopyTo WrapperStream<T>.UseOriginalBeginRead WrapperStream<T>.UseOriginalBeginWrite WrapperStream<T>.UseBaseStream WrapperStream<T>.Target WrapperStream<T>.BaseStream WrapperStream<T>.LeaveOpen WrapperStream<T>.State WrapperStream<T>.CanRead WrapperStream<T>.CanSeek WrapperStream<T>.CanWrite WrapperStream<T>.Length WrapperStream<T>.Position WrapperStream<T>.Flush() WrapperStream<T>.Read(byte[], int, int) WrapperStream<T>.Read(Span<byte>) WrapperStream<T>.ReadByte() WrapperStream<T>.Seek(long, SeekOrigin) WrapperStream<T>.SetLength(long) WrapperStream<T>.Write(byte[], int, int) WrapperStream<T>.Write(ReadOnlySpan<byte>) WrapperStream<T>.WriteByte(byte) WrapperStream<T>.CopyTo(Stream, int) WrapperStream<T>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<T>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndRead(IAsyncResult) WrapperStream<T>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<T>.EndWrite(IAsyncResult) WrapperStream<T>.Equals(object) WrapperStream<T>.GetHashCode() WrapperStream<T>.ToString() WrapperStream<T>.Close() WrapperStream<T>.Dispose(bool) WrapperStream<T>.DisposeCore() WrapperStream<T>.BaseCopyTo(in Stream, in int) WrapperStream<T>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<T>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<T>.BaseEndRead(in IAsyncResult) WrapperStream<T>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<T>.BaseEndWrite(in IAsyncResult) WrapperStream<T>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class TimeoutStream<T> : WrapperStream<T>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Wrapped stream type Constructors | Edit this page View Source TimeoutStream(in T, in TimeSpan, in TimeSpan?, in bool) Constructor Declaration public TimeoutStream(in T baseStream, in TimeSpan readTimeout, in TimeSpan? writeTimeout = null, in bool leaveOpen = false) Parameters Type Name Description T baseStream Base stream TimeSpan readTimeout Read timeout (Zero to disable) TimeSpan? writeTimeout Write timeout (Zero to disable) bool leaveOpen Leave the base stream open when disposing? Fields | Edit this page View Source _ReadTimeout Read timeout Declaration protected TimeSpan _ReadTimeout Field Value Type Description TimeSpan | Edit this page View Source _WriteTimeout Write timeout Declaration protected TimeSpan _WriteTimeout Field Value Type Description TimeSpan Properties | Edit this page View Source CanTimeout Gets a value that determines whether the current stream can time out. Declaration public override sealed bool CanTimeout { get; } Property Value Type Description bool A value that determines whether the current stream can time out. Overrides WrapperStream<T>.CanTimeout | Edit this page View Source ReadTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out. Declaration public override int ReadTimeout { get; set; } Property Value Type Description int A value, in milliseconds, that determines how long the stream will attempt to read before timing out. Overrides WrapperStream<T>.ReadTimeout Exceptions Type Condition InvalidOperationException The ReadTimeout method always throws an InvalidOperationException. | Edit this page View Source WriteTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out. Declaration public override int WriteTimeout { get; set; } Property Value Type Description int A value, in milliseconds, that determines how long the stream will attempt to write before timing out. Overrides WrapperStream<T>.WriteTimeout Exceptions Type Condition InvalidOperationException The WriteTimeout method always throws an InvalidOperationException. Methods | Edit this page View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides WrapperStream<T>.FlushAsync(CancellationToken) Exceptions Type Condition ObjectDisposedException The stream has been disposed. | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides WrapperStream<T>.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides WrapperStream<T>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.TimeoutStream.html": {
    "href": "api/wan24.Core.TimeoutStream.html",
    "title": "Class TimeoutStream | wan24-Core",
    "keywords": "Class TimeoutStream Timeout stream (async reading/writing methods can timeout) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> TimeoutStream<Stream> TimeoutStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members TimeoutStream<Stream>._ReadTimeout TimeoutStream<Stream>._WriteTimeout TimeoutStream<Stream>.CanTimeout TimeoutStream<Stream>.ReadTimeout TimeoutStream<Stream>.WriteTimeout TimeoutStream<Stream>.FlushAsync(CancellationToken) TimeoutStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) TimeoutStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) TimeoutStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) TimeoutStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.State WrapperStream<Stream>.CanRead WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanWrite WrapperStream<Stream>.Length WrapperStream<Stream>.Position WrapperStream<Stream>.Flush() WrapperStream<Stream>.Read(byte[], int, int) WrapperStream<Stream>.Read(Span<byte>) WrapperStream<Stream>.ReadByte() WrapperStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>.SetLength(long) WrapperStream<Stream>.Write(byte[], int, int) WrapperStream<Stream>.Write(ReadOnlySpan<byte>) WrapperStream<Stream>.WriteByte(byte) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.Dispose(bool) WrapperStream<Stream>.DisposeCore() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class TimeoutStream : TimeoutStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Remarks Constructor Constructors | Edit this page View Source TimeoutStream(in Stream, in TimeSpan, in TimeSpan?, in bool) Timeout stream (async reading/writing methods can timeout) Declaration public TimeoutStream(in Stream baseStream, in TimeSpan readTimeout, in TimeSpan? writeTimeout = null, in bool leaveOpen = false) Parameters Type Name Description Stream baseStream Base stream TimeSpan readTimeout Read timeout (Zero to disable) TimeSpan? writeTimeout Write timeout (Zero to disable) bool leaveOpen Leave the base stream open when disposing? Remarks Constructor Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.TimeoutValue-1.html": {
    "href": "api/wan24.Core.TimeoutValue-1.html",
    "title": "Class TimeoutValue<T> | wan24-Core",
    "keywords": "Class TimeoutValue<T> Timeout value (disposable value will be disposed on timeout or when disposing) Inheritance object DisposableBase TimeoutValue<T> Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class TimeoutValue<T> : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Type Parameters Name Description T Value type Constructors | Edit this page View Source TimeoutValue(in Func<T>, in TimeSpan) Constructor Declaration public TimeoutValue(in Func<T> factory, in TimeSpan timeout) Parameters Type Name Description Func<T> factory Factory TimeSpan timeout Timeout Properties | Edit this page View Source Value Value Declaration public T Value { get; } Property Value Type Description T Methods | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() Operators | Edit this page View Source implicit operator bool(in TimeoutValue<T>) Cast as has-value-flag Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator bool(in TimeoutValue<T> timeoutValue) Parameters Type Name Description TimeoutValue<T> timeoutValue Timeout value Returns Type Description bool | Edit this page View Source implicit operator T(in TimeoutValue<T>) Cast as value Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator T(in TimeoutValue<T> timeoutValue) Parameters Type Name Description TimeoutValue<T> timeoutValue Timeout value Returns Type Description T Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.TimerTable.html": {
    "href": "api/wan24.Core.TimerTable.html",
    "title": "Class TimerTable | wan24-Core",
    "keywords": "Class TimerTable Timer table Inheritance object TimerTable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class TimerTable Fields | Edit this page View Source Timers Timer table (key is a GUID) Declaration public static readonly ConcurrentChangeTokenDictionary<string, ITimer> Timers Field Value Type Description ConcurrentChangeTokenDictionary<string, ITimer>"
  },
  "api/wan24.Core.Tracer.Entry.html": {
    "href": "api/wan24.Core.Tracer.Entry.html",
    "title": "Struct Tracer.Entry | wan24-Core",
    "keywords": "Struct Tracer.Entry Entry Implements IEquatable<Tracer.Entry> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public readonly record struct Tracer.Entry : IEquatable<Tracer.Entry> Fields | Edit this page View Source Arguments Arguments Declaration public readonly object?[] Arguments Field Value Type Description object[] | Edit this page View Source Info Info Declaration public readonly string Info Field Value Type Description string | Edit this page View Source Level Level Declaration public readonly LogLevel Level Field Value Type Description LogLevel | Edit this page View Source Time Time Declaration public readonly DateTime Time Field Value Type Description DateTime Implements IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Tracer.html": {
    "href": "api/wan24.Core.Tracer.html",
    "title": "Class Tracer | wan24-Core",
    "keywords": "Class Tracer Tracer (could be used to trace information and flush them to the Logging in case of an error) Inheritance object Tracer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class Tracer Constructors | Edit this page View Source Tracer(in LogLevel, in string?, in int, in bool, in ILogger?) Constructor Declaration public Tracer(in LogLevel level = LogLevel.Warning, in string? prefix = null, in int entryCountLimit = 255, in bool skipLogger = false, in ILogger? logger = null) Parameters Type Name Description LogLevel level Level which is required to write to the Logging directly string prefix Prefix (will be prepended to each message) int entryCountLimit Maximum number of entries to trace (overflowing old entries will be removed when adding new entries) bool skipLogger Skip writing to the logger based on the given level? ILogger logger Logger to use Properties | Edit this page View Source Count Current number of entries Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source EntryCountLimit Maximum number of entries to trace (overflowing old entries will be removed when adding new entries) Declaration public int EntryCountLimit { get; } Property Value Type Description int | Edit this page View Source Level Level which is required to write to the Logging directly Declaration public LogLevel Level { get; } Property Value Type Description LogLevel | Edit this page View Source Logger Logger to use Declaration public ILogger? Logger { get; } Property Value Type Description ILogger | Edit this page View Source Prefix Prefix (will be prepended to each message) Declaration public string? Prefix { get; } Property Value Type Description string | Edit this page View Source SkipLogger Skip writing to the logger based on the given level? Declaration public bool SkipLogger { get; } Property Value Type Description bool Methods | Edit this page View Source Clear() Clear written entries Declaration public Tracer Clear() Returns Type Description Tracer This | Edit this page View Source Flush(in LogLevel) Flush traced entries to the Logging (and clear; already Logging written entries won't be written again) Declaration public Tracer Flush(in LogLevel level = LogLevel.None) Parameters Type Name Description LogLevel level Level required to be written to the Logging Returns Type Description Tracer This | Edit this page View Source Write(in string, in LogLevel, params object?[]) Write a message Declaration public Tracer Write(in string info, in LogLevel level, params object?[] args) Parameters Type Name Description string info Info LogLevel level Level object[] args Arguments Returns Type Description Tracer This | Edit this page View Source WriteCritical(in string, params object?[]) Write a critical error message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public Tracer WriteCritical(in string info, params object?[] args) Parameters Type Name Description string info Info object[] args Arguments Returns Type Description Tracer This | Edit this page View Source WriteDebug(in string, params object?[]) Write a debug message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public Tracer WriteDebug(in string info, params object?[] args) Parameters Type Name Description string info Info object[] args Arguments Returns Type Description Tracer This | Edit this page View Source WriteError(in string, params object?[]) Write an error message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public Tracer WriteError(in string info, params object?[] args) Parameters Type Name Description string info Info object[] args Arguments Returns Type Description Tracer This | Edit this page View Source WriteInfo(in string, params object?[]) Write a information message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public Tracer WriteInfo(in string info, params object?[] args) Parameters Type Name Description string info Info object[] args Arguments Returns Type Description Tracer This | Edit this page View Source WriteTrace(in string, params object?[]) Write a trace message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public Tracer WriteTrace(in string info, params object?[] args) Parameters Type Name Description string info Info object[] args Arguments Returns Type Description Tracer This | Edit this page View Source WriteWarning(in string, params object?[]) Write a warning message Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public Tracer WriteWarning(in string info, params object?[] args) Parameters Type Name Description string info Info object[] args Arguments Returns Type Description Tracer This Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Transaction.AsyncRollback_Delegate.html": {
    "href": "api/wan24.Core.Transaction.AsyncRollback_Delegate.html",
    "title": "Delegate Transaction.AsyncRollback_Delegate | wan24-Core",
    "keywords": "Delegate Transaction.AsyncRollback_Delegate Delegate for a rollback action Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate Task Transaction.AsyncRollback_Delegate(Transaction transaction, object? returnValue, CancellationToken cancellationToken) Parameters Type Name Description Transaction transaction Transaction object returnValue Action return value CancellationToken cancellationToken Cancellation token Returns Type Description Task Delegate for a rollback action Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Transaction.SyncRollback_Delegate.html": {
    "href": "api/wan24.Core.Transaction.SyncRollback_Delegate.html",
    "title": "Delegate Transaction.SyncRollback_Delegate | wan24-Core",
    "keywords": "Delegate Transaction.SyncRollback_Delegate Delegate for a rollback action Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void Transaction.SyncRollback_Delegate(Transaction transaction, object? returnValue) Parameters Type Name Description Transaction transaction Transaction object returnValue Action return value Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Transaction.html": {
    "href": "api/wan24.Core.Transaction.html",
    "title": "Class Transaction | wan24-Core",
    "keywords": "Class Transaction Transaction Inheritance object DisposableBase Transaction Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Inherited Members DisposableBase.CreateStackInfo DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class Transaction : DisposableBase, IWillDispose, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source Transaction() Constructor Declaration public Transaction() Properties | Edit this page View Source ActionCount Number of executed actions since the last commit Declaration public int ActionCount { get; } Property Value Type Description int | Edit this page View Source IsCommitted Is committed? Declaration public bool IsCommitted { get; } Property Value Type Description bool | Edit this page View Source Name Name Declaration public string? Name { get; set; } Property Value Type Description string | Edit this page View Source Tag Any tagged object Declaration public object? Tag { get; set; } Property Value Type Description object Methods | Edit this page View Source Append(Transaction) Append a transaction Declaration public void Append(Transaction transaction) Parameters Type Name Description Transaction transaction Transaction (won't be disposed) | Edit this page View Source AppendAsync(ParallelTransaction, CancellationToken) Append a transaction Declaration public Task AppendAsync(ParallelTransaction transaction, CancellationToken cancellationToken = default) Parameters Type Name Description ParallelTransaction transaction Transaction (won't be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source AppendAsync(Transaction, CancellationToken) Append a transaction Declaration public Task AppendAsync(Transaction transaction, CancellationToken cancellationToken = default) Parameters Type Name Description Transaction transaction Transaction (won't be disposed) CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source Commit() Commit Declaration public void Commit() | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides DisposableBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides DisposableBase.DisposeCore() | Edit this page View Source Execute(Action, SyncRollback_Delegate) Execute an action Declaration public void Execute(Action action, Transaction.SyncRollback_Delegate rollback) Parameters Type Name Description Action action Action Transaction.SyncRollback_Delegate rollback Rollback action | Edit this page View Source ExecuteAsync(Func<Task>, AsyncRollback_Delegate, CancellationToken) Execute an action Declaration public Task ExecuteAsync(Func<Task> action, Transaction.AsyncRollback_Delegate rollback, CancellationToken cancellationToken = default) Parameters Type Name Description Func<Task> action Action Transaction.AsyncRollback_Delegate rollback Rollback action CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source ExecuteAsync<T>(Func<Task<T>>, AsyncRollback_Delegate, CancellationToken) Execute an action Declaration public Task<T> ExecuteAsync<T>(Func<Task<T>> action, Transaction.AsyncRollback_Delegate rollback, CancellationToken cancellationToken = default) Parameters Type Name Description Func<Task<T>> action Action Transaction.AsyncRollback_Delegate rollback Rollback action CancellationToken cancellationToken Cancellation token Returns Type Description Task<T> Return value Type Parameters Name Description T Return type | Edit this page View Source Execute<T>(Func<T>, SyncRollback_Delegate) Execute an action Declaration public T Execute<T>(Func<T> action, Transaction.SyncRollback_Delegate rollback) Parameters Type Name Description Func<T> action Action Transaction.SyncRollback_Delegate rollback Rollback action Returns Type Description T Return value Type Parameters Name Description T Return type | Edit this page View Source Rollback() Rollback Declaration public void Rollback() | Edit this page View Source RollbackAsync(CancellationToken) Rollback Declaration public Task RollbackAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string? ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Implements IWillDispose IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Translation.LocaleChanged_Delegate.html": {
    "href": "api/wan24.Core.Translation.LocaleChanged_Delegate.html",
    "title": "Delegate Translation.LocaleChanged_Delegate | wan24-Core",
    "keywords": "Delegate Translation.LocaleChanged_Delegate Delegate for an OnLocaleChanged event handler Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void Translation.LocaleChanged_Delegate(Translation? translation, EventArgs e) Parameters Type Name Description Translation translation New translation EventArgs e Arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Translation.html": {
    "href": "api/wan24.Core.Translation.html",
    "title": "Class Translation | wan24-Core",
    "keywords": "Class Translation Translation Inheritance object Translation Implements IStringLocalizer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class Translation : IStringLocalizer Remarks Constructor Constructors | Edit this page View Source Translation(in IReadOnlyDictionary<string, string>, in string?) Translation Declaration public Translation(in IReadOnlyDictionary<string, string> terms, in string? locale = null) Parameters Type Name Description IReadOnlyDictionary<string, string> terms Terms string locale Locale Remarks Constructor Properties | Edit this page View Source Current Current translation Declaration public static Translation? Current { get; set; } Property Value Type Description Translation | Edit this page View Source Dummy Empty dummy translation Declaration public static Translation Dummy { get; } Property Value Type Description Translation | Edit this page View Source this[string, Dictionary<string, string>] Get a translation Declaration public string this[in string key, in Dictionary<string, string> values] { get; } Parameters Type Name Description string key Term key Dictionary<string, string> values Values to parse Property Value Type Description string Translated term | Edit this page View Source this[string, string[]] Get a translation Declaration public string this[in string key, params string[] values] { get; } Parameters Type Name Description string key Term key string[] values Values to parse Property Value Type Description string Translated term | Edit this page View Source Locale Locale Declaration [RegularExpression(\"^([a-z]{2})-([A-Z]{2})$\")] public string? Locale { get; } Property Value Type Description string | Edit this page View Source Locales Available locales Declaration public static Dictionary<string, Translation> Locales { get; } Property Value Type Description Dictionary<string, Translation> | Edit this page View Source MaxParserRounds Maximum recursive parser rounds Declaration public static int? MaxParserRounds { get; set; } Property Value Type Description int? | Edit this page View Source ParserOptions String parser options Declaration public static StringParserOptions? ParserOptions { get; set; } Property Value Type Description StringParserOptions | Edit this page View Source ParserRegex Placeholder regular expression Declaration public static Regex? ParserRegex { get; set; } Property Value Type Description Regex | Edit this page View Source ParserRegexGroup Regular expression group to use Declaration public static int? ParserRegexGroup { get; set; } Property Value Type Description int? | Edit this page View Source PluralSupport Does support plural? Declaration public bool PluralSupport { get; } Property Value Type Description bool | Edit this page View Source RequireTranslation Require an existing translation? Declaration public static bool RequireTranslation { get; set; } Property Value Type Description bool | Edit this page View Source Terms Terms Declaration public IReadOnlyDictionary<string, string> Terms { get; } Property Value Type Description IReadOnlyDictionary<string, string> | Edit this page View Source TranslationTerms Translation terms Declaration public ITranslationTerms? TranslationTerms { get; } Property Value Type Description ITranslationTerms Methods | Edit this page View Source EnsureValidLocale(in string, in bool, in bool) Ensure a valid locale Declaration public static bool EnsureValidLocale(in string locale, in bool checkExists = true, in bool throwOnError = true) Parameters Type Name Description string locale Locale bool checkExists Check if the locale exists? bool throwOnError Throw an exception on error? Returns Type Description bool If the locale is valid (and exists) | Edit this page View Source Localize(in string, in string, in Dictionary<string, string>) Translate a term Declaration public static string Localize(in string locale, in string key, in Dictionary<string, string> values) Parameters Type Name Description string locale Locale string key Term key Dictionary<string, string> values Values to parse Returns Type Description string Translated term | Edit this page View Source Localize(in string, in string, in int, in Dictionary<string, string>) Translate a term Declaration public static string Localize(in string locale, in string key, in int count, in Dictionary<string, string> values) Parameters Type Name Description string locale Locale string key Term key int count Count (for plural translation) Dictionary<string, string> values Values to parse Returns Type Description string Translated term | Edit this page View Source Localize(in string, in string, in int, params string[]) Translate a term Declaration public static string Localize(in string locale, in string key, in int count, params string[] values) Parameters Type Name Description string locale Locale string key Term key int count Count (for plural translation) string[] values Values to parse Returns Type Description string Translated term | Edit this page View Source Localize(in string, in string, params string[]) Translate a term Declaration public static string Localize(in string locale, in string key, params string[] values) Parameters Type Name Description string locale Locale string key Term key string[] values Values to parse Returns Type Description string Translated term | Edit this page View Source LocalizedFileName(in string, in string, in bool) Get a localized filename (filename.ext -> filename.en-EN.ext) Declaration public static string LocalizedFileName(in string locale, in string fileName, in bool checkExists = true) Parameters Type Name Description string locale Locale string fileName Filename bool checkExists Check if the file exists? Returns Type Description string Localized filename (may be the given filename, if the locale is unknown or the file doesn't exist) Exceptions Type Condition FileNotFoundException File not found | Edit this page View Source Translate(in string, in Dictionary<string, string>) Translate a term Declaration public static string Translate(in string key, in Dictionary<string, string> values) Parameters Type Name Description string key Term key Dictionary<string, string> values Values to parse Returns Type Description string Translated term | Edit this page View Source Translate(in string, in int, in Dictionary<string, string>) Translate a term Declaration public static string Translate(in string key, in int count, in Dictionary<string, string> values) Parameters Type Name Description string key Term key int count Count (for plural translation) Dictionary<string, string> values Values to parse Returns Type Description string Translated term | Edit this page View Source Translate(in string, in int, params string[]) Translate a term Declaration public static string Translate(in string key, in int count, params string[] values) Parameters Type Name Description string key Term key int count Count (for plural translation) string[] values Values to parse Returns Type Description string Translated term | Edit this page View Source Translate(in string, params string[]) Translate a term Declaration public static string Translate(in string key, params string[] values) Parameters Type Name Description string key Term key string[] values Values to parse Returns Type Description string Translated term | Edit this page View Source TranslatePlural(in string, in int, Dictionary<string, string>) Translate a plural term Declaration public string TranslatePlural(in string key, in int count, Dictionary<string, string> values) Parameters Type Name Description string key Term key int count Count (for plural translation) Dictionary<string, string> values Values to parse Returns Type Description string Translated term | Edit this page View Source TranslatePlural(in string, in int, params string[]) Translate a plural term Declaration public string TranslatePlural(in string key, in int count, params string[] values) Parameters Type Name Description string key Term key int count Count (for plural translation) string[] values Values to parse Returns Type Description string Translated term Events | Edit this page View Source OnLocaleChanged Raised when the Current locale changed Declaration public static event Translation.LocaleChanged_Delegate? OnLocaleChanged Event Type Type Description Translation.LocaleChanged_Delegate Implements IStringLocalizer Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.TranslationHelper.Ext.html": {
    "href": "api/wan24.Core.TranslationHelper.Ext.html",
    "title": "Class TranslationHelper.Ext | wan24-Core",
    "keywords": "Class TranslationHelper.Ext Extended helper (NOTE: using these will disable the discard operator _ of C#) Inheritance object TranslationHelper.Ext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class TranslationHelper.Ext Methods | Edit this page View Source _(string, in Dictionary<string, string>) Translate Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string _(string str, in Dictionary<string, string> values) Parameters Type Name Description string str String Dictionary<string, string> values Parser values Returns Type Description string Translated (and parsed) string | Edit this page View Source _(string, in int, in Dictionary<string, string>) Translate Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string _(string str, in int count, in Dictionary<string, string> values) Parameters Type Name Description string str String int count Count (for plural translation) Dictionary<string, string> values Parser values Returns Type Description string Translated (and parsed) string | Edit this page View Source _(string, in int, params string[]) Translate Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string _(string str, in int count, params string[] values) Parameters Type Name Description string str String int count Count (for plural translation) string[] values Parser values Returns Type Description string Translated (and parsed) string | Edit this page View Source _(string, params string[]) Translate Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static string _(string str, params string[] values) Parameters Type Name Description string str String string[] values Parser values Returns Type Description string Translated (and parsed) string"
  },
  "api/wan24.Core.TranslationHelper.html": {
    "href": "api/wan24.Core.TranslationHelper.html",
    "title": "Class TranslationHelper | wan24-Core",
    "keywords": "Class TranslationHelper Translation helper (use using static wan24.Core.TranslationHelper.Ext; for getting _ as translation method, which will help a keyword extractor to find translation texts in your source code) Inheritance object TranslationHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class TranslationHelper Methods | Edit this page View Source __(string) Dummy translate method for a keyword extractor Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static string __(string str) Parameters Type Name Description string str String Returns Type Description string String"
  },
  "api/wan24.Core.TranslationTerms.html": {
    "href": "api/wan24.Core.TranslationTerms.html",
    "title": "Class TranslationTerms | wan24-Core",
    "keywords": "Class TranslationTerms Simple dictionary based translation Inheritance object TranslationTerms Implements ITranslationTerms IReadOnlyDictionary<string, string> IReadOnlyCollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IStringLocalizer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class TranslationTerms : ITranslationTerms, IReadOnlyDictionary<string, string>, IReadOnlyCollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IStringLocalizer Remarks Constructor Constructors | Edit this page View Source TranslationTerms(IReadOnlyDictionary<string, string>) Simple dictionary based translation Declaration public TranslationTerms(IReadOnlyDictionary<string, string> terms) Parameters Type Name Description IReadOnlyDictionary<string, string> terms Terms Remarks Constructor Properties | Edit this page View Source Count Gets the number of elements in the collection. Declaration public virtual int Count { get; } Property Value Type Description int The number of elements in the collection. | Edit this page View Source this[string, int, string[]] Get a term Declaration public virtual string this[in string key, in int count, params string[] values] { get; } Parameters Type Name Description string key Term key int count Count (for plural translation) string[] values Parser values Property Value Type Description string Term Exceptions Type Condition NotSupportedException Plural terms are not supported | Edit this page View Source this[string, string[]] Get a term Declaration public virtual string this[in string key, params string[] values] { get; } Parameters Type Name Description string key Term key string[] values Parser values Property Value Type Description string Term | Edit this page View Source Keys Gets an enumerable collection that contains the keys in the read-only dictionary. Declaration public virtual IEnumerable<string> Keys { get; } Property Value Type Description IEnumerable<string> An enumerable collection that contains the keys in the read-only dictionary. | Edit this page View Source PluralSupport Does support plural? Declaration public virtual bool PluralSupport { get; } Property Value Type Description bool | Edit this page View Source Terms Terms Declaration public virtual FrozenDictionary<string, string> Terms { get; } Property Value Type Description FrozenDictionary<string, string> | Edit this page View Source Values Gets an enumerable collection that contains the values in the read-only dictionary. Declaration public virtual IEnumerable<string> Values { get; } Property Value Type Description IEnumerable<string> An enumerable collection that contains the values in the read-only dictionary. Methods | Edit this page View Source ContainsKey(string) Determines whether the read-only dictionary contains an element that has the specified key. Declaration public virtual bool ContainsKey(string key) Parameters Type Name Description string key The key to locate. Returns Type Description bool true if the read-only dictionary contains an element that has the specified key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<KeyValuePair<string, string>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<string, string>> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetTerm(in string, in int, params string[]) Get a term Declaration public virtual string GetTerm(in string key, in int count, params string[] values) Parameters Type Name Description string key Term key int count Count (for plural translation) string[] values Parser values Returns Type Description string Term | Edit this page View Source GetTerm(in string, params string[]) Get a term Declaration public virtual string GetTerm(in string key, params string[] values) Parameters Type Name Description string key Term key string[] values Parser values Returns Type Description string Term | Edit this page View Source ParseTerm(in string, in string[]) Parse a term Declaration public static string ParseTerm(in string term, in string[] args) Parameters Type Name Description string term Term string[] args Arguments Returns Type Description string Parsed term | Edit this page View Source StringLocalizer(string, object[]) String localizer used for the IStringLocalizer implementation Declaration protected virtual LocalizedString StringLocalizer(string name, object[] arguments) Parameters Type Name Description string name Name object[] arguments Arguments Returns Type Description LocalizedString Localized string | Edit this page View Source TryGetValue(string, out string) Gets the value that is associated with the specified key. Declaration public virtual bool TryGetValue(string key, out string value) Parameters Type Name Description string key The key to locate. string value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description bool true if the object that implements the IReadOnlyDictionary<TKey, TValue> interface contains an element that has the specified key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. Implements ITranslationTerms IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IStringLocalizer Extension Methods ArrayExtensions.AsReadOnly<T>(IEnumerable<T>) EnumerableExtensions.ChunkEnum<T>(IEnumerable<T>, int) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>, params T[]) EnumerableExtensions.ElementIndex<T>(IEnumerable<T>, in T) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, Task<(bool Yield, tOutput Output)>>, int, int?, CancellationToken) ParallelAsync.FilterAsync<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, CancellationToken, (bool Yield, tOutput Output)>, int, int?, CancellationToken) ParallelAsync.Filter<tInput, tOutput>(IEnumerable<tInput>, Func<tInput, ParallelLoopState, CancellationToken, (bool Yield, tOutput Output)>, ParallelOptions?, CancellationToken) ParallelAsync.ForEachAsync<T>(IEnumerable<T>, Func<T, CancellationToken, Task>, int, int?, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.TryAsyncResult-1.html": {
    "href": "api/wan24.Core.TryAsyncResult-1.html",
    "title": "Struct TryAsyncResult<T> | wan24-Core",
    "keywords": "Struct TryAsyncResult<T> Result of an asynchronous try-action Implements ITryAsyncResult IEquatable<TryAsyncResult<T>> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public readonly record struct TryAsyncResult<T> : ITryAsyncResult, IEquatable<TryAsyncResult<T>> Type Parameters Name Description T Result type Constructors | Edit this page View Source TryAsyncResult(T?, bool?) Constructor Declaration public TryAsyncResult(T? result = default, bool? succeed = null) Parameters Type Name Description T result Result (must be non-null, if succeed is true) bool? succeed If succeed Properties | Edit this page View Source Result Action result (not null, if Succeed is true) Declaration public T? Result { get; } Property Value Type Description T | Edit this page View Source Succeed If succeed (Result isn't null) Declaration public bool Succeed { get; } Property Value Type Description bool Operators | Edit this page View Source implicit operator TryAsyncResult<T>(in bool) Cast failed result Declaration public static implicit operator TryAsyncResult<T>(in bool result) Parameters Type Name Description bool result false Returns Type Description TryAsyncResult<T> | Edit this page View Source implicit operator TryAsyncResult<T>(in T) Cast from succeed result Declaration public static implicit operator TryAsyncResult<T>(in T result) Parameters Type Name Description T result Result Returns Type Description TryAsyncResult<T> | Edit this page View Source implicit operator bool(in TryAsyncResult<T>) Cast as succeed-flag Declaration public static implicit operator bool(in TryAsyncResult<T> instance) Parameters Type Name Description TryAsyncResult<T> instance Instance Returns Type Description bool | Edit this page View Source implicit operator T(in TryAsyncResult<T>) Cast as non-null result Declaration public static implicit operator T(in TryAsyncResult<T> instance) Parameters Type Name Description TryAsyncResult<T> instance Instance Returns Type Description T Implements ITryAsyncResult IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.TypeCache.html": {
    "href": "api/wan24.Core.TypeCache.html",
    "title": "Class TypeCache | wan24-Core",
    "keywords": "Class TypeCache Type cache Inheritance object TypeCache Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public static class TypeCache Fields | Edit this page View Source Types Type cache (key is the types hash code) Declaration public static readonly ConcurrentDictionary<int, Type> Types Field Value Type Description ConcurrentDictionary<int, Type> Methods | Edit this page View Source Add(params Type[]) Add types to the Types cache Declaration public static void Add(params Type[] types) Parameters Type Name Description Type[] types Types"
  },
  "api/wan24.Core.TypeHelper.LoadType_Delegate.html": {
    "href": "api/wan24.Core.TypeHelper.LoadType_Delegate.html",
    "title": "Delegate TypeHelper.LoadType_Delegate | wan24-Core",
    "keywords": "Delegate TypeHelper.LoadType_Delegate Delegate for the type loader event Namespace: wan24.Core Assembly: wan24Core.dll Syntax public delegate void TypeHelper.LoadType_Delegate(LoadTypeEventArgs e) Parameters Type Name Description LoadTypeEventArgs e Event arguments Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.TypeHelper.html": {
    "href": "api/wan24.Core.TypeHelper.html",
    "title": "Class TypeHelper | wan24-Core",
    "keywords": "Class TypeHelper Type helper Inheritance object TypeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public sealed class TypeHelper Constructors | Edit this page View Source TypeHelper() Type helper Declaration public TypeHelper() Properties | Edit this page View Source Assemblies Assemblies Declaration public Assembly[] Assemblies { get; } Property Value Type Description Assembly[] | Edit this page View Source Instance Singleton instance Declaration public static TypeHelper Instance { get; } Property Value Type Description TypeHelper Methods | Edit this page View Source AddAssemblies(params Assembly[]) Add assemblies Declaration public Assembly[] AddAssemblies(params Assembly[] assemblies) Parameters Type Name Description Assembly[] assemblies Assemblies Returns Type Description Assembly[] Assemblies | Edit this page View Source AddTypes(params Type[]) Add types (will add their assemblies, too) Declaration public Type[] AddTypes(params Type[] types) Parameters Type Name Description Type[] types Types Returns Type Description Type[] Types | Edit this page View Source GetType(string, bool) Load a type from its name Declaration public Type? GetType(string name, bool throwOnError = false) Parameters Type Name Description string name Name bool throwOnError Throw an exception on error? Returns Type Description Type Type | Edit this page View Source ScanAssemblies(Assembly?) Scan all referenced assemblies Declaration public Assembly[] ScanAssemblies(Assembly? reference = null) Parameters Type Name Description Assembly reference Reference assembly (starting point) Returns Type Description Assembly[] Added assemblies Events | Edit this page View Source OnLoadType Raised when loading a type Declaration public event TypeHelper.LoadType_Delegate? OnLoadType Event Type Type Description TypeHelper.LoadType_Delegate Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.UdpBroadcast-1.html": {
    "href": "api/wan24.Core.UdpBroadcast-1.html",
    "title": "Class UdpBroadcast<T> | wan24-Core",
    "keywords": "Class UdpBroadcast<T> UDP broadcast helper (broadcaster and listener) Inheritance object DisposableBase HostedServiceBase UdpBroadcast<T> Implements IWillDispose IServiceWorker IDisposableObject IDisposable IAsyncDisposable IHostedService Inherited Members HostedServiceBase.Sync HostedServiceBase.RunEvent HostedServiceBase.PauseEvent HostedServiceBase.StopTask HostedServiceBase.Cancellation HostedServiceBase.ServiceTask HostedServiceBase._LastException HostedServiceBase.CanPause HostedServiceBase.IsRunning HostedServiceBase.IsPaused HostedServiceBase.Started HostedServiceBase.Paused HostedServiceBase.Stopped HostedServiceBase.IsStopping HostedServiceBase.LastException HostedServiceBase.StoppedExceptional HostedServiceBase.Name HostedServiceBase.ErrorSource HostedServiceBase.CancelToken HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.PauseAsync(CancellationToken) HostedServiceBase.ResumeAsync(CancellationToken) HostedServiceBase.ToString() HostedServiceBase.BeforeStartAsync(CancellationToken) HostedServiceBase.StartingAsync(CancellationToken) HostedServiceBase.BeforeStopAsync(CancellationToken) HostedServiceBase.StoppingAsync(CancellationToken) HostedServiceBase.AfterStopAsync(CancellationToken) HostedServiceBase.BeforePauseAsync(CancellationToken) HostedServiceBase.PausingAsync(CancellationToken) HostedServiceBase.AfterPauseAsync(CancellationToken) HostedServiceBase.BeforeResumeAsync(CancellationToken) HostedServiceBase.ResumingAsync(CancellationToken) HostedServiceBase.AfterResumeAsync(CancellationToken) HostedServiceBase.RunServiceAsync() HostedServiceBase.EnsureNotCanceled(in bool) HostedServiceBase.EnsureRunning(in bool) HostedServiceBase.OnException HostedServiceBase.RaiseOnException() DisposableBase.DisposeSyncObject DisposableBase.AsyncDisposing DisposableBase.AllowFinalizer DisposableBase.DisposeObjects DisposableBase.StackInfo DisposableBase.CreateStackInfo DisposableBase.DestructorDisposing DisposableBase.IsDisposing DisposableBase.IsDisposed DisposableBase.RegisterForDispose<T>(in T) DisposableBase.EnsureUndisposed(in bool, in bool) DisposableBase.LockDisposing(in TimeSpan, in CancellationToken) DisposableBase.LockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.TryLockDisposing(out SemaphoreSyncContext, in TimeSpan, in CancellationToken) DisposableBase.TryLockDisposingAsync(TimeSpan, CancellationToken) DisposableBase.IfUndisposed<T>(in T, in bool) DisposableBase.IfUndisposed(in Action, in bool) DisposableBase.IfUndisposed<T>(in Func<T>, in bool) DisposableBase.IfUndisposedNullable<T>(in Func<T>, in bool) DisposableBase.DisposeAttributes() DisposableBase.DisposeAttributesAsync() DisposableBase.Dispose() DisposableBase.DisposeAsync() DisposableBase.OnDisposing DisposableBase.OnDisposed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class UdpBroadcast<T> : HostedServiceBase, IWillDispose, IServiceWorker, IDisposableObject, IDisposable, IAsyncDisposable, IHostedService Type Parameters Name Description T Broadcast response type Constructors | Edit this page View Source UdpBroadcast(in IPEndPoint, in IPAddress, int, in bool) Constructor Declaration protected UdpBroadcast(in IPEndPoint udpEndPoint, in IPAddress mask, int broadcastPort = 0, in bool backgroundPacketHandler = false) Parameters Type Name Description IPEndPoint udpEndPoint UDP endpoint IPAddress mask Network mask int broadcastPort Broadcast UDP port bool backgroundPacketHandler Run the packet handler in background (asynchronous, without waiting for a call to finish)? Fields | Edit this page View Source BackgroundPacketHandler Run the packet handler in background (asynchronous, without waiting for a call to finish)? Declaration protected readonly bool BackgroundPacketHandler Field Value Type Description bool | Edit this page View Source BroadcastSync Thread synchronization Declaration protected readonly SemaphoreSync BroadcastSync Field Value Type Description SemaphoreSync | Edit this page View Source Listener UDP listener Declaration protected UdpClient? Listener Field Value Type Description UdpClient | Edit this page View Source ServiceEvent Service event (raised when serving) Declaration protected readonly ResetEvent ServiceEvent Field Value Type Description ResetEvent Properties | Edit this page View Source BroadcastPort Broadcast UDP port Declaration public int BroadcastPort { get; } Property Value Type Description int | Edit this page View Source NetworkMask Network mask Declaration public IPAddress NetworkMask { get; } Property Value Type Description IPAddress | Edit this page View Source UdpEndPoint UDP endpoint Declaration public IPEndPoint UdpEndPoint { get; } Property Value Type Description IPEndPoint Methods | Edit this page View Source AfterStartAsync(CancellationToken) After started Declaration protected override Task AfterStartAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task Overrides HostedServiceBase.AfterStartAsync(CancellationToken) | Edit this page View Source BroadcastAsync(byte[], int, CancellationToken) Broadcast (using the running services UDP listener) Declaration public Task BroadcastAsync(byte[] payload, int port = 0, CancellationToken cancellationToken = default) Parameters Type Name Description byte[] payload Payload int port Broadcast UDP port (or 0 for using the port from UdpEndPoint) CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source BroadcastAsync(byte[], TimeSpan, int, int, CancellationToken) Broadcast (using an own UDP listener; service must be stopped) Declaration public Task<T?[]> BroadcastAsync(byte[] payload, TimeSpan timeout, int maxResponseCount = 0, int port = 0, CancellationToken cancellationToken = default) Parameters Type Name Description byte[] payload Payload TimeSpan timeout Timeout for receiving responses int maxResponseCount Maximum response count before cancelling (0 for no limit) int port Broadcast UDP port (or 0 for using the port from UdpEndPoint) CancellationToken cancellationToken Cancellation token Returns Type Description Task<T[]> Broadcast response type | Edit this page View Source ConfigureBroadcastListener(UdpClient) Configure the broadcast UDP listener Declaration protected virtual void ConfigureBroadcastListener(UdpClient listener) Parameters Type Name Description UdpClient listener Listener | Edit this page View Source ConfigureListener(UdpClient) Configure an UDP listener Declaration protected virtual void ConfigureListener(UdpClient listener) Parameters Type Name Description UdpClient listener Listener | Edit this page View Source ConfigureUdpListener(UdpClient) Configure the UDP listener Declaration protected virtual void ConfigureUdpListener(UdpClient listener) Parameters Type Name Description UdpClient listener Listener | Edit this page View Source Dispose(bool) Dispose Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Disposing? (may be false, if called from the destructor) Overrides HostedServiceBase.Dispose(bool) | Edit this page View Source DisposeCore() Dispose Declaration protected override Task DisposeCore() Returns Type Description Task Overrides HostedServiceBase.DisposeCore() | Edit this page View Source HandleReceivedAsync(UdpReceiveResult, CancellationToken) Handle an UDP packet Declaration protected abstract Task HandleReceivedAsync(UdpReceiveResult packet, CancellationToken cancellationToken) Parameters Type Name Description UdpReceiveResult packet Packet CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source HandleResponse(in UdpReceiveResult) Handle an UDP response packet Declaration protected abstract T? HandleResponse(in UdpReceiveResult response) Parameters Type Name Description UdpReceiveResult response Response Returns Type Description T Response | Edit this page View Source WorkerAsync() Service worker Declaration protected override Task WorkerAsync() Returns Type Description Task Overrides HostedServiceBase.WorkerAsync() Implements IWillDispose IServiceWorker IDisposableObject IDisposable IAsyncDisposable IHostedService Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.Uid.html": {
    "href": "api/wan24.Core.Uid.html",
    "title": "Struct Uid | wan24-Core",
    "keywords": "Struct Uid Unique ID Implements IEquatable<Uid> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public readonly record struct Uid : IEquatable<Uid> Constructors | Edit this page View Source Uid() Constructor Declaration public Uid() | Edit this page View Source Uid(in DateTime) Constructor Declaration public Uid(in DateTime time) Parameters Type Name Description DateTime time Time | Edit this page View Source Uid(in DateTime, in long) Constructor Declaration public Uid(in DateTime time, in long random) Parameters Type Name Description DateTime time Time long random Random | Edit this page View Source Uid(in ReadOnlySpan<byte>) Constructor Declaration public Uid(in ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer Serialized data Fields | Edit this page View Source RANDOM_LEN Random length in byte Declaration public const int RANDOM_LEN = 8 Field Value Type Description int | Edit this page View Source RANDOM_OFFSET Random byte offset Declaration public const int RANDOM_OFFSET = 8 Field Value Type Description int | Edit this page View Source Random Random Declaration public readonly long Random Field Value Type Description long | Edit this page View Source STRING_LEN String length in characters Declaration public static readonly int STRING_LEN Field Value Type Description int | Edit this page View Source STRUCTURE_SIZE Structure size in byte Declaration public const int STRUCTURE_SIZE = 16 Field Value Type Description int | Edit this page View Source TIME_LEN Time length in byte Declaration public const int TIME_LEN = 8 Field Value Type Description int | Edit this page View Source TIME_OFFSET Time byte offset Declaration public const int TIME_OFFSET = 0 Field Value Type Description int | Edit this page View Source Time Time (UTC) Declaration public readonly DateTime Time Field Value Type Description DateTime Methods | Edit this page View Source GetBytes() Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public byte[] GetBytes() Returns Type Description byte[] Serialized data | Edit this page View Source GetBytes(in Span<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Span<byte> GetBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Serialized data buffer (length needs to fit STRUCTURE_SIZE) Returns Type Description Span<byte> Serialized data buffer | Edit this page View Source Parse(in ReadOnlySpan<char>) Parse from a string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static Uid Parse(in ReadOnlySpan<char> str) Parameters Type Name Description ReadOnlySpan<char> str String Returns Type Description Uid UID | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source TryParse(in ReadOnlySpan<char>, out Uid?) Try parsing from a string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool TryParse(in ReadOnlySpan<char> str, out Uid? result) Parameters Type Name Description ReadOnlySpan<char> str String Uid? result UID Returns Type Description bool If succeed Operators | Edit this page View Source implicit operator Uid(in byte[]) Cast from serialized data Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Uid(in byte[] buffer) Parameters Type Name Description byte[] buffer Serialized data Returns Type Description Uid | Edit this page View Source implicit operator Uid(in DateTime) Cast from DateTime Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Uid(in DateTime dt) Parameters Type Name Description DateTime dt DateTime Returns Type Description Uid | Edit this page View Source implicit operator Uid(in Memory<byte>) Cast from serialized data Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Uid(in Memory<byte> buffer) Parameters Type Name Description Memory<byte> buffer Serialized data Returns Type Description Uid | Edit this page View Source implicit operator Uid(in ReadOnlyMemory<byte>) Cast from serialized data Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Uid(in ReadOnlyMemory<byte> buffer) Parameters Type Name Description ReadOnlyMemory<byte> buffer Serialized data Returns Type Description Uid | Edit this page View Source implicit operator Uid(in ReadOnlySpan<byte>) Cast from serialized data Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Uid(in ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer Serialized data Returns Type Description Uid | Edit this page View Source implicit operator Uid(in Span<byte>) Cast from serialized data Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Uid(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Serialized data Returns Type Description Uid | Edit this page View Source implicit operator Uid(in string) Cast from a string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator Uid(in string str) Parameters Type Name Description string str String Returns Type Description Uid | Edit this page View Source implicit operator byte[](in Uid) Cast as serialized data Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator byte[](in Uid uid) Parameters Type Name Description Uid uid UID Returns Type Description byte[] | Edit this page View Source implicit operator DateTime(in Uid) Cast as DateTime (Time) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator DateTime(in Uid uid) Parameters Type Name Description Uid uid UID Returns Type Description DateTime | Edit this page View Source implicit operator string(in Uid) Cast as string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator string(in Uid uid) Parameters Type Name Description Uid uid UID Returns Type Description string | Edit this page View Source implicit operator UidExt(in Uid) Cast as UidExt Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator UidExt(in Uid uid) Parameters Type Name Description Uid uid UidExt Returns Type Description UidExt | Edit this page View Source implicit operator Uid(in UidExt) Cast from UidExt Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator Uid(in UidExt uid) Parameters Type Name Description UidExt uid UidExt Returns Type Description Uid Implements IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.UidAttribute.html": {
    "href": "api/wan24.Core.UidAttribute.html",
    "title": "Class UidAttribute | wan24-Core",
    "keywords": "Class UidAttribute Uid validation attribute Inheritance object Attribute ValidationAttribute ValidationAttributeBase UidAttribute UidExtAttribute Inherited Members ValidationAttributeBase.GetErrorMessage(in ValidationContext, in string) ValidationAttributeBase.ErrorMessageFormatter ValidationAttribute.FormatErrorMessage(string) ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24CoreValidation.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Parameter)] public class UidAttribute : ValidationAttributeBase Constructors | Edit this page View Source UidAttribute() Constructor Declaration public UidAttribute() Properties | Edit this page View Source AllowFutureTime Allow a future time? Declaration public bool AllowFutureTime { get; set; } Property Value Type Description bool Methods | Edit this page View Source IsValid(object?, ValidationContext) Validates the specified value with respect to the current validation attribute. Declaration protected override ValidationResult? IsValid(object? value, ValidationContext validationContext) Parameters Type Name Description object value The value to validate. ValidationContext validationContext The context information about the validation operation. Returns Type Description ValidationResult An instance of the ValidationResult class. Overrides ValidationAttribute.IsValid(object, ValidationContext) Exceptions Type Condition InvalidOperationException The current attribute is malformed. NotImplementedException IsValid(object, ValidationContext) has not been implemented by a derived class. Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.UidExt.html": {
    "href": "api/wan24.Core.UidExt.html",
    "title": "Struct UidExt | wan24-Core",
    "keywords": "Struct UidExt Unique ID with an ID extension Implements IEquatable<UidExt> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public readonly record struct UidExt : IEquatable<UidExt> Constructors | Edit this page View Source UidExt() Constructor Declaration public UidExt() | Edit this page View Source UidExt(in DateTime, in int) Constructor Declaration public UidExt(in DateTime time, in int id) Parameters Type Name Description DateTime time Time int id ID | Edit this page View Source UidExt(in DateTime, in int, in int) Constructor Declaration public UidExt(in DateTime time, in int random, in int id) Parameters Type Name Description DateTime time Time int random Random int id ID | Edit this page View Source UidExt(in int) Constructor Declaration public UidExt(in int id) Parameters Type Name Description int id ID | Edit this page View Source UidExt(in ReadOnlySpan<byte>) Constructor Declaration public UidExt(in ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer Serialized data Fields | Edit this page View Source ID_LEN ID length in byte Declaration public const int ID_LEN = 4 Field Value Type Description int | Edit this page View Source ID_OFFSET ID byte offset Declaration public const int ID_OFFSET = 12 Field Value Type Description int | Edit this page View Source Id ID Declaration public readonly int Id Field Value Type Description int | Edit this page View Source RANDOM_LEN Random length in byte Declaration public const int RANDOM_LEN = 4 Field Value Type Description int | Edit this page View Source RANDOM_OFFSET Random byte offset Declaration public const int RANDOM_OFFSET = 8 Field Value Type Description int | Edit this page View Source Random Random Declaration public readonly int Random Field Value Type Description int | Edit this page View Source STRING_LEN String length in characters Declaration public static readonly int STRING_LEN Field Value Type Description int | Edit this page View Source STRUCTURE_SIZE Structure size in byte Declaration public const int STRUCTURE_SIZE = 16 Field Value Type Description int | Edit this page View Source TIME_LEN Time length in byte Declaration public const int TIME_LEN = 8 Field Value Type Description int | Edit this page View Source TIME_OFFSET Time byte offset Declaration public const int TIME_OFFSET = 0 Field Value Type Description int | Edit this page View Source Time Time (UTC) Declaration public readonly DateTime Time Field Value Type Description DateTime Methods | Edit this page View Source GetBytes() Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public byte[] GetBytes() Returns Type Description byte[] Serialized data | Edit this page View Source GetBytes(in Span<byte>) Get bytes Declaration [TargetedPatchingOptOut(\"Tiny method\")] public Span<byte> GetBytes(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Serialized data buffer (length needs to fit STRUCTURE_SIZE) Returns Type Description Span<byte> Serialized data buffer | Edit this page View Source Parse(in ReadOnlySpan<char>) Parse from a string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static UidExt Parse(in ReadOnlySpan<char> str) Parameters Type Name Description ReadOnlySpan<char> str String Returns Type Description UidExt UID | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source TryParse(in ReadOnlySpan<char>, out UidExt?) Try parsing from a string Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static bool TryParse(in ReadOnlySpan<char> str, out UidExt? result) Parameters Type Name Description ReadOnlySpan<char> str String UidExt? result UID Returns Type Description bool If succeed Operators | Edit this page View Source implicit operator UidExt(in byte[]) Cast from serialized data Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator UidExt(in byte[] buffer) Parameters Type Name Description byte[] buffer Serialized data Returns Type Description UidExt | Edit this page View Source implicit operator UidExt(in Memory<byte>) Cast from serialized data Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator UidExt(in Memory<byte> buffer) Parameters Type Name Description Memory<byte> buffer Serialized data Returns Type Description UidExt | Edit this page View Source implicit operator UidExt(in ReadOnlyMemory<byte>) Cast from serialized data Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator UidExt(in ReadOnlyMemory<byte> buffer) Parameters Type Name Description ReadOnlyMemory<byte> buffer Serialized data Returns Type Description UidExt | Edit this page View Source implicit operator UidExt(in ReadOnlySpan<byte>) Cast from serialized data Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator UidExt(in ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer Serialized data Returns Type Description UidExt | Edit this page View Source implicit operator UidExt(in Span<byte>) Cast from serialized data Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator UidExt(in Span<byte> buffer) Parameters Type Name Description Span<byte> buffer Serialized data Returns Type Description UidExt | Edit this page View Source implicit operator UidExt(in string) Cast from a string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator UidExt(in string str) Parameters Type Name Description string str String Returns Type Description UidExt | Edit this page View Source implicit operator UidExt(in Uid) Cast from Uid Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator UidExt(in Uid uid) Parameters Type Name Description Uid uid Uid Returns Type Description UidExt | Edit this page View Source implicit operator byte[](in UidExt) Cast as serialized data Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator byte[](in UidExt uid) Parameters Type Name Description UidExt uid UID Returns Type Description byte[] | Edit this page View Source implicit operator DateTime(in UidExt) Cast as DateTime (Time) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator DateTime(in UidExt uid) Parameters Type Name Description UidExt uid UID Returns Type Description DateTime | Edit this page View Source implicit operator int(in UidExt) Cast as int (Id) Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator int(in UidExt uid) Parameters Type Name Description UidExt uid UID Returns Type Description int | Edit this page View Source implicit operator string(in UidExt) Cast as string Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static implicit operator string(in UidExt uid) Parameters Type Name Description UidExt uid UID Returns Type Description string | Edit this page View Source implicit operator Uid(in UidExt) Cast as Uid Declaration [TargetedPatchingOptOut(\"Tiny method\")] public static implicit operator Uid(in UidExt uid) Parameters Type Name Description UidExt uid UidExt Returns Type Description Uid Implements IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.UidExtAttribute.html": {
    "href": "api/wan24.Core.UidExtAttribute.html",
    "title": "Class UidExtAttribute | wan24-Core",
    "keywords": "Class UidExtAttribute UidExt validation attribute Inheritance object Attribute ValidationAttribute ValidationAttributeBase UidAttribute UidExtAttribute Inherited Members UidAttribute.AllowFutureTime ValidationAttributeBase.GetErrorMessage(in ValidationContext, in string) ValidationAttributeBase.ErrorMessageFormatter ValidationAttribute.FormatErrorMessage(string) ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24CoreValidation.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Parameter)] public class UidExtAttribute : UidAttribute Remarks Constructor Constructors | Edit this page View Source UidExtAttribute(int) UidExt validation attribute Declaration public UidExtAttribute(int requiredId) Parameters Type Name Description int requiredId (Minimum) Required ID Remarks Constructor Properties | Edit this page View Source AllowUid Allow an Uid value to be re-interpreted as UidExt? Declaration public bool AllowUid { get; set; } Property Value Type Description bool | Edit this page View Source MaxRequiredId Maiximum Required ID Declaration public int? MaxRequiredId { get; set; } Property Value Type Description int? | Edit this page View Source RequiredId (Minimum) Required ID Declaration public int RequiredId { get; } Property Value Type Description int Methods | Edit this page View Source IsValid(object?, ValidationContext) Validates the specified value with respect to the current validation attribute. Declaration protected override ValidationResult? IsValid(object? value, ValidationContext validationContext) Parameters Type Name Description object value The value to validate. ValidationContext validationContext The context information about the validation operation. Returns Type Description ValidationResult An instance of the ValidationResult class. Overrides UidAttribute.IsValid(object?, ValidationContext) Exceptions Type Condition InvalidOperationException The current attribute is malformed. NotImplementedException IsValid(object, ValidationContext) has not been implemented by a derived class. Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ValueObjectBase-1.html": {
    "href": "api/wan24.Core.ValueObjectBase-1.html",
    "title": "Class ValueObjectBase<T> | wan24-Core",
    "keywords": "Class ValueObjectBase<T> A base class for a value object Inheritance object ValueObjectBase<T> AutoValueObjectBase<T> Implements IEquatable<T> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public abstract class ValueObjectBase<T> : IEquatable<T> where T : ValueObjectBase<T> Type Parameters Name Description T Final type (should be immutable using private property setters (for serialization purposes)) Constructors | Edit this page View Source ValueObjectBase() Constructor Declaration protected ValueObjectBase() Properties | Edit this page View Source HasHashCode Has the hash code been calculated already? Declaration protected bool HasHashCode { get; } Property Value Type Description bool Methods | Edit this page View Source EqualOperator(in ValueObjectBase<T>?, in ValueObjectBase<T>?) Equal operator Declaration [TargetedPatchingOptOut(\"Tiny method\")] protected static bool EqualOperator(in ValueObjectBase<T>? left, in ValueObjectBase<T>? right) Parameters Type Name Description ValueObjectBase<T> left Left ValueObjectBase<T> right Right Returns Type Description bool If equal | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration [TargetedPatchingOptOut(\"Tiny method\")] public override sealed bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source EqualsObjects() Get the objects for comparing instance values Declaration protected abstract IEnumerable<object?> EqualsObjects() Returns Type Description IEnumerable<object> Objects | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override sealed int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() Operators | Edit this page View Source operator ==(in ValueObjectBase<T>?, in ValueObjectBase<T>?) Equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator ==(in ValueObjectBase<T>? left, in ValueObjectBase<T>? right) Parameters Type Name Description ValueObjectBase<T> left Left ValueObjectBase<T> right Right Returns Type Description bool If equal | Edit this page View Source operator !=(in ValueObjectBase<T>?, in ValueObjectBase<T>?) Not equals Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public static bool operator !=(in ValueObjectBase<T>? left, in ValueObjectBase<T>? right) Parameters Type Name Description ValueObjectBase<T> left Left ValueObjectBase<T> right Right Returns Type Description bool If not equal Implements IEquatable<T> Extension Methods EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.WrapperStream-1.html": {
    "href": "api/wan24.Core.WrapperStream-1.html",
    "title": "Class WrapperStream<T> | wan24-Core",
    "keywords": "Class WrapperStream<T> Stream wrapper (will dispose, if the base stream is a IDisposableObject and has been disposed) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<T> AcidStream<T> BackgroundStream<T> BackupStream<T> CountingStream<T> CutStream<T> ExactStream<T> ExchangeableStream<T> FlushStream<T> ForceSyncStream<T> LimitedLengthStream<T> LimitedStream<T> PartialStream<T> PausableStream<T> SynchronizedStream<T> ThrottledStream<T> TimeoutStream<T> WrapperStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class WrapperStream<T> : StreamBase, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider where T : Stream Type Parameters Name Description T Wrapped stream type Constructors | Edit this page View Source WrapperStream(in bool) Constructor Declaration protected WrapperStream(in bool leaveOpen = false) Parameters Type Name Description bool leaveOpen Leave the base stream open when disposing? | Edit this page View Source WrapperStream(in T, in bool) Constructor Declaration public WrapperStream(in T baseStream, in bool leaveOpen = false) Parameters Type Name Description T baseStream Base stream bool leaveOpen Leave the base stream open when disposing? Fields | Edit this page View Source UseBaseStream Use the BaseStream as target stream? Declaration protected bool UseBaseStream Field Value Type Description bool | Edit this page View Source UseOriginalBeginRead Use the original BeginRead(byte[], int, int, AsyncCallback, object) method? Declaration protected bool UseOriginalBeginRead Field Value Type Description bool | Edit this page View Source UseOriginalBeginWrite Use the original BeginWrite(byte[], int, int, AsyncCallback, object) method? Declaration protected bool UseOriginalBeginWrite Field Value Type Description bool | Edit this page View Source UseOriginalByteIO Use the original ReadByte() and WriteByte(byte) methods? Declaration protected bool UseOriginalByteIO Field Value Type Description bool | Edit this page View Source UseOriginalCopyTo Use the original CopyTo(Stream) method? Declaration protected bool UseOriginalCopyTo Field Value Type Description bool | Edit this page View Source _BaseStream Base stream Declaration protected T _BaseStream Field Value Type Description T | Edit this page View Source _LeaveOpen Leave the base stream open when disposing? Declaration protected bool _LeaveOpen Field Value Type Description bool Properties | Edit this page View Source BaseStream Declaration public T BaseStream { get; set; } Property Value Type Description T | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides Stream.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides Stream.CanSeek | Edit this page View Source CanTimeout Gets a value that determines whether the current stream can time out. Declaration public override bool CanTimeout { get; } Property Value Type Description bool A value that determines whether the current stream can time out. Overrides Stream.CanTimeout | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides Stream.CanWrite | Edit this page View Source LeaveOpen Leave the base stream open when disposing? Declaration public virtual bool LeaveOpen { get; set; } Property Value Type Description bool | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides Stream.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides Stream.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source ReadTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out. Declaration public override int ReadTimeout { get; set; } Property Value Type Description int A value, in milliseconds, that determines how long the stream will attempt to read before timing out. Overrides Stream.ReadTimeout Exceptions Type Condition InvalidOperationException The ReadTimeout method always throws an InvalidOperationException. | Edit this page View Source State Status information Declaration public virtual IEnumerable<Status> State { get; } Property Value Type Description IEnumerable<Status> | Edit this page View Source Target Target stream for higher level operations Declaration protected virtual Stream Target { get; } Property Value Type Description Stream | Edit this page View Source WriteTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out. Declaration public override int WriteTimeout { get; set; } Property Value Type Description int A value, in milliseconds, that determines how long the stream will attempt to write before timing out. Overrides Stream.WriteTimeout Exceptions Type Condition InvalidOperationException The WriteTimeout method always throws an InvalidOperationException. Methods | Edit this page View Source BaseBeginRead(in byte[], in int, in int, in AsyncCallback?, object?) Begin read Declaration protected IAsyncResult BaseBeginRead(in byte[] buffer, in int offset, in int count, in AsyncCallback? callback, object? state) Parameters Type Name Description byte[] buffer Buffer int offset Offset int count Count AsyncCallback callback Callback object state State Returns Type Description IAsyncResult Result | Edit this page View Source BaseBeginWrite(in byte[], in int, in int, in AsyncCallback?, in object?) Begin write Declaration protected IAsyncResult BaseBeginWrite(in byte[] buffer, in int offset, in int count, in AsyncCallback? callback, in object? state) Parameters Type Name Description byte[] buffer Buffer int offset Offset int count Count AsyncCallback callback Callback object state State Returns Type Description IAsyncResult Result | Edit this page View Source BaseCopyTo(in Stream, in int) Copy to another stream Declaration protected void BaseCopyTo(in Stream destination, in int bufferSize) Parameters Type Name Description Stream destination Target int bufferSize Buffer size in bytes | Edit this page View Source BaseCopyToAsync(in Stream, in int, in CancellationToken) Copy to another stream Declaration protected Task BaseCopyToAsync(in Stream destination, in int bufferSize, in CancellationToken cancellationToken) Parameters Type Name Description Stream destination Target int bufferSize Buffer size in bytes CancellationToken cancellationToken Cancellation token Returns Type Description Task | Edit this page View Source BaseEndRead(in IAsyncResult) End read Declaration protected int BaseEndRead(in IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult Result Returns Type Description int Number of bytes red | Edit this page View Source BaseEndWrite(in IAsyncResult) End write Declaration protected void BaseEndWrite(in IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult Result | Edit this page View Source BeginRead(byte[], int, int, AsyncCallback?, object?) Begins an asynchronous read operation. (Consider using ReadAsync(byte[], int, int) instead.) Declaration public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback? callback, object? state) Parameters Type Name Description byte[] buffer The buffer to read the data into. int offset The byte offset in buffer at which to begin writing data read from the stream. int count The maximum number of bytes to read. AsyncCallback callback An optional asynchronous callback, to be called when the read is complete. object state A user-provided object that distinguishes this particular asynchronous read request from other requests. Returns Type Description IAsyncResult An IAsyncResult that represents the asynchronous read, which could still be pending. Overrides Stream.BeginRead(byte[], int, int, AsyncCallback, object) Exceptions Type Condition IOException Attempted an asynchronous read past the end of the stream, or a disk error occurs. ArgumentException One or more of the arguments is invalid. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException The current Stream implementation does not support the read operation. | Edit this page View Source BeginWrite(byte[], int, int, AsyncCallback?, object?) Begins an asynchronous write operation. (Consider using WriteAsync(byte[], int, int) instead.) Declaration public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback? callback, object? state) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The byte offset in buffer from which to begin writing. int count The maximum number of bytes to write. AsyncCallback callback An optional asynchronous callback, to be called when the write is complete. object state A user-provided object that distinguishes this particular asynchronous write request from other requests. Returns Type Description IAsyncResult An IAsyncResult that represents the asynchronous write, which could still be pending. Overrides Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Exceptions Type Condition IOException Attempted an asynchronous write past the end of the stream, or a disk error occurs. ArgumentException One or more of the arguments is invalid. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException The current Stream implementation does not support the write operation. | Edit this page View Source Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. Declaration public override void Close() Overrides StreamBase.Close() | Edit this page View Source CopyTo(Stream, int) Reads the bytes from the current stream and writes them to another stream, using a specified buffer size. Both streams positions are advanced by the number of bytes copied. Declaration public override void CopyTo(Stream destination, int bufferSize) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size of the buffer. This value must be greater than zero. The default size is 81920. Overrides Stream.CopyTo(Stream, int) Exceptions Type Condition ArgumentNullException destination is null. ArgumentOutOfRangeException bufferSize is negative or zero. NotSupportedException The current stream does not support reading. -or- destination does not support writing. ObjectDisposedException Either the current stream or destination were closed before the CopyTo(Stream) method was called. IOException An I/O error occurred. | Edit this page View Source CopyToAsync(Stream, int, CancellationToken) Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token. Both streams positions are advanced by the number of bytes copied. Declaration public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous copy operation. Overrides Stream.CopyToAsync(Stream, int, CancellationToken) Exceptions Type Condition ArgumentNullException destination is null. ArgumentOutOfRangeException buffersize is negative or zero. ObjectDisposedException Either the current stream or the destination stream is disposed. NotSupportedException The current stream does not support reading, or the destination stream does not support writing. | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides StreamBase.Dispose(bool) | Edit this page View Source DisposeCore() Declaration protected override Task DisposeCore() Returns Type Description Task Overrides StreamBase.DisposeCore() | Edit this page View Source EndRead(IAsyncResult) Waits for the pending asynchronous read to complete. (Consider using ReadAsync(byte[], int, int) instead.) Declaration public override int EndRead(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult The reference to the pending asynchronous request to finish. Returns Type Description int The number of bytes read from the stream, between zero (0) and the number of bytes requested. ReadAsync returns zero (0) only if zero bytes were requested or if no more bytes will be available because it's at the end of the stream; otherwise, read operations do not complete until at least one byte is available. If zero bytes are requested, read operations may complete immediately or may not complete until at least one byte is available (but without consuming any data). Overrides Stream.EndRead(IAsyncResult) Exceptions Type Condition ArgumentNullException asyncResult is null. ArgumentException A handle to the pending read operation is not available. -or- The pending operation does not support reading. InvalidOperationException asyncResult did not originate from a BeginRead(byte[], int, int, AsyncCallback, object) method on the current stream. IOException The stream is closed or an internal error has occurred. | Edit this page View Source EndWrite(IAsyncResult) Ends an asynchronous write operation. (Consider using WriteAsync(byte[], int, int) instead.) Declaration public override void EndWrite(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult A reference to the outstanding asynchronous I/O request. Overrides Stream.EndWrite(IAsyncResult) Exceptions Type Condition ArgumentNullException asyncResult is null. ArgumentException A handle to the pending write operation is not available. -or- The pending operation does not support writing. InvalidOperationException asyncResult did not originate from a BeginWrite(byte[], int, int, AsyncCallback, object) method on the current stream. IOException The stream is closed or an internal error has occurred. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides Stream.FlushAsync(CancellationToken) Exceptions Type Condition ObjectDisposedException The stream has been disposed. | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source HandleBaseStreamDisposed(IDisposableObject, EventArgs) Handle a disposed base stream Declaration protected void HandleBaseStreamDisposed(IDisposableObject sender, EventArgs e) Parameters Type Name Description IDisposableObject sender Sender EventArgs e Event arguments | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides Stream.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides Stream.Read(Span<byte>) | Edit this page View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if count is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. | Edit this page View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the length of the buffer if that many bytes are not currently available, or it can be 0 (zero) if the length of the buffer is 0 or if the end of the stream has been reached. Overrides Stream.ReadAsync(Memory<byte>, CancellationToken) | Edit this page View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description int The unsigned byte cast to an int, or -1 if at the end of the stream. Overrides Stream.ReadByte() Exceptions Type Condition NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides Stream.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source ToString() Returns a string that represents the current object. Declaration [TargetedPatchingOptOut(\"Just a method adapter\")] public override string? ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides Stream.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides Stream.Write(ReadOnlySpan<byte>) | Edit this page View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. | Edit this page View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) | Edit this page View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides Stream.WriteByte(byte) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. Operators | Edit this page View Source implicit operator bool(WrapperStream<T>) Cast as open status Declaration public static implicit operator bool(WrapperStream<T> wrapperStream) Parameters Type Name Description WrapperStream<T> wrapperStream Wrapper stream Returns Type Description bool | Edit this page View Source implicit operator long(WrapperStream<T>) Cast as length Declaration public static implicit operator long(WrapperStream<T> wrapperStream) Parameters Type Name Description WrapperStream<T> wrapperStream Wrapper stream Returns Type Description long | Edit this page View Source implicit operator T(WrapperStream<T>) Cast as base stream Declaration public static implicit operator T(WrapperStream<T> wrapperStream) Parameters Type Name Description WrapperStream<T> wrapperStream Wrapper stream Returns Type Description T Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.WrapperStream.html": {
    "href": "api/wan24.Core.WrapperStream.html",
    "title": "Class WrapperStream | wan24-Core",
    "keywords": "Class WrapperStream Stream wrapper (will dispose, if the base stream is a IDisposableObject and has been disposed) Inheritance object MarshalByRefObject Stream StreamBase WrapperStream<Stream> WrapperStream ForceAsyncStream<T> PooledTempStream ProcessStream Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Inherited Members WrapperStream<Stream>._BaseStream WrapperStream<Stream>._LeaveOpen WrapperStream<Stream>.UseOriginalByteIO WrapperStream<Stream>.UseOriginalCopyTo WrapperStream<Stream>.UseOriginalBeginRead WrapperStream<Stream>.UseOriginalBeginWrite WrapperStream<Stream>.UseBaseStream WrapperStream<Stream>.Target WrapperStream<Stream>.BaseStream WrapperStream<Stream>.LeaveOpen WrapperStream<Stream>.State WrapperStream<Stream>.CanRead WrapperStream<Stream>.CanSeek WrapperStream<Stream>.CanWrite WrapperStream<Stream>.CanTimeout WrapperStream<Stream>.Length WrapperStream<Stream>.Position WrapperStream<Stream>.ReadTimeout WrapperStream<Stream>.WriteTimeout WrapperStream<Stream>.Flush() WrapperStream<Stream>.FlushAsync(CancellationToken) WrapperStream<Stream>.Read(byte[], int, int) WrapperStream<Stream>.Read(Span<byte>) WrapperStream<Stream>.ReadByte() WrapperStream<Stream>.ReadAsync(byte[], int, int, CancellationToken) WrapperStream<Stream>.ReadAsync(Memory<byte>, CancellationToken) WrapperStream<Stream>.Seek(long, SeekOrigin) WrapperStream<Stream>.SetLength(long) WrapperStream<Stream>.Write(byte[], int, int) WrapperStream<Stream>.Write(ReadOnlySpan<byte>) WrapperStream<Stream>.WriteByte(byte) WrapperStream<Stream>.WriteAsync(byte[], int, int, CancellationToken) WrapperStream<Stream>.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) WrapperStream<Stream>.CopyTo(Stream, int) WrapperStream<Stream>.CopyToAsync(Stream, int, CancellationToken) WrapperStream<Stream>.BeginRead(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndRead(IAsyncResult) WrapperStream<Stream>.BeginWrite(byte[], int, int, AsyncCallback, object) WrapperStream<Stream>.EndWrite(IAsyncResult) WrapperStream<Stream>.Equals(object) WrapperStream<Stream>.GetHashCode() WrapperStream<Stream>.ToString() WrapperStream<Stream>.Close() WrapperStream<Stream>.Dispose(bool) WrapperStream<Stream>.DisposeCore() WrapperStream<Stream>.BaseCopyTo(in Stream, in int) WrapperStream<Stream>.BaseCopyToAsync(in Stream, in int, in CancellationToken) WrapperStream<Stream>.BaseBeginRead(in byte[], in int, in int, in AsyncCallback, object) WrapperStream<Stream>.BaseEndRead(in IAsyncResult) WrapperStream<Stream>.BaseBeginWrite(in byte[], in int, in int, in AsyncCallback, in object) WrapperStream<Stream>.BaseEndWrite(in IAsyncResult) WrapperStream<Stream>.HandleBaseStreamDisposed(IDisposableObject, EventArgs) StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.DisposeAsync() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class WrapperStream : WrapperStream<Stream>, IStreamWrapper, IStream, IDisposableObject, IDisposable, IAsyncDisposable, IStatusProvider Constructors | Edit this page View Source WrapperStream(in bool) Constructor Declaration protected WrapperStream(in bool leaveOpen = false) Parameters Type Name Description bool leaveOpen Leave the base stream open when disposing? | Edit this page View Source WrapperStream(in Stream, in bool) Constructor Declaration public WrapperStream(in Stream baseStream, in bool leaveOpen = false) Parameters Type Name Description Stream baseStream Base stream bool leaveOpen Leave the base stream open when disposing? Implements IStreamWrapper IStream IDisposableObject IDisposable IAsyncDisposable IStatusProvider Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.ZeroStream.html": {
    "href": "api/wan24.Core.ZeroStream.html",
    "title": "Class ZeroStream | wan24-Core",
    "keywords": "Class ZeroStream A zero stream, which will read zero bytes and write nothing Inheritance object MarshalByRefObject Stream StreamBase ZeroStream Implements IStream IDisposableObject IDisposable IAsyncDisposable Inherited Members StreamBase.SyncObject StreamBase.Name StreamBase.IsClosed StreamBase.IsDisposed StreamBase.IsDisposing StreamBase.Close() StreamBase.DisposeAsync() StreamBase.Dispose(bool) StreamBase.DisposeCore() StreamBase.DoClose() StreamBase.EnsureUndisposed(in bool, in bool) StreamBase.IfUndisposed<T>(in T, in bool) StreamBase.IfUndisposed(in Action, in bool) StreamBase.IfUndisposed<T>(in Func<T>, in bool) StreamBase.IfUndisposedNullable<T>(in Func<T>, in bool) StreamBase.EnsureSeekable() StreamBase.EnsureWritable() StreamBase.EnsureReadable() StreamBase.OnDisposing StreamBase.OnDisposed Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.Core Assembly: wan24Core.dll Syntax public class ZeroStream : StreamBase, IStream, IDisposableObject, IDisposable, IAsyncDisposable Constructors | Edit this page View Source ZeroStream() Constructor Declaration public ZeroStream() Fields | Edit this page View Source _Length Length in bytes Declaration protected long _Length Field Value Type Description long | Edit this page View Source _Position Position byte offset Declaration protected long _Position Field Value Type Description long Properties | Edit this page View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool true if the stream supports reading; otherwise, false. Overrides Stream.CanRead | Edit this page View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description bool true if the stream supports seeking; otherwise, false. Overrides Stream.CanSeek | Edit this page View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool true if the stream supports writing; otherwise, false. Overrides Stream.CanWrite | Edit this page View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long A long value representing the length of the stream in bytes. Overrides Stream.Length Exceptions Type Condition NotSupportedException A class derived from Stream does not support seeking and the length is unknown. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long The current position within the stream. Overrides Stream.Position Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Methods | Edit this page View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() Exceptions Type Condition IOException An I/O error occurs. | Edit this page View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Overrides Stream.Read(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the size of the buffer if that many bytes are not currently available, or zero (0) if the buffer's length is zero or the end of the stream has been reached. Overrides Stream.Read(Span<byte>) | Edit this page View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides Stream.SetLength(long) Exceptions Type Condition IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. | Edit this page View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides Stream.Write(byte[], int, int) Exceptions Type Condition ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. | Edit this page View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides Stream.Write(ReadOnlySpan<byte>) Implements IStream IDisposableObject IDisposable IAsyncDisposable Extension Methods AsyncDisposableExtensions.DynamicContext(IAsyncDisposable) AsyncDisposableExtensions.FixedContext(IAsyncDisposable) StreamExtensions.Chunk(Stream, in long) StreamExtensions.CopyExactlyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyExactlyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.CopyPartialTo(Stream, in Stream, long, int?, ProcessingProgress?) StreamExtensions.CopyPartialToAsync(Stream, Stream, long, int?, ProcessingProgress?, CancellationToken) StreamExtensions.GenericCopyTo(Stream, in Stream, in int, ProcessingProgress?) StreamExtensions.GenericCopyToAsync(Stream, Stream, int, ProcessingProgress?, CancellationToken) StreamExtensions.GenericReadByte(Stream) StreamExtensions.GenericSeek(Stream, in long, in SeekOrigin) StreamExtensions.GenericWriteByte(Stream, in byte) StreamExtensions.GetRemainingBytes(Stream) StreamExtensions.WriteRandom(Stream, in long) StreamExtensions.WriteRandomAsync(Stream, long, CancellationToken) StreamExtensions.WriteZero(Stream, in long) StreamExtensions.WriteZeroAsync(Stream, long, CancellationToken) EnumExtensions.IsValidEnumerationValue(object) JsonExtensions.ToJson(object, in bool) ObjectExtensions.ConvertType<T>(object) ObjectExtensions.In(object, params object?[]) AsyncHelper.TryDisposeAsync<T>(T) AsyncHelper.TryDispose<T>(T) ObjectExtensions.Do<tObject, tReturn>(tObject, in Func<tObject, tReturn>) ObjectExtensions.EnsureValidState<T>(T, in bool, in string?) ObjectExtensions.GetDisplayText<T>(T) ObjectExtensions.In<T>(T, in IEnumerable<T?>) ObjectExtensions.ToDictionary<T>(T, in int) ObjectExtensions.ToOrderedDictionary<T>(T, in int)"
  },
  "api/wan24.Core.html": {
    "href": "api/wan24.Core.html",
    "title": "Namespace wan24.Core | wan24-Core",
    "keywords": "Namespace wan24.Core Classes AcidException Thrown on failed ACID IO exception AcidFileStream ACID file stream AcidStream ACID stream (IO is synchronized) AcidStream<T> ACID stream (IO is synchronized) AcidStream<T>.BackupLengthRecord Length backup record AcidStream<T>.BackupRecordBase Base class for a backup record AcidStream<T>.BackupWriteRecord Write backup record AppConfig App configuration AppConfig.LoggerConfiguration Logger configuration AppConfigAttribute Attribute for a AppConfig property which contains a configuration with an IAppConfig to apply AppConfigBase Base class for an app configuration ArrayExtensions Array extensions ArrayPoolExtensions ArrayPool<T> extensions AsyncDisposableExtensions Asynchronous disposable extensions AsyncDisposableLazyValue<T> Disposable lazy value AsyncEnumerableExtensions Asynchronous enumerable extensions AsyncEvent<tSender, tArgs> Asynchronous event AsyncHelper Asynchronous API helper AsyncObjectEnumerable<T> Asynchronous object enumerable AsyncObjectEnumerator<T> Asynchronous object enumerator AsyncTimer Asynchronous timer AutoValueObjectBase<T> Base class for an automatic value object (uses properties with a public getter for building the objects hash code) BackgroundProcessingStream Background processing stream BackgroundStream Background stream (allows writing using a background service; will copy each chunk for writing; not seek- and readable!) BackgroundStream<T> Background stream (allows writing using a background service; will copy each chunk for writing; not seek- and readable!) BackgroundStream<T>.ErrorEventArgs Arguments for the OnError event BackgroundStream<T>.WriteService Write service BackupStream Backup stream (writes red data into another stream) BackupStream<T> Backup stream (writes red data into another stream) BiDirectionalStream Bi-directional stream BiDirectionalStream<tReadable, tWritable> Bi-directional stream Bitmap Bitmap (little endian) BitwiseExtensions Bitwise extensions BlockingBufferStream Blocking buffer stream (reading blocks until (all, if aggressive) data is available, writing until the buffer was red completely; reading/writing is synchronized) BlockingInstancePool<T> Blocking instance pool BlockingObjectPool<T> Disposable blocking object pool (disposes items when disposing, if IDisposable/IAsyncDisposable) BlockingStreamPool<T> Blocking stream pool Bootstrap Bootstrapping BootstrapperAttribute Attribute for static methods which need to be called for bootstrapping the app BootstrapperException Thrown on bootstrapping error (bootstrapper called twice, or recursive) BoundCancellationTokenSource Bound cancellation token source (canceled when a parent token was canceled) ByteEncoding Byte encoding BytesExtensions Bytes extensions CancellationOnDispose CancellationOnDispose cancels a CancellationTokenSource when an object is disposing (or a CancellationToken was canceled) CancellationTokenExtensions CancellationToken extensions Cancellations Cancellations combines multiple CancellationToken into one CategoryLogger Category logger prepends a category before the written message ChangeCallback Change callback ChangeCallbackExtensions Change callback extensions ChangeToken Change token ChangeTokenCollection<T> Change token collection (don't forget to dispose!) ChangeTokenDictionary<tKey, tValue> Change token dictionary (observes values; don't forget to dispose!) ChangeToken<T> Change token CharsExtensions char array extensions ChecksumExtensions Checksum extensions ChecksumTransform Checksum hash algorithm ChunkedFileStream Chunked file stream helper ChunkedStream Chunked stream CliArguments CLI arguments (an argument key for a following value starts with -- (double dashes), a flag argument with - (single dash)) CliConfig CLI argument runtime configuration CliConfigAttribute Attribute for a CLI argument configurable public static property CollectionExtensions Collection extensions CombinedStream Combined streams CombinedTranslationTerms Combines multiple translations ConcurrentChangeTokenDictionary<tKey, tValue> Concurrent change token dictionary (observes values; don't forget to dispose!) ConfigEventArgs Configuration event arguments ConfigOption<tValue, tConfig> Configuration option ConsoleLogger Console logger CounterEvent Counter event CounterEvent.CountEventArgs Arguments for the OnCount event CountingStream Counting stream counts red/written bytes CountingStream<T> Counting stream counts red/written bytes CutStream Cut stream (cuts the base stream at its position) CutStream<T> Cut stream (cuts the base stream at its position) DateTimeExtensions DateTime extensions DebugLogger Debug logger Delay Delay DelayService Delay service DelayTable Delay table DelegateExtensions Delegate extensions DiHelper DI helper DiHelper.DiServiceProviderFactory DI helper service provider factory DiHelperExtensions Dependency injection helper extensions DictionaryExtensions Dictionary extensions DisplayTextAttribute Display text DisposableAdapter Disposable adapter DisposableBase Base class for a disposable type DisposableBase<T> Base class for a disposable type DisposableChangeToken Disposable change token DisposableChangeToken<T> Disposable change token DisposableExtensions Disposable extensions DisposableLazyValue<T> Disposable lazy value DisposableLoggerBase Base class for a disposable logger DisposableObjectPool<T> Disposable object pool (disposes trashed items) DisposableRecordBase Base class for a disposable record type DisposableThreadSafeValue<T> Disposable thread-safe value DisposableWrapper<T> Disposable wrapper DisposeAttribute Attribute for fields or properties to dispose automatic when disposing DisposingAsyncEnumerator<T> Disposing asynchronous enumerator (disposes tagged objects when disposing) ENV Environment information EmailAttachment Email attachment EmailBase Base class for an email EmailExtensions IEmail (and IEmailTemplate) extensions EmailHelper Email helper EmailLogger Email logger EmailTemplate Email template EmailTemplateBase Base class for an email template EmailTemplateBase<T> Base class for an email template EndPointAttribute Endpoint validation attribute (for validating string as IPEndPoint or HostEndPoint) EnumExtensions Enumeration extensions EnumInfo<T> Enumeration information EnumerableExtensions Enumerable extensions EnumerableStream Enumerable source stream EnumerationBase Base class for an enumeration EnumerationBase<T> Base class for an enumeration EnvironmentService Environment metrics measuring service EquatableArray Equatable array helper EquatableArray<T>.EqualityComparer Equality comparer ErrorHandling Error handling ErrorInfo Error information for ErrorHandling EventThrottle Event throttle (allow to raise once within N ms) EventWorkerBase Base class for an event worker ExactStream Exact stream (tries to read exactly the given number of bytes until no bytes were red) ExactStream<T> Exact stream (tries to read exactly the given number of bytes until no bytes were red) ExchangeableStream Exchangeable stream ExchangeableStream<T> Exchangeable stream ExcludeValueAttribute Attribute for AutoValueObjectBase<T> properties to exclude from the objects hash code calculation FileLogger File logger (don't forget to dispose an instance!) FileLogger.LogQueueWorker Log queue worker FileSystemEvents File system events FileSystemEvents.FileSystemEventThrottle Event throttle FileSystemEvents.FileSystemEventsArgs File system events OnEvents arguments FlushStream Flush stream (writes to a buffer and requires a flush to write the buffer to the base stream) FlushStream<T> Flush stream (writes to a buffer and requires a flush to write the buffer to the base stream) ForceAsyncStream Forces all operations to be executed asynchronous ForceAsyncStream<T> Forces all operations to be executed asynchronous ForceSyncStream Forces all operations to be performed synchronous ForceSyncStream<T> Forces all operations to be performed synchronous FsHelper Filesystem helper GenericHelper Generic helper GenericOptionalDisposer<T> Generic optional disposer GenericTranslationTerms<T> Generic translation terms GenericTranslation<T> Generic translation GlobalLock Global lock using Mutex (requires to be disposed by the same thread that created the mutex!) GlobalLockAsync Global lock using Mutex for use with an asynchronous context (does have to reserve a thread during the mutex exists :( but it's possible to inject actions) GroupAttribute Group name attribute HostEndPointAttribute Host endpoint validation attribute (for validating string or HostEndPoint value properties) HostedServiceBase Base class for a hosted service HostedServiceCollection Hosted service collection HubStream Hub stream (write-only, all writing operations go to all target streams - in parallel, when using asynchronous methods; length/position targets the first stream per default) InstancePool<T> Instance pool IpSubNetAttribute IP sub-net validation attribute (for validating string or IpSubNet value properties) ItemQueueWorkerBase<T> Base class for an item queue worker ItemRgbAttribute Item RGB 24 bit integer validation attribute JsonExtensions JSON extensions JsonHelper JSON helper LazyValue<T> Lazy value LimitedLengthStream Limited length stream wrapper LimitedLengthStream<T> Limited length stream wrapper LimitedStream Limited stream limits reading/writing/seeking (which can't be overridden from an inheriting or wrapped stream) LimitedStream<T> Limited stream limits reading/writing/seeking (which can't be overridden from an inheriting or wrapped stream) LoadTypeEventArgs Type loader event arguments LogLevelExtensions LogLevel extensions Logger Logger (adopts to Logging - NEVER use this as Logger!) LoggerBase Base class for a logger LoggerExtensions ILogger extensions LoggerProvider Logger provider Logging Logging MemoryPoolStream Memory pool stream (stores in arrays from an ArrayPool<T>) MultiFileSystemEvents Multi file system events MultiFileSystemEvents.MultiFileSystemEventThrottle Event throttle MultiFileSystemEvents.MultiFileSystemEventsArgs File system events OnEvents arguments MultiProcessThrottle Multiple combined process throttles (will balance a total limit to all hosted throttles; all throttles need to use the same time restriction for this) MultiThrottledStream Multiple combined throttled streams (will balance a total read/write limit to all hosted streams, based on quotas; all streams need to use the same time restrictions for this) NetworkHelper Network helper NumberExtensions Number extensions ObjectExtensions Object extensions ObjectHelper Object helper ObjectLock Object lock ObjectLockManager<T> Object lock manager ObjectLockTable Object locks table ObjectPool<T> Object pool ObjectSerializer Object serialization helper ObjectStorageBase<tKey, tObj> Base class for an object storage ObjectStorageBase<tKey, tObj>.StoredObject Stored object OptionalDisposeAction Optional dispose action OptionalDisposer Optional disposer OrderedDictionary<tKey, tValue> Ordered dictionary OrderedDictionary<tKey, tValue>.DictionaryEnumerator Dictionary enumerator OverridableConfig<tFinal> Base class for an overridable configuration PackageInfo Package informations (3rd party package licenses helper (consumes the JSON output of dotnet-project-licenses -i . -j -t -o licenses.json (https://github.com/tomchavakis/nuget-license)) PackageInfo.RepositoryInfo Repository info ParallelAsync Asynchronous parallel execution ParallelItemQueueWorkerBase<T> Base class for a parallel item queue worker ParallelQueueWorker Parallel queue worker ParallelTransaction Parallel transaction ParallelTransaction.ErrorEventArgs Error event arguments ParallelTransaction.RunningActionResult Running action result PartialStream Partial stream PartialStream<T> Partial stream PathMatching Path matching helper (path separator will be normalized to /) PausableStream Pausable stream wrapper (will pause reading/writing) PausableStream<T> Pausable stream wrapper (will pause reading/writing) PluralTranslationTerms Simple dictionary based translation with plural support PoolTable Pool table PooledMemoryStream Pooled memory stream PooledTempFileStream Pooled temporary file stream PooledTempStream Pooled temporary stream (hosts written data in memory first, then switches to a temporary file when exceeding the memory limit) PortKnocking Port knocking helper ProcessExtensions Process extensions ProcessHelper Process helper ProcessStream Process stream (uses STDIN/OUT) ProcessTable Process table ProcessThrottle Process throttle ProcessingInfo Processing information (don't forget to dispose!) ProcessingProgress Processing progress PropertyInfoExt Property information QueueEntry<T> Queue entry QueueWorker Queue worker RandomStream Random stream (uses RandomNumberGenerator for reading random bytes into the given buffers) ReflectionExtensions Reflection extensions RegularExpressions Regular expressions RentedArray<T> Pool rented array (returns the array to the pool, when disposed) RentedObject<T> Rented object (returns the rented object to the pool when disposing) ResetEvent Reset event RetryHelper Retry helper RetryInfo<T> Retry information RgbAttribute RGB 24 bit unsigned integer validation attribute RuntimeCountLimitAttribute Runtime count limitation attribute ScopedDiHelper Scoped DI helper (will dispose created objects, if possible; don't forget to dispose!) SecureArrayBase<T> Base class for a secure array SecureByteArray Secure byte array (will delete its contents when disposing) SecureCharArray Secure char array (will delete its contents when disposing) SemaphoreSync Semaphore synchronization SensitiveDataAttribute Attribute for sensitive data ServiceWorkerTable Service worker table Settings Settings Shutdown App shutdown Shutdown.ShutdownEventArgs OnShutdown event arguments SocketExtensions Socket extensions StackInfoException Thrown for providing stack information StackInfo<T> Current stack information Statistics Statistics (provides the moving average) StatisticsService Statistics service Status Status StatusProviderTable IStatusProvider table StoredObject<tKey, tObj> Stored object StreamBase Base class for streams StreamExtensions Stream extensions StreamPool<T> Stream pool StreamProxy Stream proxy (will copy data bi-directional between two streams; if one channel is done, the other channel will be canceled) StringExtensions String extensions StringLocalizerFactory IStringLocalizerFactory (uses Current) StringParserContext String parser context information StringParserOptions String parser options StringValueConverter (Display) String to value conversion SynchronizedStream Synchronized stream (synchronizes reading/writing/seeking operations; the base stream should implement each single asynchronous reading/writing method! Any asynchronous reading/writing method which adopts or calls to another asynchronous reading/writing or any seeking method will cause a dead-lock!) SynchronizedStream<T> Synchronized stream (synchronizes reading/writing/seeking operations; the base stream should implement each single asynchronous reading/writing method! Any asynchronous reading/writing method which adopts or calls to another asynchronous reading/writing or any seeking method will cause a dead-lock!) SystemdServiceFile systemd service file helper TaskExtensions Task extensions ThreadSafeValue<T> Thread-safe value ThrottledStream Throttled stream ThrottledStream<T> Throttled stream TimeSpanHelper TimeSpan helper TimedHostedServiceBase Base class for a timed hosted service Timeout Timeout (when comparing instances, and not the timeout time, you should use the Equals(object?) method!) TimeoutStream Timeout stream (async reading/writing methods can timeout) TimeoutStream<T> Timeout stream (async reading/writing methods can timeout) TimeoutValue<T> Timeout value (disposable value will be disposed on timeout or when disposing) TimerTable Timer table Tracer Tracer (could be used to trace information and flush them to the Logging in case of an error) Transaction Transaction Translation Translation TranslationHelper Translation helper (use using static wan24.Core.TranslationHelper.Ext; for getting _ as translation method, which will help a keyword extractor to find translation texts in your source code) TranslationHelper.Ext Extended helper (NOTE: using these will disable the discard operator _ of C#) TranslationTerms Simple dictionary based translation TypeCache Type cache TypeHelper Type helper UdpBroadcast<T> UDP broadcast helper (broadcaster and listener) UidAttribute Uid validation attribute UidExtAttribute UidExt validation attribute ValueObjectBase<T> A base class for a value object WrapperStream Stream wrapper (will dispose, if the base stream is a IDisposableObject and has been disposed) WrapperStream<T> Stream wrapper (will dispose, if the base stream is a IDisposableObject and has been disposed) ZeroStream A zero stream, which will read zero bytes and write nothing Structs CancellationAwaiter Cancellation awaiter ChangeToken<T>.DummySubscription Dummy object notification subscription EncodedBytes Encoded bytes structure EquatableArray<T> Equatable array (validates sequence validity, not object references) HostEndPoint Host endpoint Hsb HSB IpSubNet IP sub-net IpSubNets Read-only IP sub-net list PinnedArrayRef<T> Pinned array (not thread-safe) PinnedArray<T> Pinned array QueueEntryStateChange State change RentedArrayRefStruct<T> Pool rented array (returns the array to the pool, when disposed) RentedArrayStructSimple<T> Pool rented array (returns the array to the pool, when disposed; not thread-safe) RentedArrayStruct<T> Pool rented array (returns the array to the pool, when disposed) RentedObjectRefStruct<T> Rented object (returns the rented object to the pool when disposing) RentedObjectStructSimple<T> Rented object (returns the rented object to the pool when disposing; not thread-safe) RentedObjectStruct<T> Rented object (returns the rented object to the pool when disposing) Rgb RGB color value RgbA RGB with alpha SecureByteArrayRefStruct Secure byte array (will delete its contents when disposing; not thread-safe) SecureByteArrayStruct Secure byte array (will delete its contents when disposing) SecureByteArrayStructSimple Secure byte array (will delete its contents when disposing; not thread-safe) SecureCharArrayRefStruct Secure char array (will delete its contents when disposing; not thread-safe) SecureCharArrayStruct Secure char array (will delete its contents when disposing) SecureCharArrayStructSimple Secure char array (will delete its contents when disposing; not thread-safe) SemaphoreSyncContext Semaphore synchronization context (should be consumed within a method, not giving the structure away as a parameter, nor returning it to somewhere!) Tracer.Entry Entry TryAsyncResult<T> Result of an asynchronous try-action Uid Unique ID UidExt Unique ID with an ID extension Interfaces IAppConfig Interface for an app configuration IArray<T> Interface for an array IAsyncEvent<tSender, tArgs> Asynchronous event interface IAsyncKeyedServiceProvider Interface for an asynchronous keyed service provider IAsyncObjectPool<T> Interface for an object pool which supports asynchronous renting / returning IAsyncServiceProvider Interface for an asynchronous service provider IConfigOption Interface for a configuration option IDisposableObject Interface for a disposable object IEmail Interface for an email IEmailAttachment Interface for an email attachment IEmailTemplate Interface for an email template IEnumInfo Interface for an enumeration information object IEnumInfo<T> Interface for an enumeration information object IEnumeration Interface for an enumeration IEventThrottle Interface for an event throttle IGlobalLock Interface for a global lock IInstancePool Interface for an instance pool IInstancePool<T> Interface for an instance pool IItemQueueWorker<T> Interface for an item queue worker IMta Interface for a MTA IMtaConnection Interface for a MTA connection IMtaSettings Interface for MTA settings IObjectKey Interface for objects which provide an object key IObjectLockManager Interface for an object lock manager IObjectPool Interface for an object pool IObjectPoolItem Interface for an object pool item IObjectPool<T> Interface for an object pool IObjectStorage Interface for an object storage IObjectStorage<tKey, tObj> Interface for an object storage IOrderedDictionary<tKey, tValue> Interface for an ordered dictionary IOverridableConfig Interface for an overridable configuration IParallelQueueWorker Interface for a parallel queue worker IPool Interface for a pool IProcessingInfo Interface for a processing information IQueueEntry Interface for a queue entry IQueueWorker Interface for a queue worker IRentedArray<T> Interface for a rented array IRentedObject<T> Interface for a rented object ISecureArray<T> Interface for a secure array IServiceWorker Interface for a service worker object IServiceWorkerStatus Interface for a service worker which provides status information IStackInfo Interface for a stack information IStatusProvider Interface for a status provider IStoredObject<T> Interface for a stored object IStream Interface for a stream IStreamThrottle Interface for a stream throttle IStreamWrapper Interface for a stream wrapper IStringValueConverter Interface for a type which supports display string/value conversion IStringValueConverter<T> Interface for a type which supports display string/value conversion IThrottledStream Interface for a throttled stream ITimer Interface for a timer object ITranslationTerms Interface for a translation ITryAsyncResult Interface for a TryAsyncResult<T> IWillDispose Interface for a disposable object which will dispose foreign disposables when disposing Enums AcidStream<T>.IoTypes IO types ByteEncoding.AvxCmd AVX command sets FileSystemEventTypes File system event type flags HostedServiceTimers Hosted service timer types IpNetworkKind IP network kind enumeration ObjectSerializer.Serializer Serializer enumeration QueueEntryStates Queue entry states StatisticsValueModes Statistics value modes Delegates AcidStream<T>.AcidStreamEvent_Delegate Delegate for an ACID stream event handler AsyncTimer.Elapsed_Delegate Delegate for an elapsed handler BackgroundProcessingStream.Error_Delegate Delegate for an OnError event handler BackgroundStream<T>.Error_Delegate Delegate for an OnError event handler BlockingBufferStream.Event_Delegate Delegate for an event handler Bootstrap.Bootstrap_Delegate Delegate for the OnBootstrap event BytesExtensions.Clear_Delegate Delegate for a byte clearing handler ChunkedStream.AsyncDeleteChunk_Delegate Delegate for deleting a chunk ChunkedStream.AsyncStreamFactory_Delegate Delegate for an asynchronous chunk stream factory ChunkedStream.DeleteChunk_Delegate Delegate for deleting a chunk ChunkedStream.StreamFactory_Delegate Delegate for a chunk stream factory CounterEvent.Condition_Delegate Delegate for a condition (CounterEvent instance is locked during the condition is evaluated) CounterEvent.Count_Delegate Delegate for the OnCount event DiHelper.DiAsync_Delegate Asynchronous DI delegate DiHelper.Di_Delegate DI delegate DisposableWrapper<T>.DisposeAsync_Delegate Asynchronous dispose delegate DisposableWrapper<T>.Dispose_Delegate Dispose delegate ErrorHandling.ErrorHandler_Delegate Delegate for an error handler FileSystemEvents.FileSystemEvents_Delegate Delegate for an event hander FsHelper.DeleteFile_Delegate Delete file handler FsHelper.DeleteFolder_Delegate Delete folder handler (needs to delete recursive; files should be deleted already) HostedServiceBase.HostedService_Delegate Delegate for a hosted service event IAsyncEvent<tSender, tArgs>.EventHandlerAsync_Delegate Event handler delegate IAsyncEvent<tSender, tArgs>.EventHandler_Delegate Event handler delegate IConfigOption.Option_Delegate Delegate for option events IDisposableObject.Dispose_Delegate Delegate for the disposing events IInstancePool<T>.InstanceAsync_Delegate Asynchronous instance factory delegate IInstancePool<T>.Instance_Delegate Synchronous instance factory delegate IOverridableConfig.Config_Delegate Delegate for configuration events JsonHelper.Decoder_Delegate Delegate for a JSON decoder JsonHelper.EncoderAsync_Delegate Delegate for a JSON encoder JsonHelper.Encoder_Delegate Delegate for a JSON encoder JsonHelper.StreamDecoderAsync_Delegate Delegate for a JSON decoder JsonHelper.StreamDecoder_Delegate Delegate for a JSON decoder JsonHelper.StreamEncoder_Delegate Delegate for a JSON encoder JsonHelper.StringDecoderAsync_Delegate Delegate for a JSON decoder LoggerProvider.LoggerFactory_Delegate Delegate for a logger factory MultiFileSystemEvents.MultiFileSystemEvents_Delegate Delegate for an event hander ObjectLockManager<T>.Lock_Delegate Delegate for locking events ObjectSerializer.AsyncCustomDeserializer_Delegate Delegate for a custom deserializer ObjectSerializer.AsyncCustomSerializer_Delegate Delegate for a custom serializer ObjectSerializer.CustomDeserializer_Delegate Delegate for a custom deserializer ObjectSerializer.CustomSerializer_Delegate Delegate for a custom serializer OrderedDictionary<tKey, tValue>.OrderedDictionary_Delegate Delegate for an OrderedDictionary<tKey, tValue> event ParallelTransaction.Action_Delegate Delegate for an action ParallelTransaction.Done_Delegate Delegate for an OnDone handler ParallelTransaction.Error_Delegate Delegate for an OnError handler ParallelTransaction.ReturningAction_Delegate Delegate for an action which returns a value ParallelTransaction.Rollback_Delegate Delegate for a rollback action PortKnocking.ClientWebSocketFactory_Delegate Delegate for a WebSocket client factory PortKnocking.RequestMessageFactory_Delegate Delegate for a http request message factory ProcessThrottle.ProcessThrottleEvent_Delegate Delegate for a process throttle event ProcessThrottle.Processor_Delegate Delegate for a processor ProcessingProgress.Progress_Delegate Delegate for progress events QueueEntry<T>.QueueEntry_Delegate Delegate for an event QueueWorker.Task_Delegate Delegate for a task RetryHelper.RetryOnError_Delegate Delegate to decide if to continue with the next try after an error (is being called before the delay) RetryHelper.TryAsync_Delegate Delegate for a try action RetryHelper.TryAsync_Delegate<T> Delegate for a try action RetryHelper.Try_Delegate Delegate for a try action RetryHelper.Try_Delegate<T> Delegate for a try action Shutdown.Shutdown_Delegate Delegate for an OnShutdown event handler Statistics.Value_Delegate Delegate for a value generator StreamProxy.Error_Delegate Delegate for an OnError handler StringExtensions.Parser_Delegate Delegate for a string parser function handler StringValueConverter.StringConverter_Delegate Value to display string converter StringValueConverter.ValueConverter_Delegate Display string to value converter delegate ThreadSafeValue<T>.Action_Delegate Delegate for an action ThreadSafeValue<T>.AsyncAction_Delegate Delegate for an action TimedHostedServiceBase.TimedHostedService_Delegate Delegate for a hosted service event Timeout.Timeout_Delegate Delegate for timeout events Transaction.AsyncRollback_Delegate Delegate for a rollback action Transaction.SyncRollback_Delegate Delegate for a rollback action Translation.LocaleChanged_Delegate Delegate for an OnLocaleChanged event handler TypeHelper.LoadType_Delegate Delegate for the type loader event"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | wan24-Core",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "wan24-Core | wan24-Core",
    "keywords": "wan24-Core This core library contains some .NET extensions and boiler plate avoiding helpers. It's designed as core library for a long running process and optimized for that purpose. The code tries to cache agressive whereever it's possible. Types are designed to be thread-safe, if they're likely to be accessed reading/writing from multiple threads (if it's their nature). However, if it's not sure that a types nature is to manage multithreaded access, performance goes before thread safety. It started as a slender extension method collection and growed up to a larger core utility until today. It's possible that some specialized parts will be splitted into separate libraries in the future, if the core library is getting too big - but the namespace will stay the same. Some key features: Bootstrapping Disposable base class for disposable types, which supports asynchronous disposing Dispose attribute for fields/properties which should be disposed automatic when disposing CancellationOnDispose cancels a cancellation token when an object is being disposed (or another given cancellation token ws canceled) Cancellations combines multiple cancellation tokens into one Type helper (type loading) Secure byte and char array, which clears its contents when disposing Pool rented array as disposable object (which optionally clears its contents when disposing; for byte/char arrays just like the Secure*Array) Asynchronous API helper Asynchronous fluent API helper Byte array extensions Endian conversion Bit-converter (endian-safe) UTF-8/16/32 (little endian) string decoding Clearing Base64 encoding/decoding Fast XOR, AND and OR using intrinsics Slow compare Dictionary extensions Merge with string key prefix Merge a list with the index as key (and an optional key prefix) Char array extensions Clearing Base64 decoding Array helper extensions Offset/length validation Item index finding Contained items finding AsReadOnly extensions Generic cloning extension Array pool extensions Renting a cleared array Enumerable extensions Combine enumerables Chunk enumerables Enumeration classes Reflection extensions Automatic parameter extension when invoking a method (with DI support) Synchronous/asynchronous method invokation Automatic constructor invokation using a given parameter set (with DI support) Nullability detection Get property getter/setter delegates Get cached field/property/method info Cache for field/property/method info and custom attributes Delegate extensions Delegate list invokation (with or without return values, with DI support) Asynchronous delegate list invokation (with or without return values, with DI support) Task extensions Result getting of a generic task Asynchronous task list awaiting Shortcuts for await configurations Shortcuts for starting a function as long running task Shortcuts for starting a function as task with fair execution by the scheduler DI helper Service provider adoption DI object factory delegates Asynchronous DI object factory delegates Enumeration extensions Get enumeration value display string from DisplayTextAttribute or using ToString (fallback) Determine if all, any or which flags are contained in an enumeration value Remove flags of a mixed enumeration value Get only flags of a mixed enumeration value Value validation Number extensions Determine if a type is a number Determine if a number type is unsigned Bit-converter (endian-safe) Determine if a number (or any IComparable) is within a range Numeric bitwise extensions Collection extensions Add a range of items JSON helper Exchangeable JSON encoder/decoder delegates (using System.Text.Json per default) JSON extensions Encode an object Decode from a type Decode a string Object extensions Type conversion Determine if a value is within a list of values String extensions Get UTF-8/16/32 bytes (little endian) Parsing String from/to bytes/bits extensions Determine if string contains only ACSII characters Base64 decoding Generic helper Determine if two generic values are equal Determine if a value is null Determine if a value is default Determine if a value is null or default DateTime extensions Determine if a time is within a range Determine if a time matches a reference time plus/minus an offset Apply an offset to a time base on a reference time TimeSpanHelper Update a timeout Queue worker (for actions and/or items) Parallel queue worker (for actions and/or items) ParallelAsync implementation ForEachAsync with an asynchronous or synchronous input source FilterAsync with an asynchronous or synchronous input source and item filter Filter for synchronous parallel filtering Base class for a hosted worker, which implements the IHostedService interface (timed or permanent running) EventThrottle for throttling event handler calls ProcessThrottle for throttling a processing channel OrderedDictionary<tKey, tValue> is used for working with indexed key/value pairs Timeout will count down and raise an event, if not reset before reaching the timeout ILogger support Logging as global logging helper LoggerBase and DisposableLoggerBase as base classes for a custom logger Logger as ILogger for writing to Logging FileLogger as ILogger for writing to a file ConsoleLogger writes to STDERR DebugLogger writes to the debug console EmailLogger sends an email IChangeToken support using ChangeCallback Hierarchic configuration using OverrideableConfig Cancellation token awaiter ObjectPool for pooling objects (DisposableObjectPool for disposable types), and BlockingObjectPool for a strict pool capacity limit (Blocking)StreamPool, PooledMemoryStream, PooledTempFileStream and PooledTempStream (hosts written data in memory first) ResetEvent for (a)synchronous event waiting LazyValue<T>, DisposableLazyValue<T>, AsyncDisposableLazyValue<T> and TimeoutValue<T> for lazy and timeout value serving ObjectLockManager<T> for asynchronous and awaitable object locking Bitmap for working with bits DisposableWrapper<T> for wrapping any (not disposable?) object with the IDisposable and IAsyncDisposable interface using custom dispose actions during runtime DisposableAdapter for adopting the IDisposableObject interface from a type which can't extend the DisposableBase type Generic object extenions for validating method arguments CLI arguments interpreter Runtime configuration from CLI arguments Fast byte to string and string to byte encoding/decoding (using an URI friendly charset, faster and smaller results than base64 encoding; charset is customizable; encoded data integrity can be validated without decoding; including extensions for numeric type encoding/decoding) Collecting periodical statistical values Streams StreamBase as base class which implements some disposing logic WrapperStream wraps a base stream and provides LeaveOpen PartialStream wraps a part of a base stream (read-only) LengthLimitedStream ensures a maximum stream length (only writing) MemoryPoolStream uses an ArrayPool<byte> for storing written data ThrottledStream throttles reading/writing troughput TimeoutStream can timeout async reading/writing methods BlockingBufferStream for writing to / reading from a buffer blocked HubStream for forwarding writing operations to multiple target streams LimitedStream limits reading/writing/seeking capabilities of a stream ZeroStream reads zero bytes and writes to nowhere CountingStream counts red/written bytes PauseableStream is a stream which can temporary pause reading/writing EnumerableStream streams an enumerable/enumerator CombinedStream combines multiple streams into one stream (read-only) SynchronizedStream synchronizes IO and seeking RandomStream reads random bytes into the given buffers ChunkedStream for reading/writing stream chunks ExchangeableStream wraps an exchangeable base stream BackupStream writes all red data to another stream ProcessStream uses STDIN/OUT of a process AcidStream for ACID stream IO BackgroundStream for fast writing in background FlushStream for writing to a buffer until a call to flush CutStream for cutting a stream from its position ExactStream for reading exactly the number of given bytes, if possible BackgroundProcessingStream for a background stream buffer filling processor ForceAsyncStream forces all IO operations to be performed asynchronous ForceSyncStream forces all IO operations to be performed synchronous Named mutex helper GlobalLock for a synchronous context GlobalLockAsync for an asynchronous context Retry helper which supports timeout, delay and cancellation Asynchronous event Stream extensions Get the number of remaining bytes until the streams end Copy a part of a stream to another stream Generic seek Generic read/write byte Write N zero bytes Write N random bytes Create stream chunks Checksum implementation in ChecksumExtensions and ChecksumTransform Thread synchronization helper (synchronous / asynchronous) SemaphoreSync uses a SemaphoreSlim for thread synchronization SemaphoreSyncContext is a disposable thread synchronization context Networking helper Browsing ethernet adapters filtered Classify LAN, WAN and loopback IP addresses and ethernet adapters IpSubNet implementation for managing IPv4/6 sub-nets (CIDR) Find the next free TCP port for an IP address Centralized error handling Delayed tasks Progress Sensitive data handling Object storage Localization support Email sending abstractions Commonly used regular expressions and global named expression collection Transactions TCP, UDP, WebSocket and http(s) port knocking Observable collections ChangeTokenCollection ChangeTokenDictionary ConcurrentChangeTokenDictionary App JSON configuration Customizable object serialization helper How to get it This library is available as NuGet package \"wan24-Core\". Bootstrapping The Bootstrapper.Async method calls all static methods having the BootstrapperAttribute. In order to be able to find the methods, it's required to add the BootstrapperAttribute to the assembly. You may also ad the BootstrapperAttribute to a type and/or the bootstrapper method, in case the assembly contains multiple of them. In the assembly attribute you need to set ScanClasses and/or ScanMethods to true in order to perform a deep scanning during bootstrapping for performance reasons. The bootstrapper methods may consume parameters which are available from the DI helper. The method may be synchronous or asynchronous. The method can't be defined in a generic class, and it can't be generic itself. [assembly:Bootstrapper(typeof(YourBootstrapper),nameof(YourBootstrapper.BootstrapperMethod))] public static class YourBootstrapper { public static async Task BootstrapperMethod() { // Perform your bootstrapping here } } // Call the bootstrapper somewhere in your apps initialization code await Bootstrap.Async(); The BootstrapperAttribute can be initialized with a numeric priority. The bootstrapper will order the found bootstrapping methods by priority, where the one with the highest number will be executed first (assembly and type priorities count, too). At last there's a assembly location, type and method name sorting. Bootstrapper methods will be executed sequential. If you give a type and a method name to the assembly BootstrapperAttribute, you won't need to add the attribute to the type and the method. During bootstrapping, the cancellation token which was given to the Bootstrap.Async method, can be injected to a bootstrappers method parameters. After that bootstrapping was done, the Bootstrap.AsyncBootstrapper will be called. At last the Bootstrap.OnBootstrap event will be raised. During bootstrapping the Bootstrap.IsBooting property is true. After bootstrapping the Bootstrap.DidBoot property is true. The bootstrapper will load all referenced assemblies. If you load an assembly later, it'll be bootstrapped automatic and added to the TypeHelper singleton instance. Type helper If you use the TypeHelper.AddTypes method, the unknown assemblies of the added types will be added as searchable assemblies automatic. You may attach to the TypeHelper.OnLoadType event for handling requests more dynamic. The TypeHelper.GetType method will try Type.GetType first and fall back to the helper, if no type was found. DI helper In order to make DI (dependency injection) working, you need to set a DiHelper.ServiceProvider and/or add DiHelper.(Async)ObjectFactories The DiHelper.GetDiObjectAsync method will try to resolve the request synchronous, first. But the DiHelper.GetDiObject won't try asynchronous object factories. Created objects will be cached - to avoid that, add the type to the not cached types by using DiHelper.AddNotCachedType. The Instance property returns a generic service provider, which uses the ServiceProvider and the registered object factories. It also implements the IAsyncServiceProvider interface, which extends IServiceProvider. Object factories are as generic as possible. They'll receive the requested object type as an argument and may return different instanced based on the particular request. The registration of an object factory requires to define the object type, which the factory method served, as key. This type can be any type, which can be assigned to a requested type, or a generic type definition to match all generic variants. The hierarchic factory selection works like this: Requested type is the registered factory type Requested type is assignable from the registered factory type Requested type is a generic type, and its generic type definition is assignable from the registered factory type The ScopedDiHelper uses its own object factory collections and service provider and falls back to the DiHelper. Created objects will be disposed, if possible and the ScopedDiHelper is being disposed, and only in case the object wasn't created using the base DiHelper. ScopedDiHelper will also dispose the defined ServiceProvider, if possible. CAUTION: DiHelper and ScopedDiHelper will cache created objects. For this reason you should never dispose a returned object in your code! To replace the default DI of a .NET app: appBuilder.UseServiceProviderFactory(context => new DiHelper.DiServiceProviderFactory(new() { ValidateOnBuild = false, ValidateScopes = context.HostingEnvironment.IsDevelopment() })); Then you can use the DI helper by injection: public async Task YourMethod(IAsyncServiceProvider diHelper) { YourService service = await diHelper.GetServiceAsync(typeof(YourService)); ... } Logging For a global logging, use Logging and set a Logging.Logger - for example the FileLogger: Logging.Logger = await FileLogger.CreateAsync(\"/path/to/file.log\"); Logging.WriteDebug(\"Hello world!\"); If you need an ILogger instance, you can use Logger: anyObject.Logger = new Logger(); The Logger will use Logging and allows to define a minimum log level. WARNING: Never set a Logger instance as Logging.Logger! This will cause an endless loop. Mixed enumeration value A mixed enumeration contains X bits enumeration values, and Y bits flags: [Flags] public enum MixedEnum : int { None = 0, Value1 = 1, Value2 = 2, Value3 = 3, ... Flag1 = 1 << 8, Flag2 = 1 << 9, FLAGS = Flag1 | Flag2 // Required to identify flags } The FLAGS value helps these extension methods to handle flag values: MixedEnum value = MixedEnum.Value1 | MixedEnum.Flag1, valueOnly = value.RemoveFlags(),// == MixedEnum.Value1 flagsOnly = value.OnlyFlags();// == MixedEnum.Flag1 Unsafe code The library uses unsafe code. If you don't want/need that, you can compile the library with the NO_UNSAFE compiler constant to disable any unsafe operation. Remember to unset the unsafe compiler option, too! Disposable base class The DisposableBase implements the IDisposable and IAsyncDisposable interfaces. It provides some helpers and events, and also the DisposeAttribute, which can be applied to fields and properties which you wish to dispose automatic when disposing. When your type derives from the DisposableBase, you'll need to implement the abstract Dispose method: protected override Dispose(bool disposing) { // Your dispose logic here } There are measures to avoid that this method is being called twice. To implement custom asynchronous disposing: protected override async Task DisposeCore() { // Your dispose logic here } In order to make the DisposeAttribute working, you have to call the protected method DisposeAttributes or DisposeAttributesAsync. The IsDisposing property value will be true as soon as the disposing process started, and it will never become false again. The IsDisposed property value will be true as soon as the disposing process did finish. TIP: Use the DisposableBase<T> base type, if you plan to use the DisposeAttribute! This base class will cache the fields/properties once on initialization to get rid of the reflection overhead which DisposableBase requires for this feature. NOTE: The DisposeAttribute can be applied to byte[] and char[], too, which will simply call the Clear extension method on disposing. Another IEnumerable will be enumerated for disposable items (recursing!). Queue worker using QueueWorker worker = new(); await worker.EnqueueAsync((ct) => { // Do any background action here }); The QueueWorker class can be extended as you need it. The ParallelQueueWorker requires a number of threads in the constructor, which defines the degree of parallelism, in which enqueued tasks will be processed. Queue item worker using QueueItemWorker<ItemType> worker = new(); await worker.EnqueueAsync(new ItemType()); The QueueItemWorker<T> class can be extended as you need it. The ParallelItemQueueWorker<T> requires a number of threads in the constructor, which defines the degree of parallelism, in which enqueued items will be processed. ParallelAsync Using the .NET parallel implementation it's not possible to invoke asynchronous item handlers. For this you can use the ParallelAsync.ForEachAsync method, which uses a parallel item queue worker in the background for asynchronous processing. Hosted worker public class YourHostedWorker : HostedWorkerBase { public YourHostedWorker() : base() { } protected override async Task WorkerAsync() { // Perform the service actions here } } The hosted worker implements the IHostedService interface and can be extended as you need it. Timed hosted worker public class YourHostedWorker : TimedHostedWorkerBase { public YourHostedWorker() : base(interval: 500) { } protected override async Task WorkerAsync() { // Perform the service actions here } } This example uses a 500ms timer. Based on the defined timer type, the interval will be processed in different ways: Default: Next worker run is now plus the interval (used by default) Exact: Next worker run is now plus the interval minus the processing duration (used, if the start time of the processing is important) ExactCatchingUp: As Exact, but catching up missing processing runs without delay, if a worker run duration exceeds the interval (used, if the number of worker runs is important) Using the SetTimerAsync method you can change the timer settings at any time. If you give the nextRun parameter, you may set a fixed next run time (which won't effect the given interval, but just force the service to run at a specific time for the next time). NOTE: The nextRun parameter will also force the service to (re)start! By setting the property RunOnce to true, the service will stop after running the worker once. In combination with the SetTimerAsync parameter nextRun you can execute the worker at a specific time once. The hosted worker implements the IHostedService interface and can be extended as you need it. EventThrottle public class YourType : DisposableBase { protected readonly YourEventThrottle EventThrottle; public YourType() : base() => EventThrottle = new(this); // This method will raise the OnEvent public void AnyMethod() { RaiseOnEventThrottled(); } protected override Dispose(bool disposing) => EventThrottle.Dispose(); // Delegate for OnEvent public delegate void YourTypeEvent_Delegate(); // Event to throttle public event YourTypeEvent_Delegate? OnEvent; // Raise the OnEvent using the event throttle protected void RaiseOnEventThrottled() => EventThrottle.Raise(); // Finally let the event handlers process the event protected void RaiseOnEvent() => OnEvent?.Invoke(); // Event throttle implementation public class YourEventThrottle : EventThrottle { // Throttle the event handling down to max. one handling per 300ms public YourEventThrottle(YourType instance) : base(timeout: 300) => Instance = instance; public YourType Instance { get; } protected override HandleEvent(DateTime raised, int raisedCount) { Instance.RaiseOnEvent(); } } } If AnyMethod is being called, the event will be forwarded to the event throttle, which decides to throttle or raise the event. If AnyMethod was called three times within 300ms, the first call will be executed in realtime, while the 2nd and the 3rd call will be sqashed and executed once 300ms after the 1st call was processed. This example assumes you're working with a real event - but you may throttle any event (which may not be a real event) using throttling logic. ProcessThrottle public class YourProcessThrottle : ProcessThrottle { // Throttle to processing one object per second public YourProcessThrottle() : base(limit: 1, timeout: 1000) { } // Processing API using a timeout public async Task<int> ProcessAsync(Memory<bool> items, TimeSpan timeout) => await ProcessAsync(items.Length, (count) => { await Task.Yield(); Span<bool> toProcess = items.Span[..count]; items = items[count..]; // Process toProcess }, timeout); // Processing API using a cancellation token public async Task<int> ProcessAsync(Memory<bool> items, CancellationToken token = default) => await ProcessAsync(items.Length, (count) => { await Task.Yield(); Span<bool> toProcess = items.Span[..count]; items = items[count..]; // Process toProcess }, token); } The example will throttle the processing to a maximum of one object per second. Multiple threads may call ProcessAsync concurrent - processing will be organized thread-safe. The return value of ProcessAsync is the number of objects processed until timeout or canceled. The processing delegate shouldn't care about the timeout or if canceled and just process the given number of objects. NOTE: A usage gap will slide the throttling timer. Example: The timeout was set to 3 objects per 100ms. Now processing goes like this: First processed object on 0ms will activate the throttling timeout Next processed object on 10ms will increase the object throttling counter Next processed object on 110ms will reset the throttling timeout and counter (the usage gap of 100ms does exceed the timeout) Next 2 processed objects on 120ms will activate the throttle Next object will have to wait until the throttle was released The throttle will be released on 210ms, which allows the last object to be processed now In short words: The throttle timer will not reset in an fixed interval, but the interval starts when processing items. Change token Implement by extending (Disposable)ChangeToken (implements IChangeToken and INotifyPropertyChanged): public class YourObservableType : ChangeToken { private string _Value = string.Empty; public YourObservableType() : base() { } public string Value { get => _Value; set => SetNewPropertyValue(ref _Value, value, nameof(Value)); } } The HasChanged setter MAY be used. You can also set the _HasChanged field and call InvokeCallbacks any time later. If the default HasChanged setter was used with true, RaisePropertyChanged will be called without a property name. Instead of the HasChanged setter you can also call SetNewPropertyValue from a property setter. The RaisePropertyChanged and InvokeCallbacks method SHOULD be called each time a property changed (this will be done when calling SetNewPropertyValue also). By extending (Disposable)ChangeToken<T> your final type will also implement IObservable<T>. You may want to use the (Concurrent)ChangeTokenCollection/Dictionary<T> for observing an object list or a (concurrent) key/value dictionary. They implement IObservable<T> INotifyCollectionChanged INotifyPropertyChanged Observed are all IChangeProperty IObservable<T> INotifyPropertyChanged item events. You can also use a type which doesn't implement any of these interfaces - then only the collection itself (item adding/removing) is observed. An instance is pre-configured for use with a ChangeToken. For other objects (which implement IChangeToken and INotifyPropertyChanged) you can modify the IgnoreUnnamedPropertyNotifications (default is true) InvokeCallbacksOnPropertyChange (default is false) settings. The ObserveCollection setting defines, if you'd also like to observe item addings/removals (the collection itself). The default is true. If you set the ObserveItems property to false during the collection object initialization, only the item additions/removals will be observed. Of course you can set both properties to false - in this case the collection won't observe anything. Hierarchic configuration Assume this configuration hierarchy: Level Description 1 Default values 2 User values (can override default values) 3 Administrator values (can override default/user values) In code: public sealed class Config : OverrideableConfig<Config> { public Config() : base() { SubConfig = new(this, new(this));// User values InitProperties(); } private Config(Config parent, Config? sub = null) : base(parent) { if(sub != null) { SubConfig = sub; sub.ParentConfig = this; sub.SubConfig = new(sub);// Administrator values } InitProperties(); } // A configuration value public ConfigOption<string, Config> AnyValue { get; private set; } = null!; private void InitProperties() { AnyValue = ParentConfig == null // The master option has a default value ? new(this, nameof(AnyValue), canBeOverridden: true, \"default\") // No default value for a sub-option : new(this, nameof(AnyValue)); } } Config config = new(), user = config.SubConfig, admin = user.SubConfig; CAUTION: There's no endless-recursion protection for the ParentConfig or the SubConfig properties! Now users are able to override default values, and administrators are able to override default and/or user values: // Still the default value Assert.AreEqual(\"default\", config.AnyValue.FinalValue); // User overrides the default value user.AnyValue.Value = \"user\"; Assert.AreEqual(\"default\", config.AnyValue.Value); Assert.AreEqual(\"user\", config.AnyValue.FinalValue); // Administrator overrides the user value admin.AnyValue.Value = \"admin\"; Assert.AreEqual(\"admin\", config.AnyValue.FinalValue); // User can't override the administrator value (but still store his own value // in case the administrator would unset his value) user.AnyValue.Value = \"test\"; Assert.AreEqual(\"admin\", config.AnyValue.FinalValue); Assert.AreEqual(\"test\", user.AnyValue.Value); NOTE: Setting an option value is thread-safe. It's also possible to flip the hierarchy: Level Description 1 Default values 2 Administrator values (can define user visible and optional not overrideable values) 3 User values (can override overrideable values) Using this hierarchy an administrator could also allow or deny overriding values at any time, for example. The hierarchy depth isn't limited. Object locking The ObjectLockManager<T> helps locking any object during an asynchronous operation: ObjectLock ol = await ObjectLockManager<AnyType>.Shared.LockAsync(anyObjectKey); // A 2nd call to ObjectLockManager<AnyType>.Shared.LockAsync would block until the lock was released await ol.RunTaskAsync(Task.Run(async () => { // Perform the asynchronous operation here })); // ol is disposed already, 'cause the asynchronous operation source task was awaited // The next ObjectLockManager<AnyType>.Shared.LockAsync call will be processed now, if any await ol.Task;// To throw any exception during performing the asynchronous operation If AnyType implements the IObjectKey interface, it can be given to the ObjectLockManager<T> methods as object argument. NOTE: ObjectLock will dispose itself as soon as RunTaskAsync has been called, and the given task was completed. CLI arguments interpreter There a just a few rules: A flag starts with a single dash A key for a value (list) starts with a double dash Keys/values can be quoted using single or double quotes Escape character is the backslash (only applicable in quoted values) A quoted value must be escaped for JSON decoding, a backslash must be double escaped Double quotes in a quoted value must be escaped always Example: \"-flag\" --key 'value1' value2 --key -value3 '--key2' \"value\" For appending the value -value3 to the value list of key, the value needs to be added with another --key key identifier, 'cause it starts with a dash and could be misinterpreted as a flag (which would result in a parser error). A CLI app called with these arguments could interpret them easy using the CliArguments class: CliArguments cliArgs = new(args); Assert.IsTrue(cliArgs[\"flag\"]); Assert.AreEqual(3, cliArgs.All(\"key\").Count); Assert.AreEqual(\"value\", cliArgs.Single(\"key2\")); A -- (double dash) may be interpreted as an empty key name or a flag with the name -, based on if a value, which doesn't start with a dash, is following. Examples: --: - flag -- -: - flag (-- and - are both interpreted as double - flag (double flags will be combined)) -- value: Empty key with the value value -- -key: - and key flags Keyless arguments will be stored in the KeyLessArguments list - example: CliArguments ca = CliArguments.Parse(\"value1 -flag value2 --key value3\"); Assert.AreEqual(2, ca.KeyLessArguments.Count); Assert.AreEqual(\"value1\", ca.KeyLessArguments[0]); Assert.AreEqual(\"value2\", ca.KeyLessArguments[1]); Assert.IsTrue(ca[\"flag\"]); Assert.IsTrue(ca[\"key\", true]); Fast byte <-> string encoding/decoding base64 is supported everywhere, but it's (relative) slow and produces too much overhead, and uses also URI unfriendly characters. In addition it's also not easy to validate base64, or to determine the encoded/decoded value length. To fix all of these problems, the ByteEncoding class implements a fast encoding, which uses only characters 0-9, a-z, A-Z, dash and underscore and produces less overhead than base64. The encoded/decoded value length can be calculated in advance, and it's fast and easy to detect errors in the encoded data without having to decode it, first. // In case you want to use a prepared output buffer int encodedLen = anyByteArray.GetEncodedLength(); // Encoding char[] encoded = anyByteArray.Encode(); // In case you want to use a prepared output buffer int decodedLen = encoded.GetDecodedlength(); // Decoding byte[] decoded = encoded.Decode(); Using extensions numeric values can be en-/decoded on the fly, too. The special EncodeNumberCompact extension methods determine the smallest value matching numeric type before encoding (use DecodeCompactNumber with the original numeric type as generic argument for decoding). NOTE: Encoding an empty array results in an empty string. Encoding 0 results in an empty string, too. Nothing encodes to nothing and decodes to nothing, too. If required, the used encoding character map can be customized. You may use any 64 ASCII characters (0..127) long map with unique items. String parser Using the Parse extension method for a string, you can parse placeholders into a string and modify the output using (customizable) parser functions: Dictionary<string, string> data = new() { {\"name\", \"value\"} }; Assert.AreEqual(\"value\", \"%{name}\".Parse(data)); You may setup the default parser data in StringExtensions.ParserEnvironment. The given parser data will override defaults. You can execute as many parser functions on the output as required, separated using :: %{input:func1:func2(param1,param2,...):func3():...} The first optional segment is always a parser data variable name (if not used, the sequence starts with a : to indicate a function call). A function may or may not have parameters. The result of a function will be provided for the next function. Available functions: Function Syntax Usage sub %{input:sub([offset/length](,[length]))} extracts a sub-string left %{input:left([length])} takes X characters from the left right %{input:right([length])} takes X characters from the right trim %{input:trim} removes white-spaces from the value discard %{input:discard} no parameters, discards the current output escape_html %{input:escape_html} escapes the value for use within HTML escape_json %{input:escape_json} escapes the value for use within double quotes (double quotes will be trimmed from the JSON result!) escape_uri %{input:escape_uri} escapes the value for use within an URI set %{input:set([name])} sets the current output as parser variable with the given name var %{:var([name])} gets a parser data variable value item %{:item([index],[item/name](,[item](,...)))} gets an item from a list (if using a variable name, its value will be splitted using pipe) prepend %{input:prepend([string])} prepends a string append %{input:append([string])} appends a string insert %{input:insert([index],[string])} inserts a string at an index remove %{input:remove([offset/length](,[length]))} removes a part (from the left) concat %{:concat([string],[string](,[string](...))} concatenates strings join %{:join([separator],[string],[string](,...))} joins strings math %{:math([operator],[value1],[value2](,...))} performs math rx %{:rx([group_index]],[name/pattern])} exchanges the parser regular expression and content group index for the next parser operations (the next round) format %{input:format([format])} to format a numeric value str_format %{input:str_format(([value1](,...))} to format the string value insert_item %{input:insert_item([index],[items_name])} to insert an item (items will be splitted by pipe) remove_item %{input:remove_item([index])} to remove an item (items will be splitted by pipe) sort %{input:sort((desc))} to sort items foreach %{input:foreach([name])} to parse a parser data value for each item (will be stored in _item) if %{input:if([name](,[name]))} to parse a parser data value, if the value is 1 (else parse the second given parser data value) split %{input:split(prefix)} to split items by pipe and set them as parser data using the prefix and appending the zero based item index range %{:range([start],[count])} to create a numeric range dummy %{:dummy(...)} does nothing (may be used as comment) Available math operators: Operator Function + Summarize - Substract * Multiply / Divide % Modulo a Average i Minimum x Maximum r Round (2nd value is the number of decimals) f Floor c Ceiling p Y power of X (double conversion will be applied) = Equality (0 is not equal, 1 if equal) < Lower than (0 is not lower, 1 if lower) > Greater than (0 is not greater, 1 if greater) s Change the sign Numbers are written in invariant culture float style. decimal will be used as number format. To create a custom parser function: StringExtensions[\"func_name\"] = (context) => { // Work with the StringParserContext and return the value to use or set context.Error for error handling return context.Value; }; Example: StringExtensions[\"upper\"] = (context) => context.Value.ToUpper(); Dictionary<string, string> data = new() { {\"name\", \"value\"} }; Assert.AreEqual(\"VALUE\", \"%{name:upper}\".Parse(data)); CAUTION: A placeholder must produce the same result, if it occurs repeated! A repeated placeholder won't be parsed more than once, but being replaced with the result of the first parsed placeholder. Example: Dictionary<string, string> data = new() { {\"name\", \"value\"} }; string tmpl = \"%{name}%{name:len:set(name):discard}%{name}\"; Assert.AreEqual(\"valuevalue\", tmpl.Parse(data)); From the logic value5 would be expected. To get value5, finally, you'll have to modify the template: %{name}%{name:len:set(name):discard}%{name:dummy} TIP: Almost all function parameters may be parser data variable names, too, if they have a $ prefix. To support that, use the TryGetData method of the StringParserContext, if a parameter value starts with $. TIP: To ensure having all required parameters, use the EnsureValidParameterCount of the StringParserContext. The method allows you to define a number of allowed parameter counts (including zero) and produces a common error message, if the function call syntax is wrong. TIP: A custom parser function may change the parser regular expression and content group by changing Rx and RxGroup. The string parser works recursive. To avoid an endless recursion, the default parsing round count limit is 3. The current parsing round is accessable trough the parser data _round. If a parser function parses a template, the called parser will work in the current parsing round context and respect the limit, too. Youmay set another default limit in StringExtensions.ParserMaxRounds. The default behavior for errors is to throw an exception. If error throwing was disabled, in case of an error a placeholder will stay in clear text, and a function will return the unaltered value. You may modify the placeholder declaration by setting another regular expression to StringExtensions.RxParser. Group $1 must contain the whole placeholder, while group $2 is required to contain the inner placeholder contents (like variable name, function calls, parameters, etc.). There's no way to customize the inner placeholder content syntax at present. You may also give a custom regular expression to the Parse extension method, if you want an isolated parsing. You can modify the inner content group index by setting StringExtensions.RxParserGroup or giving rxGroup to the Parse methods. CAUTION: Be careful with customized parser functions: A mistake could let a manipulated string harm your computer! Retry helper RetryInfo<object> result = await RetryHelper.TryActionAsync( async (currentTry, cancellation) => { // Perform any critical action which may throw or timeout and return a value (or not) }, maxNumberOfTries: 3, timeout: TimeSpan.FromSeconds(30), delay: TimeSpan.FromSeconds(3) ); // This will throw an exception, if failed, or return the action delegate return value, if succeed object returnValue = result.ThrowIfFailed(); TryAction* will try to execute an action for a maximum of N times, optional having a total timeout, and optional performing a delay after a failed try. The given action delegate may also return a value, which you can then find in the RetryInfo<T>.Result property, if Succeed is true. The RetryInfo<T> object contains some runtime informations: Start, done time and total runtime Number of tries processed (a timeout or cancellation may throw before the action is being called) Catched exceptions during tries If succeed, cancelled or timeout The action delegate return value (if any) NOTE: There's also a synchronous TryAction method, which supports timeout and cancellation also. Asynchronous events // Example type using an asynchronous event public class YourType { public readonly AsyncEvent<YourType, EventArgs> OnYourEvent; public YourType() => OnYourEvent = new(this); public async Task RaiseOnYourEventAsync() => await ((IAsyncEvent<YourType, EventArgs>)OnYourEvent).RaiseEventAsync(); } // An example asynchronous event listener async Task eventListener(YourType sender, EventArgs e, CancellationToken ct) { ... } // Attach to the event and raise it YourType obj = new(); Assert.IsFalse(obj.OnYourEvent); obj.OnYourEvent.Listen(eventListener); Assert.IsTrue(obj.OnYourEvent); await obj.RaiseOnYourEventAsync(); // Detach the event listener obj.OnYourEvent.Detach(eventListener); Assert.IsFalse(obj.OnYourEvent); An AsyncEvent<tSender, tArgs> instance will only export public event informations and functions like adding/removing event handlers, and if event handlers are present. For raising the event, you need to use the RaiseEventAsync methods which are available from the IAsyncEvent<tSender, tArgs> interface. Timeout, cancellation, synchronous and asynchronous event handlers are supported. The AsyncEvent<tSender, tArgs> is designed to be thread-safe, while multiple threads are allowed to raise the event in parallel. Checksum ChecksumExtensions and ChecksumTransform allow generating a checksum: byte[] data = ..., moreData = ..., checksum = data.CreateChecksum(); moreData.UpdateChecksum(checksum); The default checksum length is 8 bytes and needs to be a power of two, if being customized. If you need a numeric value from the checksum bytes: ulong numericChecksum = checksum.AsSpan().ToULong(); The algorithm uses XOR to modify the checksum bytes, which are zero by default. If the input data is only zero, the checksum will stay at zero. If you use the same input data for a 2nd time, the checksum will be equal to the one from the 1st time. The ChecksumTransform is a HashAlgorithm and can be used as every .NET implemented hash algorithm (even it's not a hash, but only a checksum!): byte[] checksum = ChecksumTransform.HashData(data); You may register the checksum algorithm as \"Checksum\" using the Register method: ChecksumTransform.Register(); IP sub-nets The IpSubNet structure helps working with IPv4/6 sub-nets. It stores the network address and the bit-mask, for being able to provide the broadcast address or any IP address within the sub-net IP range and the number of usable IP addresses in the sub-net and being able to determine if an IP address is within a sub-net determine if two sub-nets intersect a sub-net matches within another sub-net enumerate sub-net IP addresses compare sub-net lengths extend or shrink sub-nets combine two sub-nets serialize sub-net information platform independent determine if a sub-net is LAN (private), WAN (public) or loopback validate the correctness of a sub-net on the fly, and many things more. To construct the structure, you'll need one of these informations: Network CIDR notated (\"192.168.0.0/24\" for example) Network as IPAddress (all zero bytes will count the mask bits) Network as integer and the number of mask bits Network as IPAddress and the number of mask bits Network and mask as IPAddress Serialized sub-net data Some basic examples: // Create from CIDR notation IpSubNet net = new(\"192.168.0.0/24\"); // Validate CIDR notation if(IpSubNet.TryParse(\"::/128\", out IpSubNet subNet)) { // Valid CIDR notated sub-net } // Determine the network kind Assert.IsTrue(net.IsLan); Assert.IsFalse(net.IsWan); Assert.IsFalse(net.IsLoopback); // Get any IP address within a sub-net Assert.AreEqual(IPAddress.Parse(\"192.168.0.1\"), net[1]); // Get the broadcast IP address Assert.AreEqual(IPAddress.Parse(\"192.168.0.255\"), net.BroadcastIPAddress); // Determine if an IP address is within a sub-net Assert.IsTrue(IPAddress.Parse(\"192.168.0.1\") == net); Assert.IsTrue(IPAddress.Parse(\"192.168.1.1\") != net); // Extend/shrink a sub-net Assert.AreEqual(\"192.168.0.0/23\", (net << 1).ToString());// Expand by one bit Assert.AreEqual(\"192.168.0.0/25\", (net >> 1).ToString());// Shrink by one bit // Combine two sub-nets IpSubNet combined = net + new IpSubNet(\"192.168.254.0/24\"); Assert.AreEqual(\"192.168.0.0/16\", combined.ToString()); // Merge two compatible (!) sub-nets IpSubNet merged = net | new IpSubNet(\"192.168.0.0/8\"); Assert.AreEqual(\"192.168.0.0/8\", merged.ToString()); // Determine if two sub-nets intersect, or one fits into another IpSubNet largerNet = new(\"192.168.0.0/16\"), smallerNet = new(\"192.168.0.0/30\"), otherNet = new(\"10.0.0.0/8\"); Assert.AreEqual(net & largetNet, net);// net fits into largerNet Assert.AreEqual(net & smallerNet, smallerNet);// net intersects smallerNet Assert.AreEqual(net & otherNet, IpSubNet.ZeroV4);// no intersection between net and otherNet // Serialization byte[] serialized = net;// Serialize IpSubNet net2 = serialized;// Deserialize Assert.AreEqual(net, net2); Centralized error handling By setting ErrorHandling.ErrorHandler to your custom error handler, you can handle errors centralized. The error handling will write to the debug console will write to the logging invoke the ErrorHandling.ErrorHandler (if any) raise the ErrorHandling.OnError event You may set ErrorHandling.ErrorCollectingHandler as error handler, or call that method from your custom error handler to collect errors in ErrorHandling.Errors. Unhandled exceptions of the current app domain will be handled by this error handling. To handle a catched exception within your code, you can call the ErrorHandling.Handle method. By setting ErrorHandling.DebugOnError to true (which is the default), an attached debugger will break before ErrorHandling.Handle handles an exception, finally. Your custom error handler may store environment informations in a DBMS send an email do whatever is required to handle any error later The ErrorHandling uses an ErrorInfo object, which can be implicit casted from/to an Exception. For your custom error handling you may want to host additional error informations, which you may give as tag to the constructor, or you create a custom error information type, which extends ErrorInfo. You can define an additional error message, if you use the constructor which accepts a string as first argument. CAUTION: An unhandled exception during error handling could cause an endless loop. For this reason any uncatched error handling exception MUST be ignored - they'll be written to STDERR instead. NOTE: The default error handling won't act as fist chance error handler. You'll need to call ErrorHandling.Handle from your code in order to handle a catched exception manually. NOTE: You can specify an error source ID, which may be one of the pre- defined IDs from the ErrorHandling constants, or a custom value. If you use custom values, please only use bits 17..31, since the bits 1..16 are reserved for pre-defined error source IDs. Example for defining a custom error source ID: public const int CUSTOM_ERROR_SOURCE = 1 << 16; You can count from one as usual, but shift the ID 16 bits to the left, which enables you to define up to 32,768 different positive custom error sources. You may also use all the Int32 negative values for +2,147,483,648 custom error source IDs. Delayed tasks You'll need to add the DelayService.Instance to your apps hosted services, then you can use the delay like this: await new Delay(TimeSpan.FromSeconds(3)).Task; The line above will wait for 3 seconds and then continue in the current processing, while the delay could be used from other threads, too, if you did communicate the delays GUID (delays will organize themselfes in the DelayTable). WARNING: The delays are not exact! NOTE: Delay will be disposed automatted. To cancel a delay, call the Cancel(Async) method of the Delay instance. If the Delay was disposed or cancelled, awaiting the Task will throw an ObjectDisposedException or OperationCancelledException. A delay is similar to Timeout, but it doesn't use its own timer and is a bit more easy to use for some specialized tasks. Progress A ProcessingProgress can be a counting progress with a total and a current count a progress collection with counting sub-progresses A progress collection receives events of sub-progresses and forwards their events. The collection is self-managing - done sub-progresses will be removed and disposed automatically. To display a progress with automatic updates, you can attach to the events of the progress (collection): OnProgress: The progress changed (will be forwarded until the root) OnAllProgress: The overall progress changed (will be raised after OnProgress, but won't be forwarded) OnStatus: A progress status message was updated (won't be forwarded) OnDone: A progress was done (will be forwarded until the root) A progress can be canceled using the Cancel method. The OnDone event will be raised, IsDone will be false, but IsCanceled will be true. Canceling a collection means canceling all sub-progresses, too. You can use the AllProgress property to get the current progress in %. Example counting progress: using ProcessingProgress progress = new() { Total = 50 }; for(int i = 0; i < 50; i++) { // Do some work progress.Update();// Increase the current count by one } Example progress collection: using ProcessingProgress progressCollection = new(); ProcessingProgress progress = new() { Total = 50 }; progressCollection.AddSubProgress(progress); for(int i = 0; i < 50; i++) { // Do some work progress.Update();// Increase the current count by one } // Now progress was disposed and removed from progressCollection, because it was done NOTE: Total may be changed until a progress was completed or canceled. Sensitive data handling Using the SensitiveDataAttribute you can mark properties which host sensitive information. This could be used for the logging, for example: As you don't want sensitive data to appear in your logfiles, you may want to filter them out during logging. This could look like this: public class YourObject { public string LoggedData { get; set; } [SensitiveData] public string HiddenData { get; set; } } Logging.WriteDebug($\"Object: {yourObjectInstance.ToDictionary().ToJson()}\"); The ToDictionary object extension will filter the sensitive information from the given object, so that the ToJson extension will process on a sanitized data structure, which doesn't contain sensitive data. You may use the attribute in other places, too, and handle values from such marked properties accordingly. It's also possible to extend the attribute with a value sanization method: public class HidePasswordAttribute : SensitiveDataAttribute { public HidePasswordAttribute() : base() { } public override bool CanSanitizeValue => true; public override object? CreateSanitizedValue(object obj, string propertyName, object? value) { if(value is not string pwd) return \"(no password string value)\"; if(pwd.Length < 12) return \"(password value too short)\"; if(pwd.Length > byte.MaxValue) return \"(password value too long)\"; return \"(valid password value hidden)\"; } } As soon as CanSanitizeValue delivers true, supporting code should call the CreateSanitizedValue method to create a replacement for the the actual value in an output. Object storage An object storage stores objects in memory and in any backend. If a number of in-memory objects was reached, least accessed objects will be removed from memory. On request an object can be re-created from the backend, and will then be stored in-memory again. The object doesn't have to be stored in a backend. They may also be objects which require a lot of resources for their initialization, but will be accessed frequently and should be cached for that reason, for example. There's only one requirement for an object to be object-storable: It needs to export a non-nullable unique object key by implementing the interface IStoredObject<T>. All in all the object storage is a kind of memory cache for a single object type. The configured in-memory limit is only a soft-limit, 'cause the storage won't limit the number of used objects - but the number of unused, cached objects. The implementing storage can control synchronous/asynchronous object creation object disposing and override any other base object storage operation, if required. Implemented operations: GetObject(Async): Get an object by its key (the returned wrapper needs to be disposed!) Release: Release object usage (will be called from the returned wrapper of GetObject(Async), when it's being disposed) Remove: Remove the object from the storage (if it's being deleted permanently, for example) Localization A basic localization support without built-in plural handling is available: Translation.Locales[\"en-US\"] = new(new Dictionary<string, string>() { {\"Hello\", \"Hello\"}, ... }); Translation.Locales[\"de-DE\"] = new(new Dictionary<string, string>() { {\"Hello\", \"Hallo\"}, ... }); Translation.Current = Translation.Locales[\"de-DE\"]; This initializes English and German translations, where English is always the main locale. To translate a text: using static wan24.TranslationHelper.Ext; string translated = _(\"Hello\"); TIP: If you'd like to enable a keyword extractor to find texts, which will be stored as variable and translated from there later, when the locale is known, you can use the variable = __(\"Text\"); syntax (when using static wan24.TranslationHelper;). The double score method returns the given string value 1:1 and is only being used as parser hint. Or for a specific locale: using static wan24.Translation; string translated = Localize(\"de-DE\", \"Hello\"); To implement plural support, you can extend the TranslationTerms type: public sealed class YourTerms : TranslationTerms// Implements IReadOnlyDictionary<string, string> { public YourTerms(IReadOnlyDictionary<string, string> terms) : base(terms) { } public override bool PluralSupport => true; public override string GetTerm(in string key, in int count) { // Return the translated plural term } } NOTE: Translation supports string parser usage. To combine multiple translations for a single locale into one, you can use the CombinedTranslationTerms type. You may also use localized filenames. For this you'll need to store files as filename.ext (fallback, if a known locale or an existing file isn't required) filename.en-EN.ext (localized file) ... Then you can localize a filename: using static wan24.Translation; string fn = LocalizedFileName(\"de-DE\", \"/path/to/filename.ext\"); Assert.AreEqual(\"/path/to/filename.de-DE.ext\", fn); IStringLocalizer interface Using the .NET IStringLocalizer interface you can use the wan24-Core localization like this: // After setting a Translation.Current as described above builder.Services.AddSingleton<IStringLocalizerFactory, StringLocalizerFactory>(); builder.Services.AddTransient(typeof(IStringSerializer<>), typeof(GenericTranslation<>)); The StringLocalizerFactory and GenericTranslation<> will fall back to Translation.Current. Informations for translators A string to translate may contain placeholders like %{N}, where N is any number. These placeholders address variables and may occur in any order in the translation, as long as the original N value is being used (the placeholders must not be re-numbered in the translation). Also placeholders with a name instead of a numeric value are possible and should be used 1:1 within the translation (but may be reordered, if the grammatics require it). The escape sequence \\n or \\r\\n is a line break which must be used for a line break in the translation, too. The escape sequence \\t is a tabulator which must be used for a tabulator in the translation, too. The escape sequence \\\" is a double-quote. Double-quotes should be escaped that way. If a filename is localized using a locale code like en-US, the translation must use its new locale code instead - example: filename.en-US.ext becomes to filename.de-DE.ext in a German translation. Enumeration classes Using the EnumerationBase<T> base type you can implement enumeration classes like this: public sealed class YourEnum : EnumerationBase<YourEnum> { public static readonly YourEnum Value1 = new(1, nameof(Value1)); public static readonly YourEnum Value2 = new(2, nameof(Value2)); ... private YourEnum(int value, string name) : base(value, name) { } } Your implementation needs to fit some restrictions: Values and names are unique Names must match their readonly-field name Your type must be sealed and use private construction Your type must extend EnumerationBase<T> (not EnumerationBase directly) Transactions You can choose between sequential transactions (Transaction) and parallel action executing transactions (ParallelTransaction): Sequential using Transaction transaction = new(); object? returnValue = transaction.Execute( ()=> /* Perform the action here and return a value (optional) */, (transaction, returnValue) => /* Rollback for the action */ ); returnValue = await transaction.ExecuteAsync( async (cancelToken)=> /* Perform the action here and return a value (optional) */, async (transaction, returnValue. cancelToken) => /* Rollback for the action */ ); // Commit the actions (if disposing, uncommitted actions will be rolled back!) transaction.Commit(); Parallel ParallelTransaction transaction = new(); await using(transaction) { // The Execute methods will synchronize enqueueing the action asynchronous (int index, Task task) = await transaction.ExecuteAsync( async (cancelToken) => /* Perform the action here */, async (transaction, returnValue, cancelToken) => /* Rollback for the action */ ); // index has the action index which allows to retrieve the return value or the exception later (index, Task<object?> resultTask) = await transaction.ExecuteAsync( async (cancelToken) => /* Perform the action here and return a value */, async (transaction, returnValue, cancelToken) => /* Rollback for the action */ ); object? returnValue = await resultTask;// Get the return value from the action task await transaction.WaitDoneAsync();// Will throw if any action failed // Commit the actions (if disposing, uncommitted actions will be rolled back!) transaction.Commit(); } You can cancel pending actions using the CancelAsync method. A canceled transaction needs to be rolled back before reuse. If an action failed, the transaction can be canceled by setting CancelOnError to true (which is the default). Committing an undone or canceled transaction will throw. Using the OnError/Done events you may become informed on error, or if all pending actions are done (OnDone may be called multiple times). Nested transactions Using the Append(Async) methods of a transaction, you may nest in any other transaction (which won't be disposed, if the hosting transaction is disposing!). App JSON configuration Using the AppConfig you can easily implement a JSON configuration for your app: await AppConfig.LoadAsync(); This will load the config.json, apply configured settings (and also the configuration from CLI arguments) and bootstrap your app. For implementing a customized configuration, you can extend AppConfig and change the loading at your apps startup slightly: await AppConfig.LoadAsync<YourAppConfig>(); NOTE: Use validation attributes on configuration properties! They'll be used to validate the configured values during loading the JSON structure. AppConfigBase can be used as an app configuration object base class, which provides support for the AppConfigAttribute, but doesn't include the settings from AppConfig. You only need to implement the Apply(Async) methods. The AppConfigAttribute should be used for every property which can store an IAppConfig value and should be applied automatic. You can set a Priority and specify that the configuration should only be applied AfterBootstrap. To apply such sub-configurations, call the ApplyProperties(Async) methods from your Apply(Async) method implementations. When using the AppConfig, this is the app configuration process: configure Logging configure Settings and ENV apply DefaultCliArguments to ENV.CliArguments configure static [CliConfig] properties from Properties apply custom [AppConfig] properties before bootstrapping apply CLI configuration arguments using CliConfig.Apply bootstrap using Bootstrap.Async apply custom [AppConfig] properties after bootstrapping This means: you can define factory settings before applying a JSON configuration the JSON configuration defines the app setup defaults, which override the factory defaults app setup defaults can be overridden with CLI arguments, if required You may disable CLI argument configuration and bootstrapping using the ApplyCliArguments and Bootstrap properties (which can't be overridden by the JSON configuration, but by extending AppConfig!)."
  }
}